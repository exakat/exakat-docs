.. _Rules:

Rules
====================

Introduction
------------------------

Exakat provides unique 1371 rules to detect BUGS, CODE SMELLS, SECURITY OR QUALITY ISSUES in your PHP code.

Each rule is documented with code example to allow you to remediate your code. If you want to automate remediation, ours cobblers can are there to fix the issues in your code for your.  

List of Rules
-------------------------


.. _ambiguous-array-index:

Ambiguous Array Index
+++++++++++++++++++++

 Indexes should not be defined with different types than int or string. 

Array indices only accept integers and strings, so any other type of literal is reported. In fact, ``null`` is turned into an empty string, booleans are turned into an integer, and real numbers are truncated (not rounded).

.. code-block:: php

   <?php
   
   $x = [ 1  => 1,
         '1' => 2,
         1.0 => 3,
         true => 4];
   // $x only contains one element : 1 => 4
   
   // Still wrong, immediate typecast to 1
   $x[1.0]  = 5; 
   $x[true] = 6; 
   
   ?>


They are indeed distinct, but may lead to confusion. 

See also `array <https://www.php.net/manual/en/language.types.array.php>`_.


Suggestions
^^^^^^^^^^^

* Only use string or integer as key for an array. 
* Use transtyping operator (string) and (int) to make sure of the type

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------+
| Short name  | Arrays/AmbiguousKeys                                                                 |
+-------------+--------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                       |
+-------------+--------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                |
+-------------+--------------------------------------------------------------------------------------+
| Php Version | All                                                                                  |
+-------------+--------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                |
+-------------+--------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                      |
+-------------+--------------------------------------------------------------------------------------+
| Precision   | High                                                                                 |
+-------------+--------------------------------------------------------------------------------------+
| Examples    | :ref:`case-prestashop-arrays-ambiguouskeys`, :ref:`case-mautic-arrays-ambiguouskeys` |
+-------------+--------------------------------------------------------------------------------------+


.. _array()---[--]-consistence:

Array() / [  ] Consistence
++++++++++++++++++++++++++

 `array() <https://www.php.net/array>`_ or [ ] is the favorite.

`array() <https://www.php.net/array>`_ and [ ] have the same functional use. 

The analyzed code has less than 10% of one of them : for consistency reasons, it is recommended to make them all the same. 

It happens that `array() <https://www.php.net/array>`_ or [] are used depending on coding style and files. One file may be consistently using `array() <https://www.php.net/array>`_, while the others are all using []. 

.. code-block:: php

   <?php
   
   $a = array(1, 2);
   $b = array(array(3, 4), array(5, 6));
   $c = array(array(array(7, 8), array(9, 10)), array(11, 12), array(13, 14)));
   
   // be consistent
   $d = [1, 3];
   ?>


The only drawback to use [] over `array() <https://www.php.net/array>`_ is backward incompatibility.



Suggestions
^^^^^^^^^^^

* Use one syntax consistently.

+-------------+---------+---------+-------------------------------------------------------------------------------------------+
| Name        | Default | Type    | Description                                                                               |
+-------------+---------+---------+-------------------------------------------------------------------------------------------+
| array_ratio | 10      | integer | Percentage of arrays in one of the syntaxes, to trigger the other syntax as a violation.  |
+-------------+---------+---------+-------------------------------------------------------------------------------------------+



Specs
^^^^^
+-------------+--------------------------------+
| Short name  | Arrays/ArrayBracketConsistence |
+-------------+--------------------------------+
| Rulesets    | none                           |
+-------------+--------------------------------+
| Exakt since | 0.8.9                          |
+-------------+--------------------------------+
| Php Version | All                            |
+-------------+--------------------------------+
| Severity    | Minor                          |
+-------------+--------------------------------+
| Time To Fix | Slow (1 hour)                  |
+-------------+--------------------------------+
| Precision   | High                           |
+-------------+--------------------------------+


.. _array-index:

Array Index
+++++++++++

 List of all indexes used in arrays. 

.. code-block:: php

   <?php
   
   // Index
   $x['index'] = 1;
   
   // in array creation
   $a = array('index2' => 1);
   $a2 = ['index3' => 2];
   
   ?>

Specs
^^^^^
+-------------+-------------------+
| Short name  | Arrays/Arrayindex |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Instant (5 mins)  |
+-------------+-------------------+
| Precision   | Very high         |
+-------------+-------------------+


.. _short-syntax-for-arrays:

Short Syntax For Arrays
+++++++++++++++++++++++

 Arrays written with the new short syntax. 

PHP 5.4 introduced the new short syntax, with square brackets. The previous syntax, based on the `array() <https://www.php.net/array>`_ keyword is still available.

.. code-block:: php

   <?php
   
   // All PHP versions array
   $a = array(1, 2, 3);
   
   // PHP 5.4+ arrays
   $a = [1, 2, 3];
   
   ?>


See also `Array <https://www.php.net/manual/en/language.types.array.php>`_.

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Arrays/ArrayNSUsage                  |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP53` |
+-------------+--------------------------------------+
| Exakt since | 0.8.4                                |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Critical                             |
+-------------+--------------------------------------+
| Time To Fix | Quick (30 mins)                      |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _empty-final-element:

Empty Final Element
+++++++++++++++++++

 The `array() <https://www.php.net/array>`_ construct allows for the empty last element. 

By putting an element on each line, and adding the final comma, it is possible to reduce the size of the diff when comparing code with the previous version.

.. code-block:: php

   <?php
   
   // Array definition with final empty element
   $array = [1,
             2,
             3,
             ];
   
   // This array definition has only one line of diff with the previous array : the line with '4,'
   $array = [1,
             2,
             3,
             4,
             ];
   
   // This array definition is totally different from the first array : 
   $array = [1, 2, 3, 4];
   
   ?>


See also `Array <https://www.php.net/manual/en/language.types.array.php>`_, `Zend Framework Coding Standard <https://framework.zend.com/manual/2.4/en/ref/coding.standard.html#arrays>`_ and `How clean is your code? How clean are your diffs? <https://blog.madewithlove.be/post/code-style-options-for-cleaner-diffs/>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Arrays/EmptyFinal |
+-------------+-------------------+
| Rulesets    | none              |
+-------------+-------------------+
| Exakt since | 0.11.0            |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _empty-slots-in-arrays:

Empty Slots In Arrays
+++++++++++++++++++++

 PHP tolerates the last element of an array to be empty.

.. code-block:: php

   <?php
       $a = array( 1, 2, 3, );
       $b =      [ 4, 5, ];
   ?>

Specs
^^^^^
+-------------+-------------------+
| Short name  | Arrays/EmptySlots |
+-------------+-------------------+
| Rulesets    | none              |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Instant (5 mins)  |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _getting-last-element:

Getting Last Element
++++++++++++++++++++

 Getting the last element of an array relies on array_key_last().

array_key_last() was added in PHP 7.3. Before that, 

.. code-block:: php

   <?php
   
   $array = ['a' => 1, 'b' => 2, 'c' => 3];
   
   // Best solutions, by far
   $last = $array[array_key_last($array)];
   
   // Best solutions, just as fast as each other
   $last = $array[count($array) - 1];
   $last = end($array);
   
   // Bad solutions
   
   // popping, but restoring the value. 
   $last = array_pop($array);
   $array[] = $last; 
   
   // array_unshift would be even worse
   
   // reversing array
   $last = array_reverse($array)[0];
   
   // slicing the array
   $last = array_slice($array, -1)[0]',
   $last = current(array_slice($array, -1));
   );
   
   ?>




Suggestions
^^^^^^^^^^^

* Use PHP native function : array_key_last(), when using PHP 7.4 and later
* Use PHP native function : array_pop()
* Organise the code to put the last element in the first position (array_unshift() instead of append operator [])

Specs
^^^^^
+-------------+----------------------------------------------+
| Short name  | Arrays/GettingLastElement                    |
+-------------+----------------------------------------------+
| Rulesets    | :ref:`Performances`                          |
+-------------+----------------------------------------------+
| Exakt since | 0.9.0                                        |
+-------------+----------------------------------------------+
| Php Version | All                                          |
+-------------+----------------------------------------------+
| Severity    | Minor                                        |
+-------------+----------------------------------------------+
| Time To Fix | Instant (5 mins)                             |
+-------------+----------------------------------------------+
| Precision   | High                                         |
+-------------+----------------------------------------------+
| Examples    | :ref:`case-thelia-arrays-gettinglastelement` |
+-------------+----------------------------------------------+


.. _mass-creation-of-arrays:

Mass Creation Of Arrays
+++++++++++++++++++++++

 Literal creation of an array, by assigning a lot of index. 

.. code-block:: php

   <?php
       
   $row['name'] = $name;
   $row['last'] = $last;
   $row['address'] = $address;
   
   ?>

Specs
^^^^^
+-------------+---------------------+
| Short name  | Arrays/MassCreation |
+-------------+---------------------+
| Rulesets    | none                |
+-------------+---------------------+
| Exakt since | 1.1.8               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _mistaken-concatenation:

Mistaken Concatenation
++++++++++++++++++++++

 A unexpected structure is built for initialization. It may be a typo that creates an unwanted expression.

.. code-block:: php

   <?php
   
   // This 'cd' is unexpected. Isn't it 'c', 'd' ? 
   $array = array('a', 'b', 'c'. 'd');
   $array = array('a', 'b', 'c', 'd');
   
   // This 4.5 is unexpected. Isn't it 4, 5 ? 
   $array = array(1, 2, 3, 4.5);
   $array = array(1, 2, 3, 4, 5);
   
   ?>

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Arrays/MistakenConcatenation |
+-------------+------------------------------+
| Rulesets    | none                         |
+-------------+------------------------------+
| Exakt since | 1.0.8                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Major                        |
+-------------+------------------------------+
| Time To Fix | Instant (5 mins)             |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _mixed-keys-arrays:

Mixed Keys Arrays
+++++++++++++++++

 Avoid mixing constants and literals in array keys.

When defining default values in arrays, it is recommended to avoid mixing constants and literals, as PHP may mistake them and overwrite the previous with the latter.

Either switch to a newer version of PHP (5.5 or newer), or make sure the resulting array hold the expected data. If not, reorder the definitions.

.. code-block:: php

   <?php
   
   const ONE = 1;
   
   $a = [ 1   => 2,
          ONE => 3];
   
   ?>



Suggestions
^^^^^^^^^^^

* Use only literals or constants when building the array

Specs
^^^^^
+-------------+------------------------------------------------------+
| Short name  | Arrays/MixedKeys                                     |
+-------------+------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54` |
+-------------+------------------------------------------------------+
| Exakt since | 0.8.4                                                |
+-------------+------------------------------------------------------+
| Php Version | 5.6+                                                 |
+-------------+------------------------------------------------------+
| Severity    | Minor                                                |
+-------------+------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                        |
+-------------+------------------------------------------------------+
| Precision   | High                                                 |
+-------------+------------------------------------------------------+


.. _multidimensional-arrays:

Multidimensional Arrays
+++++++++++++++++++++++

 Simply, arrays of arrays. 

.. code-block:: php

   <?php
       $x[1][2] = $x[2][3][4];
       
   ?>


See also `Type array <https://www.php.net/manual/en/language.types.array.php>`_ and `Using Multidimensional Arrays in PHP <https://www.elated.com/articles/php-multidimensional-arrays/>`_.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Arrays/Multidimensional |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _multiple-index-definition:

Multiple Index Definition
+++++++++++++++++++++++++

 Indexes that are defined multiple times in the same array. 

.. code-block:: php

   <?php
       // Multiple identical keys
       $x = array(1 => 2, 
                  2 => 3,  
                  1 => 3);
   
       // Multiple identical keys (sneaky version)
       $x = array(1 => 2, 
                  1.1 => 3,  
                  true => 4);
   
       // Multiple identical keys (automated version)
       $x = array(1 => 2, 
                  3,        // This will be index 2
                  2 => 4);  // this index is overwritten
   ?>


They are indeed overwriting each other. This is most probably a typo.


Suggestions
^^^^^^^^^^^

* Review your code and check that arrays only have keys defined once.
* Review carefully your code and check indirect values, like constants, static constants.

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------+
| Short name  | Arrays/MultipleIdenticalKeys                                                                         |
+-------------+------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                          |
+-------------+------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                |
+-------------+------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                  |
+-------------+------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                |
+-------------+------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                     |
+-------------+------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                 |
+-------------+------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-magento-arrays-multipleidenticalkeys`, :ref:`case-mediawiki-arrays-multipleidenticalkeys` |
+-------------+------------------------------------------------------------------------------------------------------+


.. _negative-start-index-in-array:

Negative Start Index In Array
+++++++++++++++++++++++++++++

 Negative starting index in arrays changed in PHP 8.0. Until then, they were ignored, and automatic index started always at 0. Since PHP 8.0, the next index is calculated.

The behavior will `break <https://www.php.net/manual/en/control-structures.break.php>`_ code that relies on automatic index in arrays, when a negative index is used for a starter.

.. code-block:: php

   <?php
   
   $x = [-5 => 2];
   $x[] = 3;
   
   print_r($x);
   
   /*
   PHP 7.4 and older 
   Array
   (
       [-5] => 2
       [0] => 3
   )
   */
   
   /*
   PHP 8.0 and more recent
   Array
   (
       [-5] => 2
       [-4] => 3
   )
   */
   
   ?>


See also `PHP RFC: Arrays starting with a negative index <https://wiki.php.net/rfc/negative_array_index>`_.


Suggestions
^^^^^^^^^^^

* Explicitely create the index, instead of using the automatic indexing
* Add an explicit index of 0 in the initial array, to set the automatic process in the right track
* Avoid using specified index in array, conjointly with automatic indexing.

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Arrays/NegativeStart                 |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP80` |
+-------------+--------------------------------------+
| Exakt since | 2.1.9                                |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Minor                                |
+-------------+--------------------------------------+
| Time To Fix | Quick (30 mins)                      |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _non-constant-index-in-array:

Non-constant Index In Array
+++++++++++++++++++++++++++

 Undefined constants revert as strings in Arrays. They are also called ``barewords``.

In ``$array[index]``, PHP cannot find index as a constant, but, as a default behavior, turns it into the string ``index``. 

This default behavior raise concerns when a corresponding constant is defined, either using `define() <https://www.php.net/define>`_ or the const keyword (outside a class). The definition of the index constant will modify the behavior of the index, as it will now use the constant definition, and not the 'index' string. 

.. code-block:: php

   <?php
   
   // assign 1 to the element index in $array
   // index will fallback to string
   $array[index] = 1; 
   //PHP Notice:  Use of undefined constant index - assumed 'index'
   
   echo $array[index];      // display 1 and the above error
   echo "$array[index]";    // display 1
   echo "$array['index']";  // Syntax error
   
   
   define('index', 2);
    
    // now 1 to the element 2 in $array
    $array[index] = 1;
   
   ?>


It is recommended to make index a real string (with ' or "), or to define the corresponding constant to avoid any future surprise.

Note that PHP 7.2 removes the support for this feature.

See also `PHP RFC: Deprecate and Remove Bareword (Unquoted) Strings <https://wiki.php.net/rfc/deprecate-bareword-strings>`_ and `Syntax <https://www.php.net/manual/en/language.constants.syntax.php>`_.



Suggestions
^^^^^^^^^^^

* Declare the constant to give it an actual value
* Turn the constant name into a string

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------+
| Short name  | Arrays/NonConstantArray                                                                   |
+-------------+-------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                            |
+-------------+-------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                     |
+-------------+-------------------------------------------------------------------------------------------+
| Php Version | All                                                                                       |
+-------------+-------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                     |
+-------------+-------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                          |
+-------------+-------------------------------------------------------------------------------------------+
| Precision   | High                                                                                      |
+-------------+-------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-dolibarr-arrays-nonconstantarray`, :ref:`case-zencart-arrays-nonconstantarray` |
+-------------+-------------------------------------------------------------------------------------------+


.. _no-spread-for-hash:

No Spread For Hash
++++++++++++++++++

 The spread operator ``...`` only works on integer-indexed arrays. 

.. code-block:: php

   <?php
   
   // This is valid, as ``-33`` is cast to integer by PHP automagically
   var_dump(...[1,-33 => 2, 3]);
   
   // This is not valid
   var_dump(...[1,C => 2, 3]);
   
   ?>


See also `Variable-length argument lists <https://www.php.net/manual/en/functions.arguments.php#functions.variable-arg-list>`_.



Suggestions
^^^^^^^^^^^

* Add a call to array_values() instead of the hash

Specs
^^^^^
+-------------+------------------------+
| Short name  | Arrays/NoSpreadForHash |
+-------------+------------------------+
| Rulesets    | :ref:`Analyze`         |
+-------------+------------------------+
| Exakt since | 1.9.3                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Quick (30 mins)        |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _null-or-boolean-arrays:

Null Or Boolean Arrays
++++++++++++++++++++++

 Null and booleans are valid PHP array base. Yet, they only produces ``null`` values. They also did not emits any warning until PHP 7.4.

This analysis has been upgraded to cover int and float types too.

.. code-block:: php

   <?php
   
   // outputs NULL
   var_dump(null[0]);
   
   const MY_CONSTANT = true;
   // outputs NULL
   var_dump(MY_CONSTANT[10]);
   
   ?>


See also `Null and True <https://twitter.com/Chemaclass/status/1144588647464951808>`_.


Suggestions
^^^^^^^^^^^

* Avoid using the array syntax on null and boolean
* Avoid using null and boolean on constant that are expecting arrays

Specs
^^^^^
+-------------+--------------------+
| Short name  | Arrays/NullBoolean |
+-------------+--------------------+
| Rulesets    | :ref:`Analyze`     |
+-------------+--------------------+
| Exakt since | 1.8.6              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Quick (30 mins)    |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _php-arrays-index:

PHP Arrays Index
++++++++++++++++

 List of indexes used when manipulating PHP arrays in the code.

.. code-block:: php

   <?php
   
   // HTTP_HOST is a PHP array index. 
   $ip = 'http'.$_SERVER['HTTP_HOST'].'/'.$row['path'];
   
   //'path' is not a PHP index
   
   ?>

Specs
^^^^^
+-------------+----------------------+
| Short name  | Arrays/Phparrayindex |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _randomly-sorted-arrays:

Randomly Sorted Arrays
++++++++++++++++++++++

 Those literal arrays are written in several places, but their items are in various orders. 

This may reduce the reading and proofing of the arrays, and induce confusion. The random order may also be a residue of development : both arrays started with different values, but they grew overtime to handle the same items. The way they were written lead to the current order.

Unless order is important, it is recommended to always use the same order when defining literal arrays. This makes it easier to match different part of the code by recognizing one of its literal.

.. code-block:: php

   <?php
   
   // an array
   $set = [1,3,5,9,10];
   
   function foo() {
       // an array, with the same values but different order, in a different context
       $list = [1,3,5,10,9,];
   }
   
   // an array, with the same order than the initial one
   $inits = [1,3,5,9,10];
   
   ?>




Suggestions
^^^^^^^^^^^

* Match the sorting order of the arrays. Choose any of them.
* Configure a constant and use it as a replacement for those arrays.
* Leave the arrays intact : the order may be important.
* For hash arrays, consider turning the array in a class.

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------+
| Short name  | Arrays/RandomlySortedLiterals                                                                       |
+-------------+-----------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Suggestions`                                                                  |
+-------------+-----------------------------------------------------------------------------------------------------+
| Exakt since | 0.11.2                                                                                              |
+-------------+-----------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                 |
+-------------+-----------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                               |
+-------------+-----------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                       |
+-------------+-----------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                |
+-------------+-----------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-contao-arrays-randomlysortedliterals`, :ref:`case-vanilla-arrays-randomlysortedliterals` |
+-------------+-----------------------------------------------------------------------------------------------------+


.. _preprocess-arrays:

Preprocess Arrays
+++++++++++++++++

 Using long list of assignations for initializing arrays is significantly slower than the declaring them as an array. 

.. code-block:: php

   <?php
   
   // Slow way
   $a = []; // also with $a = array();
   $a[1] = 2;
   $a[2] = 3;
   $a[3] = 5;
   $a[4] = 7;
   $a[5] = 11;
   
   // Faster way
   $a = [1 => 2, 
         2 => 3,
         3 => 5,
         4 => 7,
         5 => 11];
   
   // Even faster way if indexing is implicit
   $a = [2, 3, 5, 7, 11];
   
   ?>


If the array has to be completed rather than created, it is also faster to use += when there are more than ten elements to add.

.. code-block:: php

   <?php
   
   // Slow way
   $a = []; // also with $a = array();
   $a[1] = 2;
   $a[2] = 3;
   $a[3] = 5;
   // some expressions to get $seven and $eleven
   $a[4] = $seven;
   $a[5] = $eleven;
   
   // Faster way
   $a = [1 => 2, 
         2 => 3,
         3 => 5];
   // some expressions to get $seven and $eleven
   $a += [4 => $seven, 
          5 => $eleven];
   
   // Even faster way if indexing is implicit
   $a = [2, 3, 5];
   // some expressions to get $seven and $eleven
   $a += [$seven, $eleven];
   
   ?>



Suggestions
^^^^^^^^^^^

* Preprocess the code so PHP doesn't do it. Keep the detailed version into comments.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Arrays/ShouldPreprocess |
+-------------+-------------------------+
| Rulesets    | :ref:`Suggestions`      |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Quick (30 mins)         |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _slice-arrays-first:

Slice Arrays First
++++++++++++++++++

 Always start by reducing an array before applying some transformation on it. The shorter array will be processed faster. 

.. code-block:: php

   <?php
   
   // fast version
   $a = array_map('foo', array_slice($array, 2, 5));
   
   // slower version
   $a = array_slice(array_map('foo', $array), 2, 5);
   ?>


The gain produced here is greater with longer arrays, or greater reductions. They may also be used in loops. This is a micro-optimisation when used on short arrays.



Suggestions
^^^^^^^^^^^

* Use the array transforming function on the result of the array shortening function.

Specs
^^^^^
+-------------+-----------------------------------------+
| Short name  | Arrays/SliceFirst                       |
+-------------+-----------------------------------------+
| Rulesets    | :ref:`Performances`, :ref:`Suggestions` |
+-------------+-----------------------------------------+
| Exakt since | 1.0.4                                   |
+-------------+-----------------------------------------+
| Php Version | All                                     |
+-------------+-----------------------------------------+
| Severity    | Minor                                   |
+-------------+-----------------------------------------+
| Time To Fix | Quick (30 mins)                         |
+-------------+-----------------------------------------+
| Precision   | High                                    |
+-------------+-----------------------------------------+
| Examples    | :ref:`case-wordpress-arrays-slicefirst` |
+-------------+-----------------------------------------+


.. _string-initialization:

String Initialization
+++++++++++++++++++++

 It used to be possible to initialize a variable with an string, and use it as an array. It is not the case anymore in PHP 7.1.

.. code-block:: php

   <?php
   
   // Initialize arrays with array()
   $a = array();
   $a[3] = 4;
   
   // Don't start with a string
   $a = '';
   $a[3] = 4;
   print $a;
   
   // Don't start with a string
   if (is_numeric($a)) {
       $a[] = $a;
   }
   
   ?>


See also `PHP 7.1 no longer converts string to arrays the first time a value is assigned with square bracket notation <https://www.drupal.org/project/adaptivetheme/issues/2832900>`_.


Suggestions
^^^^^^^^^^^

* Always initialize arrays with an empty array(), not a string.

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Arrays/StringInitialization |
+-------------+-----------------------------+
| Rulesets    | :ref:`CompatibilityPHP71`   |
+-------------+-----------------------------+
| Exakt since | 1.6.5                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Quick (30 mins)             |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _too-many-array-dimensions:

Too Many Array Dimensions
+++++++++++++++++++++++++

 When arrays a getting to many nesting. 

.. code-block:: php

   <?php
   
   $a          = array();   // level 1;
   $a[1]       = array();   // level 2
   $a[1][2]    = array();   // level 3 : still valid by default
   $a[1][2][3] = array();   // level 4 
   
   ?>


PHP has no limit, and accepts any number of nesting levels. Yet, this is usually very memory hungry.



Suggestions
^^^^^^^^^^^

*

+---------------+---------+---------+-----------------------------------------+
| Name          | Default | Type    | Description                             |
+---------------+---------+---------+-----------------------------------------+
| maxDimensions | 3       | integer | Number of valid dimensions in an array. |
+---------------+---------+---------+-----------------------------------------+



Specs
^^^^^
+-------------+--------------------------+
| Short name  | Arrays/TooManyDimensions |
+-------------+--------------------------+
| Rulesets    | :ref:`Analyze`           |
+-------------+--------------------------+
| Exakt since | 1.9.4                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Quick (30 mins)          |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _weird-array-index:

Weird Array Index
+++++++++++++++++

 Array index that looks weird. Arrays index may be string or integer, but some strings looks weird.

In particular, strings that include terminal white spaces, often leads to missed values.

.. code-block:: php

   <?php
   
   $array = ['a ' => 1, 'b' => 2, 'c' => 3];
   
   // Later in the code
   
   //Notice: Undefined index: a in /Users/famille/Desktop/analyzeG3/test.php on line 8
   echo $array['a'];
   
   //Notice: Undefined index: b  in /Users/famille/Desktop/analyzeG3/test.php on line 10
   // Note that the space is visible, but easy to miss
   echo $array['b '];
   
   // all fine here
   echo $array['c'];
   
   ?>


Although this is rare error, and often easy to spot, it is also very hard to find when it strikes.



Suggestions
^^^^^^^^^^^

* Remove white spaces when using strings as array index.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Arrays/WeirdIndex |
+-------------+-------------------+
| Rulesets    | :ref:`Semantics`  |
+-------------+-------------------+
| Exakt since | 1.9.9             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Quick (30 mins)   |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _handle-arrays-with-callback:

Handle Arrays With Callback
+++++++++++++++++++++++++++

 Use functions like `array_map() <https://www.php.net/array_map>`_.

.. code-block:: php

   <?php
   
   // Handles arrays with callback
   $uppercase = array_map('strtoupper', $source);
   
   // Handles arrays with foreach
   foreach($source as &$s) {
       $s = uppercase($s);
   }
   
   ?>


See also `array_map <https://www.php.net/array_map>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Arrays/WithCallback |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 1.3.7               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _modify-immutable:

Modify Immutable
++++++++++++++++

 A class, marked as immutable, is being modified. 

This attribute is supported as a PHPdoc comment, `@immutable, and as a PHP 8.0 attribute. 

.. code-block:: php

   <?php
   
   /** @Immutable */
   #[Immutable]
   class x {
       public $x = 1, $y, $z;
   }
   
   $x = new X;
   // $x->x is modified, while it should not
   $x->x = 2 + $x->z;
   
   // $x->z is read only, as expected
   
   ?>


See also `phpstorm-stubs/meta/attributes/Immutable.php <https://github.com/JetBrains/phpstorm-stubs/blob/master/meta/attributes/Immutable.php>`_ and `PhpStorm 2020.3 EAP \#4: Custom PHP 8 Attributes <https://blog.jetbrains.com/phpstorm/2020/10/phpstorm-2020-3-eap-4/>`_.


Suggestions
^^^^^^^^^^^

* Removed the modification
* Clone the immutable object

Specs
^^^^^
+-------------+-----------------------------------+
| Short name  | Attributes/ModifyImmutable        |
+-------------+-----------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Attributes` |
+-------------+-----------------------------------+
| Exakt since | 2.2.0                             |
+-------------+-----------------------------------+
| Php Version | All                               |
+-------------+-----------------------------------+
| Severity    | Minor                             |
+-------------+-----------------------------------+
| Time To Fix | Quick (30 mins)                   |
+-------------+-----------------------------------+
| Precision   | Medium                            |
+-------------+-----------------------------------+


.. _abstract-class-usage:

Abstract Class Usage
++++++++++++++++++++

 List of all abstract classes being used.

.. code-block:: php

   <?php
   
   abstract class foo {
       function foobar(); 
   }
   
   class bar extends foo {
       // extended method
       function foobar() {
           // doSomething()
       }
   
       // extra method
       function barbar() {
           // doSomething()
       }
   }
   ?>


See also `Classes abstraction <https://www.php.net/abstract>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Classes/Abstractclass |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _abstract-methods-usage:

Abstract Methods Usage
++++++++++++++++++++++

 List of all abstract methods being used.

.. code-block:: php

   <?php
   
   // abstract class
   abstract class foo {
       // abstract method
       function foobar(); 
   }
   
   class bar extends foo {
       // extended abstract method
       function foobar() {
           // doSomething()
       }
   
       // extra method
       function barbar() {
           // doSomething()
       }
   }
   ?>


See also `Classes abstraction <https://www.php.net/abstract>`_.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Classes/Abstractmethods |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _abstract-or-implements:

Abstract Or Implements
++++++++++++++++++++++

 A class must implements all abstract methods of it `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_, or be abstract too. 

While PHP lints this code, it won't execute it and stop with a Fatal Error : ``Class BA contains 1 abstract method and must therefore be declared abstract or implement the remaining methods (A\:\:aFoo)``.

.. code-block:: php

   <?php
   
   abstract class Foo { 
       abstract function FooBar();
   }
   
   // This is in another file : php -l would detect it right away
   
   class FooFoo extends Foo { 
       // The method is not defined. 
       // The class must be abstract, just like Foo
   }
   
   ?>


See also `Class Abstraction <https://www.php.net/abstract>`_.


Suggestions
^^^^^^^^^^^

* Implements all the abstract methods of the class
* Make the class abstract

Specs
^^^^^
+-------------+------------------------------------------------+
| Short name  | Classes/AbstractOrImplements                   |
+-------------+------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`LintButWontExec`         |
+-------------+------------------------------------------------+
| Exakt since | 1.3.3                                          |
+-------------+------------------------------------------------+
| Php Version | All                                            |
+-------------+------------------------------------------------+
| Severity    | Major                                          |
+-------------+------------------------------------------------+
| Time To Fix | Quick (30 mins)                                |
+-------------+------------------------------------------------+
| Precision   | High                                           |
+-------------+------------------------------------------------+
| Examples    | :ref:`case-zurmo-classes-abstractorimplements` |
+-------------+------------------------------------------------+


.. _abstract-static-methods:

Abstract Static Methods
+++++++++++++++++++++++

 Methods cannot be both abstract and `static <https://www.php.net/manual/en/language.oop5.static.php>`_. `Static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods belong to a class, and will not be overridden by the child class. For normal methods, PHP will start at the object level, then go up the hierarchy to find the method. With `static <https://www.php.net/manual/en/language.oop5.static.php>`_, it is necessary to mention the name, or use Late `Static <https://www.php.net/manual/en/language.oop5.static.php>`_ Binding, with `self <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ or `static <https://www.php.net/manual/en/language.oop5.static.php>`_. Hence, it is useless to have an abstract `static <https://www.php.net/manual/en/language.oop5.static.php>`_ method : it should be a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ method.

A child class is able to declare a method with the same name than a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ method in the `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_, but those two methods will stay independent. 

This is not the case anymore in PHP 7.0+.

.. code-block:: php

   <?php
   
   abstract class foo {
       // This is not possible
       static abstract function bar() ;
   }
   
   ?>


See also `Why does PHP 5.2+ disallow abstract `static <https://www.php.net/manual/en/language.oop5.static.php>`_ class methods? <https://stackoverflow.com/questions/999066/why-does-php-5-2-disallow-abstract-`static <https://www.php.net/manual/en/language.oop5.static.php>`_-class-methods>`_.


Suggestions
^^^^^^^^^^^

* Remove abstract keyword from the method
* Remove static keyword from the method
* Remove the method

Specs
^^^^^
+-------------+------------------------+
| Short name  | Classes/AbstractStatic |
+-------------+------------------------+
| Rulesets    | :ref:`Analyze`         |
+-------------+------------------------+
| Exakt since | 0.8.4                  |
+-------------+------------------------+
| Php Version | 7.0-                   |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Quick (30 mins)        |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _accessing-private:

Accessing Private
+++++++++++++++++

 List of calls to private properties/methods that will compile but yield some fatal error upon execution.

.. code-block:: php

   <?php
   
   class a {
       private $a;
   }
   
   class b extends a {
       function c() {
           $this->a;
       }
   }
   
   ?>

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Classes/AccessPrivate |
+-------------+-----------------------+
| Rulesets    | :ref:`Analyze`        |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Major                 |
+-------------+-----------------------+
| Time To Fix | Quick (30 mins)       |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _access-protected-structures:

Access Protected Structures
+++++++++++++++++++++++++++

 It is not allowed to access protected properties or methods from outside the class or its relatives.

.. code-block:: php

   <?php
   
   class foo {
       protected $bar = 1;
   }
   
   $foo = new Foo();
   $foo->bar = 2;
   
   ?>


See also `Visibility <https://www.php.net/manual/en/language.oop5.visibility.php>`_ and `Understanding The Concept Of Visibility In Object Oriented PHP <https://torquemag.io/2016/05/understanding-concept-visibility-object-oriented-php/>`_.



Suggestions
^^^^^^^^^^^

* Change 'protected' to 'public' to relax the constraint
* Add a getter method to reach the target value
* Remove the access to the protected value and find it another way

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Classes/AccessProtected |
+-------------+-------------------------+
| Rulesets    | :ref:`Analyze`          |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Major                   |
+-------------+-------------------------+
| Time To Fix | Quick (30 mins)         |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _ambiguous-static:

Ambiguous Static
++++++++++++++++

 Methods or properties with the same name, are defined `static <https://www.php.net/manual/en/language.oop5.static.php>`_ in one class, and not `static <https://www.php.net/manual/en/language.oop5.static.php>`_ in another. This is error prone, as it requires a good knowledge of the code to make it `static <https://www.php.net/manual/en/language.oop5.static.php>`_ or not. 

Try to keep the methods simple and unique. Consider renaming the methods and properties to distinguish them easily. A method and a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ method have probably different responsibilities.

.. code-block:: php

   <?php
   
   class a {
       function mixedStaticMethod() {}
   }
   
   class b {
       static function mixedStaticMethod() {}
   }
   
   /... a lot more code later .../
   
   $c->mixedStaticMethod();
   // or 
   $c::mixedStaticMethod();
   
   ?>

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Classes/AmbiguousStatic |
+-------------+-------------------------+
| Rulesets    | :ref:`Analyze`          |
+-------------+-------------------------+
| Exakt since | 1.0.3                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _ambiguous-visibilities:

Ambiguous Visibilities
++++++++++++++++++++++

 The properties have the same name, but have different visibilities, across different classes. 

While it is legit to have a property with the same name in different classes, it may easily lead to confusion. As soon as the context is need to understand if the property is accessible or not, the readability suffers.

It is recommended to handle the same properties in the same way across classes, even when the classes are not related. 

.. code-block:: php

   <?php
   
   class person {
       public $name;
       private $address;
   }
   
   class gangster {
       private $name;
       public $nickname;
       private $address;
   }
   
   $someone = Human::load(123);
   echo 'Hello, '.$someone->name;
   
   ?>





Suggestions
^^^^^^^^^^^

* Sync visibilities for both properties, in the different classes
* Use different names for properties with different usages

Specs
^^^^^
+-------------+-------------------------------------------------+
| Short name  | Classes/AmbiguousVisibilities                   |
+-------------+-------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                  |
+-------------+-------------------------------------------------+
| Exakt since | 1.3.4                                           |
+-------------+-------------------------------------------------+
| Php Version | All                                             |
+-------------+-------------------------------------------------+
| Severity    | Minor                                           |
+-------------+-------------------------------------------------+
| Time To Fix | Slow (1 hour)                                   |
+-------------+-------------------------------------------------+
| Precision   | High                                            |
+-------------+-------------------------------------------------+
| Examples    | :ref:`case-typo3-classes-ambiguousvisibilities` |
+-------------+-------------------------------------------------+


.. _anonymous-classes:

Anonymous Classes
+++++++++++++++++

 Anonymous classes.

.. code-block:: php

   <?php
   
   // Anonymous class, available since PHP 7.0
   $object = new class { function __construct() { echo __METHOD__; } };
   
   ?>

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Short name  | Classes/Anonymous                                                                                                     |
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56` |
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                                 |
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Php Version | 7.0+                                                                                                                  |
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                                 |
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                  |
+-------------+-----------------------------------------------------------------------------------------------------------------------+


.. _avoid-optional-properties:

Avoid Optional Properties
+++++++++++++++++++++++++

 Avoid optional properties, to prevent littering the code with existence checks. 

When a property has to be checked once for existence, it is safer to check it each time. This leads to a decrease in readability and a lot of checks added to the code.

Either make sure the property is set with an actual object rather than with null, or use a null object. A null object offers the same interface than the expected object, but does nothing. It allows calling its methods, without running into a Fatal error, nor testing it. 

.. code-block:: php

   <?php
   
   // Example is courtesy 'The Coding Machine' : it has been adapted from its original form. See link below.
   
   class MyMailer {
       private $logger;
   
       public function __construct(LoggerInterface $logger = null) {
           $this->logger = $logger;
       }
   
       private function sendMail(Mail $mail) {
           // Since $this->logger may be null, it must be tested anytime it is used.
           if ($this->logger) {
               $this->logger->info('Mail successfully sent.');
           }
       }
   }
   
   ?>


See also `Avoid optional services as much as possible <http://bestpractices.thecodingmachine.com/php/design_beautiful_classes_and_methods.html#avoid-optional-services-as-much-as-possible>`_, `The Null Object Pattern – Polymorphism in Domain Models <https://www.sitepoint.com/the-null-object-pattern-polymorphism-in-domain-models/>`_, and `Practical PHP Refactoring: Introduce Null Object <https://dzone.com/articles/practical-php-refactoring-26>`_.

Suggestions
^^^^^^^^^^^

* Use a null object to fill any missing value
* Make sure the property is set at constructor time

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------------------+
| Short name  | Classes/AvoidOptionalProperties                                                                             |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                              |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.12.0                                                                                                      |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                         |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                       |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                               |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                        |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-churchcrm-classes-avoidoptionalproperties`, :ref:`case-dolibarr-classes-avoidoptionalproperties` |
+-------------+-------------------------------------------------------------------------------------------------------------+


.. _avoid-option-arrays-in-constructors:

Avoid option arrays in constructors
+++++++++++++++++++++++++++++++++++

 Avoid option arrays in constructors. Use one parameter per injected element.

.. code-block:: php

   <?php
   
   class Foo {
       // Distinct arguments, all typehinted if possible
       function __constructor(A $a, B $b, C $c, D $d) {
           $this->a = $a;
           $this->b = $b;
           $this->c = $c;
           $this->d = $d;
       }
   }
   
   class Bar {
       // One argument, spread over several properties
       function __constructor(array $options) {
           $this->a = $options['a'];
           $this->b = $options['b'];
           $this->c = $options['c'];
           $this->d = $options['d'];
       }
   }
   
   ?>


See also `Avoid option arrays in constructors <http://bestpractices.thecodingmachine.com/php/design_beautiful_classes_and_methods.html#avoid-option-arrays-in-constructors>`_ and `PHP RFC: Named Arguments (Type-safe and documented options) <https://wiki.php.net/rfc/named_params#type-safe_and_documented_options>`_.


Suggestions
^^^^^^^^^^^

* Spread the options in the argument list, one argument each
* Use a configuration class, that hold all the elements with clear names, instead of an array
* Use named parameters to pass and document the arguments

Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Classes/AvoidOptionArrays          |
+-------------+------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`ClassReview` |
+-------------+------------------------------------+
| Exakt since | 1.7.9                              |
+-------------+------------------------------------+
| Php Version | All                                |
+-------------+------------------------------------+
| Severity    | Minor                              |
+-------------+------------------------------------+
| Time To Fix | Quick (30 mins)                    |
+-------------+------------------------------------+
| Precision   | Medium                             |
+-------------+------------------------------------+


.. _custom-class-usage:

Custom Class Usage
++++++++++++++++++

 List of usage of custom classes throughout the code.

+------------------+---------+----------+-------------------------------+
| Name             | Default | Type     | Description                   |
+------------------+---------+----------+-------------------------------+
| forbiddenClasses |         | ini_hash | List of classes to be avoided |
+------------------+---------+----------+-------------------------------+



Specs
^^^^^
+-------------+--------------------+
| Short name  | Classes/AvoidUsing |
+-------------+--------------------+
| Rulesets    | none               |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Major              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _cancel-common-method:

Cancel Common Method
++++++++++++++++++++

 A `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ method's is too little used in children.

The `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ class has a method, which is customised in children classes, though most of the time, those are empty : hence, cancelled. 

.. code-block:: php

   <?php
   
   class x {
       abstract function foo();
       abstract function bar();
   }
   
   class y1 extends x {
       function foo() { doSomething(); }
       function bar() { doSomething(); };
   }
   
   class y2 extends x {
       // foo is cancelled : it must be written, but has no use. 
       function foo() {  }
       function bar() { doSomething(); };
   }
   
   ?>


A threshold of ``cancelThreshold`` % of the children methods have to be cancelled to report the `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ class. By default, it is 75 (or 3 out of 4).



Suggestions
^^^^^^^^^^^

* Drop the common method, and the cancelled methods in the children
* Fill the children's methods with actual code

+-----------------+---------+---------+--------------------------------------------------------------------------------+
| Name            | Default | Type    | Description                                                                    |
+-----------------+---------+---------+--------------------------------------------------------------------------------+
| cancelThreshold | 75      | integer | Minimal number of cancelled methods to suggest the cancellation of the parent. |
+-----------------+---------+---------+--------------------------------------------------------------------------------+



Specs
^^^^^
+-------------+----------------------------------------+
| Short name  | Classes/CancelCommonMethod             |
+-------------+----------------------------------------+
| Rulesets    | :ref:`ClassReview`, :ref:`Suggestions` |
+-------------+----------------------------------------+
| Exakt since | 2.1.8                                  |
+-------------+----------------------------------------+
| Php Version | All                                    |
+-------------+----------------------------------------+
| Severity    | Minor                                  |
+-------------+----------------------------------------+
| Time To Fix | Quick (30 mins)                        |
+-------------+----------------------------------------+
| Precision   | High                                   |
+-------------+----------------------------------------+


.. _can't-extend-final:

Can't Extend Final
++++++++++++++++++

 It is not possible to extend final classes. 

Since PHP fails with a fatal error, this means that the extending class is probably not used in the rest of the code. Check for dead code.

.. code-block:: php

   <?php
       // File Foo
       final class foo {
           public final function bar() {
               // doSomething
           }
       }
   ?>


In a separate file : 

.. code-block:: php

   <?php
       // File Bar
       class bar extends foo {
       
       }
   ?>


See also `Final Keyword <https://www.php.net/manual/en/language.oop5.final.php>`_.


Suggestions
^^^^^^^^^^^

* Remove the final keyword
* Remove the extending class

Specs
^^^^^
+-------------+----------------------------------------------+
| Short name  | Classes/CantExtendFinal                      |
+-------------+----------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Dead code <dead-code>` |
+-------------+----------------------------------------------+
| Exakt since | 0.8.4                                        |
+-------------+----------------------------------------------+
| Php Version | All                                          |
+-------------+----------------------------------------------+
| Severity    | Critical                                     |
+-------------+----------------------------------------------+
| Time To Fix | Instant (5 mins)                             |
+-------------+----------------------------------------------+
| Precision   | Medium                                       |
+-------------+----------------------------------------------+


.. _cant-inherit-abstract-method:

Cant Inherit Abstract Method
++++++++++++++++++++++++++++

 Inheriting abstract methods was made available in PHP 7.2. In previous versions, it emitted a fatal error.

.. code-block:: php

   <?php
   
   abstract class A           { abstract function bar(stdClass $x);  }
   abstract class B extends A { abstract function bar($x): stdClass; }
   
   //   Fatal error: Can't inherit abstract function A::bar()
   ?>


See also `PHP RFC: Allow abstract function override <https://wiki.php.net/rfc/allow-abstract-function-override>`_.


Suggestions
^^^^^^^^^^^

* Avoid inheriting abstract methods for compatibility beyond 7.2 (and older)

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Classes/CantInheritAbstractMethod                                                                                                                                |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70`, :ref:`CompatibilityPHP71` |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.11.8                                                                                                                                                           |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | 7.2+                                                                                                                                                             |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Critical                                                                                                                                                         |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                                                                  |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                                             |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. _cant-instantiate-class:

Cant Instantiate Class
++++++++++++++++++++++

 When constructor is not public, it is not possible to instantiate such a class. Either this is a conception choice, or there are factories to handle that. Either way, it is not possible to call new on such class. 

PHP reports an error similar to this one : 'Call to private Y\:\:`__construct() <https://www.php.net/manual/en/language.oop5.decon.php>`_ from invalid context'.

.. code-block:: php

   <?php
   
   //This is the way to go
   $x = X::factory();
   
   //This is not possible
   $x = new X();
   
   class X {
       //This is also the case with proctected __construct
       private function __construct() {}
   
       static public function factory() {
           return new X();
       }
   }
   
   ?>


See also `In a PHP5 class, when does a private constructor get called? <https://stackoverflow.com/questions/26079/in-a-php5-class-when-does-a-private-constructor-get-called>`_, `Named Constructors in PHP <http://verraes.net/2014/06/named-constructors-in-php/>`_ and `PHP Constructor Best Practices And The Prototype Pattern <http://ralphschindler.com/2012/03/09/php-constructor-best-practices-and-the-prototype-pattern>`_.

Specs
^^^^^
+-------------+----------------------------------------------------+
| Short name  | Classes/CantInstantiateClass                       |
+-------------+----------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                     |
+-------------+----------------------------------------------------+
| Exakt since | 1.2.8                                              |
+-------------+----------------------------------------------------+
| Php Version | All                                                |
+-------------+----------------------------------------------------+
| Severity    | Critical                                           |
+-------------+----------------------------------------------------+
| Time To Fix | Quick (30 mins)                                    |
+-------------+----------------------------------------------------+
| Precision   | High                                               |
+-------------+----------------------------------------------------+
| Examples    | :ref:`case-wordpress-classes-cantinstantiateclass` |
+-------------+----------------------------------------------------+


.. _check-on-\_\_call-usage:

Check On __Call Usage
+++++++++++++++++++++

 When using the magic methods `__call() <https://www.php.net/manual/en/language.oop5.magic.php>`_ and __staticcall(), make sure the method exists before calling it. 

If the method doesn't exists, then the same method will be called again, leading to the same failure. Finally, it will crash PHP.

.. code-block:: php

   <?php
   
   class safeCall {
       function __class($name, $args) {
           // unsafe call, no checks
           if (method_exists($this, $name)) {
               $this->$name(...$args);
           }
       }
   }
   
   class unsafeCall {
       function __class($name, $args) {
           // unsafe call, no checks
           $this->$name(...$args);
       }
   }
   
   ?>


See also `Method overloading <https://www.php.net/manual/en/language.oop5.overloading.php#object.call>`_ and ``Magical PHP: `__call <https://www.php.net/manual/en/language.oop5.magic.php>`_ <https://www.garfieldtech.com/index.php/blog/magical-php-call>`_.



Suggestions
^^^^^^^^^^^

* Add a call to method_exists() before using any method name
* Relay the call to another object that doesn't handle __call() or __callStatic()

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Classes/CheckOnCallUsage                    |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 1.7.2                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _child-class-removes-typehint:

Child Class Removes Typehint
++++++++++++++++++++++++++++

 PHP 7.2 introduced the ability to remove a typehint when overloading a method. This is not valid code for older versions.

.. code-block:: php

   <?php
   
   class foo {
       function foobar(foo $a) {}
   }
   
   class bar extends foo {
       function foobar($a) {}
   }
   
   ?>

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Classes/ChildRemoveTypehint                                                                                                                                                         |
+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70`, :ref:`CompatibilityPHP71`, :ref:`Typechecks` |
+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.12.4                                                                                                                                                                              |
+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | 7.2+                                                                                                                                                                                |
+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                                                                                               |
+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                                                                                     |
+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                                                                |
+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. _class,-interface-or-trait-with-identical-names:

Class, Interface Or Trait With Identical Names
++++++++++++++++++++++++++++++++++++++++++++++

 The following names are used at the same time for classes, interfaces or traits. For example, 

.. code-block:: php

   <?php
       class a     { /* some definitions */ }
       interface a { /* some definitions */ }
       trait a     { /* some definitions */ }
   ?>


Even if they are in different namespaces, identical names makes classes easy to confuse. This is often solved by using alias at import time : this leads to more confusion, as a class suddenly changes its name. 

Internally, PHP use the same list for all classes, interfaces and traits. As such, it is not allowed to have both a trait and a class with the same name.

In PHP 4, and PHP 5 before namespaces, it was not possible to have classes with the same name. They were simply included after a check. 



Suggestions
^^^^^^^^^^^

* Use distinct names for every class, trait and interface. 
* Keep eponymous classes, traits and interfaces in distinct files, for definition but also for usage. When this happens, rename one of them.

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------+
| Short name  | Classes/CitSameName                                                                 |
+-------------+-------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                      |
+-------------+-------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                               |
+-------------+-------------------------------------------------------------------------------------+
| Php Version | All                                                                                 |
+-------------+-------------------------------------------------------------------------------------+
| Severity    | Minor                                                                               |
+-------------+-------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                     |
+-------------+-------------------------------------------------------------------------------------+
| Precision   | High                                                                                |
+-------------+-------------------------------------------------------------------------------------+
| Examples    | :ref:`case-shopware-classes-citsamename`, :ref:`case-nextcloud-classes-citsamename` |
+-------------+-------------------------------------------------------------------------------------+


.. _usage-of-class\_alias():

Usage Of class_alias()
++++++++++++++++++++++

 ``class_alias`` creates dynamically an alias for classes. 

.. code-block:: php

   <?php
   
   class foo { }
   
   class_alias('foo', 'bar');
   
   $a = new foo;
   $b = new bar;
   
   // the objects are the same
   var_dump($a == $b, $a === $b);
   var_dump($a instanceof $b);
   
   // the classes are the same
   var_dump($a instanceof foo);
   var_dump($a instanceof bar);
   
   var_dump($b instanceof foo);
   var_dump($b instanceof bar);
   
   ?>


See also `class_alias <https://www.php.net/class_alias>`_.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Classes/ClassAliasUsage |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _classes-names:

Classes Names
+++++++++++++

 List of all classes, as defined in the application.

.. code-block:: php

   <?php
   
   // foo is in the list
   class foo {}
   
   // Anonymous classes are not in the list
   $o = class { function foo(){} }
   
   ?>

Specs
^^^^^
+-------------+--------------------+
| Short name  | Classes/Classnames |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _class-usage:

Class Usage
+++++++++++

 List of classes being used.

.. code-block:: php

   <?php
   
   // Class may be used in a use expression
   use MyClass as MyAliasedClass;
   
   // class may be aliased with class_alias
   class_alias('MyOtherAliasedClass', 'MyClass');
   
   // Class may be instanciated
   $o = new MyClass();
   
   // Class may be used with instanceof
   var_dump($o instanceof \MyClass);
   
   // Class may be used in static calls
   MyClass::aConstant;
   echo MyClass::$aProperty;
   echo MyClass::aMethod( $o );
   
   // Class may be extended
   class MyOtherClass {
   
   }
   
   class MyClass extends MyOtherClass {
       const aConstant = 1;
       
       public static $aProperty = 2;
       
       // also used as a typehint
       public static function aMethod(MyClass $object) {
           return __METHOD__;
       }
   }
   
   ?>

Specs
^^^^^
+-------------+--------------------+
| Short name  | Classes/ClassUsage |
+-------------+--------------------+
| Rulesets    | none               |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _clone-with-non-object:

Clone With Non-Object
+++++++++++++++++++++

 The ``clone`` keyword must be used on variables, properties or results from a function or method call. 

``clone`` cannot be used with constants or literals.

.. code-block:: php

   <?php
   
   class x { }
   $x = new x();
   
   // Valid clone
   $y = clone $x;
   
   // Invalid clone
   $y = clone x;
   
   ?>


Cloning a non-object lint but won't execute.

See also `Object cloning <https://www.php.net/manual/en/language.oop5.cloning.php>`_.



Suggestions
^^^^^^^^^^^

* Only clone containers (like variables, properties...)
* Add typehint to injected properties, so they are checked as objects.

Specs
^^^^^
+-------------+----------------------------------------+
| Short name  | Classes/CloneWithNonObject             |
+-------------+----------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`LintButWontExec` |
+-------------+----------------------------------------+
| Exakt since | 1.7.0                                  |
+-------------+----------------------------------------+
| Php Version | All                                    |
+-------------+----------------------------------------+
| Severity    | Minor                                  |
+-------------+----------------------------------------+
| Time To Fix | Quick (30 mins)                        |
+-------------+----------------------------------------+
| Precision   | High                                   |
+-------------+----------------------------------------+


.. _clone-usage:

Clone Usage
+++++++++++

 List of all clone situations.

.. code-block:: php

   <?php
       $dateTime = new DateTime();
       echo (clone $dateTime)->format('Y');
   ?>


See also `Object cloning <https://www.php.net/manual/en/language.oop5.cloning.php>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Classes/CloningUsage |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _constant-class:

Constant Class
++++++++++++++

 A class or an interface only made up of constants. Constants usually have to be used in conjunction of some behavior (methods, class...) and never alone. 

.. code-block:: php

   <?php
   
   class ConstantClass {
       const KBIT = 1000;
       const MBIT = self::KBIT * 1000;
       const GBIT = self::MBIT * 1000;
       const PBIT = self::GBIT * 1000;
   }
   
   ?>


As such, they should be PHP constants (build with define or const), or included in a class with other methods and properties. 

See also `PHP Classes containing only constants <https://stackoverflow.com/questions/16838266/php-classes-containing-only-constants>`_.


Suggestions
^^^^^^^^^^^

* Make the class an interface
* Make the class an abstract class, to avoid its instantiation

Specs
^^^^^
+-------------+-------------------------------+
| Short name  | Classes/ConstantClass         |
+-------------+-------------------------------+
| Rulesets    | :ref:`CE`, :ref:`ClassReview` |
+-------------+-------------------------------+
| Exakt since | 0.8.4                         |
+-------------+-------------------------------+
| Php Version | All                           |
+-------------+-------------------------------+
| Severity    | Minor                         |
+-------------+-------------------------------+
| Time To Fix | Slow (1 hour)                 |
+-------------+-------------------------------+
| Precision   | High                          |
+-------------+-------------------------------+


.. _constant-definition:

Constant Definition
+++++++++++++++++++

 List of class constants being defined.

.. code-block:: php

   <?php
   
   // traditional way of making constants
   define('aConstant', 1);
   
   // modern way of making constants
   const anotherConstant = 2;
   
   class foo {
       // Not a constant, a class constant.
       const aClassConstant = 3;
   }
   
   ?>


See also `PHP Constants <https://www.php.net/manual/en/language.constants.php>`_.

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Classes/ConstantDefinition |
+-------------+----------------------------+
| Rulesets    | :ref:`CE`                  |
+-------------+----------------------------+
| Exakt since | 0.8.4                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Slow (1 hour)              |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _constant-used-below:

Constant Used Below
+++++++++++++++++++

 Mark class constants that are used in children classes.

.. code-block:: php

   <?php
   
   class foo {
       // This constant is used in children
       protected PROTECTEDPROPERTY = 1;
       
       // This constant is not used in children
       protected LOCALPROTECTEDPROPERTY = 1;
   
       private function foobar() {
           // PROTECTEDPROPERTY is used here, but defined in parent
           echo self::LOCALPROTECTEDPROPERTY;
       }
   }
   
   class foofoo extends foo {
       private function bar() {
           // protectedProperty is used here, but defined in parent
           print self::PROTECTEDPROPERTY;
       }
   }
   
   ?>


This analysis marks constants at their definition, not the current class, nor the (grand-)`parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Classes/ConstantUsedBelow |
+-------------+---------------------------+
| Rulesets    | none                      |
+-------------+---------------------------+
| Exakt since | 0.12.10                   |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _constructors:

Constructors
++++++++++++

 Mark methods as constructors. 

.. code-block:: php

   <?php
   
   class x {
       // Normal constructor
       function __construct() {}
   }
   
   class y {
       // Old style constructor, obsolete since PHP 7.1
       function y() {}
   }
   
   class z {
       // Normal constructor
       function __construct() {}
   
       // Old style constructor, but with lower priority
       function z() {}
   }
   
   ?>


See also `Constructors and Destructors <https://www.php.net/manual/en/language.oop5.decon.php>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Classes/Constructor |
+-------------+---------------------+
| Rulesets    | none                |
+-------------+---------------------+
| Exakt since | 0.8.4               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _const-visibility-usage:

Const Visibility Usage
++++++++++++++++++++++

 Visibility for class constant controls the accessibility to class constant.

A public constant may be used anywhere in the code; a protected constant usage is restricted to the class and its relatives; a private constant is restricted to itself.

This feature was introduced in PHP 7.1. It is recommended to use explicit visibility, and, whenever possible, make the visibility private.

.. code-block:: php

   <?php
   
   class x {
       public const a = 1;
       protected const b = 2;
       private const c = 3;
       const d = 4;
   }
   
   interface i {
       public const a = 1;
         const d = 4;
   }
   
   ?>


See also `Class Constants <https://www.php.net/manual/en/language.oop5.constants.php>`_ and `PHP RFC: Support Class Constant Visibility <https://wiki.php.net/rfc/class_const_visibility>`_.


Suggestions
^^^^^^^^^^^

* Add constant visibility, at least 'public'.

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Classes/ConstVisibilityUsage                                                                                                          |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70` |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.3.0                                                                                                                                 |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | 7.1+                                                                                                                                  |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                                                 |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                                                         |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                  |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+


.. _could-be-abstract-class:

Could Be Abstract Class
+++++++++++++++++++++++

 An abstract class is never instantiated, and has children class that are. As such, a '`parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_' class that is never instantiated by itself, but has its own children instantiated could be marked as abstract. 

That will prevent new code to try to instantiate it.

.. code-block:: php

   <?php
   
   // Example code would actually be split over multiple files.
   
   
   // That class could be abstract
   class motherClass {}
   
   // Those classes shouldn't be abstract
   class firstChildren extends motherClass {}
   class secondChildren extends motherClass {}
   class thirdChildren extends motherClass {}
   
   new firstChildren();
   new secondChildren();
   new thirdChildren();
   
   //Not a single : new motherClass()
   
   ?>


See also `Class Abstraction <https://www.php.net/abstract>`_ `Abstract classes and methods <https://phpenthusiast.com/object-oriented-php-tutorials/abstract-classes-and-methods>`_.


Suggestions
^^^^^^^^^^^

* Make this class an abstract class

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------+
| Short name  | Classes/CouldBeAbstractClass                                                                        |
+-------------+-----------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`ClassReview`                                                                  |
+-------------+-----------------------------------------------------------------------------------------------------+
| Exakt since | 1.3.9                                                                                               |
+-------------+-----------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                 |
+-------------+-----------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                               |
+-------------+-----------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                     |
+-------------+-----------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                |
+-------------+-----------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-edusoho-classes-couldbeabstractclass`, :ref:`case-shopware-classes-couldbeabstractclass` |
+-------------+-----------------------------------------------------------------------------------------------------+


.. _could-be-class-constant:

Could Be Class Constant
+++++++++++++++++++++++

 When a property is defined and read, but never modified, it may be a constant. 

.. code-block:: php

   <?php
   
   class foo {
       // $this->bar is never modified. 
       private $bar = 1;
       
       // $this->foofoo is modified, at least once
       private $foofoo = 2;
       
       function method($a) {
           $this->foofoo = $this->bar + $a + $this->foofoo;
           
           return $this->foofoo;
       }
       
   }
   
   ?>


Starting with PHP 5.6, even `array() <https://www.php.net/array>`_ may be defined as constants.

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Classes/CouldBeClassConstant |
+-------------+------------------------------+
| Rulesets    | :ref:`ClassReview`           |
+-------------+------------------------------+
| Exakt since | 0.8.4                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Quick (30 mins)              |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _class-could-be-final:

Class Could Be Final
++++++++++++++++++++

 Any class that has no extension should be ``final`` by default.

As stated by ``Matthias Noback`` : ``If a class is not marked final, it has at least one subclass``.

Prevent your classes from being subclassed by making them ``final``. Sometimes, classes are not meant or thought to be derivable.

.. code-block:: php

   <?php
   
   class x {}            // This class is extended
   class y extends x {}  // This class is extended
   class z extends y {}  // This class is not extended
   
   final class z2 extends y {}  // This class is not extended
   
   ?>


See also `Negative architecture, and assumptions about code <https://matthiasnoback.nl/2018/08/negative-architecture-and-assumptions-about-code/>`_.


Suggestions
^^^^^^^^^^^

* Make the class final
* Extends the class

Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Classes/CouldBeFinal               |
+-------------+------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`ClassReview` |
+-------------+------------------------------------+
| Exakt since | 1.4.3                              |
+-------------+------------------------------------+
| Php Version | All                                |
+-------------+------------------------------------+
| Severity    | Minor                              |
+-------------+------------------------------------+
| Time To Fix | Quick (30 mins)                    |
+-------------+------------------------------------+
| Precision   | High                               |
+-------------+------------------------------------+


.. _could-be-parent-method:

Could Be Parent Method
++++++++++++++++++++++

 A method is defined in several children, but not in a the `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ class. It may be worth checking if this method doesn't belong the `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ class, as an abstraction.

.. code-block:: php

   <?php
   
   // The parent class
   class x { }
   
   // The children class
   class y1 extends x {
       // foo is common to y1 and y2, so it shall be also a method in x
       function foo() {}
       // fooY1 is specific to y1
       function fooY1() {}
   }
   
   class y2 extends x {
       function foo() {}
       // fooY2 is specific to y1
       function fooY2() {}
   }
   
   ?>


Only the name of the method is used is for gathering purposes. If the code has grown organically, the signature (default values, typehint, argument names) may have followed different path, and will require a refactorisation.



Suggestions
^^^^^^^^^^^

* Create an abstract method in the parent
* Create an concrete method in the parent, and move default behavior there by removing it in children classes

+-------------+---------+---------+-----------------------------------------------+
| Name        | Default | Type    | Description                                   |
+-------------+---------+---------+-----------------------------------------------+
| minChildren | 4       | integer | Minimal number of children using this method. |
+-------------+---------+---------+-----------------------------------------------+



Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Classes/CouldBeParentMethod |
+-------------+-----------------------------+
| Rulesets    | :ref:`ClassReview`          |
+-------------+-----------------------------+
| Exakt since | 2.1.7                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Slow (1 hour)               |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _property-could-be-private-property:

Property Could Be Private Property
++++++++++++++++++++++++++++++++++

 The following properties are never used outside their class of definition  Given the analyzed code, they could be set as private. 

.. code-block:: php

   <?php
   
   class foo {
       public $couldBePrivate = 1;
       public $cantdBePrivate = 1;
       
       function bar() {
           // couldBePrivate is used internally. 
           $this->couldBePrivate = 3;
       }
   }
   
   class foo2 extends foo {
       function bar2() {
           // cantdBePrivate is used in a child class. 
           $this->cantdBePrivate = 3;
       }
   }
   
   //$couldBePrivate is not used outside 
   $foo = new foo();
   
   //$cantdBePrivate is used outside the class
   $foo->cantdBePrivate = 2;
   
   ?>


Note that dynamic properties (such as $x->$y) are not taken into account. 

Suggestions
^^^^^^^^^^^

* Remove the unused property
* Use the private property
* Change the visibility to allow access the property from other part of the code

Specs
^^^^^
+-------------+------------------------+
| Short name  | Classes/CouldBePrivate |
+-------------+------------------------+
| Rulesets    | :ref:`ClassReview`     |
+-------------+------------------------+
| Exakt since | 0.8.4                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Slow (1 hour)          |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _could-be-private-class-constant:

Could Be Private Class Constant
+++++++++++++++++++++++++++++++

 Class constant may use ``private`` visibility. 

Since PHP 7.1, constants may also have a public/protected/private visibility. This restrict their usage to anywhere, class and children or class. 

As a general rule, it is recommended to make constant ``private`` by default, and to relax this restriction as needed. PHP makes them public by default.

.. code-block:: php

   <?php
   
   class foo {
       // pre-7.1 style
       const PRE_71_CONSTANT = 1;
       
       // post-7.1 style
       private const PRIVATE_CONSTANT = 2;
       public const PUBLIC_CONSTANT = 3;
       
       function bar() {
           // PRIVATE CONSTANT may only be used in its class
           echo self::PRIVATE_CONSTANT;
       }
   }
   
   // Other constants may be used anywhere
   function x($a = foo::PUBLIC_CONSTANT) {
       echo $a.' '.foo:PRE_71_CONSTANT;
   }
   
   ?>


Constant shall stay ``public`` when the code has to be compatible with PHP 7.0 and older. 

They also have to be public in the case of component : some of those constants have to be used by external actors, in order to configure the component.

See also `Class Constants <https://www.php.net/manual/en/language.oop5.constants.php>`_.

Specs
^^^^^
+-------------+---------------------------------------------------+
| Short name  | Classes/CouldBePrivateConstante                   |
+-------------+---------------------------------------------------+
| Rulesets    | :ref:`ClassReview`                                |
+-------------+---------------------------------------------------+
| Exakt since | 0.12.10                                           |
+-------------+---------------------------------------------------+
| Php Version | All                                               |
+-------------+---------------------------------------------------+
| Severity    | Minor                                             |
+-------------+---------------------------------------------------+
| Time To Fix | Quick (30 mins)                                   |
+-------------+---------------------------------------------------+
| Precision   | High                                              |
+-------------+---------------------------------------------------+
| Examples    | :ref:`case-phinx-classes-couldbeprivateconstante` |
+-------------+---------------------------------------------------+


.. _method-could-be-private-method:

Method Could Be Private Method
++++++++++++++++++++++++++++++

 The following methods are never used outside their class of definition. Given the analyzed code, they could be set as private. 

.. code-block:: php

   <?php
   
   class foo {
       public function couldBePrivate() {}
       public function cantdBePrivate() {}
       
       function bar() {
           // couldBePrivate is used internally. 
           $this->couldBePrivate();
       }
   }
   
   class foo2 extends foo {
       function bar2() {
           // cantdBePrivate is used in a child class. 
           $this->cantdBePrivate();
       }
   }
   
   //couldBePrivate() is not used outside 
   $foo = new foo();
   
   //cantdBePrivate is used outside the class
   $foo->cantdBePrivate();
   
   ?>


Note that dynamic properties (such as $x->$y) are not taken into account.

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Classes/CouldBePrivateMethod |
+-------------+------------------------------+
| Rulesets    | :ref:`ClassReview`           |
+-------------+------------------------------+
| Exakt since | 0.12.11                      |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Quick (30 mins)              |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _could-be-protected-class-constant:

Could Be Protected Class Constant
+++++++++++++++++++++++++++++++++

 Class constant may use 'protected' visibility. 

Since PHP 7.1, constants may also have a public/protected/private visibility. This restrict their usage to anywhere, class and children or class. 

As a general rule, it is recommended to make constant 'private' by default, and to relax this restriction as needed. PHP makes them public by default.

.. code-block:: php

   <?php
   
   class foo {
       // pre-7.1 style
       const PRE_71_CONSTANT = 1;
       
       // post-7.1 style
       protected const PROTECTED_CONSTANT = 2;
       public const PUBLIC_CONSTANT = 3;
   }
   
   class foo2 extends foo {
       function bar() {
           // PROTECTED_CONSTANT may only be used in its class or its children
           echo self::PROTECTED_CONSTANT;
       }
   }
   
   class foo3 extends foo {
       function bar() {
           // PROTECTED_CONSTANT may only be used in its class or any of its children
           echo self::PROTECTED_CONSTANT;
       }
   }
   
   // Other constants may be used anywhere
   function x($a = foo::PUBLIC_CONSTANT) {
       echo $a.' '.foo:PRE_71_CONSTANT;
   }
   
   ?>

Specs
^^^^^
+-------------+----------------------------------+
| Short name  | Classes/CouldBeProtectedConstant |
+-------------+----------------------------------+
| Rulesets    | :ref:`ClassReview`               |
+-------------+----------------------------------+
| Exakt since | 0.12.11                          |
+-------------+----------------------------------+
| Php Version | All                              |
+-------------+----------------------------------+
| Severity    | Minor                            |
+-------------+----------------------------------+
| Time To Fix | Quick (30 mins)                  |
+-------------+----------------------------------+
| Precision   | High                             |
+-------------+----------------------------------+


.. _could-be-protected-method:

Could Be Protected Method
+++++++++++++++++++++++++

 Those methods are declared public, but are never used publicly. They may be made protected. 

.. code-block:: php

   <?php
   
   class foo {
       // Public, and used publicly
       public publicMethod() {}
   
       // Public, but never used outside the class or its children
       public protectedMethod() {}
       
       private function bar() {
           $this->protectedMethod();
       }
   }
   
   $foo = new Foo();
   $foo->publicMethod();
   
   ?>


These properties may even be made private.

Specs
^^^^^
+-------------+--------------------------------+
| Short name  | Classes/CouldBeProtectedMethod |
+-------------+--------------------------------+
| Rulesets    | :ref:`ClassReview`             |
+-------------+--------------------------------+
| Exakt since | 0.12.11                        |
+-------------+--------------------------------+
| Php Version | All                            |
+-------------+--------------------------------+
| Severity    | Minor                          |
+-------------+--------------------------------+
| Time To Fix | Quick (30 mins)                |
+-------------+--------------------------------+
| Precision   | High                           |
+-------------+--------------------------------+


.. _could-be-protected-property:

Could Be Protected Property
+++++++++++++++++++++++++++

 Those properties are declared public, but are never used publicly. They may be made protected. 

.. code-block:: php

   <?php
   
   class foo {
       // Public, and used publicly
       public $publicProperty;
       // Public, but never used outside the class or its children
       public $protectedProperty;
       
       function bar() {
           $this->protectedProperty = 1;
       }
   }
   
   $foo = new Foo();
   $foo->publicProperty = 3;
   
   ?>


This property may even be made private.

Specs
^^^^^
+-------------+----------------------------------+
| Short name  | Classes/CouldBeProtectedProperty |
+-------------+----------------------------------+
| Rulesets    | :ref:`ClassReview`               |
+-------------+----------------------------------+
| Exakt since | 0.9.7                            |
+-------------+----------------------------------+
| Php Version | All                              |
+-------------+----------------------------------+
| Severity    | Minor                            |
+-------------+----------------------------------+
| Time To Fix | Slow (1 hour)                    |
+-------------+----------------------------------+
| Precision   | High                             |
+-------------+----------------------------------+


.. _method-could-be-static:

Method Could Be Static
++++++++++++++++++++++

 A method that doesn't make any usage of `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ could be turned into a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ method. 

While `static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods are usually harder to handle, recognizing the `static <https://www.php.net/manual/en/language.oop5.static.php>`_ status is a first step before turning the method into a standalone function.

.. code-block:: php

   <?php
   
   class foo {
       static $property = 1;
       
       // legit static method
       static function staticMethod() {
           return self::$property;
       }
   
       // This is not using $this, and could be static
       function nonStaticMethod() {
           return self::$property;
       }
   
       // This is not using $this nor self, could be a standalone function
       function nonStaticMethod() {
           return self::$property;
       }
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Make the method static
* Make the method a standalone function
* Make use of $this in the method : may be it was forgotten.

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------+
| Short name  | Classes/CouldBeStatic                                                                         |
+-------------+-----------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`ClassReview`                                                            |
+-------------+-----------------------------------------------------------------------------------------------+
| Exakt since | 1.5.7                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------+
| Php Version | All                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                               |
+-------------+-----------------------------------------------------------------------------------------------+
| Precision   | High                                                                                          |
+-------------+-----------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-fuelcms-classes-couldbestatic`, :ref:`case-expressionengine-classes-couldbestatic` |
+-------------+-----------------------------------------------------------------------------------------------+


.. _could-be-stringable:

Could Be Stringable
+++++++++++++++++++

 Stringable is an interface that mark classes as string-castable. It is introduced in PHP 8.0.

Classes that defined a `__toString() <https://www.php.net/manual/en/language.oop5.magic.php>`_ magic method may be turned into a string when the typehint, argument, return or property, requires it. This is not the case when strict_types is activated. Yet, until PHP 8.0, there was nothing to identify a class as such.

.. code-block:: php

   <?php 
   
   // This class may implement Stringable
   class x {
       function __tostring() {
           return 'asd';
       }
   }
   
   echo (new x);
   
   ?>


See also `PHP RFC: Add Stringable interface <https://wiki.php.net/rfc/stringable>`_.


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+----------------------------------------+
| Short name  | Classes/CouldBeStringable              |
+-------------+----------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`LintButWontExec` |
+-------------+----------------------------------------+
| Exakt since | 2.1.9                                  |
+-------------+----------------------------------------+
| Php Version | 8.0+                                   |
+-------------+----------------------------------------+
| Severity    | Minor                                  |
+-------------+----------------------------------------+
| Time To Fix | Quick (30 mins)                        |
+-------------+----------------------------------------+
| Precision   | High                                   |
+-------------+----------------------------------------+


.. _cyclic-references:

Cyclic References
+++++++++++++++++

 Avoid cyclic references. 

Cyclic references happen when an object points to another object, which reciprocate. This is particularly possible with classes, when the child class has to keep a reference to the `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ class. 

.. code-block:: php

   <?php
   
   class a {
       private $p = null;
       
       function foo() {
           $this->p = new b();
           // the current class is stored in the child class
           $this->p->m($this);
       }
   }
   
   class b {
       private $pb = null;
       
       function n($a) {
           // the current class keeps a link to its parent
           $this->pb = $a;
       }
   }
   ?>


Cyclic references, or circular references, are memory intensive : only the garbage collector can understand when they may be flushed from memory, which is a costly operation. On the other hand, in an acyclic reference code, the reference counter will know immediately know that an object is free or not. 

See also `About circular references in PHP <https://johann.pardanaud.com/blog/about-circular-references-in-php>`_ and `A Journey to find a memory leak <https://jolicode.com/blog/a-journey-to-find-a-memory-leak/>`_.

Suggestions
^^^^^^^^^^^

* Use a different object when calling the child objects. 
* Refactor your code to avoid the cyclic reference.

Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Classes/CyclicReferences           |
+-------------+------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`ClassReview` |
+-------------+------------------------------------+
| Exakt since | 2.1.3                              |
+-------------+------------------------------------+
| Php Version | All                                |
+-------------+------------------------------------+
| Severity    | Minor                              |
+-------------+------------------------------------+
| Time To Fix | Quick (30 mins)                    |
+-------------+------------------------------------+
| Precision   | High                               |
+-------------+------------------------------------+


.. _defined-class-constants:

Defined Class Constants
+++++++++++++++++++++++

 Connect class constants with their definition when it can find it. This includes class constants, one level of `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ (extended) or interfaces (implemented).

.. code-block:: php

   <?php
   
   class X {
       const Y = 2;
       
       function foo() {
           // This is defined on the line above
           echo self::Y;
   
           // This is not defined in the current code
           echo X::X;
       }
   }
   
   ?>

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Classes/DefinedConstants |
+-------------+--------------------------+
| Rulesets    | :ref:`CE`                |
+-------------+--------------------------+
| Exakt since | 0.8.4                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Slow (1 hour)            |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _defined-parent-mp:

Defined Parent MP
+++++++++++++++++

 Check `static <https://www.php.net/manual/en/language.oop5.static.php>`_ calls with '`parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_'. 

.. code-block:: php

   <?php
   
   class foo {
       protected function parentDefined() {}
       protected function unusedParentMethod() {}
   
       // visibility is checked too
       protected function unusuableParentMethod() {}
   }
   
   class bar extends foo {
       
       private function someMethod() {
           // reported
           parent::parentDefined();
   
           // not reported, as method is unreachable in parent
           parent::unusuableParentMethod();
   
           // not reported, as method is undefined in parent
           parent::parentUndefined();
           
       }
   
       protected function parentDefined2() {}
   }
   
   ?>

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Classes/DefinedParentMP |
+-------------+-------------------------+
| Rulesets    | none                    |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _defined-properties:

Defined Properties
++++++++++++++++++

 List of properties that are explicitly defined in the class, its parents or traits.

.. code-block:: php

   <?php
   
   class foo {
       // property definition
       private bar = 2;
   }
   
   ?>


See also `Properties <https://www.php.net/manual/en/language.oop5.properties.php>`_.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Classes/DefinedProperty |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Quick (30 mins)         |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _defined-static-or-self:

Defined static\:\: Or self\:\:
++++++++++++++++++++++++++++++

 List of all defined `static <https://www.php.net/manual/en/language.oop5.static.php>`_ and `self <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ properties and methods.

.. code-block:: php

   <?php
   
   class x {
       static public function definedStatic() {}
       private definedStatic = 1;
       
       public function method() {
           self::definedStatic();
           self::undefinedStatic();
   
           static::definedStatic;
           static::undefinedStatic;
       }
   }
   
   ?>

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Classes/DefinedStaticMP |
+-------------+-------------------------+
| Rulesets    | none                    |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _law-of-demeter:

Law of Demeter
++++++++++++++

 The law of Demeter specifies a number of constraints to apply to methodcalls from within an method, so as to keep dependencies to a minimum. 

.. code-block:: php

   <?php
   
   class x {
       function foo($arg) {
           $this->foo();    // calling oneself is OK
           $this->x->bar(); // calling one's property is OK
           $arg->bar2();    // calling arg's methods is OK
   
           $local = new y();
           $z = $y->bar3();      // calling a local variable is OK
   
           $z->bar4();      // calling a method on a previous result is wrong
       }
   }
   
   ?>


See also `Do your objects talk to strangers? <https://www.brandonsavage.net/do-your-objects-talk-to-strangers/>`_ and `Law of Demeter <https://en.wikipedia.org/wiki/Law_of_Demeter>`_.



Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+--------------------+
| Short name  | Classes/DemeterLaw |
+-------------+--------------------+
| Rulesets    | none               |
+-------------+--------------------+
| Exakt since | 1.6.7              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Quick (30 mins)    |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _dependant-abstract-classes:

Dependant Abstract Classes
++++++++++++++++++++++++++

 Abstract classes should be autonomous. It is recommended to avoid depending on methods, constant or properties that should be made available in inheriting classes, without explicitly abstracting them.

The following abstract classes make usage of constant, methods and properties, `static <https://www.php.net/manual/en/language.oop5.static.php>`_ or not, that are not defined in the class. This means the inheriting classes must provide those constants, methods and properties, but there is no way to enforce this. 

This may also lead to dead code : when the abstract class is removed, the host class have unused properties and methods.

.. code-block:: php

   <?php
   
   // autonomous abstract class : all it needs is within the class
   abstract class c {
       private $p = 0;
       
       function foo() {
           return ++$this->p;
       }
   }
   
   // dependant abstract class : the inheriting classes needs to provide some properties or methods
   abstract class c2 {
       function foo() {
           // $p must be provided by the extending class
           return ++$this->p;
       }
   }
   
   class c3 extends c2 {
       private $p = 0;
   }
   ?>


See also :ref:`dependant-trait`. 


Suggestions
^^^^^^^^^^^

* Make the class only use its own resources
* Split the class in autonomous classes
* Add local property definitions to make the class independent

Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Classes/DependantAbstractClass     |
+-------------+------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`ClassReview` |
+-------------+------------------------------------+
| Exakt since | 1.8.6                              |
+-------------+------------------------------------+
| Php Version | All                                |
+-------------+------------------------------------+
| Severity    | Minor                              |
+-------------+------------------------------------+
| Time To Fix | Quick (30 mins)                    |
+-------------+------------------------------------+
| Precision   | High                               |
+-------------+------------------------------------+


.. _different-argument-counts:

Different Argument Counts
+++++++++++++++++++++++++

 Two methods with the same name shall have the same number of compulsory argument. PHP accepts different number of arguments between two methods, if the extra arguments have default values. Basically, they shall be called interchangeably with the same number of arguments.

The number of compulsory arguments is often mistaken for the same number of arguments. When this is the case, it leads to confusion between the two signatures. It will also create more difficulties when refactoring the signature.

While this code is legit, it is recommended to check if the two signatures could be synchronized, and reduce future surprises.

.. code-block:: php

   <?php
   
   class x {
       function foo($a ) {}
   }
   
   class y extends x {
       // This method is compatible with the above, its signature is different
       function foo($a, $b = 1) {}
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Extract the extra arguments into other methods
* Remove the extra arguments
* Add the extra arguments to all the signatures

Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Classes/DifferentArgumentCounts    |
+-------------+------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`ClassReview` |
+-------------+------------------------------------+
| Exakt since | 2.1.6                              |
+-------------+------------------------------------+
| Php Version | All                                |
+-------------+------------------------------------+
| Severity    | Minor                              |
+-------------+------------------------------------+
| Time To Fix | Quick (30 mins)                    |
+-------------+------------------------------------+
| Precision   | High                               |
+-------------+------------------------------------+


.. _no-direct-call-to-magic-method:

No Direct Call To Magic Method
++++++++++++++++++++++++++++++

 PHP features magic methods, which are methods related to operators.

Magic methods, such as `__get() <https://www.php.net/manual/en/language.oop5.magic.php>`_, related to =, or `__clone() <https://www.php.net/manual/en/language.oop5.magic.php>`_, related to ``clone``, are supposed to be used in an object environment, and not with direct call. 

It is recommended to use the magic method with its intended usage, and not to call it directly. For example, typecast to ``string`` instead of calling the `__toString() <https://www.php.net/manual/en/language.oop5.magic.php>`_ method.

.. code-block:: php

   <?php
   // Write
     print $x->a;
   // instead of 
     print $x->__get('a'); 
   
   class Foo {
       private $b = secret;
   
       public function __toString() {
           return strtoupper($this->b);
       }
   }
   
   $bar = new Foo();
   echo (string) $bar;
   
   ?>


Accessing those methods in a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ way is also discouraged.

See also `Magic Methods <https://www.php.net/manual/en/language.oop5.magic.php>`_ and `Magical PHP: `__call <https://www.php.net/manual/en/language.oop5.magic.php>`_ <https://www.garfieldtech.com/blog/magical-php-call>`_.

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Classes/DirectCallToMagicMethod             |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.8.4                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Major                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _disconnected-classes:

Disconnected Classes
++++++++++++++++++++

 One class is extending the other, but they do not use any features from one another. Basically, those two classes are using extends, but they are completely independent and may be separated. 

When using the 'extends' keyword, the newly created classes are now acting together and making one. This should be visible in calls from one class to the other, or simply by property usage : they can't live without each other.

On the other hand, two completely independent classes that are merged, although they should be kept separated.

.. code-block:: php

   <?php
   
   class A {
       private $pa = 1;
       
       function fooA() {
           $this->pa = 2;
       }
   }
   
   // class B and Class A are totally independent
   class B extends A {
       private $pb = 1;
       
       function fooB() {
           $this->pb = 2;
       }
   }
   
   
   // class C makes use of class A : it is dependent on the parent class
   class C extends A {
       private $pc = 1;
       
       function fooB() {
           $this->pc = 2 + $this->fooA();
       }
   }
   ?>




Suggestions
^^^^^^^^^^^

* Remove the extension
* Make actual usage of the classes, at least from one of them

Specs
^^^^^
+-------------+---------------------------------------------------+
| Short name  | Classes/DisconnectedClasses                       |
+-------------+---------------------------------------------------+
| Rulesets    | :ref:`ClassReview`                                |
+-------------+---------------------------------------------------+
| Exakt since | 1.8.9                                             |
+-------------+---------------------------------------------------+
| Php Version | All                                               |
+-------------+---------------------------------------------------+
| Severity    | Minor                                             |
+-------------+---------------------------------------------------+
| Time To Fix | Slow (1 hour)                                     |
+-------------+---------------------------------------------------+
| Precision   | High                                              |
+-------------+---------------------------------------------------+
| Examples    | :ref:`case-wordpress-classes-disconnectedclasses` |
+-------------+---------------------------------------------------+


.. _don't-send-$this-in-constructor:

Don't Send $this In Constructor
+++++++++++++++++++++++++++++++

 Don't use ``$this`` as an argument while in the `__construct() <https://www.php.net/manual/en/language.oop5.decon.php>`_. Until the constructor is finished, the object is not finished, and may be in an unstable state. Providing it to another code may lead to error. 

This is true when the receiving structure puts the incoming object immediately to work, and don't store it for later use. 

.. code-block:: php

   <?php
   
   // $this is only provided when Foo is constructed
   class Foo {
       private $bar = null;
       private $data = array();
       
       static public function build($data) {
           $foo = new Foo($data);
           // Can't build in one call. Must make it separate.
           $foo->finalize();
       }
   
       private function __construct($data) {
           // $this is provided too early
           $this->data = $data;
       }
       
       function finalize() {
           $this->bar = new Bar($this);
       }
   }
   
   // $this is provided too early, leading to error in Bar
   class Foo2 extends Foo {
       private $bar = null;
       private $data = array();
       
       function __construct($data) {
           // $this is provided too early
           $this->bar = new Bar($this);
           $this->data = $data;
       }
   }
   
   class Bar {
       function __construct(Foo $foo) {
           // the cache is now initialized with a wrong 
           $this->cache = $foo->getIt();
       }
   }
   
   ?>


See also `Don't pass this out of a constructor <http://www.javapractices.com/topic/TopicAction.do?Id=252>`_.



Suggestions
^^^^^^^^^^^

* Finish the constructor first, then call an external object.
* Sending $this should be made accessible in a separate method, so external objects may call it.
* Sending the current may be the responsibility of the method creating the object.

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Short name  | Classes/DontSendThisInConstructor                                                                               |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                                  |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.0.4                                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                             |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                                   |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                            |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-woocommerce-classes-dontsendthisinconstructor`, :ref:`case-contao-classes-dontsendthisinconstructor` |
+-------------+-----------------------------------------------------------------------------------------------------------------+


.. _don't-unset-properties:

Don't Unset Properties
++++++++++++++++++++++

 Avoid unsetting properties. They would go undefined, and raise more warnings. 

When getting rid of a property, assign it to null. This keeps the property in the object, yet allows existence check without errors.

.. code-block:: php

   <?php
   
   class Foo {
       public $a = 1;
   }
   
   $a = new Foo();
   
   var_dump((array) $a) ;
   // la propriété est reportée, et null
   // ['a' => null]
   
   unset($a->a);
   
   var_dump((array) $a) ;
   //Empty []
   
   // Check if a property exists
   var_dump($a->b === null);
   
   // Same result as above, but with a warning
   var_dump($a->c === null);
   
   ?>


This analysis works on properties and `static <https://www.php.net/manual/en/language.oop5.static.php>`_ properties. It also reports magic properties being unset.

Thanks for `Benoit Burnichon <https://twitter.com/BenoitBurnichon>`_ for the original idea.



Suggestions
^^^^^^^^^^^

* Never unset properties : set it to null or its default value instead
* Make the property an array, and set/unset its index

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------+
| Short name  | Classes/DontUnsetProperties                                                                    |
+-------------+------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Top10`, :ref:`php-cs-fixable`               |
+-------------+------------------------------------------------------------------------------------------------+
| Exakt since | 1.2.3                                                                                          |
+-------------+------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                            |
+-------------+------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                          |
+-------------+------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                  |
+-------------+------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                           |
+-------------+------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-vanilla-classes-dontunsetproperties`, :ref:`case-typo3-classes-dontunsetproperties` |
+-------------+------------------------------------------------------------------------------------------------+


.. _dynamic-classes:

Dynamic Classes
+++++++++++++++

 Dynamic calls of classes.

.. code-block:: php

   <?php
   
   class x {
       static function staticMethod() {}
   }
   
   $class = 'x';
   $class::staticMethod();
   
   ?>

Specs
^^^^^
+-------------+----------------------+
| Short name  | Classes/DynamicClass |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _dynamic-class-constant:

Dynamic Class Constant
++++++++++++++++++++++

 Dynamic calls to class constants.

Constant may be dynamically called with the `constant() <https://www.php.net/constant>`_ function.

.. code-block:: php

   <?php
       // Dynamic access to 'E_ALL'
       echo constant('E_ALL');
       
       interface i {
           const MY_CONSTANT  = 1;
       }
   
       // Dynamic access to 'E_ALL'
       echo constant('i::MY_CONSTANT');
   
   ?>

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Classes/DynamicConstantCall |
+-------------+-----------------------------+
| Rulesets    | :ref:`CE`                   |
+-------------+-----------------------------+
| Exakt since | 0.8.4                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Slow (1 hour)               |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _dynamic-methodcall:

Dynamic Methodcall
++++++++++++++++++

 Dynamic calls to class methods.

.. code-block:: php

   <?php
   
   class x {
       static public function foo() {}
              public function bar() {}
   }
   
   $staticmethod = 'foo';
   // dynamic static method call to x::foo()
   x::$staticmethod();
   
   $method = 'bar';
   // dynamic method call to bar()
   $object = new x();
   $object->$method();
   
   ?>

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Classes/DynamicMethodCall |
+-------------+---------------------------+
| Rulesets    | :ref:`CE`                 |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _dynamic-new:

Dynamic New
+++++++++++

 Dynamic instantiation of classes.

.. code-block:: php

   <?php
     $object = new $classname()
   ?>

.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Classes/DynamicNew |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _dynamic-property:

Dynamic Property
++++++++++++++++

 Dynamic access to class property.

.. code-block:: php

   <?php
   
   class x {
       static public $foo = 1;
              public $bar = 2;
   }
   
   $staticproperty = 'foo';
   // dynamic static property call to x::$foo
   echo x::${$staticproperty};
   
   $property = 'bar';
   // dynamic property call to bar()
   $object = new x();
   $object->$property = 4;
   
   ?>

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Classes/DynamicPropertyCall |
+-------------+-----------------------------+
| Rulesets    | :ref:`CE`                   |
+-------------+-----------------------------+
| Exakt since | 0.8.4                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Slow (1 hour)               |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _dynamic-self-calls:

Dynamic Self Calls
++++++++++++++++++

 A class that calls itself dynamically. This may be property or methods. 

Calling itself dynamically happens when a class is configured to call various properties (container) or methods.  

.. code-block:: php

   <?php
   
   class x {
       function foo() {
           $f = 'goo';
           return $this->$f();
       }
   
       function goo() {
           return rand(1, 10);
       }
   }
   ?>


This rule is mostly useful internally, to side some special situations.

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Classes/DynamicSelfCalls |
+-------------+--------------------------+
| Rulesets    | none                     |
+-------------+--------------------------+
| Exakt since | 2.1.1                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Quick (30 mins)          |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _empty-classes:

Empty Classes
+++++++++++++

 Classes that do no define anything at all. This is probably dead code.

Classes that are directly derived from an exception are omitted.

.. code-block:: php

   <?php
   
   //Empty class
   class foo extends bar {}
   
   //Not an empty class
   class foo2 extends bar {
       const FOO = 2;
   }
   
   //Not an empty class, as derived from Exception
   class barException extends \Exception {}
   
   ?>



Suggestions
^^^^^^^^^^^

* Remove an empty class :it is probably dead code.
* Add some code to the class to make it concrete.

Specs
^^^^^
+-------------+------------------------------------------+
| Short name  | Classes/EmptyClass                       |
+-------------+------------------------------------------+
| Rulesets    | :ref:`Analyze`                           |
+-------------+------------------------------------------+
| Exakt since | 0.8.4                                    |
+-------------+------------------------------------------+
| Php Version | All                                      |
+-------------+------------------------------------------+
| Severity    | Minor                                    |
+-------------+------------------------------------------+
| Time To Fix | Quick (30 mins)                          |
+-------------+------------------------------------------+
| Precision   | High                                     |
+-------------+------------------------------------------+
| Examples    | :ref:`case-wordpress-classes-emptyclass` |
+-------------+------------------------------------------+


.. _class-should-be-final-by-ocramius:

Class Should Be Final By Ocramius
+++++++++++++++++++++++++++++++++

 'Make your classes always final, if they implement an interface, and no other public methods are defined'.

When a class should be final, as explained by ``Ocramius`` (``Marco Pivetta``).

.. code-block:: php

   <?php
   
   interface i1 {
       function i1() ;
   }
   
   // Class should final, as its public methods are in an interface
   class finalClass implements i1 {
       // public interface 
       function i1 () {}
       
       // private method
       private function a1 () {}
   }
   
   ?>


See also `When to declare classes final <http://ocramius.github.io/blog/when-to-declare-classes-final/>`_.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Classes/FinalByOcramius |
+-------------+-------------------------+
| Rulesets    | :ref:`Analyze`          |
+-------------+-------------------------+
| Exakt since | 0.9.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _final-class-usage:

Final Class Usage
+++++++++++++++++

 List of all final classes being used.

final may be applied to classes and methods.

.. code-block:: php

   <?php
   class BaseClass {
      public function test() {
          echo 'BaseClass::test() called'.PHP_EOL;
      }
      
      final public function moreTesting() {
          echo 'BaseClass::moreTesting() called'.PHP_EOL;
      }
   }
   
   class ChildClass extends BaseClass {
      public function moreTesting() {
          echo 'ChildClass::moreTesting() called'.PHP_EOL;
      }
   }
   // Results in Fatal error: Cannot override final method BaseClass::moreTesting()
   ?>


See also `Final Keyword <https://www.php.net/manual/en/language.oop5.final.php>`_.

Specs
^^^^^
+-------------+--------------------------------------------+
| Short name  | Classes/Finalclass                         |
+-------------+--------------------------------------------+
| Rulesets    | :ref:`ClassReview`, :ref:`LintButWontExec` |
+-------------+--------------------------------------------+
| Exakt since | 0.8.4                                      |
+-------------+--------------------------------------------+
| Php Version | All                                        |
+-------------+--------------------------------------------+
| Severity    | Minor                                      |
+-------------+--------------------------------------------+
| Time To Fix | Slow (1 hour)                              |
+-------------+--------------------------------------------+
| Precision   | High                                       |
+-------------+--------------------------------------------+


.. _final-methods-usage:

Final Methods Usage
+++++++++++++++++++

 List of all final methods being used.

final may be applied to classes and methods.

.. code-block:: php

   <?php
   class BaseClass {
      public function test() {
          echo 'BaseClass::test() called'.PHP_EOL;
      }
      
      final public function moreTesting() {
          echo 'BaseClass::moreTesting() called'.PHP_EOL;
      }
   }
   
   class ChildClass extends BaseClass {
      public function moreTesting() {
          echo 'ChildClass::moreTesting() called'.PHP_EOL;
      }
   }
   // Results in Fatal error: Cannot override final method BaseClass::moreTesting()
   ?>


See also `Final Keyword <https://www.php.net/manual/en/language.oop5.final.php>`_.

Specs
^^^^^
+-------------+--------------------------------------------+
| Short name  | Classes/Finalmethod                        |
+-------------+--------------------------------------------+
| Rulesets    | :ref:`ClassReview`, :ref:`LintButWontExec` |
+-------------+--------------------------------------------+
| Exakt since | 0.8.4                                      |
+-------------+--------------------------------------------+
| Php Version | All                                        |
+-------------+--------------------------------------------+
| Severity    | Minor                                      |
+-------------+--------------------------------------------+
| Time To Fix | Slow (1 hour)                              |
+-------------+--------------------------------------------+
| Precision   | High                                       |
+-------------+--------------------------------------------+


.. _final-private-methods:

Final Private Methods
+++++++++++++++++++++

 PHP's private methods cannot be overwritten, as they are dedicated to the current class. That way, the ``final`` keyword is useless. 

PHP 8.0 warns when it finds such a method.

.. code-block:: php

   <?php
   
   class foo {
       // Final and private both prevent child classes to overwrite the method
       final private function bar() {}
   
       // Final and protected (or public) keep this method available, but not overwritable
       final protected function bar() {}
   }
   
   ?>


See also `Final Keyword <https://www.php.net/manual/en/language.oop5.final.php>`_.



Suggestions
^^^^^^^^^^^

* Remove the final keyword
* Relax visibility

Specs
^^^^^
+-------------+----------------------------------------------------------+
| Short name  | Classes/FinalPrivate                                     |
+-------------+----------------------------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`ClassReview`, :ref:`CompatibilityPHP80` |
+-------------+----------------------------------------------------------+
| Exakt since | 2.2.0                                                    |
+-------------+----------------------------------------------------------+
| Php Version | All                                                      |
+-------------+----------------------------------------------------------+
| Severity    | Minor                                                    |
+-------------+----------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                          |
+-------------+----------------------------------------------------------+
| Precision   | Very high                                                |
+-------------+----------------------------------------------------------+


.. _fossilized-method:

Fossilized Method
+++++++++++++++++

 A method is fossilized when it is overwritten so often that changing a default value, a return type or an argument type is getting difficult.

This happens when a class is extended. When a method is overwritten once, it may be easy to update the signature in two places. The more methods are overwriting a `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ method, the more difficult it is to update it.

This analysis counts the number of times a method is overwritten, and report any method that is ovrewritten more than 6 times. This threshold may be configured.

.. code-block:: php

   <?php
   
   class x1 {
       // foo1() is never overwritten. It is easy to update.
       function foo1() {}
   
       // foo7() is overwritten seven times. It is hard to update.
       function foo7() {}
   }
   
   // classes x2 to x7, all overwrite foo7();
   // Only x2 is presente here.
   class x2 extends x1 {
       function foo7() {}
   }
   
   ?>

+------------------------+---------+---------+---------------------------------------------------------------------------------+
| Name                   | Default | Type    | Description                                                                     |
+------------------------+---------+---------+---------------------------------------------------------------------------------+
| fossilizationThreshold | 6       | integer | Minimal number of overwriting methods to consider a method difficult to update. |
+------------------------+---------+---------+---------------------------------------------------------------------------------+



Specs
^^^^^
+-------------+---------------------------------------+
| Short name  | Classes/FossilizedMethod              |
+-------------+---------------------------------------+
| Rulesets    | :ref:`ClassReview`, :ref:`Typechecks` |
+-------------+---------------------------------------+
| Exakt since | 2.0.6                                 |
+-------------+---------------------------------------+
| Php Version | All                                   |
+-------------+---------------------------------------+
| Severity    | Minor                                 |
+-------------+---------------------------------------+
| Time To Fix | Quick (30 mins)                       |
+-------------+---------------------------------------+
| Precision   | High                                  |
+-------------+---------------------------------------+


.. _class-has-fluent-interface:

Class Has Fluent Interface
++++++++++++++++++++++++++

 Mark a class as such when it contains at least one fluent method. A fluent method is a method that returns `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_, for chaining.

.. code-block:: php

   <?php
   
   class foo {
       private $count = 0;
   
       function a() {
           ++$this->count;
           return $this;
       }
   
       function b() {
           $this->count += 2;
           return $this;
       }
   
       function c() {
           return $this->count;
       }
   }
   
   $bar = new foo();
   print $bar->a()
             ->b()
             ->c();
   
   // display 3 (1 + 2).
   
   ?>


See also `The basics of Fluent interfaces in PHP <https://tournasdimitrios1.wordpress.com/2011/04/11/the-basics-of-fluent-interfaces-in-php/>`_ and
         `Fluent interface are evil <https://ocramius.github.io/blog/fluent-interfaces-are-evil/>`_

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Classes/HasFluentInterface |
+-------------+----------------------------+
| Rulesets    | none                       |
+-------------+----------------------------+
| Exakt since | 0.8.4                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Slow (1 hour)              |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _has-magic-property:

Has Magic Property
++++++++++++++++++

 The class has defined one of the magic methods.

The magic methods are  : `__call() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__callStatic() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__get() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__set() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__isset() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__unset() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__sleep() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__wakeup() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__toString() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__invoke() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__set_state() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__clone() <https://www.php.net/manual/en/language.oop5.magic.php>`_ and `__debugInfo() <https://www.php.net/manual/en/language.oop5.magic.php>`_.

`__construct() <https://www.php.net/manual/en/language.oop5.decon.php>`_ and `__destruct() <https://www.php.net/manual/en/language.oop5.decon.php>`_ are omitted here. 

.. code-block:: php

   <?php
   
   class WithMagic {
       // some more methods, const or properties
       
       public function __get() {
           // doSomething();
       }
   }
   
   ?>


See also `Property overloading <https://www.php.net/manual/en/language.oop5.overloading.php#language.oop5.overloading.members>`_.

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Classes/HasMagicProperty |
+-------------+--------------------------+
| Rulesets    | :ref:`CE`                |
+-------------+--------------------------+
| Exakt since | 0.8.4                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Slow (1 hour)            |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _hidden-nullable:

Hidden Nullable
+++++++++++++++

 Argument with default value of null are nullable. Even when the ``null`` typehint (PHP 8.0), or the ``?`` operator are not used, setting the default value to null is allowed, and makes the argument nullable.

This doesn't happen with properties : they must be defined with the nullable type to accept a ``null``value as default value.

This doesn't happen with constant, which can't be typehinted. 

.. code-block:: php

   <?php
   
   // explicit nullable parameter $s
   function bar(?string $s = null) {
   
   // implicit nullable parameter $s
   function foo(string $s = null) {
       echo $s ?? 'NULL-value';
   }
   
   // both display NULL-value
   foo(); 
   foo(null);
   
   ?>


See also `Nullable types <https://wiki.php.net/rfc/nullable_types>`_ and `Type declaration <https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration>`_.


Suggestions
^^^^^^^^^^^

* Change the default value to a compatible literal : for example, ``string $s = ''``
* Add the explicit ``?`` nullable operator, or ``null``with PHP 8.0
* Remove the default value

Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Classes/HiddenNullable             |
+-------------+------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`ClassReview` |
+-------------+------------------------------------+
| Exakt since | 2.1.0                              |
+-------------+------------------------------------+
| Php Version | All                                |
+-------------+------------------------------------+
| Severity    | Minor                              |
+-------------+------------------------------------+
| Time To Fix | Quick (30 mins)                    |
+-------------+------------------------------------+
| Precision   | High                               |
+-------------+------------------------------------+


.. _identical-methods:

Identical Methods
+++++++++++++++++

 When the `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ class and the child class have the same method, the child might drop it. This reduces code duplication. 

Duplicate code in methods is often the results of code evolution, where a method was copied with the hierarchy, but the original wasn't removed.

This doesn't apply to `private` methods, which are reserved for one class.

.. code-block:: php

   <?php
   
   class a {
       public function foo() {
           return rand(0, 100);
       }
   }
   
   class b extends a {
       public function foo() {
           return rand(0, 100);
       }
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Drop the method from the parent class, in particular if only one child uses the method.
* Drop the method from the child class, in particular if there are several children class
* Use an abstract method, and make sure every child has its own implementation
* Modify one of the methods so they are different

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Classes/IdenticalMethods |
+-------------+--------------------------+
| Rulesets    | none                     |
+-------------+--------------------------+
| Exakt since | 1.8.2                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Quick (30 mins)          |
+-------------+--------------------------+
| Precision   | Medium                   |
+-------------+--------------------------+


.. _immutable-signature:

Immutable Signature
+++++++++++++++++++

 Overwrites makes refactoring a method signature difficult. PHP enforces compatible signature, by checking if arguments have the same type, reference and default values.

In PHP 7.3, typehint had to be the same, or dropped. In PHP 7.4, typehint may be contravariant (arguments), or covariant (returntype). 

This analysis may be configured with ``maxOverwrite``. By default, a minimum of 8 overwritten methods is considered difficult to update.

.. code-block:: php

   <?php
   
   // Changing any of the four foo() method signature will trigger a PHP warning
   class a {
       function foo($a) {}
   }
   
   class ab1 extends a {
       // four foo() methods have to be refactored at the same time!
       function foo($ab1) {}
   }
   
   class ab2 extends a {
       function foo($ab2) {}
   }
   
   class ab3 extends ab1 {
       function foo($abc1) {}
   }
   
   ?>


When refactoring a method, all the related methodcall may have to be updated too. Adding a type, a default value, or a new argument with default value won't affect the calls, but only the definitions. Otherwise, calls will also have to be updated.

IDE may help with signature refactoring, such as `Refactoring code <https://www.jetbrains.com/help/phpstorm/refactoring-source-code.html>`_.

See also `Covariance and contravariance (computer science) <https://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)>`_, `extends <https://www.php.net/manual/en/language.oop5.basic.php#language.oop5.basic.extends>`_.

+--------------+---------+---------+-------------------------------------------------------------------------------------------------------+
| Name         | Default | Type    | Description                                                                                           |
+--------------+---------+---------+-------------------------------------------------------------------------------------------------------+
| maxOverwrite | 8       | integer | Minimal number of method overwrite to consider that any refactor on the method signature is now hard. |
+--------------+---------+---------+-------------------------------------------------------------------------------------------------------+



Specs
^^^^^
+-------------+----------------------------+
| Short name  | Classes/ImmutableSignature |
+-------------+----------------------------+
| Rulesets    | :ref:`CE`                  |
+-------------+----------------------------+
| Exakt since | 1.9.9                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Quick (30 mins)            |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _implemented-methods-are-public:

Implemented Methods Are Public
++++++++++++++++++++++++++++++

 Class methods that are defined in an interface must be public. They cannot be either private, nor protected.

This error is not reported by lint, but is reported at execution time.

.. code-block:: php

   <?php
   
   interface i {
       function foo();
   }
   
   class X {
       // This method is defined in the interface : it must be public
       protected function foo() {}
       
       // other methods may be private
       private function bar() {}
   }
   
   ?>


See also `Interfaces <https://www.php.net/manual/en/language.oop5.interfaces.php>`_ and `Interfaces - the next level of abstraction <https://phpenthusiast.com/object-oriented-php-tutorials/interfaces>`_.



Suggestions
^^^^^^^^^^^

* Make the implemented method public

Specs
^^^^^
+-------------+-------------------------------------+
| Short name  | Classes/ImplementedMethodsArePublic |
+-------------+-------------------------------------+
| Rulesets    | :ref:`Analyze`                      |
+-------------+-------------------------------------+
| Exakt since | 0.11.5                              |
+-------------+-------------------------------------+
| Php Version | All                                 |
+-------------+-------------------------------------+
| Severity    | Major                               |
+-------------+-------------------------------------+
| Time To Fix | Instant (5 mins)                    |
+-------------+-------------------------------------+
| Precision   | High                                |
+-------------+-------------------------------------+


.. _implement-is-for-interface:

Implement Is For Interface
++++++++++++++++++++++++++

 With class heritage, implements should be used for interfaces, and extends with classes.

PHP defers the implements check until execution : the code in example does lint, but won,t run.

.. code-block:: php

   <?php
   
   class x {
       function foo() {}
   }
   
   interface y {
       function foo();
   }
   
   // Use implements with an interface
   class z implements y {}
   
   // Implements is for an interface, not a class
   class z implements x {}
   
   ?>



Suggestions
^^^^^^^^^^^

* Create an interface from the class, and use it with the implements keyword

Specs
^^^^^
+-------------+---------------------------------+
| Short name  | Classes/ImplementIsForInterface |
+-------------+---------------------------------+
| Rulesets    | :ref:`Analyze`                  |
+-------------+---------------------------------+
| Exakt since | 0.8.4                           |
+-------------+---------------------------------+
| Php Version | All                             |
+-------------+---------------------------------+
| Severity    | Minor                           |
+-------------+---------------------------------+
| Time To Fix | Quick (30 mins)                 |
+-------------+---------------------------------+
| Precision   | High                            |
+-------------+---------------------------------+


.. _incompatible-signature-methods:

Incompatible Signature Methods
++++++++++++++++++++++++++++++

 Methods should have the same signature when being overwritten.

The same signatures means the children class must have : 
+ the same name
+ the same visibility or less restrictive
+ the same typehint or removed
+ the same default value or removed
+ a reference like its `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_

This problem emits a fatal error, for abstract methods, or a warning error, for normal methods. Yet, it is difficult to lint, because classes are often stored in different files. As such, PHP do lint each file independently, as unknown `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ classes are not checked if not present. Yet, when executing the code, PHP lint the actual code and may encounter a fatal error.

.. code-block:: php

   <?php
   
   class a {
       public function foo($a = 1) {}
   }
   
   class ab extends a {
       // foo is overloaded and now includes a default value for $a
       public function foo($a) {}
   }
   
   ?>


See also `Object Inheritance <https://www.php.net/manual/en/language.oop5.inheritance.php>`_.


Suggestions
^^^^^^^^^^^

* Make signatures compatible again

Specs
^^^^^
+-------------+----------------------------------------------------+
| Short name  | Classes/IncompatibleSignature                      |
+-------------+----------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`LintButWontExec`             |
+-------------+----------------------------------------------------+
| Exakt since | 1.3.3                                              |
+-------------+----------------------------------------------------+
| Php Version | 7.4-                                               |
+-------------+----------------------------------------------------+
| Severity    | Critical                                           |
+-------------+----------------------------------------------------+
| Time To Fix | Quick (30 mins)                                    |
+-------------+----------------------------------------------------+
| Precision   | High                                               |
+-------------+----------------------------------------------------+
| Examples    | :ref:`case-suitecrm-classes-incompatiblesignature` |
+-------------+----------------------------------------------------+


.. _incompatible-signature-methods-with-covariance:

Incompatible Signature Methods With Covariance
++++++++++++++++++++++++++++++++++++++++++++++

 Methods should have the compatible signature when being overwritten.

The same signatures means the children class must have : 
+ the same name
+ the same visibility or less restrictive
+ the same contravariant typehint or removed
+ the same covariant return typehint or removed
+ the same default value or removed
+ a reference like its `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_

This problem emits a fatal error, for abstract methods, or a warning error, for normal methods. Yet, it is difficult to lint, because classes are often stored in different files. As such, PHP do lint each file independently, as unknown `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ classes are not checked if not present. Yet, when executing the code, PHP lint the actual code and may encounter a fatal error.

.. code-block:: php

   <?php
   
   class a {
       public function foo($a = 1) {}
   }
   
   class ab extends a {
       // foo is overloaded and now includes a default value for $a
       public function foo($a) {}
   }
   
   ?>


See also `Object Inheritance <https://www.php.net/manual/en/language.oop5.inheritance.php>`_,
         `PHP RFC: Covariant Returns and Contravariant Parameters <https://wiki.php.net/rfc/covariant-returns-and-contravariant-parameters>`_ and 
         :ref:`incompatible-signature-methods`. 


Suggestions
^^^^^^^^^^^

* Make signatures compatible again

Specs
^^^^^
+-------------+------------------------------------------------------+
| Short name  | Classes/IncompatibleSignature74                      |
+-------------+------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                       |
+-------------+------------------------------------------------------+
| Exakt since | 1.3.3                                                |
+-------------+------------------------------------------------------+
| Php Version | 7.4+                                                 |
+-------------+------------------------------------------------------+
| Severity    | Critical                                             |
+-------------+------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                      |
+-------------+------------------------------------------------------+
| Precision   | High                                                 |
+-------------+------------------------------------------------------+
| Examples    | :ref:`case-suitecrm-classes-incompatiblesignature74` |
+-------------+------------------------------------------------------+


.. _instantiating-abstract-class:

Instantiating Abstract Class
++++++++++++++++++++++++++++

 PHP cannot instantiate an abstract class. 

The classes are actually abstract classes, and should be derived into a concrete class to be instantiated.

.. code-block:: php

   <?php
   
   abstract class Foo {
       protected $a;
   }
   
   class Bar extends Foo {
       protected $b;
   }
   
   // instantiating a concrete class.
   new Bar();
   
   // instantiating an abstract class.
   // In real life, this is not possible also because the definition and the instantiation are in the same file
   new Foo();
   
   ?>


See also `Class Abstraction <https://www.php.net/abstract>`_.

Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Classes/InstantiatingAbstractClass |
+-------------+------------------------------------+
| Rulesets    | :ref:`Analyze`                     |
+-------------+------------------------------------+
| Exakt since | 0.8.4                              |
+-------------+------------------------------------+
| Php Version | All                                |
+-------------+------------------------------------+
| Severity    | Major                              |
+-------------+------------------------------------+
| Time To Fix | Quick (30 mins)                    |
+-------------+------------------------------------+
| Precision   | High                               |
+-------------+------------------------------------+


.. _insufficient-property-typehint:

Insufficient Property Typehint
++++++++++++++++++++++++++++++

 The typehint used for a class property doesn't cover all it usage.

The typehint is insufficient when a undefined method is called, or if members are access while the typehint is an interface.

.. code-block:: php

   <?php
   
   class A {
       function a1() {}
   }
   
   // PHP 7.4 and more recent
   class B {
       private A $a = null;
       
       function b2() {
           // this method is available in A
           $this->a->a1();
           // this method is NOT available in A
           $this->a->a2();
       }
   }
   
   // Supported by all PHP versions
   class C {
       private $a = null;
   
       function __construct(A $a) {
           $this->a = $a;
       }
       
       function b2() {
           // this method is available in A
           $this->a->a1();
           // this method is NOT available in A
           $this->a->a2();
       }
   }
   
   ?>


This analysis relies on typehinted properties, as introduced in PHP 7.4. It also relies on typehinted assignations at construct time : the typehint of the assigned argument will be used as the property typehint. Getters and setters are not considered here. 



Suggestions
^^^^^^^^^^^

* Change the typehint to match the actual usage of the object in the class.

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Classes/InsufficientPropertyTypehint |
+-------------+--------------------------------------+
| Rulesets    | :ref:`ClassReview`                   |
+-------------+--------------------------------------+
| Exakt since | 2.0.2                                |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Minor                                |
+-------------+--------------------------------------+
| Time To Fix | Quick (30 mins)                      |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _integer-as-property:

Integer As Property
+++++++++++++++++++

 It is backward incompatible to use integers are property names. This feature was introduced in PHP 7.2.

If the code must be compatible with previous versions, avoid casting arrays to object.

.. code-block:: php

   <?php
   
   // array to object
   $arr = [0 => 1];
   $obj = (object) $arr;
   var_dump(
       $obj,
       $obj->{'0'}, // PHP 7.2+ accessible
       $obj->{0} // PHP 7.2+ accessible
   
       $obj->{'b'}, // always been accessible
   );
   ?>


See also `PHP RFC: Convert numeric keys in object/array casts <https://wiki.php.net/rfc/convert_numeric_keys_in_object_array_casts>`_.

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Classes/IntegerAsProperty                                                                                                                                        |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70`, :ref:`CompatibilityPHP71` |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.0.4                                                                                                                                                            |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | 7.2+                                                                                                                                                             |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                                                                            |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                                                                                    |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                                             |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. _is-a-php-magic-property:

Is A PHP Magic Property
+++++++++++++++++++++++

 Mark properties usage when they are actually a magic call. 

.. code-block:: php

   <?php
   
   class magicProperty {
       public $b;
       
       function __get($name) {
           // do something with the value
       }
   
       function foo() {
           $this->a;
           $this->b;
       }
   }
   
   ?>


See also `Magic Methods <https://www.php.net/manual/en/language.oop5.magic.php>`_.

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Classes/IsaMagicProperty |
+-------------+--------------------------+
| Rulesets    | :ref:`CE`                |
+-------------+--------------------------+
| Exakt since | 0.12.17                  |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Slow (1 hour)            |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _is-an-extension-class:

Is An Extension Class
+++++++++++++++++++++

 Those classes belongs to a PHP Extensions.

.. code-block:: php

   <?php
   
   // This is a native PHP class
   $o = new Stdclass();
   
   // This is not a native PHP class
   $o = new Elephpant();
   
   ?>

Specs
^^^^^
+-------------+--------------------+
| Short name  | Classes/IsExtClass |
+-------------+--------------------+
| Rulesets    | none               |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _is-interface-method:

Is Interface Method
+++++++++++++++++++

 Mark a method as part of an interface that the current class implements.

.. code-block:: php

   <?php
   
   interface i {
       function i20();
   }
   
   class x implements i {
       // This is an interface method
       function i20() {}
   
       // This is not an interface method
       function x20() {}
   }
   
   ?>

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Classes/IsInterfaceMethod |
+-------------+---------------------------+
| Rulesets    | none                      |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _is-not-class-family:

Is Not Class Family
+++++++++++++++++++

 Mark a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ method call as inside the family of classes. Children are not considered here.

.. code-block:: php

   <?php
   
   class a {
       function familyMethod() {}
   }
   
   classs b {
       function foo() {
           self::familyMethod(); // This is a call to a family method
           b::notAFamilyMethod(); // This is a call to a method of a class outside the family
       }
   }
   ?>

Specs
^^^^^
+-------------+---------------------+
| Short name  | Classes/IsNotFamily |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.8.4               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _is-upper-family:

Is Upper Family
+++++++++++++++

 Does the `static <https://www.php.net/manual/en/language.oop5.static.php>`_ call is made within the current hierarchy of class, or, is it made in the class, in the children or outside. 

This applies to `static <https://www.php.net/manual/en/language.oop5.static.php>`_ methodcalls, property accesses and class constants.

.. code-block:: php

   <?php
   
   class AAA            { function inAAA() {} }   // upper family : grand-parent
   class AA extends AAA { function inAA()  {} }   // upper family : parent
   class A  extends AA  { function inA()  {} }    // current family
   class B  extends A   { function inB()  {} }    // lower family
   class C              { function inC()  {} }    // outside family
   
   ?>

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Classes/IsUpperFamily |
+-------------+-----------------------+
| Rulesets    | none                  |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _locally-unused-property:

Locally Unused Property
+++++++++++++++++++++++

 Those properties are defined in a class, and this class doesn't have any method that makes use of them. 

While this is syntactically correct, it is unusual that defined resources are used in a child class. It may be worth moving the definition to another class, or to move accessing methods to the class.

.. code-block:: php

   <?php
   
   class foo {
       public $unused, $used;// property $unused is never used in this class
       
       function bar() {
           $this->used++; // property $used is used in this method
       }
   }
   
   class foofoo extends foo {
       function bar() {
           $this->unused++; // property $unused is used in this method, but defined in the parent class
       }
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Move the property definition to the child classes
* Move some of the child method, using the property, to the parent class

Specs
^^^^^
+-------------+-------------------------------+
| Short name  | Classes/LocallyUnusedProperty |
+-------------+-------------------------------+
| Rulesets    | :ref:`Dead code <dead-code>`  |
+-------------+-------------------------------+
| Exakt since | 0.8.4                         |
+-------------+-------------------------------+
| Php Version | All                           |
+-------------+-------------------------------+
| Severity    | Minor                         |
+-------------+-------------------------------+
| Time To Fix | Slow (1 hour)                 |
+-------------+-------------------------------+
| Precision   | High                          |
+-------------+-------------------------------+


.. _locally-used-property:

Locally Used Property
+++++++++++++++++++++

 Properties that are used in the class where they are defined. 

.. code-block:: php

   <?php
   
   class foo {
       public $unused, $used;// property $unused is never used in this class
       
       function bar() {
           $this->used++; // property $used is used in this method
       }
   }
   
   $foo = new Foo();
   $foo->unused = 'here'; // property $unused is used outside the class definition
   ?>

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Classes/LocallyUsedProperty |
+-------------+-----------------------------+
| Rulesets    | none                        |
+-------------+-----------------------------+
| Exakt since | 0.8.4                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Slow (1 hour)               |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _magic-methods:

Magic Methods
+++++++++++++

 List of PHP magic methods being used. The magic methods are 

`__call() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__callStatic() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__get() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__set() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__isset() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__unset() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__sleep() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__wakeup() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__toString() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__invoke() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__set_state() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__clone() <https://www.php.net/manual/en/language.oop5.magic.php>`_ and `__debugInfo() <https://www.php.net/manual/en/language.oop5.magic.php>`_.

``__construct`` and ``__destruct`` are omitted here, as they are routinely used to create and destroy objects.

.. code-block:: php

   <?php
   
   class foo{
       // PHP Magic method, called when cloning an object.
       function __clone() {}
   }
   ?>


See also `Magic Method <https://www.php.net/manual/en/language.oop5.magic.php>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Classes/MagicMethod |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.8.4               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _magic-properties:

Magic Properties
++++++++++++++++

 List of magic properties used in the code

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Classes/MagicProperties |
+-------------+-------------------------+
| Rulesets    | none                    |
+-------------+-------------------------+
| Exakt since | 1.9.5                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Quick (30 mins)         |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _assign-default-to-properties:

Assign Default To Properties
++++++++++++++++++++++++++++

 Properties may be assigned default values at declaration time. Such values may be later modified, if needed. 

.. code-block:: php

   <?php
   
   class foo {
       private $propertyWithDefault = 1;
       private $propertyWithoutDefault;
       private $propertyThatCantHaveDefault;
       
       public function __construct() {
           // Skip this extra line, and give the default value above
           $this->propertyWithoutDefault = 1;
   
           // Static expressions are available to set up simple computation at definition time.
           $this->propertyWithoutDefault = OtherClass::CONSTANT + 1;
   
           // Arrays, just like scalars, may be set at definition time
           $this->propertyWithoutDefault = [1,2,3];
   
           // Objects or resources can't be made default. That is OK.
           $this->propertyThatCantHaveDefault = fopen('/path/to/file.txt');
           $this->propertyThatCantHaveDefault = new Fileinfo();
       }
   }
   
   ?>


Default values will save some instructions in the constructor, and makes the value obvious in the code. 

Suggestions
^^^^^^^^^^^

* Add a default value whenever possible. This is easy for scalars, and array()

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------------------------+
| Short name  | Classes/MakeDefault                                                                                                       |
+-------------+---------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                                            |
+-------------+---------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                                     |
+-------------+---------------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                                       |
+-------------+---------------------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                                     |
+-------------+---------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                                          |
+-------------+---------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                      |
+-------------+---------------------------------------------------------------------------------------------------------------------------+
| ClearPHP    | `use-properties-default-values <https://github.com/dseguy/clearPHP/tree/master/rules/use-properties-default-values.md>`__ |
+-------------+---------------------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-livezilla-classes-makedefault`, :ref:`case-phpmyadmin-classes-makedefault`                                     |
+-------------+---------------------------------------------------------------------------------------------------------------------------+


.. _make-global-a-property:

Make Global A Property
++++++++++++++++++++++

 Calling global (or $GLOBALS) in methods is slower and less testable than setting the global to a property, and using this property.

Using properties is slightly faster than calling global or $GLOBALS, though the gain is not important. 

Setting the property in the constructor (or in a factory), makes the class easier to test, as there is now a single point of configuration.

.. code-block:: php

   <?php 
   
   // Wrong way
   class fooBad {
       function x() {
           global $a;
           $a->do();
           // Or $GLOBALS['a']->do();
       }
   }
   
   class fooGood {
       private $bar = null;
       
       function __construct() {
           global $bar; 
           $this->bar = $bar;
           // Even better, do this via arguments
       }
       
       function x() {
           $this->a->do();
       }
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Avoid using global variables, and use properties instead
* Remove the usage of these global variables

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Classes/MakeGlobalAProperty |
+-------------+-----------------------------+
| Rulesets    | :ref:`Analyze`              |
+-------------+-----------------------------+
| Exakt since | 0.8.4                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Slow (1 hour)               |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _make-magic-concrete:

Make Magic Concrete
+++++++++++++++++++

 Speed up execution by replacing magic calls by concrete properties. 

Magic properties are managed dynamically, with ``__get``and ``__set``. They replace property access by a methodcall, and they are much slower than the first. 

When a property name is getting used more often, it is worth creating a concrete property, and skip the method call. The threshold for 'magicMemberUsage' is 1, by default. 

.. code-block:: php

   <?php
   
   class x {
       private $values = array('a' => 1,
                               'b' => 2);
                               
       function __get($name) {
           return $this->values[$name] ?? '';
       }
   }
   
   $x = new x();
   // Access to 'a' is repeated in the code, at least 'magicMemberUsage' time (cf configuration below)
   echo $x->a; 
   
   ?>


See also :ref:`memoize-magiccall`.  



Suggestions
^^^^^^^^^^^

* Make frequently used properties concrete; keep the highly dynamic as magic

+------------------+---------+---------+---------------------------------------------------------------------------------------+
| Name             | Default | Type    | Description                                                                           |
+------------------+---------+---------+---------------------------------------------------------------------------------------+
| magicMemberUsage | 1       | integer | Minimal number of magic member usage across the code, to trigger a concrete property. |
+------------------+---------+---------+---------------------------------------------------------------------------------------+



Specs
^^^^^
+-------------+---------------------------+
| Short name  | Classes/MakeMagicConcrete |
+-------------+---------------------------+
| Rulesets    | :ref:`Performances`       |
+-------------+---------------------------+
| Exakt since | 1.8.3                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _method-is-overwritten:

Method Is Overwritten
+++++++++++++++++++++

 This marks an method that is overwritten in a child class. 

.. code-block:: php

   <?php
   
   class A {
       function intactMethodA() {}         // Not overwritten in any children
       function overwrittenMethodInAA() {} // overwritten in AA
   }
   
   class AA extends A {
       function intactMethodAA() {}        // Not overwritten, because no extends
       function overwrittenMethodInAA() {} // Not overwritten, because no extends
   }
   
   ?>

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Classes/MethodIsOverwritten |
+-------------+-----------------------------+
| Rulesets    | none                        |
+-------------+-----------------------------+
| Exakt since | 0.10.9                      |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Slow (1 hour)               |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _method-signature-must-be-compatible:

Method Signature Must Be Compatible
+++++++++++++++++++++++++++++++++++

 Make sure methods signature are compatible.

PHP generates the infamous Fatal error at execution : ``Declaration of FooParent\:\:Bar() must be compatible with FooChildren\:\:Bar()``

.. code-block:: php

   <?php
   
   class x {
       function xa() {}
   }
   
   class xxx extends xx {
       function xa($a) {}
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Fix the child class method() signature.
* Fix the parent class method() signature, after checking that it won't affect the other children.

Specs
^^^^^
+-------------+-----------------------------------------+
| Short name  | Classes/MethodSignatureMustBeCompatible |
+-------------+-----------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`LintButWontExec`  |
+-------------+-----------------------------------------+
| Exakt since | 1.2.9                                   |
+-------------+-----------------------------------------+
| Php Version | All                                     |
+-------------+-----------------------------------------+
| Severity    | Critical                                |
+-------------+-----------------------------------------+
| Time To Fix | Quick (30 mins)                         |
+-------------+-----------------------------------------+
| Precision   | High                                    |
+-------------+-----------------------------------------+


.. _method-used-below:

Method Used Below
+++++++++++++++++

 Mark methods that are used in children classes.

.. code-block:: php

   <?php
   
   class foo {
       // This method is used in children
       protected function protectedMethod() {}
       
       // This method is not used in children
       protected function localProtectedMethod() {}
   
       private function foobar() {
           // protectedMethod is used here, but defined in parent
           $this->localProtectedMethod();
       }
   }
   
   class foofoo extends foo {
       private function bar() {
           // protectedMethod is used here, but defined in parent
           $this->protectedMethod();
       }
   }
   
   ?>


This doesn't mark the current class, nor the (grand-)`parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ ones.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Classes/MethodUsedBelow |
+-------------+-------------------------+
| Rulesets    | none                    |
+-------------+-------------------------+
| Exakt since | 0.12.11                 |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Quick (30 mins)         |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _mismatch-properties-typehints:

Mismatch Properties Typehints
+++++++++++++++++++++++++++++

 Properties must match within the same family.

When a property is declared both in a `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ class, and a child class, they must have the same type. The same type includes a possible null value.

This doesn't apply to private properties, which are only visible locally.

.. code-block:: php

   <?php
   
   // property $p is declared as an object of type a
   class x { 
       protected A $p; 
   }
   
   // property $p is declared again, this time without a type
   class a extends x { 
       protected $p; 
   }
   ?>


This code will lint, but not execute. 



Suggestions
^^^^^^^^^^^

* Remove some of the property declarations, and only keep it in the highest ranking parent
* Match the typehints of the property declarations
* Make the properties private
* Remove the child class (or the parent class)

Specs
^^^^^
+-------------+------------------------------------------------------------+
| Short name  | Classes/MismatchProperties                                 |
+-------------+------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`ClassReview`, :ref:`LintButWontExec` |
+-------------+------------------------------------------------------------+
| Exakt since | 2.1.4                                                      |
+-------------+------------------------------------------------------------+
| Php Version | All                                                        |
+-------------+------------------------------------------------------------+
| Severity    | Minor                                                      |
+-------------+------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                            |
+-------------+------------------------------------------------------------+
| Precision   | High                                                       |
+-------------+------------------------------------------------------------+


.. _missing-abstract-method:

Missing Abstract Method
+++++++++++++++++++++++

 Abstract methods must have a non-abstract version for the class to be complete. A class that is missing one abstract definition cannot be instantiated.

.. code-block:: php

   <?php
   
   // This is a valid definition
   class b extends a {
       function foo() {}
       function bar() {}
   }
   
   // This compiles, but will emit a fatal error if instantiated
   class c extends a {
       function bar() {}
   }
   
   // This illustration lint but doesn't run.
   // moving this class at the beginning of the code will make lint fail
   abstract class a {
       abstract function foo() ;
   }
   
   ?>


See also `Classes Abstraction <https://www.php.net/abstract>`_.



Suggestions
^^^^^^^^^^^

* Implement the missing methods
* Remove the partially implemented class
* Mark the partially implemented class abstract

Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Classes/MissingAbstractMethod      |
+-------------+------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`ClassReview` |
+-------------+------------------------------------+
| Exakt since | 2.1.0                              |
+-------------+------------------------------------+
| Php Version | All                                |
+-------------+------------------------------------+
| Severity    | Minor                              |
+-------------+------------------------------------+
| Time To Fix | Quick (30 mins)                    |
+-------------+------------------------------------+
| Precision   | High                               |
+-------------+------------------------------------+


.. _multiple-classes-in-one-file:

Multiple Classes In One File
++++++++++++++++++++++++++++

 It is regarded as a bad practice to store several classes in the same file. This is usually done to make life of __autoload() easier. 

It is often unexpected to find class ``foo`` in the ``bar.php`` file. This is also the case for interfaces and traits.

.. code-block:: php

   <?php
   
   // three classes in the same file
   class foo {}
   class bar {}
   class foobar{}
   
   ?>


One good reason to have multiple classes in one file is to reduce include time by providing everything into one nice include. 

See also `Is it a bad practice to have multiple classes in the same file? <https://stackoverflow.com/questions/360643/is-it-a-bad-practice-to-have-multiple-classes-in-the-same-file>`_.



Suggestions
^^^^^^^^^^^

* Split the file into smaller files, one for each class

Specs
^^^^^
+-------------+-------------------------------+
| Short name  | Classes/MultipleClassesInFile |
+-------------+-------------------------------+
| Rulesets    | :ref:`CE`                     |
+-------------+-------------------------------+
| Exakt since | 0.8.4                         |
+-------------+-------------------------------+
| Php Version | All                           |
+-------------+-------------------------------+
| Severity    | Minor                         |
+-------------+-------------------------------+
| Time To Fix | Quick (30 mins)               |
+-------------+-------------------------------+
| Precision   | High                          |
+-------------+-------------------------------+


.. _multiple-class-declarations:

Multiple Class Declarations
+++++++++++++++++++++++++++

 It is possible to declare several times the same class in the code. PHP will not mention it until execution time, since declarations may be conditional. 

.. code-block:: php

   <?php
   
   $a = 1;
   
   // Conditional declaration
   if ($a == 1) {
       class foo {
           function method() { echo 'class 1';}
       }
   } else {
       class foo {
           function method() { echo 'class 2';}
       }
   }
   
   (new foo())->method();
   ?>


It is recommended to avoid declaring several times the same class in the code. The best practice is to separate them with namespaces, they are for here for that purpose. In case those two classes are to be used interchangeably, the best is to use an abstract class or an interface.

Suggestions
^^^^^^^^^^^

* Store classes with different names in different namespaces
* Change the name of the classes and give them a common interface to allow from common behavior

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Classes/MultipleDeclarations                |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.8.4                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Major                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _multiple-property-declaration-on-one-line:

Multiple Property Declaration On One Line
+++++++++++++++++++++++++++++++++++++++++

 Multiple properties are defined on the same line. They could be defined independantly, on separate expressions.

Keeping properties separate helps documenting and refactoring them independantly.

.. code-block:: php

   <?php
   
   // multiple definition on one expression
   class point {
       private $x, $y, $z;
   
       // more code
   }
   
   // one line, one definition
   class point2 {
       private $x;
       
       private $y;
       
       private $z;
   
       // more code
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Split the definitions to one by line

Specs
^^^^^
+-------------+----------------------------------------------+
| Short name  | Classes/MultiplePropertyDeclarationOnOneLine |
+-------------+----------------------------------------------+
| Rulesets    | none                                         |
+-------------+----------------------------------------------+
| Exakt since | 2.2.2                                        |
+-------------+----------------------------------------------+
| Php Version | All                                          |
+-------------+----------------------------------------------+
| Severity    | Minor                                        |
+-------------+----------------------------------------------+
| Time To Fix | Quick (30 mins)                              |
+-------------+----------------------------------------------+
| Precision   | Very high                                    |
+-------------+----------------------------------------------+


.. _multiple-identical-trait-or-interface:

Multiple Identical Trait Or Interface
+++++++++++++++++++++++++++++++++++++

 There is no need to use the same trait, or implements the same interface more than once.

Up to PHP 7.1 (at least), this doesn't raise any warning. Traits are only imported once, and interfaces may be implemented as many times as wanted.

.. code-block:: php

   <?php
   
   class foo {
       use t3,t3,t3;
   }
   
   class bar implements i,i,i {
   
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Remove the duplicate trait or interfaces

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Classes/MultipleTraitOrInterface            |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.8.4                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Instant (5 mins)                            |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _classes-mutually-extending-each-other:

Classes Mutually Extending Each Other
+++++++++++++++++++++++++++++++++++++

 Those classes are extending each other, creating an extension loop. PHP will yield a fatal error at running time, even if it is compiling the code.

.. code-block:: php

   <?php
   
   // This code is lintable but won't run
   class Foo extends Bar { }
   class Bar extends Foo { }
   
   // The loop may be quite large
   class Foo extends Bar { }
   class Bar extends Bar2 { }
   class Bar2 extends Foo { }
   
   ?>

Specs
^^^^^
+-------------+--------------------------------------------+
| Short name  | Classes/MutualExtension                    |
+-------------+--------------------------------------------+
| Rulesets    | :ref:`ClassReview`, :ref:`LintButWontExec` |
+-------------+--------------------------------------------+
| Exakt since | 0.8.4                                      |
+-------------+--------------------------------------------+
| Php Version | All                                        |
+-------------+--------------------------------------------+
| Severity    | Major                                      |
+-------------+--------------------------------------------+
| Time To Fix | Quick (30 mins)                            |
+-------------+--------------------------------------------+
| Precision   | High                                       |
+-------------+--------------------------------------------+


.. _new-on-functioncall-or-identifier:

New On Functioncall Or Identifier
+++++++++++++++++++++++++++++++++

 Object instantiation with new works with or without arguments. Both are valid in PHP. 

The analyzed code has less than 10% of one of the two forms : for consistency reasons, it is recommended to make them all the same. 

.. code-block:: php

   <?php
   
   $a = new stdClass();
   
   // Parenthesis are used when arguments are compulsory
   $mysql = new MySQLI($host, $user, $pass);
   
   // Parenthesis are omitted when no arguments are available
   // That also makes the instantiation look different
   $b = new stdClass;
   
   ?>

Specs
^^^^^
+-------------+---------------------------------------+
| Short name  | Classes/NewOnFunctioncallOrIdentifier |
+-------------+---------------------------------------+
| Rulesets    | none                                  |
+-------------+---------------------------------------+
| Exakt since | 0.9.8                                 |
+-------------+---------------------------------------+
| Php Version | All                                   |
+-------------+---------------------------------------+
| Severity    | Minor                                 |
+-------------+---------------------------------------+
| Time To Fix | Slow (1 hour)                         |
+-------------+---------------------------------------+
| Precision   | High                                  |
+-------------+---------------------------------------+


.. _no-magic-method-with-array:

No Magic Method With Array
++++++++++++++++++++++++++

 Magic method ``__set()`` doesn't work for array syntax. 

When overloading properties, they can only be used for scalar values, excluding arrays. Under the hood, PHP uses ``__get()`` to reach for the name of the property, and doesn't recognize the following index as an array. It yields an error : Indirect modification of overloaded property.

.. code-block:: php

   <?php
   
   class c {
       private $a;
       private $o = array();
   
       function __get($name) {
           return $this->o[$name];
       }
       
       function foo() {
           // property b doesn't exists
           $this->b['a'] = 3;
           
           print_r($this);
       }
   
       // This method has no impact on the issue
       function __set($name, $value) {
           $this->o[$name] = $value;
       }
   }
   
   $c = new c();
   $c->foo();
   
   ?>


It is possible to use the array syntax with a magic property : by making the ``__get`` returns an array, the syntax will actually extract the expected item in the array.

This is not reported by linting.

In this analysis, only properties that are found to be magic are reported. For example, using the b property outside the class scope is not reported, as it would yield too many false-positives.

See also `Overload <https://www.php.net/manual/en/language.oop5.overloading.php#object.get>`_.


Suggestions
^^^^^^^^^^^

* Use a distinct method to append a new value to that property
* Assign the whole array, and not just one of its elements

Specs
^^^^^
+-------------+---------------------------------------------------------------------+
| Short name  | Classes/NoMagicWithArray                                            |
+-------------+---------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`LintButWontExec` |
+-------------+---------------------------------------------------------------------+
| Exakt since | 0.12.4                                                              |
+-------------+---------------------------------------------------------------------+
| Php Version | All                                                                 |
+-------------+---------------------------------------------------------------------+
| Severity    | Major                                                               |
+-------------+---------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                       |
+-------------+---------------------------------------------------------------------+
| Precision   | Medium                                                              |
+-------------+---------------------------------------------------------------------+


.. _non-nullable-getters:

Non Nullable Getters
++++++++++++++++++++

 A getter needs to be nullable when a property is injected. 

In particular, if the injection happens with a separate method, there is a time where the object is not consistent, and the property holds a default non-object value.

.. code-block:: php

   <?php
   
   class Consistent {
       private $db = null;
       
       function __construct(Db $db) { 
           $this->db = $db;
           // Object is immediately consistent 
       }
       
       // Db might be null
       function getDb() {
           return $this->db;
       }
   }
   
   class Inconsistent {
       private $db = null;
       
       function __construct() { 
           // No initialisation
       }
   
       // This might be called on time, or not
       // This typehint cannot be nullable, nor use null as default 
       function setDb(DB $db) {
           return $this->db;
       }
   
       // Db might be null
       function getDb() {
           return $this->db;
       }
   }
   ?>




Suggestions
^^^^^^^^^^^

* Remove the nullable option and the tests on ``null``.

Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Classes/NonNullableSetters         |
+-------------+------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`ClassReview` |
+-------------+------------------------------------+
| Exakt since | 1.9.6                              |
+-------------+------------------------------------+
| Php Version | All                                |
+-------------+------------------------------------+
| Severity    | Minor                              |
+-------------+------------------------------------+
| Time To Fix | Quick (30 mins)                    |
+-------------+------------------------------------+
| Precision   | High                               |
+-------------+------------------------------------+


.. _forgotten-visibility:

Forgotten Visibility
++++++++++++++++++++

 Some classes elements (property, method, constant) are missing their explicit visibility.

By default, it is public. It should at least be mentioned as public, or may be reviewed as protected or private. 

Class constants support also visibility since PHP 7.1.

final, `static <https://www.php.net/manual/en/language.oop5.static.php>`_ and abstract are not counted as visibility. Only public, private and protected. The PHP 4 var keyword is counted as undefined.

Traits, classes and interfaces are checked. 

.. code-block:: php

   <?php
   
   // Explicit visibility
   class X {
       protected sconst NO_VISIBILITY_CONST = 1; // For PHP 7.2 and later
   
       private $noVisibilityProperty = 2; 
       
       public function Method() {}
   }
   
   // Missing visibility
   class X {
       const NO_VISIBILITY_CONST = 1; // For PHP 7.2 and later
   
       var $noVisibilityProperty = 2; // Only with var
       
       function NoVisibilityForMethod() {}
   }
   
   ?>


See also `Visibility <https://www.php.net/manual/en/language.oop5.visibility.php>`_ and `Understanding The Concept Of Visibility In Object Oriented PHP <https://torquemag.io/2016/05/understanding-concept-visibility-object-oriented-php/>`_.


Suggestions
^^^^^^^^^^^

* Always add explicit visibility to methods and constants in a class
* Always add explicit visibility to properties in a class, after PHP 7.4

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------------------+
| Short name  | Classes/NonPpp                                                                                              |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                                 |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                       |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                         |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                       |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                            |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                        |
+-------------+-------------------------------------------------------------------------------------------------------------+
| ClearPHP    | `always-have-visibility <https://github.com/dseguy/clearPHP/tree/master/rules/always-have-visibility.md>`__ |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-fuelcms-classes-nonppp`, :ref:`case-livezilla-classes-nonppp`                                    |
+-------------+-------------------------------------------------------------------------------------------------------------+


.. _non-static-methods-called-in-a-static:

Non Static Methods Called In A Static
+++++++++++++++++++++++++++++++++++++

 `Static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods have to be declared as such (using the `static <https://www.php.net/manual/en/language.oop5.static.php>`_ keyword). Then, one may call them without instantiating the object.

PHP 7.0, and more recent versions, yield a deprecated error : ``Non-`static <https://www.php.net/manual/en/language.oop5.static.php>`_ method A\:\:B() should not be called statically``.

PHP 5 and older doesn't check that a method is `static <https://www.php.net/manual/en/language.oop5.static.php>`_ or not : at any point, the code may call one method statically.

.. code-block:: php

   <?php
       class x {
           static public function sm( ) { echo __METHOD__.\n; }
           public public sm( ) { echo __METHOD__.\n; }
       } 
       
       x::sm( ); // echo x::sm 
       
       // Dynamic call
       ['x', 'sm']();
       [\x::class, 'sm']();
   
       $s = 'x::sm';
       $s();
   
   ?>


It is a bad idea to call non-`static <https://www.php.net/manual/en/language.oop5.static.php>`_ method statically. Such method may make use of special
variable `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_, which will be undefined. PHP will not check those calls at compile time,
nor at running time. 

It is recommended to update this situation : make the method actually `static <https://www.php.net/manual/en/language.oop5.static.php>`_, or use it only 
in object context.

Note that this analysis reports all `static <https://www.php.net/manual/en/language.oop5.static.php>`_ method call made on a non-`static <https://www.php.net/manual/en/language.oop5.static.php>`_ method,
even within the same class or class hierarchy. PHP silently accepts `static <https://www.php.net/manual/en/language.oop5.static.php>`_ call to any
in-family method.

.. code-block:: php

   <?php
       class x {
           public function foo( ) { self::bar() }
           public function bar( ) { echo __METHOD__.\n; }
       } 
   ?>


See also `Static Keyword <https://www.php.net/manual/en/language.oop5.`static <https://www.php.net/manual/en/language.oop5.static.php>`_.php>`_.



Suggestions
^^^^^^^^^^^

* Call the method the correct way
* Define the method as static

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Classes/NonStaticMethodsCalledStatic                                                                                                                    |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56` |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                                                                   |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                                                                     |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                                                                   |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                                                         |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | Medium                                                                                                                                                  |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-dolphin-classes-nonstaticmethodscalledstatic`, :ref:`case-magento-classes-nonstaticmethodscalledstatic`                                      |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------+


.. _class-without-parent:

Class Without Parent
++++++++++++++++++++

 Classes should not refer to ``parent`` when it is not extending another class. 

In PHP 7.4, it is a Deprecated warning. In PHP 7.3, it was a Fatal error, when the code was finally executed.

.. code-block:: php

   <?php
   
   class x {
       function foo() {
           parent::foo();
       }
   }
   ?>




Suggestions
^^^^^^^^^^^

* Update the class and make it extends another class
* Change the parent mention with a fully qualified name
* Remove the call to the parent altogether

Specs
^^^^^
+-------------+-----------------------------------------------------------------+
| Short name  | Classes/NoParent                                                |
+-------------+-----------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`ClassReview` |
+-------------+-----------------------------------------------------------------+
| Exakt since | 1.9.0                                                           |
+-------------+-----------------------------------------------------------------+
| Php Version | 7.4-                                                            |
+-------------+-----------------------------------------------------------------+
| Severity    | Minor                                                           |
+-------------+-----------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                 |
+-------------+-----------------------------------------------------------------+
| Precision   | High                                                            |
+-------------+-----------------------------------------------------------------+


.. _self,-parent,-static-outside-class:

self, parent, static Outside Class
++++++++++++++++++++++++++++++++++

 `self <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_, `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ and `static <https://www.php.net/manual/en/language.oop5.static.php>`_ should be called inside a class or trait. PHP lint won't report those situations. 

`self <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_, `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ and `static <https://www.php.net/manual/en/language.oop5.static.php>`_ may be used in a trait : their actual value will be only known at execution time, when the trait is used.

.. code-block:: php

   <?php
   // In the examples, self, parent and static may be used interchangeably
   
   // This raises a Fatal error
   //Fatal error: Uncaught Error: Cannot access static:: when no class scope is active
   new static();
   
   // static calls
   echo self::CONSTANTE;
   echo self::$property;
   echo self::method();
   
   // as a type hint
   function foo(static $x) {
       doSomething();
   }
   
   // as a instanceof
   if ($x instanceof static) {
       doSomething();
   }
   
   ?>


Such syntax problem is only revealed at execution time : PHP raises a Fatal error. 

The origin of the problem is usually a method that was moved outside a class, at least temporarily.

See also `Scope Resolution Operator (\:\:) <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_.

Specs
^^^^^
+-------------+----------------------------------------+
| Short name  | Classes/NoPSSOutsideClass              |
+-------------+----------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`LintButWontExec` |
+-------------+----------------------------------------+
| Exakt since | 0.10.3                                 |
+-------------+----------------------------------------+
| Php Version | All                                    |
+-------------+----------------------------------------+
| Severity    | Major                                  |
+-------------+----------------------------------------+
| Time To Fix | Slow (1 hour)                          |
+-------------+----------------------------------------+
| Precision   | High                                   |
+-------------+----------------------------------------+


.. _no-public-access:

No Public Access
++++++++++++++++

 The properties below are declared with public access, but are never used publicly. They can be made protected or private.

.. code-block:: php

   <?php
   
   class foo {
       public $bar = 1;            // Public, and used in public space
       public $neverInPublic = 3;  // Public, but never used in outside the class
       
       function bar() {
           $neverInPublic++;
       }
   }
   
   $x = new foo();
   $x->bar = 3;
   $x->bar();
   
   ?>

Specs
^^^^^
+-------------+------------------------+
| Short name  | Classes/NoPublicAccess |
+-------------+------------------------+
| Rulesets    | :ref:`Analyze`         |
+-------------+------------------------+
| Exakt since | 0.8.4                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Quick (30 mins)        |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _normal-methods:

Normal Methods
++++++++++++++

 Spot normal Methods.

.. code-block:: php

   <?php
   
   class foo{
       // Normal method
       private function bar() {}
   
       // Static method
       private static function barbar() {}
   }
   
   ?>

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Classes/NormalMethods |
+-------------+-----------------------+
| Rulesets    | none                  |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _no-self-referencing-constant:

No Self Referencing Constant
++++++++++++++++++++++++++++

 It is not possible to use a constant to define itself in a class. It yields a fatal error at runtime. 

The PHP error reads : ``Cannot declare `self <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_-referencing constant '`self <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_\:\:C2'``. Unlike PHP which is `self <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_-referencing, `self <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ referencing variables can't have a value : just don't use that.

.. code-block:: php

   <?php
       class a { 
           const C1 = 1;         // fully defined constant
           const C2 = self::C2;  // self referencing constant
           const C3 = a::C3 + 2; // self referencing constant
       }
   ?>


The code may access an already declared constant with `self <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ or with its class name.

.. code-block:: php

   <?php
       class a { 
           const C1 = 1; 
           const C2 = a::C1; 
       }
   ?>


This error is not detected by linting. It is only detected at instantiation time : if the class is not used, it won't appear.



Suggestions
^^^^^^^^^^^

* Give a literal value to this constant
* Give a constant value to this constant : other class constants or constant are allowed here.

Specs
^^^^^
+-------------+------------------------------------------------------------+
| Short name  | Classes/NoSelfReferencingConstant                          |
+-------------+------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`ClassReview`, :ref:`LintButWontExec` |
+-------------+------------------------------------------------------------+
| Exakt since | 0.8.4                                                      |
+-------------+------------------------------------------------------------+
| Php Version | All                                                        |
+-------------+------------------------------------------------------------+
| Severity    | Minor                                                      |
+-------------+------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                            |
+-------------+------------------------------------------------------------+
| Precision   | High                                                       |
+-------------+------------------------------------------------------------+


.. _null-on-new:

Null On New
+++++++++++

 Until PHP 7, some classes instantiation could yield null, instead of throwing an exception. 

After issuing a 'new' with those classes, it was important to check if the returned object were null or not. No exception were thrown.

.. code-block:: php

   <?php
   
   // Example extracted from the wiki below
   $mf = new MessageFormatter('en_US', '{this was made intentionally incorrect}');
   if ($mf === null) {
       echo 'Surprise!';
   }
   
   ?>


This inconsistency has been cleaned in PHP 7 : see See `Internal Constructor Behavior <https://wiki.php.net/rfc/internal_constructor_behaviour>`_

See also `PHP RFC: Constructor behaviour of internal classes <https://wiki.php.net/rfc/internal_constructor_behaviour>`_.


Suggestions
^^^^^^^^^^^

* Remove the check on null after a new instantiation

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------+
| Short name  | Classes/NullOnNew                                                                                          |
+-------------+------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56` |
+-------------+------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Php Version | 7.0-                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                           |
+-------------+------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+


.. _old-style-constructor:

Old Style Constructor
+++++++++++++++++++++

 PHP classes used to have the method bearing the same name as the class acts as the constructor. That was PHP 4, and early PHP 5. 

The manual issues a warning about this syntax : ``Old style constructors are DEPRECATED in PHP 7.0, and will be removed in a future version. You should always use `__construct() <https://www.php.net/manual/en/language.oop5.decon.php>`_ in new code.``

.. code-block:: php

   <?php
   
   namespace {
       // Global namespace is important
       class foo {
           function foo() {
               // This acts as the old-style constructor, and is reported by PHP
           }
       }
   
       class bar {
           function __construct() { }
           function bar() {
               // This doesn't act as constructor, as bar has a __construct() method
           }
       }
   }
   
   namespace Foo\Bar{
       class foo {
           function foo() {
               // This doesn't act as constructor, as bar is not in the global namespace
           }
       }
   }
   
   ?>


This is no more the case in PHP 5, which relies on ``__construct()`` to do so. Having this old style constructor may bring in confusion, unless you are also supporting old time PHP 4.

Note that classes with methods bearing the class name, but inside a namespace are not following this convention, as this is not breaking backward compatibility. Those are excluded from the analyze.

See also `Constructors and Destructors <https://www.php.net/manual/en/language.oop5.decon.php>`_.


Suggestions
^^^^^^^^^^^

* Remove old style constructor and make it ``__construct()``
* Remove old libraries and use a modern component

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------+
| Short name  | Classes/OldStyleConstructor                                                                             |
+-------------+---------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CompatibilityPHP80`                                                    |
+-------------+---------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                   |
+-------------+---------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                     |
+-------------+---------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                   |
+-------------+---------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                         |
+-------------+---------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                    |
+-------------+---------------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-php4-class-syntax <https://github.com/dseguy/clearPHP/tree/master/rules/no-php4-class-syntax.md>`__ |
+-------------+---------------------------------------------------------------------------------------------------------+


.. _var-keyword:

Var Keyword
+++++++++++

 Var was used in PHP 4 to mark properties as public. Nowadays, new keywords are available : public, protected, private. Var is equivalent to public. 

It is recommended to avoid using var, and explicitly use the new keywords.

.. code-block:: php

   <?php
   
   class foo {
       public $bar = 1;
       // Avoid var
       //var $bar = 1; 
   }
   
   ?>


See also `Visibility <https://www.php.net/manual/en/language.oop5.visibility.php>`_.


Suggestions
^^^^^^^^^^^

* It is recommended to avoid using var, and explicitly use the new keywords : private, protected, public

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------+
| Short name  | Classes/OldStyleVar                                                                                     |
+-------------+---------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                          |
+-------------+---------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                   |
+-------------+---------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                     |
+-------------+---------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                   |
+-------------+---------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                         |
+-------------+---------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                    |
+-------------+---------------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-php4-class-syntax <https://github.com/dseguy/clearPHP/tree/master/rules/no-php4-class-syntax.md>`__ |
+-------------+---------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-xataface-classes-oldstylevar`                                                                |
+-------------+---------------------------------------------------------------------------------------------------------+


.. _one-object-operator-per-line:

One Object Operator Per Line
++++++++++++++++++++++++++++

 Avoid using more than one operator -> per line, to prevent information overload.

.. code-block:: php

   <?php
   
   // Spread operators on multiple lines
   $object->firstMethodCall()
          ->property
          ->secondMethodCall();
   
   // This is not readable
   $object->firstMethodCall()->property->secondMethodCall();
   
   // This is OK, as objects are different.
   $a2->b2($c2->d2, $e2->f2); 
   
   ?>

Specs
^^^^^
+-------------+----------------------------------+
| Short name  | Classes/OneObjectOperatorPerLine |
+-------------+----------------------------------+
| Rulesets    | none                             |
+-------------+----------------------------------+
| Exakt since | 0.8.4                            |
+-------------+----------------------------------+
| Php Version | All                              |
+-------------+----------------------------------+
| Severity    | Minor                            |
+-------------+----------------------------------+
| Time To Fix | Slow (1 hour)                    |
+-------------+----------------------------------+
| Precision   | High                             |
+-------------+----------------------------------+


.. _only-static-methods:

Only Static Methods
+++++++++++++++++++

 Marks a class that has only `static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Classes/OnlyStaticMethods |
+-------------+---------------------------+
| Rulesets    | none                      |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _order-of-declaration:

Order Of Declaration
++++++++++++++++++++

 The order used to declare members and methods has a great impact on readability and maintenance. However, practices varies greatly. As usual, being consistent is the most important and useful.

The suggested order is the following : traits, constants, properties, methods. 
Optional characteristics, like final, `static <https://www.php.net/manual/en/language.oop5.static.php>`_... are not specified. Special methods names are not specified. 

.. code-block:: php

   <?php
   
   class x {
       use traits;
       
       const CONSTANTS = 1;
       const CONSTANTS2 = 1;
       const CONSTANTS3 = 1;
       
       private $property = 2;
       private $property2 = 2;
       private $property3 = 2;
       
       public function foo() {}
       public function foo2() {}
       public function foo3() {}
       public function foo4() {}
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Always declare class elements (traits, constants, properties, methods) in the same order.

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Classes/OrderOfDeclaration |
+-------------+----------------------------+
| Rulesets    | none                       |
+-------------+----------------------------+
| Exakt since | 0.11.7                     |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Slow (1 hour)              |
+-------------+----------------------------+
| Precision   | Medium                     |
+-------------+----------------------------+


.. _overwritten-class-const:

Overwritten Class Const
+++++++++++++++++++++++

 Those class constants are overwritten in a `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ class. This may lead to confusion, as the value of the constant may change depending on the way it is called.

.. code-block:: php

   <?php
   
   class foo {
       const C = 1;
   }
   
   class bar extends foo {
       const C = 2;
       
       function x() {
           // depending on the access to C, value is different.
           print self::C.' '.static::C.' '.parent::C;
       }
   }
   
   ?>

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Classes/OverwrittenConst |
+-------------+--------------------------+
| Rulesets    | :ref:`CE`                |
+-------------+--------------------------+
| Exakt since | 0.8.4                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Major                    |
+-------------+--------------------------+
| Time To Fix | Slow (1 hour)            |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _parent-first:

Parent First
++++++++++++

 When calling `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ constructor, always put it first in the ``__construct`` method. It ensures the `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ is correctly build before the child start using values. 

.. code-block:: php

   <?php
   
   class father {
       protected $name = null;
       
       function __construct() {
           $this->name = init();
       }
   }
   
   class goodSon {
       function __construct() {
           // parent is build immediately, 
           parent::__construct();
           echo my name is.$this->name;
       }
   }
   
   class badSon {
       function __construct() {
           // This will fail.
           echo my name is.$this->name;
   
           // parent is build later, 
           parent::__construct();
       }
   }
   
   ?>


This analysis doesn't apply to Exceptions. 


Suggestions
^^^^^^^^^^^

* Use ``parent\:\:__construct`` as the first call in the constructor.

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------+
| Short name  | Classes/ParentFirst                                                                  |
+-------------+--------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Suggestions`                                                   |
+-------------+--------------------------------------------------------------------------------------+
| Exakt since | 1.0.5                                                                                |
+-------------+--------------------------------------------------------------------------------------+
| Php Version | All                                                                                  |
+-------------+--------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                |
+-------------+--------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                      |
+-------------+--------------------------------------------------------------------------------------+
| Precision   | High                                                                                 |
+-------------+--------------------------------------------------------------------------------------+
| Examples    | :ref:`case-shopware-classes-parentfirst`, :ref:`case-prestashop-classes-parentfirst` |
+-------------+--------------------------------------------------------------------------------------+


.. _properties-declaration-consistence:

Properties Declaration Consistence
++++++++++++++++++++++++++++++++++

 Properties may be declared all at once, or one by one. 

The analyzed code has less than 10% of one of them : for consistency reasons, it is recommended to make them all the same. 

It happens that choosing unique declarations or multiple depends on coding style and files. 

.. code-block:: php

   <?php
   
   class x {
       // Some declarations are made by batch
       private $a1 = 1,
               $a2 = 2;
       public $c = 1, $c2 = 2, $c4 = 3;
   
       // Most declarations are made one by one
       protected $b = 1;
       protected $b1 = 1;
       protected $b2 = 1;
       protected $b3 = 1;
       protected $b4 = 1;
       protected $b5 = 1;
       protected $b6 = 1;
       protected $b7 = 1;
       protected $b8 = 1;
       protected $b9 = 1;
       protected $b10 = 1;
       protected $b11 = 1;
       protected $b12 = 1;
       protected $b13 = 1;
       protected $b14 = 1;
       protected $b15 = 1;
       protected $b16 = 1;
       protected $b17 = 1;
       protected $b18 = 1;
       protected $b19 = 1;
   
   }
   ?>


See also `Properties <https://www.php.net/manual/en/language.oop5.properties.php>`_.

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Classes/PPPDeclarationStyle |
+-------------+-----------------------------+
| Rulesets    | none                        |
+-------------+-----------------------------+
| Exakt since | 1.2.1                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Slow (1 hour)               |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _property-could-be-local:

Property Could Be Local
+++++++++++++++++++++++

 A property only used in one method may be turned into a local variable.

Public an protected properties are omitted here : they may be modified somewhere else, in the code. This analysis may be upgraded to support those properties, when tracking of such properties becomes available.

Classes where only one non-magic method is available are omitted.

Traits with private properties are processed the same way.

.. code-block:: php

   <?php
   
   class x {
       private $foo = 1;
   
       // Magic method, and constructor in particular, are omitted.
       function __construct($foo) {
           $this->foo = $foo;
       }
       
       function bar() {
           $this->foo++;
           
           return $this->foo;
       }
   
       function barbar() {}
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Remove the property and make it an argument in the method
* Use that property elsewhere

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------+
| Short name  | Classes/PropertyCouldBeLocal                                                                    |
+-------------+-------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`ClassReview`                                                              |
+-------------+-------------------------------------------------------------------------------------------------+
| Exakt since | 1.1.7                                                                                           |
+-------------+-------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                             |
+-------------+-------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                           |
+-------------+-------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                   |
+-------------+-------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                            |
+-------------+-------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-mautic-classes-propertycouldbelocal`, :ref:`case-typo3-classes-propertycouldbelocal` |
+-------------+-------------------------------------------------------------------------------------------------+


.. _property-names:

Property Names
++++++++++++++

 Variables are used in property definitions, when they are located in a class. 

.. code-block:: php

   <?php
   
   static $x; // not a property, a static variable
   
   class foo {
       static $x; // now, this is a static property
       public $y, $z = 1; // normal properties
       
       public function bar() {
           static $x; // again, a static variable
       }
   }
   
   ?>


See also `Properties <https://www.php.net/manual/en/language.oop5.properties.php>`_.

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Classes/PropertyDefinition |
+-------------+----------------------------+
| Rulesets    | none                       |
+-------------+----------------------------+
| Exakt since | 0.8.4                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Slow (1 hour)              |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _never-used-properties:

Never Used Properties
+++++++++++++++++++++

 Properties that are never used. They are defined in a class or a trait, but they never actually used.

Properties are considered used when they are used locally, in the same class as their definition, or in a `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ class : a `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ class is always included with the current class. 

On the other hand, properties which are defined in a class, but only used in children classes is considered unused, since children may also avoid using it. 

.. code-block:: php

   <?php
   
   class foo {
       public $usedProperty = 1;
   
       // Never used anywhere
       public $unusedProperty = 2;
       
       function bar() {
           // Used internally
           ++$this->usedProperty;
       }
   }
   
   class foo2  extends foo {
       function bar2() {
           // Used in child class
           ++$this->usedProperty;
       }
   }
   
   // Used externally
   ++$this->usedProperty;
   
   ?>




Suggestions
^^^^^^^^^^^

* Drop unused properties
* Change the name of the unused properties
* Move the properties to children classes
* Find usage for unused properties

Specs
^^^^^
+-------------+-------------------------------------------------+
| Short name  | Classes/PropertyNeverUsed                       |
+-------------+-------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                  |
+-------------+-------------------------------------------------+
| Exakt since | 0.8.4                                           |
+-------------+-------------------------------------------------+
| Php Version | All                                             |
+-------------+-------------------------------------------------+
| Severity    | Minor                                           |
+-------------+-------------------------------------------------+
| Time To Fix | Slow (1 hour)                                   |
+-------------+-------------------------------------------------+
| Precision   | High                                            |
+-------------+-------------------------------------------------+
| Examples    | :ref:`case-wordpress-classes-propertyneverused` |
+-------------+-------------------------------------------------+


.. _property-used-above:

Property Used Above
+++++++++++++++++++

 Property used in the `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ classes. If the definition of the property is in the child class, then the `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ should not know about it and make usage of it.

It may also be used in the current class, or its children, though this is not reported by this analyzer.

.. code-block:: php

   <?php
   
   class A {
       public function foo() {
           $this->pb++;
       }
   }
   
   class B extends A {
       protected $pb = 0;       // property     used above
       protected $pb2 = 0;      // property NOT used above
   }
   
   ?>


See also `Classes/PropertyUsedBelow`_.


Suggestions
^^^^^^^^^^^

* Move the definition of the property to the upper class
* Move the usage of the property to the lower class

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Classes/PropertyUsedAbove |
+-------------+---------------------------+
| Rulesets    | none                      |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | Medium                    |
+-------------+---------------------------+


.. _property-used-below:

Property Used Below
+++++++++++++++++++

 Mark properties that are used in children classes.

.. code-block:: php

   <?php
   
   class foo {
       // This property is used in children
       protected protectedProperty = 1;
       
       // This property is not used in children
       protected localProtectedProperty = 1;
   
       private function foobar() {
           // protectedProperty is used here, but defined in parent
           $this->localProtectedProperty = 3;
       }
   }
   
   class foofoo extends foo {
       private function bar() {
           // protectedProperty is used here, but defined in parent
           $this->protectedProperty = 3;
       }
   }
   
   ?>


This doesn't mark the current class, nor the (grand-)`parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ ones.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Classes/PropertyUsedBelow |
+-------------+---------------------------+
| Rulesets    | none                      |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | Medium                    |
+-------------+---------------------------+


.. _property-used-in-one-method-only:

Property Used In One Method Only
++++++++++++++++++++++++++++++++

 Properties should be used in several methods. When a property is used in only one method, this should have be of another shape. 

Properties used in one method only may be used several times, and read only. This may be a class constant. Such properties are meant to be overwritten by an extending class, and that's possible with class constants.

Properties that read and written may be converted into a variable, `static <https://www.php.net/manual/en/language.oop5.static.php>`_ to the method. This way, they are kept close to the method, and do not pollute the object's properties.

.. code-block:: php

   <?php
   
   class foo {
       private $once = 1;
       const ONCE = 1;
       private $counter = 0;
       
       function bar() {
           // $this->once is never used anywhere else. 
           someFunction($this->once);
           someFunction(self::ONCE);   // Make clear that it is a 
       }
   
       function bar2() {
           static $localCounter = 0;
           $this->counter++;
           
           // $this->once is only used here, for distinguising calls to someFunction2
           if ($this->counter > 10) { // $this->counter is used only in bar2, but it may be used several times
               return false;
           }
           someFunction2($this->counter);
   
           // $localCounter keeps track for all the calls
           if ($localCounter > 10) { 
               return false;
           }
           someFunction2($localCounter);
       }
   }
   
   ?>


Note : properties used only once are not returned by this analysis. They are omitted, and are available in the analysis `Used Once Property`_.



Suggestions
^^^^^^^^^^^

* Drop the property, and inline the value
* Drop the property, and make the property a local variable
* Use the property in another method

Specs
^^^^^
+-------------+--------------------------------------------------------+
| Short name  | Classes/PropertyUsedInOneMethodOnly                    |
+-------------+--------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                         |
+-------------+--------------------------------------------------------+
| Exakt since | 0.10.3                                                 |
+-------------+--------------------------------------------------------+
| Php Version | All                                                    |
+-------------+--------------------------------------------------------+
| Severity    | Minor                                                  |
+-------------+--------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                          |
+-------------+--------------------------------------------------------+
| Precision   | High                                                   |
+-------------+--------------------------------------------------------+
| Examples    | :ref:`case-contao-classes-propertyusedinonemethodonly` |
+-------------+--------------------------------------------------------+


.. _internally-used-properties:

Internally Used Properties
++++++++++++++++++++++++++

 Properties that are used internally.

.. code-block:: php

   <?php
   
   class x {
       public $internallyUsedProperty = 1;
       public $externallyUsedProperty = 1;
       public $alsoExternallyUsedProperty = 1;
       
       function foo() {
           $this->internallyUsedProperty = 2;
       }
   }
   
   class y extends x {
       function bar() {
           $this->externallyUsedProperty = 3;
       }
   }
   
   $X = new x();
   $X->alsoExternallyUsedProperty = 3;
   
   ?>

Specs
^^^^^
+-------------+--------------------------------+
| Short name  | Classes/PropertyUsedInternally |
+-------------+--------------------------------+
| Rulesets    | none                           |
+-------------+--------------------------------+
| Exakt since | 0.8.4                          |
+-------------+--------------------------------+
| Php Version | All                            |
+-------------+--------------------------------+
| Severity    | Minor                          |
+-------------+--------------------------------+
| Time To Fix | Instant (5 mins)               |
+-------------+--------------------------------+
| Precision   | High                           |
+-------------+--------------------------------+


.. _parent,-static-or-self-outside-class:

Parent, Static Or Self Outside Class
++++++++++++++++++++++++++++++++++++

 `Parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_, `static <https://www.php.net/manual/en/language.oop5.static.php>`_ and `self <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ keywords must be used within a class or a trait. They make no sens outside a class or trait scope, as `self <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ and `static <https://www.php.net/manual/en/language.oop5.static.php>`_ refers to the current class and `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ refers to one of `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ above.

PHP 7.0 and later detect their usage at compile time, and emits a fatal error.

.. code-block:: php

   <?php
   
   class x {
       const Y = 1;
       
       function foo() {
           // self is \x
           echo self::Y;
       }
   }
   
   const Z = 1;
   // This lint but won't anymore
   echo self::Z;
   
   ?>


`Static <https://www.php.net/manual/en/language.oop5.static.php>`_ may be used in a function or a closure, but not globally.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Classes/PssWithoutClass |
+-------------+-------------------------+
| Rulesets    | :ref:`Analyze`          |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Major                   |
+-------------+-------------------------+
| Time To Fix | Quick (30 mins)         |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _raised-access-level:

Raised Access Level
+++++++++++++++++++

 A property's visibility may be lowered, but not raised.

This error may be detected when the classes are all in the same file : then, PHP reports the problem. However, when the classes are separated in different files, as it is customary, PHP won't check this at linting time, yielding a fatal error at execution time. 

First file.

.. code-block:: php

   <?php
   
   class Foo {
       public $publicProperty;
       protected $protectedProperty;
       private $privateProperty;
   }
   ?>


Second file.

.. code-block:: php

   <?php
   
   class Bar extends Foo {
       private $publicProperty;
       private $protectedProperty;
       private $privateProperty;   // This one is OK
   }
   ?>


See also `Visibility <https://www.php.net/manual/en/language.oop5.visibility.php>`_ and `Understanding the concept of visibility in object oriented php <https://torquemag.io/2016/05/understanding-concept-visibility-object-oriented-php/>`_.


Suggestions
^^^^^^^^^^^

* Lower the visibility in the child class
* Raise the visibility in the parent class

Specs
^^^^^
+-------------+--------------------------------------------+
| Short name  | Classes/RaisedAccessLevel                  |
+-------------+--------------------------------------------+
| Rulesets    | :ref:`ClassReview`, :ref:`LintButWontExec` |
+-------------+--------------------------------------------+
| Exakt since | 0.10.0                                     |
+-------------+--------------------------------------------+
| Php Version | All                                        |
+-------------+--------------------------------------------+
| Severity    | Critical                                   |
+-------------+--------------------------------------------+
| Time To Fix | Quick (30 mins)                            |
+-------------+--------------------------------------------+
| Precision   | High                                       |
+-------------+--------------------------------------------+


.. _redefined-class-constants:

Redefined Class Constants
+++++++++++++++++++++++++

 Redefined class constants.

Class constants may be redefined, though it is prone to errors when using them, as it is now crucial to use the right class name to access the right value.

.. code-block:: php

   <?php
   
   class a {
       const A = 1;
   }
   
   class b extends a {
       const A = 2;
   }
   
   class c extends c { }
   
   echo a::A, ' ', b::A, ' ', c::A;
   // 1 2 2
   
   ?>


It is recommended to use distinct names.

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Classes/RedefinedConstants                  |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.8.4                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Slow (1 hour)                               |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _redefined-default:

Redefined Default
+++++++++++++++++

 Classes allows properties to be set with a default value. When those properties get, unconditionally, another value at constructor time, then one of the default value are useless. One of those definition should go : it is better to define properties outside the constructor.

.. code-block:: php

   <?php
   
   class foo {
       public $redefined = 1;
   
       public function __construct( ) {
           $this->redefined = 2;
       }
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Move the default assignation to the property definition
* Drop the reassignation in the constructor

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Classes/RedefinedDefault                    |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.8.4                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Major                                       |
+-------------+---------------------------------------------+
| Time To Fix | Slow (1 hour)                               |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+
| Examples    | :ref:`case-piwigo-classes-redefineddefault` |
+-------------+---------------------------------------------+


.. _redefined-methods:

Redefined Methods
+++++++++++++++++

 Redefined methods are overwritten methods. Those methods are defined in different classes that are part of the same classes hierarchy.

Protected and public redefined methods replace each other. Private methods are kept separated, and depends on the caller to be distinguished.

.. code-block:: php

   <?php
   
   class foo {
       function method() {
           return 1;
       }
   }
   
   class bar extends foo {
       function method() {
           return 2;
       }
   }
   ?>


See also `Object Inheritance <https://www.php.net/manual/en/language.oop5.inheritance.php>`_.

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Classes/RedefinedMethods |
+-------------+--------------------------+
| Rulesets    | :ref:`CE`                |
+-------------+--------------------------+
| Exakt since | 0.8.4                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Slow (1 hour)            |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _redefined-private-property:

Redefined Private Property
++++++++++++++++++++++++++

 Private properties are local to their defined class. PHP doesn't forbid the re-declaration of a private property in a child class.

However, having two or more properties with the same name, in the class hierarchy tends to be error prone. 

.. code-block:: php

   <?php
   
   class A {
       private $isReady = true;
   }
   
   class B {
       private $isReady = false;
   }
   
   ?>

Specs
^^^^^
+-------------+----------------------------------------------------+
| Short name  | Classes/RedefinedPrivateProperty                   |
+-------------+----------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                     |
+-------------+----------------------------------------------------+
| Exakt since | 1.2.3                                              |
+-------------+----------------------------------------------------+
| Php Version | All                                                |
+-------------+----------------------------------------------------+
| Severity    | Major                                              |
+-------------+----------------------------------------------------+
| Time To Fix | Slow (1 hour)                                      |
+-------------+----------------------------------------------------+
| Precision   | High                                               |
+-------------+----------------------------------------------------+
| Examples    | :ref:`case-zurmo-classes-redefinedprivateproperty` |
+-------------+----------------------------------------------------+


.. _redefined-property:

Redefined Property
++++++++++++++++++

 Property redefined in a `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ class. 

Using heritage, it is possible to define several times the same property, at different levels of the hierarchy.

.. code-block:: php

   <?php
   
   class foo {
       protected $aProperty = 1;
   }
   
   class bar extends foo {
       // This property is redefined in the parent class, leading to potential confusion
       protected $aProperty = 1;
   }
   
   ?>


When this is the case, it is difficult to understand which class will actually handle the property. 

In the case of a private property, the different instances will stay distinct. In the case of protected or public properties, they will all share the same value. 

It is recommended to avoid redefining the same property in a hierarchy.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Classes/RedefinedProperty |
+-------------+---------------------------+
| Rulesets    | :ref:`ClassReview`        |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _not-same-name-as-file:

Not Same Name As File
+++++++++++++++++++++

 The class, interface or trait in this file as a different name, case included, than the file name. 

In the following example,  the file name is ``Foo.php``.
.. code-block:: php

   <?php
   
   // normal host of this file
   class Foo {
       // some code
   }
   
   // case-typo this file
   class foo {
       // some code
   }
   
   // strangely stored class 
   class foo {
       // some code
   }
   
   // This is valid name, but there is also a Foo class, and other classe in this file. 
   interface Foo {}
   
   ?>

Specs
^^^^^
+-------------+------------------------+
| Short name  | Classes/SameNameAsFile |
+-------------+------------------------+
| Rulesets    | none                   |
+-------------+------------------------+
| Exakt since | 0.8.4                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Slow (1 hour)          |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _scalar-or-object-property:

Scalar Or Object Property
+++++++++++++++++++++++++

 Property shouldn't use both object and scalar syntaxes. When a property may be an object, it is recommended to implement the Null Object pattern : instead of checking if the property is scalar, make it always object. 

.. code-block:: php

   <?php
   
   class x {
       public $display = 'echo';
       
       function foo($string) {
           if (is_string($this->display)) {
               echo $this->string;
           } elseif ($this->display instanceof myDisplayInterface) {
               $display->display();
           } else {
               print Error when displaying\n;
           }
       }
   }
   
   interface myDisplayInterface {
       public function display($string); // does the display in its own way
   }
   
   class nullDisplay implements myDisplayInterface {
       // implements myDisplayInterface but does nothing
       public function display($string) {}
   }
   
   class x2 {
       public $display = null;
       
       public function __construct() {
           $this->display = new nullDisplay();
       }
       
       function foo($string) {
           // Keep the check, as $display is public, and may get wrong values
           if ($this->display instanceof myDisplayInterface) {
               $display->display();
           } else {
               print Error when displaying\n;
           }
       }
   }
   
   // Simple class for echo
   class echoDisplay implements myDisplayInterface {
       // implements myDisplayInterface but does nothing
       public function display($string) {
           echo $string;
       }
   }
   
   ?>


See also `Null Object Pattern <https://en.wikipedia.org/wiki/Null_Object_pattern#PHP>`_. and `The Null Object Pattern <https://www.sitepoint.com/the-null-object-pattern-polymorphism-in-domain-models/>`_.

Suggestions
^^^^^^^^^^^

* Only use one type of syntax with your properties.

Specs
^^^^^
+-------------+-----------------------------------------------------+
| Short name  | Classes/ScalarOrObjectProperty                      |
+-------------+-----------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                      |
+-------------+-----------------------------------------------------+
| Exakt since | 0.12.3                                              |
+-------------+-----------------------------------------------------+
| Php Version | All                                                 |
+-------------+-----------------------------------------------------+
| Severity    | Minor                                               |
+-------------+-----------------------------------------------------+
| Time To Fix | Slow (1 hour)                                       |
+-------------+-----------------------------------------------------+
| Precision   | High                                                |
+-------------+-----------------------------------------------------+
| Examples    | :ref:`case-sugarcrm-classes-scalarorobjectproperty` |
+-------------+-----------------------------------------------------+


.. _should-deep-clone:

Should Deep Clone
+++++++++++++++++

 By default, PHP makes a shallow clone. It only clone the scalars, and keep the reference to any object already referenced. This means that the cloned object and its original share any object they hold as property.

This is where the magic method `__clone() <https://www.php.net/manual/en/language.oop5.magic.php>`_ comes into play. It is called, when defined, at clone time, so that the cloned object may clone all the needed sub-objects.

It is recommended to use the `__clone() <https://www.php.net/manual/en/language.oop5.magic.php>`_ method whenever the objects hold objects. 

.. code-block:: php

   <?php
   
   class a {
       public $b = null;
       
       function __construct() {
           $this->b =  new Stdclass();
           $this->b->c = 1;
       }
   }
   
   class ab extends a {
       function __clone() {
           $this->b = clone $this->b;
       }
   }
   
   // class A is shallow clone, so $a->b is not cloned
   $a = new a();
   $b = clone $a;
   $a->b->c = 3;
   echo $b->b->c;
   // displays 3
   
   // class Ab is deep clone, so $a->b is cloned
   $a = new ab();
   $b = clone $a;
   $a->b->c = 3;
   echo $b->b->c;
   // displays 1
   
   ?>


See also `PHP Clone and Shallow vs Deep Copying <http://jacob-walker.com/blog/php-clone-and-shallow-vs-deep-copying.html>`_ and `Cloning objects <https://www.php.net/manual/en/language.oop5.cloning.php>`_.

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Classes/ShouldDeepClone |
+-------------+-------------------------+
| Rulesets    | :ref:`Suggestions`      |
+-------------+-------------------------+
| Exakt since | 1.7.0                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Quick (30 mins)         |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _should-have-destructor:

Should Have Destructor
++++++++++++++++++++++

 PHP destructors are called when the object has to be destroyed. By default, PHP calls recursively the destructor on internal objects, until everything is unset.

Unsetting objects and resources explicitly in the destructor is a good practice to reduce the amount of memory in use. It helps PHP resource counter to keep the numbers low, and easier to clean. This is a major advantage for long running scripts.

.. code-block:: php

   <?php
   
   class x {
       function __construct() {
           $this->p = new y();
       }
   
       function __destruct() {
           print __METHOD__.PHP_EOL;
           unset($this->p);
       }
   }
   
   class y {
       function __construct() {
           print __METHOD__.PHP_EOL;
           $this->p = new y();
       }
   
       function __destruct() {
           print __METHOD__.PHP_EOL;
           unset($this->p);
       }
   }
   
   $a = (new x);
   sleep(1);
   
   // This increment the resource counter by one for the property.
   $p = $a->p;
   unset($a);
   sleep(3);
   
   print 'end'.PHP_EOL;
   // Y destructor is only called here, as the object still exists in $p.
   
   ?>


See also `Destructor <https://www.php.net/manual/en/language.oop5.decon.php#language.oop5.decon.destructor>`_, and `Php Destructors <https://stackoverflow.com/questions/3566155/php-destructors>`_.



Suggestions
^^^^^^^^^^^

* Add a destruct method to the class to help clean at destruction time.

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Classes/ShouldHaveDestructor |
+-------------+------------------------------+
| Rulesets    | :ref:`Suggestions`           |
+-------------+------------------------------+
| Exakt since | 1.5.4                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Slow (1 hour)                |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _could-use-self:

Could Use self
++++++++++++++

 ``self`` keyword refers to the current class, or any of its parents. Using it is just as fast as the full class name, it is as readable and it is will not be changed upon class or namespace change.

It is also routinely used in traits : there, ``self`` represents the class in which the trait is used, or the trait itself. 

.. code-block:: php

   <?php
   
   class x {
       const FOO = 1;
       
       public function bar() {
           return self::FOO;
   // same as return x::FOO;
       }
   }
   
   ?>


See also `Scope Resolution Operator (\:\:) <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_.


Suggestions
^^^^^^^^^^^

* replace the explicit name with self

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------+
| Short name  | Classes/ShouldUseSelf                                                                    |
+-------------+------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`ClassReview`, :ref:`Suggestions`                                   |
+-------------+------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                    |
+-------------+------------------------------------------------------------------------------------------+
| Php Version | All                                                                                      |
+-------------+------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                    |
+-------------+------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                         |
+-------------+------------------------------------------------------------------------------------------+
| Precision   | High                                                                                     |
+-------------+------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-wordpress-classes-shoulduseself`, :ref:`case-livezilla-classes-shoulduseself` |
+-------------+------------------------------------------------------------------------------------------+


.. _should-use-local-class:

Should Use Local Class
++++++++++++++++++++++

 Methods should use the defining class, or be functions.

Methods should use ``$this`` with another method or a property, or call ``parent\:\:``. `Static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods should call another `static <https://www.php.net/manual/en/language.oop5.static.php>`_ method, or a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ property. 
Methods which are overwritten by a child class are omitted : the `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ class act as a default value for the children class, and this is correct.

.. code-block:: php

   <?php
   
   class foo {
       public function __construct() {
           // This method should do something locally, or be removed.
       }
   }
   
   class bar extends foo {
       private $a = 1;
       
       public function __construct() {
           // Calling parent:: is sufficient
           parent::__construct();
       }
   
       public function barbar() {
           // This is acting on the local object
           $this->a++;
       }
   
       public function barfoo($b) {
           // This has no action on the local object. It could be a function or a closure where needed
           return 3 + $b;
       }
   }
   
   ?>


Note that a method using a class constant is not considered as using the local class, for this analyzer. 



Suggestions
^^^^^^^^^^^

* Make this method a function
* Actually use $this, or any related attributes of the class

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------+
| Short name  | Classes/ShouldUseThis                                                                   |
+-------------+-----------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                          |
+-------------+-----------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                   |
+-------------+-----------------------------------------------------------------------------------------+
| Php Version | All                                                                                     |
+-------------+-----------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                   |
+-------------+-----------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                           |
+-------------+-----------------------------------------------------------------------------------------+
| Precision   | High                                                                                    |
+-------------+-----------------------------------------------------------------------------------------+
| ClearPHP    | `not-a-method <https://github.com/dseguy/clearPHP/tree/master/rules/not-a-method.md>`__ |
+-------------+-----------------------------------------------------------------------------------------+


.. _static-methods-can't-contain-$this:

Static Methods Can't Contain $this
++++++++++++++++++++++++++++++++++

 `Static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods are also called ``class methods`` : they may be called even if the class has no instantiated object. Thus, the local variable ``$this`` won't exist, PHP will set it to `NULL <https://www.php.net/manual/en/language.types.null.php>`_ as usual. 

.. code-block:: php

   <?php
   
   class foo {
       // Static method may access other static methods, or property, or none. 
       static function staticBar() {
           // This is not possible in a static method
           return self::otherStaticBar() . static::$staticProperty;
       }
   
       static function bar() {
           // This is not possible in a static method
           return $this->property;
       }
   }
   
   ?>


Either this is not a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ method, which is fixed by removing the ``static`` keyword, or replace all `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ mention by `static <https://www.php.net/manual/en/language.oop5.static.php>`_ properties ``Class\:\:$property``.

See also `Static Keyword <https://www.php.net/manual/en/language.oop5.`static <https://www.php.net/manual/en/language.oop5.static.php>`_.php>`_


Suggestions
^^^^^^^^^^^

* Remove any $this usage
* Turn any $this usage into a static call : $this->foo() => self\:\:foo()

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------------+
| Short name  | Classes/StaticContainsThis                                                                       |
+-------------+--------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                      |
+-------------+--------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                            |
+-------------+--------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                              |
+-------------+--------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                            |
+-------------+--------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                  |
+-------------+--------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                             |
+-------------+--------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-static-this <https://github.com/dseguy/clearPHP/tree/master/rules/no-static-this.md>`__      |
+-------------+--------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-xataface-classes-staticcontainsthis`, :ref:`case-sugarcrm-classes-staticcontainsthis` |
+-------------+--------------------------------------------------------------------------------------------------+


.. _static-methods:

Static Methods
++++++++++++++

 List of all `static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods.

.. code-block:: php

   <?php
   
   class foo {
       static public function staticMethod() {
           
       }
       
       public function notStaticMethod() {
       
       }
              
       private function method() {
           // This is not a property
           new static();
       }
   }
   
   ?>

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Classes/StaticMethods |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _static-methods-called-from-object:

Static Methods Called From Object
+++++++++++++++++++++++++++++++++

 `Static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods may be called without instantiating an object. As such, they never interact with the special variable '`$this <https://www.php.net/manual/en/language.oop5.basic.php>`_', as they do not depend on object existence. 

Besides this, `static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods are normal methods that may be called directly from object context, to perform some utility task. 

To maintain code readability, it is recommended to call `static <https://www.php.net/manual/en/language.oop5.static.php>`_ method in a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ way, rather than within object context.

.. code-block:: php

   <?php
       class x {
           static function y( ) {}
       }
       
       $z = new x( );
       
       $z->y( ); // Readability : no one knows it is a static call
       x::y( );  // Readability : here we know
   ?>




Suggestions
^^^^^^^^^^^

* Switch to static method syntax
* Remove the static option from the method

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Classes/StaticMethodsCalledFromObject       |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.8.4                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _static-properties:

Static Properties
+++++++++++++++++

 List of all `static <https://www.php.net/manual/en/language.oop5.static.php>`_ properties.
.. code-block:: php

   <?php
   
   class foo {
       static public $staticProperty = 1;
              public $notStaticProperty = 2;
              
       private function method() {
           // This is not a property
           new static();
       }
   }
   
   function bar() {
       // This is not a static property
       static $staticVariable;
       
       //....
   }
   
   ?>

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Classes/StaticProperties |
+-------------+--------------------------+
| Rulesets    | :ref:`CE`                |
+-------------+--------------------------+
| Exakt since | 0.8.4                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Slow (1 hour)            |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _strange-names-for-methods:

Strange Names For Methods
+++++++++++++++++++++++++

 Those methods should have another name.

Ever wondered why the ``__constructor`` is never called? Or the ``__consturct`` ? 

Those errors most often originate from typos, or quick fixes that where not fully tested. Other times, they were badly chosen, or ran into PHP's own reserved keywords. 

.. code-block:: php

   <?php
   
   class foo {
       // The real constructor
       function __construct() {}
   
       // The fake constructor
       function __constructor() {}
       
       // The 'typo'ed' constructor
       function __consturct() {}
       
       // This doesn't clone
       function clone() {}
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Use the proper name
* Remove the method, when it is not used and tests still pass.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Classes/StrangeName |
+-------------+---------------------+
| Rulesets    | none                |
+-------------+---------------------+
| Exakt since | 0.10.1              |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Major               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _swapped-arguments:

Swapped Arguments
+++++++++++++++++

 Overwritten methods must be compatible, but argument names is not part of that compatibility.

Methods with the same name, in two classes of the same hierarchy, must be compatible for typehint, default value, reference. The name of the argument is not taken into account when checking such compatibility, at least until PHP 7.4.

.. code-block:: php

   <?php
   
   class x {
       function foo($a, $b) {}
       
       function bar($a, $b) {}
   }
   
   class y extends x {
       // foo is compatible (identical) with the above class
       function foo($a, $b) {}
       
       // bar is compatible with the above class, yet, the argument might not receive what they expect.
       function bar($b, $a) {}
   }
   
   ?>


This analysis reports argument lists that differs in ordering. This analysis doesn't report argument lists that also differs in argument names. 



Suggestions
^^^^^^^^^^^

* Make sure the names of the argument are in the same order in all classes and interfaces

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Classes/SwappedArguments |
+-------------+--------------------------+
| Rulesets    | :ref:`Analyze`           |
+-------------+--------------------------+
| Exakt since | 2.1.5                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Critical                 |
+-------------+--------------------------+
| Time To Fix | Quick (30 mins)          |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _test-class:

Test Class
++++++++++

 Those are test classes, based on popular UT frameworks.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Classes/TestClass |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _$this-belongs-to-classes-or-traits:

$this Belongs To Classes Or Traits
++++++++++++++++++++++++++++++++++

 `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ variable represents the current object, inside a class or trait scope. 

It is a pseudo-variable, and should be used within class's or trait's methods and not outside. It should also not be used in `static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods.

PHP 7.1 is stricter and check for `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ at several situations. Some are found by `static <https://www.php.net/manual/en/language.oop5.static.php>`_ analysis, some are dynamic analysis.

.. code-block:: php

   <?php
   
   // as an argument
   function foo($this) {
       // Using global
       global $this;
       // Using static (not a property)
       static $this;
       
       // Can't unset it
       unset($this);
       
       try {
           // inside a foreach
           foreach($a as $this) {  }
           foreach($a as $this => $b) {  }
           foreach($a as $b => $this) {  }
       } catch (Exception $this) {
           // inside a catch
       }
       
       // with Variable Variable
       $a = this;
       $$a = 42;
   }
   
   class foo {
       function bar() {
           // Using references
           $a =& $this;
           $a = 42;
           
           // Using extract(), parse_str() or similar functions
           extract([this => 42]);  // throw new Error(Cannot re-assign $this)
           var_dump($this);
       }
   
       static function __call($name, $args) {
           // Using __call
           var_dump($this); // prints object(C)#1 (0) {}, php-7.0 printed NULL
           $this->test();   // prints ops
       }
   
   }
   ?>




Suggestions
^^^^^^^^^^^

* Do not use `$this` as a variable name, except for the current object, in a class, trait or closure.

Specs
^^^^^
+-------------+----------------------------------------------+
| Short name  | Classes/ThisIsForClasses                     |
+-------------+----------------------------------------------+
| Rulesets    | :ref:`Analyze`                               |
+-------------+----------------------------------------------+
| Exakt since | 0.8.4                                        |
+-------------+----------------------------------------------+
| Php Version | All                                          |
+-------------+----------------------------------------------+
| Severity    | Major                                        |
+-------------+----------------------------------------------+
| Time To Fix | Quick (30 mins)                              |
+-------------+----------------------------------------------+
| Precision   | High                                         |
+-------------+----------------------------------------------+
| Examples    | :ref:`case-openemr-classes-thisisforclasses` |
+-------------+----------------------------------------------+


.. _$this-is-not-an-array:

$this Is Not An Array
+++++++++++++++++++++

 ``$this`` variable represents the current object and it is not an array. 

This is unless the class (or its parents) has the ``ArrayAccess`` interface, or extends ``ArrayObject`` or ``SimpleXMLElement``.

.. code-block:: php

   <?php
   
   // $this is an array
   class Foo extends ArrayAccess {
       function bar() {
           ++$this[3];
       }
   }
   
   // $this is not an array
   class Foo2 {
       function bar() {
           ++$this[3];
       }
   }
   
   ?>


See also `ArrayAccess <https://www.php.net/manual/en/class.arrayaccess.php>`_, `ArrayObject <https://www.php.net/manual/en/class.arrayobject.php>`_ and `The Basics <https://www.php.net/manual/en/language.oop5.basic.php>`_.


Suggestions
^^^^^^^^^^^

* Extends ``ArrayObject``, or a class that extends it, to use ``$this`` as an array too.
* Implements ``ArrayAccess`` to use ``$this`` as an array too.
* Use a property in the current class to store the data, instead of $this directly.

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Classes/ThisIsNotAnArray |
+-------------+--------------------------+
| Rulesets    | :ref:`Analyze`           |
+-------------+--------------------------+
| Exakt since | 0.8.4                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Major                    |
+-------------+--------------------------+
| Time To Fix | Quick (30 mins)          |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _$this-is-not-for-static-methods:

$this Is Not For Static Methods
+++++++++++++++++++++++++++++++

 `Static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods shouldn't use `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ variable.

`$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ variable represents an object, the current object. It is not compatible with a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ method, which may operate without any object. 

While executing a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ method, `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ is actually set to `NULL <https://www.php.net/manual/en/language.types.null.php>`_.

.. code-block:: php

   <?php
   
   class foo {
       static $staticProperty = 1;
   
       // Static methods should use static properties
       static public function count() {
           return self::$staticProperty++;
       }
       
       // Static methods can't use $this
       static public function bar() {
           return $this->a;   // No $this usage in a static method
       }
   }
   
   ?>


See also `Static Keyword <https://www.php.net/manual/en/language.oop5.`static <https://www.php.net/manual/en/language.oop5.static.php>`_.php>`_.


Suggestions
^^^^^^^^^^^

* Remove the static keyword on the method, and update all calls to this method to use $this
* Remove the usage of $this in the method, replacing it with static properties
* Make $this an argument (and change its name) : then, make the method a function

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------+
| Short name  | Classes/ThisIsNotForStatic                                                                  |
+-------------+---------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                              |
+-------------+---------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                       |
+-------------+---------------------------------------------------------------------------------------------+
| Php Version | All                                                                                         |
+-------------+---------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                       |
+-------------+---------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                             |
+-------------+---------------------------------------------------------------------------------------------+
| Precision   | High                                                                                        |
+-------------+---------------------------------------------------------------------------------------------+
| ClearPHP    | `no-static-this <https://github.com/dseguy/clearPHP/tree/master/rules/no-static-this.md>`__ |
+-------------+---------------------------------------------------------------------------------------------+


.. _throw-in-destruct:

Throw In Destruct
+++++++++++++++++

 According to the manual, ``Attempting to throw an exception from a destructor (called in the time of script termination) causes a fatal error.``

The destructor may be called during the lifespan of the script, but it is not certain. If the exception is thrown later, the script may end up with a fatal error. 

Thus, it is recommended to avoid throwing exceptions within the ``__destruct`` method of a class.

.. code-block:: php

   <?php
   
   // No exception thrown
   class Bar { 
       function __construct() {
           throw new Exception('__construct');
       }
   
       function __destruct() {
           $this->cleanObject();
       }
   }
   
   // Potential crash
   class Foo { 
       function __destruct() {
           throw new Exception('__destruct');
       }
   }
   
   ?>


See also `Constructors and Destructors <https://www.php.net/manual/en/language.oop5.decon.php>`_.


Suggestions
^^^^^^^^^^^

* Remove any exception thrown from a destructor

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Classes/ThrowInDestruct                     |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.8.4                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Major                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _too-many-children:

Too Many Children
+++++++++++++++++

 Classes that have more than 15 children. It is worth checking if they cannot be refactored in anyway.

The threshold of 15 children can be configured. There is no technical limitation of the number of children and grand-children for a class. 

The analysis doesn't work recursively : only direct generations are counted. Only children that can be found in the code are counted. 

.. code-block:: php

   <?php
   
   // parent class
   // calling it grandparent to avoid confusion with 'parent'
   class grandparent {}
   
   
   class children1 extends grandparent {}
   class children2 extends grandparent {}
   class children3 extends grandparent {}
   class children4 extends grandparent {}
   class children5 extends grandparent {}
   class children6 extends grandparent {}
   class children7 extends grandparent {}
   class children8 extends grandparent {}
   class children9 extends grandparent {}
   class children11 extends grandparent {}
   class children12 extends grandparent {}
   class children13 extends grandparent {}
   class children14 extends grandparent {}
   class children15 extends grandparent {}
   class children16 extends grandparent {}
   class children17 extends grandparent {}
   class children18 extends grandparent {}
   class children19 extends grandparent {}
   
   ?>


See also `Why is subclassing too much bad (and hence why should we use prototypes to do away with it)? <https://softwareengineering.stackexchange.com/questions/137687/why-is-subclassing-too-much-bad-and-hence-why-should-we-use-prototypes-to-do-aw>`_.


Suggestions
^^^^^^^^^^^

* Split the original class into more specialised classes

+--------------------+---------+---------+--------------------------------------------------------+
| Name               | Default | Type    | Description                                            |
+--------------------+---------+---------+--------------------------------------------------------+
| childrenClassCount | 15      | integer | Threshold for too many children classes for one class. |
+--------------------+---------+---------+--------------------------------------------------------+



Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------+
| Short name  | Classes/TooManyChildren                                                                    |
+-------------+--------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Suggestions`                                                                         |
+-------------+--------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                      |
+-------------+--------------------------------------------------------------------------------------------+
| Php Version | All                                                                                        |
+-------------+--------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                      |
+-------------+--------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                              |
+-------------+--------------------------------------------------------------------------------------------+
| Precision   | High                                                                                       |
+-------------+--------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-typo3-classes-toomanychildren`, :ref:`case-woocommerce-classes-toomanychildren` |
+-------------+--------------------------------------------------------------------------------------------+


.. _too-many-dereferencing:

Too Many Dereferencing
++++++++++++++++++++++

 Linking too many properties and methods, one to the other.

This analysis counts both `static <https://www.php.net/manual/en/language.oop5.static.php>`_ calls and normal call; methods, properties and constants. It also takes into account arrays along the way.

The default limit of chaining methods and properties is set to 7 by default. 

.. code-block:: php

   <?php
   
   // 9 chained calls.
   $main->getA()->getB()->getC()->getD()->getE()->getF()->getG()->getH()->getI()->property;
   
   ?>


Too many chained methods is harder to read. 



Suggestions
^^^^^^^^^^^

*

+----------------------+---------+---------+----------------------------------+
| Name                 | Default | Type    | Description                      |
+----------------------+---------+---------+----------------------------------+
| tooManyDereferencing | 7       | integer | Maximum number of dereferencing. |
+----------------------+---------+---------+----------------------------------+



Specs
^^^^^
+-------------+------------------------------+
| Short name  | Classes/TooManyDereferencing |
+-------------+------------------------------+
| Rulesets    | :ref:`Analyze`               |
+-------------+------------------------------+
| Exakt since | 1.9.7                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Quick (30 mins)              |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _too-many-finds:

Too Many Finds
++++++++++++++

 Too many methods called 'find*' in this class. It is may be time to consider the `Specification pattern <https://en.wikipedia.org/wiki/Specification_pattern>`_.

.. code-block:: php

   <?php
   
   // quite a fishy interface
   interface UserInterface {
       public function findByEmail($email);
       public function findByUsername($username);
       public function findByFirstName($firstname);
       public function findByLastName($lastname);
       public function findByName($name);
       public function findById($id);
   
       public function insert($user);
       public function update($user);
   }
   
   ?>


See also `On Taming Repository Classes in Doctrine <https://beberlei.de/2013/03/04/doctrine_repositories.html>`_ , `On Taming Repository Classes in Doctrine… Among other things. <http://blog.kevingomez.fr/2015/02/07/on-taming-repository-classes-in-doctrine-among-other-things/>`_, `specifications <https://slides.pixelart.at/2017-02-04/fosdem/specifications/#/>`_.

+--------------+---------+---------+-------------------------------------------------------------------------------------------+
| Name         | Default | Type    | Description                                                                               |
+--------------+---------+---------+-------------------------------------------------------------------------------------------+
| minimumFinds | 5       | integer | Minimal number of prefixed methods to report.                                             |
+--------------+---------+---------+-------------------------------------------------------------------------------------------+
| findPrefix   | find    | string  | list of prefix to use when detecting the 'find'. Comma-separated list, case insensitive.  |
+--------------+---------+---------+-------------------------------------------------------------------------------------------+
| findSuffix   |         | string  | list of fix to use when detecting the 'find'. Comma-separated list, case insensitive.     |
+--------------+---------+---------+-------------------------------------------------------------------------------------------+



Specs
^^^^^
+-------------+----------------------+
| Short name  | Classes/TooManyFinds |
+-------------+----------------------+
| Rulesets    | :ref:`Analyze`       |
+-------------+----------------------+
| Exakt since | 0.10.5               |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _too-many-injections:

Too Many Injections
+++++++++++++++++++

 When a class is constructed with more than four dependencies, it should be split into smaller classes.

.. code-block:: php

   <?php
   
   // This class relies on 5 other instances. 
   // It is probably doing too much.
   class Foo {
       public function __construct(
               A $a, 
               B $b, 
               C $c,
               D $d
               E $e ) {
           $this->a = $a;
           $this->b = $b;
           $this->d = $d;
           $this->d = $d;
           $this->e = $e;
       }
   }
   
   ?>


See also `Dependency Injection Smells <http://seregazhuk.github.io/2017/05/04/di-smells/>`_.



Suggestions
^^^^^^^^^^^

* Split the class into smaller classes. Try to do less in that class.

+-----------------+---------+---------+-----------------------------------------------------------+
| Name            | Default | Type    | Description                                               |
+-----------------+---------+---------+-----------------------------------------------------------+
| injectionsCount | 5       | integer | Threshold for too many injected parameters for one class. |
+-----------------+---------+---------+-----------------------------------------------------------+



Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------+
| Short name  | Classes/TooManyInjections                                                                     |
+-------------+-----------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                |
+-------------+-----------------------------------------------------------------------------------------------+
| Exakt since | 0.11.6                                                                                        |
+-------------+-----------------------------------------------------------------------------------------------+
| Php Version | All                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                 |
+-------------+-----------------------------------------------------------------------------------------------+
| Precision   | High                                                                                          |
+-------------+-----------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-nextcloud-classes-toomanyinjections`, :ref:`case-thelia-classes-toomanyinjections` |
+-------------+-----------------------------------------------------------------------------------------------+


.. _magic-visibility:

Magic Visibility
++++++++++++++++

 The class magic methods must have public visibility and cannot be `static <https://www.php.net/manual/en/language.oop5.static.php>`_.

.. code-block:: php

   <?php
   
   class foo{
       // magic method must bt public and non-static
       public static function __clone($name) {    }
   
       // magic method can't be private
       private function __get($name) {    }
   
       // magic method can't be protected
       private function __set($name, $value) {    }
   
       // magic method can't be static
       public static function __isset($name) {    }
   }
   
   ?>


See also `Magic methods <https://www.php.net/manual/en/language.oop5.magic.php>`_.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Classes/toStringPss       |
+-------------+---------------------------+
| Rulesets    | :ref:`CompatibilityPHP70` |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | 5.4-                      |
+-------------+---------------------------+
| Severity    | Major                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _di-cyclic-dependencies:

DI Cyclic Dependencies
++++++++++++++++++++++

 When injecting dependencies, classes that mutually depend on each other is a code smell. 

Dependency injection should be organized as an acyclic tree-like structure

.. code-block:: php

   <?php
   
   // Classes A and B depends on each other. 
   class A {
       protected $b;
   
       public function __construct(B $b) {
           $this->b = $b;
       }
   }
   
   class B {
       public $a;
   
       protected function setA(A $a) {
           $this->a = $a;
       }
   }
   ?>


See also `Dependency Injection Smells <http://seregazhuk.github.io/2017/05/04/di-smells/>`_.

Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Classes/TypehintCyclicDependencies |
+-------------+------------------------------------+
| Rulesets    | none                               |
+-------------+------------------------------------+
| Exakt since | 0.11.6                             |
+-------------+------------------------------------+
| Php Version | All                                |
+-------------+------------------------------------+
| Severity    | Minor                              |
+-------------+------------------------------------+
| Time To Fix | Slow (1 hour)                      |
+-------------+------------------------------------+
| Precision   | High                               |
+-------------+------------------------------------+


.. _wrong-access-style-to-property:

Wrong Access Style to Property
++++++++++++++++++++++++++++++

 Use the right syntax when reaching for a property. `Static <https://www.php.net/manual/en/language.oop5.static.php>`_ properties use the ``\:\:`` operator, and non-`static <https://www.php.net/manual/en/language.oop5.static.php>`_ properties use ``->``. 

Mistaking one of the other raise two different reactions from PHP : ``Access to undeclared `static <https://www.php.net/manual/en/language.oop5.static.php>`_ property`` is a fatal error, while ``PHP Notice:  Accessing `static <https://www.php.net/manual/en/language.oop5.static.php>`_ property aa\:\:$a as non `static <https://www.php.net/manual/en/language.oop5.static.php>`_`` is a notice.

.. code-block:: php

   <?php
   
   class a { 
       static public $a = 1;
       
       function foo() {
           echo self::$a; // right
           echo $this->a; // WRONG
       }
   }
   
   class b { 
       public $b = 1;
   
       function foo() {
           echo $this->$b;  // right
           echo b::$b;      // WRONG
       }
   }
   
   ?>


This analysis reports both `static <https://www.php.net/manual/en/language.oop5.static.php>`_ properties with a `->` access, and non-`static <https://www.php.net/manual/en/language.oop5.static.php>`_ properties with a `\:\:` access.

See also `Static Keyword <https://www.php.net/manual/en/language.oop5.`static <https://www.php.net/manual/en/language.oop5.static.php>`_.php>`_.


Suggestions
^^^^^^^^^^^

* Match the property call with the definition
* Make the property static

Specs
^^^^^
+-------------+-----------------------------------------------------------------+
| Short name  | Classes/UndeclaredStaticProperty                                |
+-------------+-----------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`ClassReview` |
+-------------+-----------------------------------------------------------------+
| Exakt since | 1.4.9                                                           |
+-------------+-----------------------------------------------------------------+
| Php Version | All                                                             |
+-------------+-----------------------------------------------------------------+
| Severity    | Critical                                                        |
+-------------+-----------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                 |
+-------------+-----------------------------------------------------------------+
| Precision   | High                                                            |
+-------------+-----------------------------------------------------------------+
| Examples    | :ref:`case-humo-gen-classes-undeclaredstaticproperty`           |
+-------------+-----------------------------------------------------------------+


.. _undefined-classes:

Undefined Classes
+++++++++++++++++

 Those classes are used in the code, but there are no definition for them.

This may happens under normal conditions, if the application makes use of an unsupported extension, that defines extra classes; 
or if some external libraries, such as PEAR, are not provided during the analysis.

.. code-block:: php

   <?php
   
   // FPDF is a classic PDF class, that is usually omitted by Exakat. 
   $o = new FPDF();
   
   // Exakat reports undefined classes in instanceof
   // PHP ignores them
   if ($o instanceof SomeClass) {
       // doSomething();
   }
   
   // Classes may be used in typehint too
   function foo(TypeHintClass $x) {
       // doSomething();
   }
   
   ?>


This analysis also checks in attributes.



Suggestions
^^^^^^^^^^^

* Fix the typo in the class name
* Add a missing 'use' expression
* Create the missing class

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Classes/UndefinedClasses |
+-------------+--------------------------+
| Rulesets    | :ref:`Analyze`           |
+-------------+--------------------------+
| Exakt since | 0.8.4                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Major                    |
+-------------+--------------------------+
| Time To Fix | Slow (1 hour)            |
+-------------+--------------------------+
| Precision   | Medium                   |
+-------------+--------------------------+


.. _undefined-class-constants:

Undefined Class Constants
+++++++++++++++++++++++++

 Class constants that are used, but never defined. This should yield a fatal error upon execution, but no feedback at compile level.

.. code-block:: php

   <?php
   
   class foo {
       const A = 1;
       define('B', 2);
   }
   
   // here, C is not defined in the code and is reported
   echo foo::A.foo::B.foo::C;
   
   ?>



Suggestions
^^^^^^^^^^^

* Fix the name of the constant
* Add the constant to the current class or one of its parent
* Update the constant's visibility

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Classes/UndefinedConstants                  |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.8.4                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Major                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _undefined-parent:

Undefined Parent
++++++++++++++++

 List of properties and methods that are accessed using ``parent`` keyword but are not defined in the `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ classes. 

This may compile but, eventually yields a fatal error during execution.

.. code-block:: php

   <?php
   
   class theParent {
       // No bar() method
       // private bar() method is not accessible to theChild 
   }
   
   class theChild extends theParent {
       function foo() {
           // bar is defined in theChild, but not theParent
           parent::bar();
       }
       
       function bar() {
       
       }
   }
   
   ?>


Note that if the `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ is defined using ``extends someClass`` but ``someClass`` is not available in the tested code, it will not be reported : it may be in composer, another dependency, or just missing.

See also `parent <https://www.php.net/manual/en/keyword.`parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_.php>`_.


Suggestions
^^^^^^^^^^^

* Remove the usage of the found method
* Add a definition for the method in the appropriate parent
* Fix the name of the method, and replace it with a valid definition
* Change 'parent' with 'self' if the method is eventually defined in the current class
* Change 'parent' with another object, if the method has been defined in another class
* Add the 'extends' keyword to the class, to actually have a parent class

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Classes/UndefinedParentMP |
+-------------+---------------------------+
| Rulesets    | :ref:`Analyze`            |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _undefined-properties:

Undefined Properties
++++++++++++++++++++

 List of properties that are not explicitly defined in the class, its parents or traits.

.. code-block:: php

   <?php
   
   class foo {
       // property definition
       private bar = 2;
       
       function foofoo() {
           // $this->bar is defined in the class
           // $this->barbar is NOT defined in the class
           return $this->bar + $this->barbar;
       }
   }
   
   ?>


It is possible to spot unidentified properties by using the PHP's magic methods ``__get`` and ``__set``. Even if the class doesn't use magic methods, any call to an undefined property will be directed to those methods, and they can be used as a canary, warning that the code is missing a definition. 

.. code-block:: php

   <?php
   
   trait NoUnefinedProperties {
   	function __get($name) {
   		assert(false, "Attempt to read the $name property, on the class ".__CLASS__;
   	}
   
   	function __set($name, $value) {
   		assert(false, "Attempt to read the $name property, on the class ".__CLASS__;
   	}
   }
   
   ?>


See also `Properties <https://www.php.net/manual/en/language.oop5.properties.php>`_.

Suggestions
^^^^^^^^^^^

* Add an explicit property definition, and give it ``null`` as a default value : this way, it behaves the same as undefined.
* Rename the property to one that exists already.

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------------+
| Short name  | Classes/UndefinedProperty                                                                                     |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                                   |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                         |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                           |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                         |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                               |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                          |
+-------------+---------------------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-undefined-properties <https://github.com/dseguy/clearPHP/tree/master/rules/no-undefined-properties.md>`__ |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-wordpress-classes-undefinedproperty`, :ref:`case-mediawiki-classes-undefinedproperty`              |
+-------------+---------------------------------------------------------------------------------------------------------------+


.. _undefined-class:

Undefined \:\:class
+++++++++++++++++++

 ``\:\:class`` doesn't check if a corresponding class exists. 

``\:\:class`` must be checked with a call to `class_exists() <https://www.php.net/class_exists>`_. Otherwise, it may lead to a ``Class 'foo' not found`` or even silent dead code : this happens also with Catch and `instanceof <https://www.php.net/manual/en/language.operators.type.php>`_ commands with undefined classes. PHP doesn't raise an error in that case. 

.. code-block:: php

   <?php
   
   class foo() {}
   
   // prints foo
   echo foo::class; 
   
   // prints bar though bar doesn't exist.
   echo bar::class;
   
   ?>


See also `Class Constants <https://www.php.net/manual/en/language.oop5.constants.php>`_.

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Classes/UndefinedStaticclass                |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 1.3.5                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Major                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _undefined-static-or-self:

Undefined static\:\: Or self\:\:
++++++++++++++++++++++++++++++++

 `self <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ and `static <https://www.php.net/manual/en/language.oop5.static.php>`_ refer to the current class, or one of its `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_. The property or the method may be undefined.

.. code-block:: php

   <?php
   
   class x {
       static public function definedStatic() {}
       private definedStatic = 1;
       
       public function method() {
           self::definedStatic();
           self::undefinedStatic();
   
           static::definedStatic;
           static::undefinedStatic;
       }
   }
   
   ?>


See also `Late `Static <https://www.php.net/manual/en/language.oop5.static.php>`_ Bindings <https://www.php.net/manual/en/language.oop5.late-`static <https://www.php.net/manual/en/language.oop5.static.php>`_-bindings.php>`_.



Suggestions
^^^^^^^^^^^

* Define the missing method or property
* Remove usage of that undefined method or property
* Fix name to call an actual local structure

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------+
| Short name  | Classes/UndefinedStaticMP                                                                      |
+-------------+------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                 |
+-------------+------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                          |
+-------------+------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                            |
+-------------+------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                          |
+-------------+------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                |
+-------------+------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                           |
+-------------+------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-xataface-classes-undefinedstaticmp`, :ref:`case-sugarcrm-classes-undefinedstaticmp` |
+-------------+------------------------------------------------------------------------------------------------+


.. _uninitialized-property:

Uninitialized Property
++++++++++++++++++++++

 Uninitilized properties are not fully bootstrapped at the end of the constructor. 

Properties may be inited at definition time, along with their visibility and type. Some types are not inited at definition time, as any object, so they should be inited during constructor. At the end of the former, all properties shall have a legit value, and be ready for usage.

.. code-block:: php

   <?php
   
   class x {
       private $foo = null;
       private $uninited;
       
       function __construct($arg) {
           $this->foo = $args;
           
           // $this->uninited is not inited, nor at definition, nor in constructor
           // it will hold null at the beginning of the next method call
       }
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Remove the property, and move it to another class
* Add an initialisation for this property

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Classes/UninitedProperty |
+-------------+--------------------------+
| Rulesets    | :ref:`ClassReview`       |
+-------------+--------------------------+
| Exakt since | 2.0.9                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Quick (30 mins)          |
+-------------+--------------------------+
| Precision   | Medium                   |
+-------------+--------------------------+


.. _unitialized-properties:

Unitialized Properties
++++++++++++++++++++++

 Properties that are not initialized in the constructor, nor at definition. 

.. code-block:: php

   <?php
   
   class X {
       private $i1 = 1, $i2;
       protected $u1, $u2;
       
       function __construct() {
           $this->i2 = 1 + $this->u2;
       }
       
       function m() {
           echo $this->i1, $this->i2, $this->u1, $this->u2;
       }
   }
   ?>


With the above class, when m() is accessed right after instantiation, there will be a missing property. 
Using default values at property definition, or setting default values in the constructor ensures that the created object is consistent. 



Suggestions
^^^^^^^^^^^

* Add an explicit initialization for each property.

Specs
^^^^^
+-------------+------------------------------------------------+
| Short name  | Classes/UnitializedProperties                  |
+-------------+------------------------------------------------+
| Rulesets    | :ref:`Suggestions`, :ref:`Top10`               |
+-------------+------------------------------------------------+
| Exakt since | 0.8.9                                          |
+-------------+------------------------------------------------+
| Php Version | All                                            |
+-------------+------------------------------------------------+
| Severity    | Major                                          |
+-------------+------------------------------------------------+
| Time To Fix | Quick (30 mins)                                |
+-------------+------------------------------------------------+
| Precision   | High                                           |
+-------------+------------------------------------------------+
| Examples    | :ref:`case-spip-classes-unitializedproperties` |
+-------------+------------------------------------------------+


.. _unreachable-class-constant:

Unreachable Class Constant
++++++++++++++++++++++++++

 Class constants may be unreachable due to visibility configuration. 

Since PHP 7.1, class constants support visibility. Their usage may be restricted to the current class, or ``private``, to classes that extends or are extended by the current class, or ``protected``. They may also be ``public``, just like it was before. 

.. code-block:: php

   <?php
   
   class Foo{
       private const PRIVATE = 1;
               const PUBLIC = 3;
   }
   
   // PHP 7.1- and older
   echo Foo::PUBLIC;
   
   // This is not accessible
   echo Foo::PRIVATE;
   
   ?>


See also `Class Constant <https://www.php.net/manual/en/language.oop5.constants.php>`_ and `PHP RFC: Support Class Constant Visibility <https://wiki.php.net/rfc/class_const_visibility>`_.


Suggestions
^^^^^^^^^^^

* Make the class constant protected, when the call to the constant is inside a related class.
* Create another constant, that may be accessible
* Make the class constant public

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Classes/UnreachableConstant |
+-------------+-----------------------------+
| Rulesets    | :ref:`ClassReview`          |
+-------------+-----------------------------+
| Exakt since | 1.5.4                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Major                       |
+-------------+-----------------------------+
| Time To Fix | Slow (1 hour)               |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _unresolved-catch:

Unresolved Catch
++++++++++++++++

 Catch clauses do not check for Exception existence. 

Catch clauses check that the emitted expression is of the requested Class, but if that class doesn't exist in the code, the catch clause is always false. This is dead code.

.. code-block:: php

   <?php
   
   try {
       // doSomething()
   } catch {TypoedExxeption $e) { // Do not exist Exception
       // Fix this exception
   } catch {Stdclass $e) {        // Exists, but is not an exception
       // Fix this exception
   } catch {Exception $e) {        // Actual and effective catch
       // Fix this exception
   }
   ?>




Suggestions
^^^^^^^^^^^

* Fix the name of the exception
* Remove the catch clause
* Add a use expression with a valid name
* Create/import the missing exception

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------------+
| Short name  | Classes/UnresolvedCatch                                                                               |
+-------------+-------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Dead code <dead-code>`                                                                          |
+-------------+-------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                 |
+-------------+-------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                   |
+-------------+-------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                 |
+-------------+-------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                       |
+-------------+-------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                  |
+-------------+-------------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-unresolved-catch <https://github.com/dseguy/clearPHP/tree/master/rules/no-unresolved-catch.md>`__ |
+-------------+-------------------------------------------------------------------------------------------------------+


.. _unresolved-classes:

Unresolved Classes
++++++++++++++++++

 The following classes are instantiated in the code, but their definition couldn't be found. 

.. code-block:: php

   <?php
   
   class Foo extends Bar {
       private function foobar() {
           // here, parent is not resolved, as Bar is not defined in the code.
           return parent::$prop;
       }
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Check for namespaces and aliases and make sure they are correctly configured.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Classes/UnresolvedClasses |
+-------------+---------------------------+
| Rulesets    | :ref:`Analyze`            |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Major                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _unresolved-instanceof:

Unresolved Instanceof
+++++++++++++++++++++

 The `instanceof <https://www.php.net/manual/en/language.operators.type.php>`_ operator doesn't confirm if the compared class exists. 

It checks if an variable is of a specific class. However, if the referenced class doesn't exist, because of a bug, a missed inclusion or a typo, the operator always fails, without a warning. 

.. code-block:: php

   <?php
   
   namespace X {
       class C {}
       
       // This is OK, as C is defined in X
       if ($o instanceof C) { }
   
       // This is not OK, as C is not defined in global
       // instanceof respects namespaces and use expressions
       if ($o instanceof \C) { }
   
       // This is not OK, as undefinedClass
       if ($o instanceof undefinedClass) { }
   
       // This is not OK, as $class is now a full namespace. It actually refers to \c, which doesn't exist
       $class = 'C';
       if ($o instanceof $class) { }
   }
   ?>


Make sure the following classes are well defined.

See also `Instanceof <https://www.php.net/manual/en/language.operators.type.php>`_.


Suggestions
^^^^^^^^^^^

* Remove the call to instanceof and all its dependencies.
* Fix the class name and use a class existing in the project.

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Short name  | Classes/UnresolvedInstanceof                                                                                    |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Dead code <dead-code>`, :ref:`Top10`                                                      |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                             |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                                |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                            |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-unresolved-instanceof <https://github.com/dseguy/clearPHP/tree/master/rules/no-unresolved-instanceof.md>`__ |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-wordpress-classes-unresolvedinstanceof`                                                              |
+-------------+-----------------------------------------------------------------------------------------------------------------+


.. _unused-classes:

Unused Classes
++++++++++++++

 The following classes are never explicitly used in the code.

Note that this may be valid in case the current code is a library or framework, since it defines classes that are used by other (unprovided) codes.
Also, this analyzer may find classes that are, in fact, dynamically loaded. 

.. code-block:: php

   <?php
   
   class unusedClasss {}
   class usedClass {}
   
   $y = new usedClass();
   
   ?>




Suggestions
^^^^^^^^^^^

* Remove unused classes
* Make use of unused classes
* Fix class name

Specs
^^^^^
+-------------+----------------------------------------------+
| Short name  | Classes/UnusedClass                          |
+-------------+----------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Dead code <dead-code>` |
+-------------+----------------------------------------------+
| Exakt since | 0.8.4                                        |
+-------------+----------------------------------------------+
| Php Version | All                                          |
+-------------+----------------------------------------------+
| Severity    | Major                                        |
+-------------+----------------------------------------------+
| Time To Fix | Quick (30 mins)                              |
+-------------+----------------------------------------------+
| Precision   | High                                         |
+-------------+----------------------------------------------+


.. _unused-class-constant:

Unused Class Constant
+++++++++++++++++++++

 The class constant is unused. Consider removing it.

.. code-block:: php

   <?php
   
   class foo {
       public const UNUSED = 1; // No mention in the code
       
       private const USED = 2;  // used constant
       
       function bar() {
           echo self::USED;
       }
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Remove the class constant
* Use the class constant

Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Classes/UnusedConstant             |
+-------------+------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`ClassReview` |
+-------------+------------------------------------+
| Exakt since | 1.8.4                              |
+-------------+------------------------------------+
| Php Version | All                                |
+-------------+------------------------------------+
| Severity    | Minor                              |
+-------------+------------------------------------+
| Time To Fix | Quick (30 mins)                    |
+-------------+------------------------------------+
| Precision   | High                               |
+-------------+------------------------------------+


.. _unused-methods:

Unused Methods
++++++++++++++

 Those methods are never called. 

They are probably dead code, unless they are called dynamically.

This analysis omits methods which are in a class that makes dynamical `self <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ calls : ``$this->$m()``. That way, any method may be called. 

This analysis omits methods which are overwritten by a child class. That way, they are considered to provide a default behavior. 

.. code-block:: php

   <?php
   
   class foo {
       public function used() {
           $this->used();
       }
   
       public function unused() {
           $this->used();
       }
   }
   
   class bar extends foo {
       public function some() {
           $this->used();
       }
   }
   
   $a = new foo();
   $a->used();
   
   ?>


See also `Dead Code: Unused Method <https://vulncat.fortify.com/en/detail?id=desc.structural.java.dead_code_unused_method>`_.


Suggestions
^^^^^^^^^^^

* Make use of the method
* Remove the method
* Move the method to another class

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Classes/UnusedMethods        |
+-------------+------------------------------+
| Rulesets    | :ref:`Dead code <dead-code>` |
+-------------+------------------------------+
| Exakt since | 0.8.4                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Slow (1 hour)                |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _unused-private-methods:

Unused Private Methods
++++++++++++++++++++++

 Private methods that are not used are dead code. 

Private methods are reserved for the defining class. Thus, they must be used with the current class, with ``$this`` or ``self\:\:``.

Protected methods, in a standalone class, are also included.


.. code-block:: php

   <?php
   
   class Foo {
       // Those methods are used
       private function method() {}
       private static function staticMethod() {}
   
       // Those methods are not used
       private function unusedMethod() {}
       private static function staticUnusedMethod() {}
       
       public function bar() {
           self::staticMethod();
           $this->method();
       }
   }
   
   ?>


This analysis skips classes that makes `self <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ dynamic calls, such as ``$this->$method()``.



Suggestions
^^^^^^^^^^^

* Remove the private method, as it is unused
* Add a call to this private method
* Change method visibility to make it available to other classes

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Classes/UnusedPrivateMethod  |
+-------------+------------------------------+
| Rulesets    | :ref:`Dead code <dead-code>` |
+-------------+------------------------------+
| Exakt since | 0.8.4                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Quick (30 mins)              |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _unused-private-properties:

Unused Private Properties
+++++++++++++++++++++++++

 Unused `static <https://www.php.net/manual/en/language.oop5.static.php>`_ properties should be removed. 

Unused private properties are dead code. They are usually leftovers of development or refactorisation : they used to have a mission, but are now left. 

Being private, those properties are only accessible to the current class or trait. As such, validating the 

.. code-block:: php

   <?php
   
   class foo {
       // This is a used property (see bar method)
       private $used = 1;
   
       // This is an unused property
       private $unused = 2;
       
       function bar($a) {
           $this->used += $a;
           
           return $this->used;
       }
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Remove the property altogether
* Check if the property wasn't forgotten in the rest of the class
* Check if the property is correctly named
* Change the visibility to protected or public : may be a visibility refactoring was too harsh

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------------------+
| Short name  | Classes/UnusedPrivateProperty                                                                          |
+-------------+--------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Dead code <dead-code>`                                                                           |
+-------------+--------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                  |
+-------------+--------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                    |
+-------------+--------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                  |
+-------------+--------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                        |
+-------------+--------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                   |
+-------------+--------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-openemr-classes-unusedprivateproperty`, :ref:`case-phpadsnew-classes-unusedprivateproperty` |
+-------------+--------------------------------------------------------------------------------------------------------+


.. _unused-protected-methods:

Unused Protected Methods
++++++++++++++++++++++++

 The following protected methods are unused in children class. As such, they may be considered for being private.

Methods reported by this analysis are not used by children, yet they are protected.

.. code-block:: php

   <?php
   
   class Foo {
       // This method is not used
       protected function unusedBar() {}
       protected function usedInFoo() {}
       protected function usedInFooFoo() {}
       
       public function bar2() {
           // some code
           $this->usedInFoo();
       }
   }
   
   class FooFoo extends Foo {
       protected function bar() {}
       
       public function bar2() {
           // some code
           $this->usedInFooFoo();
       }
   }
   
   class someOtherClass {
       protected function bar() {
           // This is not related to foo.
           $this->unusedbar();
       }
   }
   
   ?>


No usage of those methods were found. 

This analysis is impacted by dynamic method calls.

Suggestions
^^^^^^^^^^^

* Make use of the protected method in the code
* Remove the method

Specs
^^^^^
+-------------+--------------------------------+
| Short name  | Classes/UnusedProtectedMethods |
+-------------+--------------------------------+
| Rulesets    | :ref:`Dead code <dead-code>`   |
+-------------+--------------------------------+
| Exakt since | 0.8.4                          |
+-------------+--------------------------------+
| Php Version | All                            |
+-------------+--------------------------------+
| Severity    | Major                          |
+-------------+--------------------------------+
| Time To Fix | Slow (1 hour)                  |
+-------------+--------------------------------+
| Precision   | High                           |
+-------------+--------------------------------+


.. _use-class-operator:

Use \:\:Class Operator
++++++++++++++++++++++

 Use ``\:\:class`` to hardcode class names, instead of strings.

This is actually faster than strings, which are parsed at execution time, while ``\:\:class`` is compiled, making it faster to execute. 

``\:\:class`` operator is also able to handle use expressions, including aliases and local namespace. The code is easier to maintain. For example, the target class's namespace may be renamed, without changing the ``\:\:class``, while the string must be updated.

``\:\:class`` operator works with ``self`` and ``static``keywords. 

.. code-block:: php

   <?php
   
   namespace foo\bar;
   
   use foo\bar\X as B;
   
   class X {}
   
   $className = '\foo\bar\X';
   
   $className = foo\bar\X::class;
   
   $className = B\X;
   
   $object = new $className;
   
   ?>


This is not possible when building the name of the class with concatenation.

This is a micro-optimization. This also helps `static <https://www.php.net/manual/en/language.oop5.static.php>`_ analysis, as it gives more information at compile time to analyse.

See also `\:\:class <https://www.php.net/manual/en/language.oop5.basic.php#language.oop5.basic.class.class>`_.


Suggestions
^^^^^^^^^^^

* Replace strings by the \:\:class operator whenever possible

Specs
^^^^^
+-------------+------------------------------------------------------------------+
| Short name  | Classes/UseClassOperator                                         |
+-------------+------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Performances` |
+-------------+------------------------------------------------------------------+
| Exakt since | 0.8.7                                                            |
+-------------+------------------------------------------------------------------+
| Php Version | All                                                              |
+-------------+------------------------------------------------------------------+
| Severity    | Minor                                                            |
+-------------+------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                 |
+-------------+------------------------------------------------------------------+
| Precision   | Medium                                                           |
+-------------+------------------------------------------------------------------+
| Examples    | :ref:`case-typo3-classes-useclassoperator`                       |
+-------------+------------------------------------------------------------------+


.. _used-classes:

Used Classes
++++++++++++

 The following classes are used in the code.

Classes may be use when they are instantiated, or with `static <https://www.php.net/manual/en/language.oop5.static.php>`_ calls

.. code-block:: php

   <?php
   
   class unusedClasss { const X = 1;}
   class usedClass {}
   
   $y = new usedClass(usedClass::X);
   
   ?>

Specs
^^^^^
+-------------+-------------------+
| Short name  | Classes/UsedClass |
+-------------+-------------------+
| Rulesets    | none              |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _used-methods:

Used Methods
++++++++++++

 Those methods are used in the code. This analysis is mostly useful for its contrary.

.. code-block:: php

   <?php
   
   class foo {
       public function used() {
           $this->used();
       }
   
       // No usage of 'unused', as method call, in or out of the definition class.
       public function unused() {
           $this->used();
       }
   }
   
   class bar extends foo {
       public function some() {
           $this->used();
       }
   }
   
   $a = new foo();
   $a->used();
   
   ?>

Specs
^^^^^
+-------------+---------------------+
| Short name  | Classes/UsedMethods |
+-------------+---------------------+
| Rulesets    | none                |
+-------------+---------------------+
| Exakt since | 0.8.4               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _used-once-property:

Used Once Property
++++++++++++++++++

 Property used once in their defining class. 

Properties used in one method only may be used several times, and read only. This may be a class constant. Such properties are meant to be overwritten by an extending class, and that's possible with class constants. 

Setting properties with default values is a good way to avoid littering the code with literal values, and provide a single point of update (by extension, or by hardcoding) for all those situations. A constant is definitely better suited for this task.

.. code-block:: php

   <?php
   
   class foo {
       private $defaultCols = '*';
       cont DEFAULT_COLUMNS = '*';
   
       // $this->defaultCols holds a default value. Should be a constant.
       function bar($table, $cols) {
           // This is necessary to activate usage of default values
           if (empty($cols)) {
               $cols = $this->defaultCols;
           }
           $res = $this->query('SELECT '.$cols.' FROM '.$table);
           // ....
       }
   
       // Upgraded version of bar, with default values
       function bar2($table, $cols = self::DEFAULT_COLUMNS) {
           $res = $this->query('SELECT '.$cols.' FROM '.$table);
           // .....
       }
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Remove the property, as it is probably not unused
* Add another usage of the property where it is useful

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Classes/UsedOnceProperty |
+-------------+--------------------------+
| Rulesets    | :ref:`Analyze`           |
+-------------+--------------------------+
| Exakt since | 0.10.3                   |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Slow (1 hour)            |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _used-private-methods:

Used Private Methods
++++++++++++++++++++

 List of all private methods that are used.

Protected methods, in a standalone class, are also included.

.. code-block:: php

   <?php
   
   class Foo {
       // Those methods are used
       private function method() {}
       private static function staticMethod() {}
   
       // Those methods are not used
       private function unusedMethod() {}
       private static function staticUnusedMethod() {}
       
       public function bar() {
           self::staticMethod();
           $this->method();
       }
   }
   
   ?>

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Classes/UsedPrivateMethod |
+-------------+---------------------------+
| Rulesets    | none                      |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _used-static-properties:

Used Static Properties
++++++++++++++++++++++

 List of all `static <https://www.php.net/manual/en/language.oop5.static.php>`_ properties that are used.

A private property is used when it is defined and read. A private property that is only written is not used. A property that is only read is used, as it may have a default value, or act as `NULL <https://www.php.net/manual/en/language.types.null.php>`_.

.. code-block:: php

   <?php
   
   class foo {
       // This is a used property (see bar method)
       private $used = 1;
   
       function bar($a) {
           $this->used += $a;
           
           return $this->used;
       }
   }
   
   ?>

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Classes/UsedPrivateProperty |
+-------------+-----------------------------+
| Rulesets    | none                        |
+-------------+-----------------------------+
| Exakt since | 0.8.4                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Slow (1 hour)               |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _used-protected-method:

Used Protected Method
+++++++++++++++++++++

 Marks methods being used in the current class or its children classes.

.. code-block:: php

   <?php
   
   class foo {
       // This is reported
       protected usedByChildren() {}
   
       // This is not reported
       protected notUsedByChildren() {}
   }
   
   class bar extends foo {
       // The parent method is not overloaded, though it may be 
       protected someMethod() {
           // The parent method is called 
           $this->usedByChildren();
       }
   
   }
   
   ?>


See also `Visibility <https://www.php.net/manual/en/language.oop5.visibility.php>`_.

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Classes/UsedProtectedMethod |
+-------------+-----------------------------+
| Rulesets    | none                        |
+-------------+-----------------------------+
| Exakt since | 0.8.4                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Slow (1 hour)               |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _use-instanceof:

Use Instanceof
++++++++++++++

 The ``instanceof`` operator is a more precise alternative to ``is_object()``. It is also faster.

`instanceof <https://www.php.net/manual/en/language.operators.type.php>`_ checks for an variable to be of a class or its parents or the interfaces it implements. 
Once ``instanceof`` has been used, the actual attributes available (properties, constants, methods) are known, unlike with ``is_object()``.

Last, ``instanceof`` may be upgraded to Typehint, by moving it to the method signature. 

.. code-block:: php

   <?php
   
   class Foo {
   
       // Don't use is_object
       public function bar($o) {
           if (!is_object($o)) { return false; } // Classic argument check
           return $o->method();
       }
   
       // use instanceof
       public function bar($o) {
           if ($o instanceof myClass) {  // Now, we know which methods are available
               return $o->method();
           }
           
           return false; } // Default behavior
       }
   
       // use of typehinting
       // in case $o is not of the right type, exception is raised automatically
       public function bar(myClass $o) {
           return $o->method();
       }
   }
   
   ?>


``instanceof`` and ``is_object()`` may not be always interchangeable. Consider using `isset() <https://www.www.php.net/isset>`_ on a known property for a simple check on objects. You may also consider `is_string() <https://www.php.net/is_string>`_, `is_integer() <https://www.php.net/is_integer>`_ or `is_scalar() <https://www.php.net/is_scalar>`_, in particular instead of ``!`is_object() <https://www.php.net/is_object>`_``.

The ``instanceof`` operator is also faster than the ``is_object()`` functioncall. 

See also `Type Operators <https://www.php.net/manual/en/language.operators.type.php#language.operators.type>`_ and `is_object <https://www.php.net/manual/en/function.is-object.php>`_.


Suggestions
^^^^^^^^^^^

* Use instanceof and remove is_object()
* Create a high level interface to check a whole family of classes, instead of testing them individually
* Use typehint when possible
* Avoid mixing scalar types and objects in the same variable

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------+
| Short name  | Classes/UseInstanceof                                                                 |
+-------------+---------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                           |
+-------------+---------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                 |
+-------------+---------------------------------------------------------------------------------------+
| Php Version | All                                                                                   |
+-------------+---------------------------------------------------------------------------------------+
| Severity    | Major                                                                                 |
+-------------+---------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                       |
+-------------+---------------------------------------------------------------------------------------+
| Precision   | High                                                                                  |
+-------------+---------------------------------------------------------------------------------------+
| Examples    | :ref:`case-teampass-classes-useinstanceof`, :ref:`case-zencart-classes-useinstanceof` |
+-------------+---------------------------------------------------------------------------------------+


.. _useless-abstract-class:

Useless Abstract Class
++++++++++++++++++++++

 Those classes are marked 'abstract' and they are never extended. This way, they won't be instantiated nor used. 

Abstract classes that have only `static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods are omitted here : one usage of such classes are Utilities classes, which only offer `static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods. 

.. code-block:: php

   <?php
   
   // Never extended class : this is useless
   abstract class foo {}
   
   // Extended class
   abstract class bar {
       public function barbar() {}
   }
   
   class bar2 extends bar {}
   
   // Utility class : omitted here
   abstract class bar {
       public static function barbar() {}
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Drop the abstract keyword
* Actually add an abstract keyword

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Classes/UselessAbstract |
+-------------+-------------------------+
| Rulesets    | :ref:`Analyze`          |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _useless-constructor:

Useless Constructor
+++++++++++++++++++

 Class constructor that have empty bodies are useless. They may be removed.

.. code-block:: php

   <?php
   
   class X {
       function __construct() {
           // Do nothing
       }
   }
   
   class Y extends X {
       // Useful constructor, as it prevents usage of the parent
       function __construct() {
           // Do nothing
       }
   }
   
   ?>

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Classes/UselessConstructor |
+-------------+----------------------------+
| Rulesets    | :ref:`Analyze`             |
+-------------+----------------------------+
| Exakt since | 0.8.4                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Slow (1 hour)              |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _useless-final:

Useless Final
+++++++++++++

 When a class is declared final, all of its methods are also final by default. 

There is no need to declare them individually final.

.. code-block:: php

   <?php
   
       final class foo {
           // Useless final, as the whole class is final
           final function method() { }
       }
   
       class bar {
           // Useful final, as the whole class is not final
           final function method() { }
       }
   
   ?>


See also `Final Keyword <https://www.php.net/manual/en/language.oop5.final.php>`_, and `When to declare final <https://ocramius.github.io/blog/when-to-declare-classes-final/>`_.

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------+
| Short name  | Classes/UselessFinal                                                                            |
+-------------+-------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                     |
+-------------+-------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                           |
+-------------+-------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                             |
+-------------+-------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                           |
+-------------+-------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                |
+-------------+-------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                            |
+-------------+-------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-useless-final <https://github.com/dseguy/clearPHP/tree/master/rules/no-useless-final.md>`__ |
+-------------+-------------------------------------------------------------------------------------------------+


.. _useless-typehint:

Useless Typehint
++++++++++++++++

 `__get <https://www.php.net/manual/en/language.oop5.magic.php>`_ and `__set <https://www.php.net/manual/en/language.oop5.magic.php>`_ magic methods won't use any typehint. The name of the magic property is always cast to string.

`__call() <https://www.php.net/manual/en/language.oop5.magic.php>`_ 

.. code-block:: php

   <?php
   
   class x {
       // typehint is set and ignored
       function __set(float $name, string $value) {
           $this->$name = $value;
       }
   
       // typehint is set and ignored
       function __get(integer $name) {
           $this->$name = $value;
       }
   
       // typehint is checked by PHP 8.0 linting
       // typehint is enforced by PHP 7.x
       function __call(integer $name) {
           $this->$name = $value;
       }
   }
   
   $o = new x;
   $b = array();
   // Property will be called 'Array'
   $o->{$b} = 2;
   
   // type of $m is check at calling time. It must be string.
   $o->{$m}();
   
   ?>


See also `__set <https://www.php.net/manual/en/language.oop5.overloading.php#object.set>`_.



Suggestions
^^^^^^^^^^^

* Use `string` for the `$name` parameter
* Use no typehint for the `$name` parameter

Specs
^^^^^
+-------------+----------------------------------------+
| Short name  | Classes/UselessTypehint                |
+-------------+----------------------------------------+
| Rulesets    | :ref:`ClassReview`, :ref:`Suggestions` |
+-------------+----------------------------------------+
| Exakt since | 2.1.9                                  |
+-------------+----------------------------------------+
| Php Version | All                                    |
+-------------+----------------------------------------+
| Severity    | Minor                                  |
+-------------+----------------------------------------+
| Time To Fix | Quick (30 mins)                        |
+-------------+----------------------------------------+
| Precision   | Very high                              |
+-------------+----------------------------------------+


.. _use-this:

Use This
++++++++

 Those methods should be using `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_, or a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ method or property.

A method that doesn't use any local data may be considered for a move : may be this doesn't belong here. 

The following functioncalls have been added, as access to the current class, without using `$this` or `self` : 
+ get_class( )
+ get_called_class( )
+ get_object_vars( )
+ get_parent_class( )
+ get_class_vars( )
+ get_class_methods( )

.. code-block:: php

   <?php
   
   class dog {
       private $name = 'Rex';
       
       // This method is related to the current object and class
       public function attaboy() {
           return Fetch, $this->name, Fetch\n;
       }
   
       // Not using any class related data : Does this belong here?
       public function addition($a, $b) {
           return $a + $b;
       }
   }
   ?>


See also `The Basics <https://www.php.net/manual/en/language.oop5.basic.php>`_.

Specs
^^^^^
+-------------+-----------------+
| Short name  | Classes/UseThis |
+-------------+-----------------+
| Rulesets    | none            |
+-------------+-----------------+
| Exakt since | 0.8.4           |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Slow (1 hour)   |
+-------------+-----------------+
| Precision   | High            |
+-------------+-----------------+


.. _using-$this-outside-a-class:

Using $this Outside A Class
+++++++++++++++++++++++++++

 ``$this`` is a special variable, that should only be used in a class context. 

Until PHP 7.1, ``$this`` may be used as an argument in a function or a method, a global, a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ : while this is legit, it sounds confusing enough to avoid it.

.. code-block:: php

   <?php
   
   function foo($this) {
       echo $this;
   }
   
   // A closure can be bound to an object at later time. It is valid usage.
   $closure = function ($x) {
       echo $this->foo($x);
   }
   
   ?>


Starting with PHP 7.1, the PHP engine check thoroughly that ``$this`` is used in an appropriate manner, and raise fatal errors in case it isn't. 

Yet, it is possible to find ``$this`` outside a class : if the file is included inside a class, then ``$this`` will be recognized and validated. If the file is included outside a class context, it will yield a fatal error : ``Using `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ when not in object context``.

See also `Closure\:\:bind <https://www.php.net/manual/en/closure.bind.php>`_ and `The Basics <https://www.php.net/manual/en/language.oop5.basic.php>`_.

Specs
^^^^^
+-------------+-------------------------------------------------------------------+
| Short name  | Classes/UsingThisOutsideAClass                                    |
+-------------+-------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CompatibilityPHP71`, :ref:`LintButWontExec` |
+-------------+-------------------------------------------------------------------+
| Exakt since | 0.8.4                                                             |
+-------------+-------------------------------------------------------------------+
| Php Version | 7.0-                                                              |
+-------------+-------------------------------------------------------------------+
| Severity    | Critical                                                          |
+-------------+-------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                  |
+-------------+-------------------------------------------------------------------+
| Precision   | High                                                              |
+-------------+-------------------------------------------------------------------+


.. _dynamically-called-classes:

Dynamically Called Classes
++++++++++++++++++++++++++

 Indicates if a class is called dynamically.

.. code-block:: php

   <?php
   
   // This class is called dynamically
   class X {
       const CONSTANTE = 1;
   }
   
   $classe = 'X';
   
   $x = new $classe();
   
   echo $x::CONSTANTE;
   
   ?>

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Classes/VariableClasses |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _weak-typing:

Weak Typing
+++++++++++

 The test on a variable is not enough. The variable is checked for null, then used as an object or an array.

.. code-block:: php

   <?php
   
   if ($a !== null) {
       echo $a->b;
   }
   
   ?>


See also `From assumptions to assertions <https://rskuipers.com/entry/from-assumptions-to-assertions>`_.


Suggestions
^^^^^^^^^^^

* Use instanceof when checking for objects
* Use is_array() when checking for arrays. Also consider is_string(), is_int(), etc.
* Use typehint when the variable is an argument

Specs
^^^^^
+-------------+---------------------------------------+
| Short name  | Classes/WeakType                      |
+-------------+---------------------------------------+
| Rulesets    | :ref:`Analyze`                        |
+-------------+---------------------------------------+
| Exakt since | 1.2.8                                 |
+-------------+---------------------------------------+
| Php Version | All                                   |
+-------------+---------------------------------------+
| Severity    | Minor                                 |
+-------------+---------------------------------------+
| Time To Fix | Instant (5 mins)                      |
+-------------+---------------------------------------+
| Precision   | High                                  |
+-------------+---------------------------------------+
| Examples    | :ref:`case-teampass-classes-weaktype` |
+-------------+---------------------------------------+


.. _wrong-class-name-case:

Wrong Class Name Case
+++++++++++++++++++++

 The spotted classes are used with a different case than their definition. While PHP accepts this, it makes the code harder to read. 

It may also be a violation of coding conventions.

.. code-block:: php

   <?php
   
   // This use statement has wrong case for origin.
   use Foo as X;
   
   // Definition of the class
   class foo {}
   
   // Those instantiations have wrong case
   new FOO();
   new X();
   
   ?>


See also `PHP class name constant case sensitivity and PSR-11 <https://gist.github.com/bcremer/9e8d6903ae38a25784fb1985967c6056>`_.


Suggestions
^^^^^^^^^^^

* Match the defined class name with the called name

Specs
^^^^^
+-------------+-----------------------------------------+
| Short name  | Classes/WrongCase                       |
+-------------+-----------------------------------------+
| Rulesets    | none                                    |
+-------------+-----------------------------------------+
| Exakt since | 0.8.4                                   |
+-------------+-----------------------------------------+
| Php Version | All                                     |
+-------------+-----------------------------------------+
| Severity    | Minor                                   |
+-------------+-----------------------------------------+
| Time To Fix | Instant (5 mins)                        |
+-------------+-----------------------------------------+
| Precision   | High                                    |
+-------------+-----------------------------------------+
| Examples    | :ref:`case-wordpress-classes-wrongcase` |
+-------------+-----------------------------------------+


.. _illegal-name-for-method:

Illegal Name For Method
+++++++++++++++++++++++

 PHP has reserved usage of methods starting with ``__`` for magic methods. It is recommended to avoid using this prefix, to prevent confusions.

.. code-block:: php

   <?php
   
   class foo{
       // Constructor
       function __construct() {}
   
       // Constructor's typo
       function __constructor() {}
   
       // Illegal function name, even as private
       private function __bar() {}
   }
   
   ?>


See also `Magic Methods <https://www.php.net/manual/en/language.oop5.magic.php>`_.


Suggestions
^^^^^^^^^^^

* Avoid method names starting with a double underscore : ``__``
* Use method visibilities to ensure that methods are only available to the current class or its children

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------+
| Short name  | Classes/WrongName                                                               |
+-------------+---------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                  |
+-------------+---------------------------------------------------------------------------------+
| Exakt since | 0.9.2                                                                           |
+-------------+---------------------------------------------------------------------------------+
| Php Version | All                                                                             |
+-------------+---------------------------------------------------------------------------------+
| Severity    | Major                                                                           |
+-------------+---------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                   |
+-------------+---------------------------------------------------------------------------------+
| Precision   | High                                                                            |
+-------------+---------------------------------------------------------------------------------+
| Examples    | :ref:`case-prestashop-classes-wrongname`, :ref:`case-magento-classes-wrongname` |
+-------------+---------------------------------------------------------------------------------+


.. _wrong-typed-property-default:

Wrong Typed Property Default
++++++++++++++++++++++++++++

 Property is typed with an incompatible default value type.

Init type might be a new instance, the return of a method call or an interface compatible object.

.. code-block:: php

   <?php
   
   class x {
       private A $property;
       private B $incompatible;
       
       function __construct() {
           // This is compatible
           $this->property = new A();
           
           // This is incompatible : new B() expected
           $this->incompatible = new C();
           
       }
   }
   
   ?>


PHP compiles such code, but won't execute it, as it detects the incompatibility.



Suggestions
^^^^^^^^^^^

* Remove the type hint of the property
* Fix the initialization call
* Use an interface for typehint

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------+
| Short name  | Classes/WrongTypedPropertyInit                                                          |
+-------------+-----------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`ClassReview`, :ref:`LintButWontExec` |
+-------------+-----------------------------------------------------------------------------------------+
| Exakt since | 2.0.9                                                                                   |
+-------------+-----------------------------------------------------------------------------------------+
| Php Version | 7.4+                                                                                    |
+-------------+-----------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                   |
+-------------+-----------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                         |
+-------------+-----------------------------------------------------------------------------------------+
| Precision   | High                                                                                    |
+-------------+-----------------------------------------------------------------------------------------+


.. _create-compact-variables:

Create Compact Variables
++++++++++++++++++++++++

 This command creates Variable definitions, based on usage of 'compact'. 

.. code-block:: php

   <?php
   
   function foo() {
       $a = 1;
       return compact('a');
   }
   ?>


This only works when `compact() <https://www.php.net/compact>`_ is used with literal values, or with constants. Dynamic values are not reported.



Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+---------------------------------+
| Short name  | Complete/CreateCompactVariables |
+-------------+---------------------------------+
| Rulesets    | :ref:`CE`                       |
+-------------+---------------------------------+
| Exakt since | 1.9.2                           |
+-------------+---------------------------------+
| Php Version | All                             |
+-------------+---------------------------------+
| Severity    | Minor                           |
+-------------+---------------------------------+
| Time To Fix | Quick (30 mins)                 |
+-------------+---------------------------------+
| Precision   | High                            |
+-------------+---------------------------------+


.. _create-default-values:

Create Default Values
+++++++++++++++++++++

 This commands adds a link between variables, property definitions and any assignation to this container.

Variables have no definition expression in PHP. Exakat holds their definition with the `Variabledefinition` node.

Properties have definitions, and non-compulsory default values. This command creates multiple DEFINITION link for them.

DEFAULT is convenient in the case of `null` value, which will be assigned an object at execution time. 

.. code-block:: php

   <?php
   
   function foo() {
       // local Variabledefinition links to this expression
       $a = 1;
   }
   
   class x {
       // 1 is a default value
       private $p = 1;
       
       function __construct() {
           // 2 is also a default value for this.
           // This default value is different from the above as it is a part of an assignation
           $this->p = 2;
       }
   }
   
   ?>


Short assignations, such as `+=`  are not considered default value. It needs to be a full assignation

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Complete/CreateDefaultValues |
+-------------+------------------------------+
| Rulesets    | none                         |
+-------------+------------------------------+
| Exakt since | 1.9.2                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Quick (30 mins)              |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _complete-createforeachdefault:

Complete/CreateForeachDefault
+++++++++++++++++++++++++++++

 

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-------------------------------+
| Short name  | Complete/CreateForeachDefault |
+-------------+-------------------------------+
| Rulesets    | none                          |
+-------------+-------------------------------+
| Exakt since | 1.9.9                         |
+-------------+-------------------------------+
| Php Version | All                           |
+-------------+-------------------------------+
| Severity    | Minor                         |
+-------------+-------------------------------+
| Time To Fix | Quick (30 mins)               |
+-------------+-------------------------------+
| Precision   | High                          |
+-------------+-------------------------------+


.. _create-magic-property:

Create Magic Property
+++++++++++++++++++++

 This command creates a link DEFINITION between a ``__get`` and ``__set`` calls, and its equivalent magic method.

.. code-block:: php

   <?php
   
   class x {
       function foo() {
           // This is linked to __set
           $this->a = 1;
           
           // This is linked to __get
           return $this->b;
       }
       
       function __get($name) {
           return 1;
       }
   
       function __set($name, $value) {
           // Store the value
       }
   }
   
   ?>


This command may not detect all possible link for the ``__get`` and ``__set`` call. It may be missing information about the nature of the object.

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Complete/CreateMagicProperty |
+-------------+------------------------------+
| Rulesets    | :ref:`CE`                    |
+-------------+------------------------------+
| Exakt since | 1.9.2                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Quick (30 mins)              |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _extended-typehints:

Extended Typehints
++++++++++++++++++

 Produces all the definition links between typehints (arguments, return types, properties) and the definitions that are valid with the typehint.

.. code-block:: php

   <?php
   
   function foo(A $A) {}
   
   // This is the raw definition of the above typehint
   interface A {}
   
   // This is valid definition of the above typehint
   class X implements A {}
   // This is valid definition of the above typehint
   class Y extends X {}
   
   // This is not related to the typehint
   class Z {}
   
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Complete/ExtendedTypehints |
+-------------+----------------------------+
| Rulesets    | none                       |
+-------------+----------------------------+
| Exakt since | 2.1.4                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Quick (30 mins)            |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _follow-closure-definition:

Follow Closure Definition
+++++++++++++++++++++++++

 This command adds DEFINITION link between closure definitions and their usage.

Local usage of the closure, in the same scope, are detected. Relayed closure, when they are transmitted to another method for usage, is detected, for one level.

.. code-block:: php

   <?php
   
   function foo() {
       $closure = function () {};
       // Local usage
       echo $closure();
   }
   
   function bar(Closure $x) {
       // relayed usage
       echo $x(); 
   }
   
   
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+----------------------------------+
| Short name  | Complete/FollowClosureDefinition |
+-------------+----------------------------------+
| Rulesets    | :ref:`CE`                        |
+-------------+----------------------------------+
| Exakt since | 1.9.2                            |
+-------------+----------------------------------+
| Php Version | All                              |
+-------------+----------------------------------+
| Severity    | Minor                            |
+-------------+----------------------------------+
| Time To Fix | Quick (30 mins)                  |
+-------------+----------------------------------+
| Precision   | High                             |
+-------------+----------------------------------+


.. _make-class-constant-definition:

Make Class Constant Definition
++++++++++++++++++++++++++++++

 This command adds DEFINITION link between class constant definitions and their usage.

.. code-block:: php

   <?php
   
   class x {
       public const A = 1;
   }
   
   // Link to the constant definition
   echo x::A;
   
   // Cannot find the original class
   echo $x::A;
   
   ?>



Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Complete/MakeClassConstantDefinition |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`                            |
+-------------+--------------------------------------+
| Exakt since | 1.9.2                                |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Minor                                |
+-------------+--------------------------------------+
| Time To Fix | Quick (30 mins)                      |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _make-class-method-definition:

Make Class Method Definition
++++++++++++++++++++++++++++

 This command links a method call to its method definition. 

.. code-block:: php

   <?php
   
   class x {
       function foo() {
           // This links to the bar() method
           return $this->bar();
       }
   
       function bar() {
           // This links to the link() method
           return $this->bar();
       }
   }
   
   ?>


This command may not detect all possible link for the methods. It may be missing information about the nature of the object.

This command may also produce multiple definitions link, when the definition are ambiguous.

Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Complete/MakeClassMethodDefinition |
+-------------+------------------------------------+
| Rulesets    | none                               |
+-------------+------------------------------------+
| Exakt since | 1.9.2                              |
+-------------+------------------------------------+
| Php Version | All                                |
+-------------+------------------------------------+
| Severity    | Minor                              |
+-------------+------------------------------------+
| Time To Fix | Quick (30 mins)                    |
+-------------+------------------------------------+
| Precision   | High                               |
+-------------+------------------------------------+


.. _make-functioncall-with-reference:

Make Functioncall With Reference
++++++++++++++++++++++++++++++++

 Mark parameters as ``isModified`` if the functioncall uses reference.

This works on PHP native functions and custom functions.

This doesn't work on dynamic calls.



Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+----------------------------------------+
| Short name  | Complete/MakeFunctioncallWithReference |
+-------------+----------------------------------------+
| Rulesets    | :ref:`CE`                              |
+-------------+----------------------------------------+
| Exakt since | 1.9.7                                  |
+-------------+----------------------------------------+
| Php Version | All                                    |
+-------------+----------------------------------------+
| Severity    | Minor                                  |
+-------------+----------------------------------------+
| Time To Fix | Quick (30 mins)                        |
+-------------+----------------------------------------+
| Precision   | High                                   |
+-------------+----------------------------------------+


.. _overwritten-constant:

Overwritten Constant
++++++++++++++++++++

 This command adds OVERWRITE link between class constant definitions.

.. code-block:: php

   <?php
   
   class x {
       protected const A = 1;
   }
   
   class y extends x {
       protected const A = 1;
   }
   
   ?>


The `A` constant will be linked between classes x and y, with an OVERWRITE link.

Specs
^^^^^
+-------------+-------------------------------+
| Short name  | Complete/OverwrittenConstants |
+-------------+-------------------------------+
| Rulesets    | :ref:`CE`                     |
+-------------+-------------------------------+
| Exakt since | 1.9.2                         |
+-------------+-------------------------------+
| Php Version | All                           |
+-------------+-------------------------------+
| Severity    | Minor                         |
+-------------+-------------------------------+
| Time To Fix | Quick (30 mins)               |
+-------------+-------------------------------+
| Precision   | High                          |
+-------------+-------------------------------+


.. _overwritten-methods:

Overwritten Methods
+++++++++++++++++++

 This command adds OVERWRITE link between methods definitions of classes.

.. code-block:: php

   <?php
   
   class x {
       protected function foo() {}
   }
   
   class y extends x {
       protected function foo() {}
   }
   
   ?>


The `foo` method will be linked between classes x and y, with an OVERWRITE link.

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Complete/OverwrittenMethods |
+-------------+-----------------------------+
| Rulesets    | none                        |
+-------------+-----------------------------+
| Exakt since | 1.9.2                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Quick (30 mins)             |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _overwritten-properties:

Overwritten Properties
++++++++++++++++++++++

 This command adds OVERWRITE link between property definitions of classes.

.. code-block:: php

   <?php
   
   class x {
       protected $p = 1;
   }
   
   class y extends x {
       protected $p = 1;
   }
   
   ?>


The `$p` property will be linked between classes x and y, with an OVERWRITE link.

Specs
^^^^^
+-------------+--------------------------------+
| Short name  | Complete/OverwrittenProperties |
+-------------+--------------------------------+
| Rulesets    | :ref:`CE`                      |
+-------------+--------------------------------+
| Exakt since | 1.9.2                          |
+-------------+--------------------------------+
| Php Version | All                            |
+-------------+--------------------------------+
| Severity    | Minor                          |
+-------------+--------------------------------+
| Time To Fix | Quick (30 mins)                |
+-------------+--------------------------------+
| Precision   | High                           |
+-------------+--------------------------------+


.. _complete-phpextstubpropertymethod:

Complete/PhpExtStubPropertyMethod
+++++++++++++++++++++++++++++++++

 Provides isExt property to method call and properties access, based on typehints and local instantiation.

Specs
^^^^^
+-------------+-----------------------------------+
| Short name  | Complete/PhpExtStubPropertyMethod |
+-------------+-----------------------------------+
| Rulesets    | none                              |
+-------------+-----------------------------------+
| Exakt since | 2.1.9                             |
+-------------+-----------------------------------+
| Php Version | 7.4-                              |
+-------------+-----------------------------------+
| Severity    | Minor                             |
+-------------+-----------------------------------+
| Time To Fix | Quick (30 mins)                   |
+-------------+-----------------------------------+
| Precision   | High                              |
+-------------+-----------------------------------+


.. _complete-phpnativereference:

Complete/PhpNativeReference
+++++++++++++++++++++++++++

 

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Complete/PhpNativeReference |
+-------------+-----------------------------+
| Rulesets    | none                        |
+-------------+-----------------------------+
| Exakt since | 1.9.1                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Quick (30 mins)             |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _propagate-calls:

Propagate Calls
+++++++++++++++

 Update the graph, by linking a call to its definition. A call may be a function call, a closure call, a method call, a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ methodcall. 

Note that the definition is not always available, and the linking may fail. This is the case for PHP native functions, for dynamically build names, or omitted libraries.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Complete/PropagateCalls |
+-------------+-------------------------+
| Rulesets    | none                    |
+-------------+-------------------------+
| Exakt since | 1.9.8                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Quick (30 mins)         |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _propagate-constants:

Propagate Constants
+++++++++++++++++++

 This command calculates constant expression values, and set them in the graph.

.. code-block:: php

   <?php
   
   const A = 1;
   const B = A + 2; 
   
   ?>


After running this command, B has ``intval`` of 3. 

This command propagate ``const`` constants, class constants and `define() <https://www.php.net/define>`_ constants, when possible.

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Complete/PropagateConstants |
+-------------+-----------------------------+
| Rulesets    | none                        |
+-------------+-----------------------------+
| Exakt since | 1.9.2                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Quick (30 mins)             |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _seta-rray-class-definition:

SetA rray Class Definition
++++++++++++++++++++++++++

 Link arrays() with their class / method definition.

PHP accepts an array structure such as ``[class, method]``, or ``[$object, method]`` as a valid method callback. This analysis build such relations, whenever they are `static <https://www.php.net/manual/en/language.oop5.static.php>`_.

.. code-block:: php

   <?php
   
   class x {
       public function foo() {}
   }
   
   // designate the foo method in the x class
   $f = [\x, 'foo'];
   
   array_
   
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+----------------------------------+
| Short name  | Complete/SetArrayClassDefinition |
+-------------+----------------------------------+
| Rulesets    | :ref:`CE`                        |
+-------------+----------------------------------+
| Exakt since | 1.9.3                            |
+-------------+----------------------------------+
| Php Version | All                              |
+-------------+----------------------------------+
| Severity    | Minor                            |
+-------------+----------------------------------+
| Time To Fix | Quick (30 mins)                  |
+-------------+----------------------------------+
| Precision   | High                             |
+-------------+----------------------------------+


.. _set-class\_alias-definition:

Set Class_Alias Definition
++++++++++++++++++++++++++

 Links ``new`` calls to the concrete class when `class_alias() <https://www.php.net/class_alias>`_ was used to create the name. The link is ``DEFINITION``.

`class_alias() <https://www.php.net/class_alias>`_ are detected at loading time, and are used unconditionally.

This means that the fully qualified name of the ``new`` call and the instantiated class may be different : without the alias, the fully qualified name is the current fullcode, or its use's origin, while with `class_alias() <https://www.php.net/class_alias>`_, it is an arbitrary name.

.. code-block:: php

   <?php
   
   class x {
       public function foo() {}
   }
   
   class_alias('x', 'y');
   
   //y exists, as an alias of x.
   $y = new y;
   
   ?>



Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+----------------------------------+
| Short name  | Complete/SetClassAliasDefinition |
+-------------+----------------------------------+
| Rulesets    | none                             |
+-------------+----------------------------------+
| Exakt since | 1.9.2                            |
+-------------+----------------------------------+
| Php Version | All                              |
+-------------+----------------------------------+
| Severity    | Minor                            |
+-------------+----------------------------------+
| Time To Fix | Quick (30 mins)                  |
+-------------+----------------------------------+
| Precision   | High                             |
+-------------+----------------------------------+


.. _set-class-method-remote-definition:

Set Class Method Remote Definition
++++++++++++++++++++++++++++++++++

 Links method to the method definition. The link is ``DEFINITION``.

`Static <https://www.php.net/manual/en/language.oop5.static.php>`_ method calls and normal method calls are both solved with this rule. `Parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ classes and trait are also searched for the right method.

.. code-block:: php

   <?php
   
   class x {
       public function __construct() {}
       public function foo() {}
   }
   
   // This links to __construct method
   $a = new x;
   
   // This links to foo() method
   $a->foo();
   
   ?>


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-----------------------------------------+
| Short name  | Complete/SetClassMethodRemoteDefinition |
+-------------+-----------------------------------------+
| Rulesets    | none                                    |
+-------------+-----------------------------------------+
| Exakt since | 1.9.3                                   |
+-------------+-----------------------------------------+
| Php Version | All                                     |
+-------------+-----------------------------------------+
| Severity    | Minor                                   |
+-------------+-----------------------------------------+
| Time To Fix | Quick (30 mins)                         |
+-------------+-----------------------------------------+
| Precision   | High                                    |
+-------------+-----------------------------------------+


.. _set-class-property-definition-with-typehint:

Set Class Property Definition With Typehint
+++++++++++++++++++++++++++++++++++++++++++

 Links method call to its definition, thanks to property typehinting. The link is ``DEFINITION``.

.. code-block:: php

   <?php
   
   class x {
       public x $p = null;
   
       public function bar() {
           return $this;
       }
   }
   
   $x = new x;
   
   // $x->p is of 'x' class
   $x->p->bar();
   
   ?>


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-------------------------------------------------+
| Short name  | Complete/SetClassPropertyDefinitionWithTypehint |
+-------------+-------------------------------------------------+
| Rulesets    | none                                            |
+-------------+-------------------------------------------------+
| Exakt since | 1.9.3                                           |
+-------------+-------------------------------------------------+
| Php Version | All                                             |
+-------------+-------------------------------------------------+
| Severity    | Minor                                           |
+-------------+-------------------------------------------------+
| Time To Fix | Quick (30 mins)                                 |
+-------------+-------------------------------------------------+
| Precision   | High                                            |
+-------------+-------------------------------------------------+


.. _set-class-remote-definition-with-global:

Set Class Remote Definition With Global
+++++++++++++++++++++++++++++++++++++++

 Links method call to its definition, thanks to the global definition. The link is ``DEFINITION``.

.. code-block:: php

   <?php
   
   class x {
       public function bar() {    }
   }
   
   global $a;
   $a = new X;
   
   function foo() {
       global $a;
       
       // This links to class x, method bar(), thanks to global.
       return $a->bar();
   }
   
   ?>


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Complete/SetClassRemoteDefinitionWithGlobal |
+-------------+---------------------------------------------+
| Rulesets    | none                                        |
+-------------+---------------------------------------------+
| Exakt since | 1.9.3                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _complete-setclassremotedefinitionwithinjection:

Complete/SetClassRemoteDefinitionWithInjection
++++++++++++++++++++++++++++++++++++++++++++++

 

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+------------------------------------------------+
| Short name  | Complete/SetClassRemoteDefinitionWithInjection |
+-------------+------------------------------------------------+
| Rulesets    | none                                           |
+-------------+------------------------------------------------+
| Exakt since | 1.9.2                                          |
+-------------+------------------------------------------------+
| Php Version | All                                            |
+-------------+------------------------------------------------+
| Severity    | Minor                                          |
+-------------+------------------------------------------------+
| Time To Fix | Quick (30 mins)                                |
+-------------+------------------------------------------------+
| Precision   | High                                           |
+-------------+------------------------------------------------+


.. _set-class-remote-definition-with-local-new:

Set Class Remote Definition With Local New
++++++++++++++++++++++++++++++++++++++++++

 Links method calls and properties to its definition, thanks to the local new. The link is ``DEFINITION``.

.. code-block:: php

   <?php
   
   class x {
       public function bar() {    }
   }
   
   function foo() {
       $a = new x;
       
       // This links to class x, method bar(), thanks to the local new.
       return $a->bar();
   }
   
   ?>


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-----------------------------------------------+
| Short name  | Complete/SetClassRemoteDefinitionWithLocalNew |
+-------------+-----------------------------------------------+
| Rulesets    | none                                          |
+-------------+-----------------------------------------------+
| Exakt since | 1.9.3                                         |
+-------------+-----------------------------------------------+
| Php Version | All                                           |
+-------------+-----------------------------------------------+
| Severity    | Minor                                         |
+-------------+-----------------------------------------------+
| Time To Fix | Quick (30 mins)                               |
+-------------+-----------------------------------------------+
| Precision   | High                                          |
+-------------+-----------------------------------------------+


.. _complete-setclassremotedefinitionwithparenthesis:

Complete/SetClassRemoteDefinitionWithParenthesis
++++++++++++++++++++++++++++++++++++++++++++++++

 Links method call to its definition, thanks to the new in parenthesis. The link is ``DEFINITION``.

.. code-block:: php

   <?php
   
   class x {
       public function bar() {    }
   }
   
   function foo() {
       // This links to class x, method bar(), thanks to the new.
       return (new x)->bar();
   }
   
   ?>


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+--------------------------------------------------+
| Short name  | Complete/SetClassRemoteDefinitionWithParenthesis |
+-------------+--------------------------------------------------+
| Rulesets    | none                                             |
+-------------+--------------------------------------------------+
| Exakt since | 1.9.3                                            |
+-------------+--------------------------------------------------+
| Php Version | All                                              |
+-------------+--------------------------------------------------+
| Severity    | Minor                                            |
+-------------+--------------------------------------------------+
| Time To Fix | Quick (30 mins)                                  |
+-------------+--------------------------------------------------+
| Precision   | High                                             |
+-------------+--------------------------------------------------+


.. _set-class-remote-definition-with-return-typehint:

Set Class Remote Definition With Return Typehint
++++++++++++++++++++++++++++++++++++++++++++++++

 Links method call to its definition, thanks to the typed return. The link is ``DEFINITION``.

.. code-block:: php

   <?php
   
   class x {
       public function bar() {    }
   }
   
   function foo() {
       $a = bar();
       // This links to class x, method bar(), thanks to the new.
       return $a->bar();
   }
   
   function bar() : x {
       return new x;
   }
   
   ?>


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-----------------------------------------------------+
| Short name  | Complete/SetClassRemoteDefinitionWithReturnTypehint |
+-------------+-----------------------------------------------------+
| Rulesets    | none                                                |
+-------------+-----------------------------------------------------+
| Exakt since | 1.9.3                                               |
+-------------+-----------------------------------------------------+
| Php Version | All                                                 |
+-------------+-----------------------------------------------------+
| Severity    | Minor                                               |
+-------------+-----------------------------------------------------+
| Time To Fix | Quick (30 mins)                                     |
+-------------+-----------------------------------------------------+
| Precision   | High                                                |
+-------------+-----------------------------------------------------+


.. _complete-setclassremotedefinitionwithtypehint:

Complete/SetClassRemoteDefinitionWithTypehint
+++++++++++++++++++++++++++++++++++++++++++++

 Links method call to its definition, thanks to the typed argument. The link is ``DEFINITION``.

.. code-block:: php

   <?php
   
   class x {
       public function bar() {    }
   }
   
   function foo(x $a) {
       // This links to class x, method bar(), thanks to the typehint.
       return $a->bar();
   }
   
   ?>


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-----------------------------------------------+
| Short name  | Complete/SetClassRemoteDefinitionWithTypehint |
+-------------+-----------------------------------------------+
| Rulesets    | none                                          |
+-------------+-----------------------------------------------+
| Exakt since | 1.9.3                                         |
+-------------+-----------------------------------------------+
| Php Version | All                                           |
+-------------+-----------------------------------------------+
| Severity    | Minor                                         |
+-------------+-----------------------------------------------+
| Time To Fix | Quick (30 mins)                               |
+-------------+-----------------------------------------------+
| Precision   | High                                          |
+-------------+-----------------------------------------------+


.. _set-clone-link:

Set Clone Link
++++++++++++++

 This command creates a link DEFINITION between a clone call, and its equivalent magic method.

.. code-block:: php

   <?php
   
   class x {
       // Store an object
       private $a;
       
       function foo() {
           // This clone is linked to the magic method below
           return clone $this;
       }
       
       function __clone() {
           $this->a = clone $this->a;
       }
   }
   
   // This is not linked to any __clone method, by lack of information
   clone $x; 
   
   ?>


This command may not detect all possible link for the clone. It may be missing information about the nature of the clone object.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Complete/SetCloneLink |
+-------------+-----------------------+
| Rulesets    | none                  |
+-------------+-----------------------+
| Exakt since | 1.9.2                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Quick (30 mins)       |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _set-parent-definition:

Set Parent Definition
+++++++++++++++++++++

 This command creates a DEFINITION link between `parent` keyword and the actual `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ class. 

.. code-block:: php

   <?php
   
   class x { 
       const A = 1;
   }
   
   class y extends x {
       function foo() {
           // 'parent' needs a DEFFINITION link to the class x
           return parent::A;
       }
   }
   
   ?>

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Complete/SetParentDefinition |
+-------------+------------------------------+
| Rulesets    | :ref:`CE`                    |
+-------------+------------------------------+
| Exakt since | 1.9.2                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Quick (30 mins)              |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _set-string-method-definition:

Set String Method Definition
++++++++++++++++++++++++++++

 Links a string with a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ method call to its definition. The link is ``DEFINITION``.

.. code-block:: php

   <?php
       class B { 
           static public function C() {}
       }
   
       $a = 'B::C';
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Complete/SetStringMethodDefinition |
+-------------+------------------------------------+
| Rulesets    | :ref:`CE`                          |
+-------------+------------------------------------+
| Exakt since | 1.9.3                              |
+-------------+------------------------------------+
| Php Version | All                                |
+-------------+------------------------------------+
| Severity    | Minor                              |
+-------------+------------------------------------+
| Time To Fix | Quick (30 mins)                    |
+-------------+------------------------------------+
| Precision   | High                               |
+-------------+------------------------------------+


.. _solve-trait-methods:

Solve Trait Methods
+++++++++++++++++++

 This command adds DEFINITION link between trait's method definitions and their usage in classes.

.. code-block:: php

   <?php
   
   trait t {
       function foo() {
       
       }
   }
   
   class x {
       use t { t::foo as foo2; };
       
       function bar() {
           // Link to foo() in trait t
           $this->foo();
           // Link to foo() in trait t, thanks to 'as'
           $this->foo2();
       }
   }
   
   ?>



Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Complete/SolveTraitMethods |
+-------------+----------------------------+
| Rulesets    | none                       |
+-------------+----------------------------+
| Exakt since | 1.9.2                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Quick (30 mins)            |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _composer's-autoload:

Composer's autoload
+++++++++++++++++++

 Is this code using the autoload from Composer.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Composer/Autoload |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _is-composer-class:

Is Composer Class
+++++++++++++++++

 Mark a class as part of Composer's library.

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Composer/IsComposerClass |
+-------------+--------------------------+
| Rulesets    | :ref:`CE`                |
+-------------+--------------------------+
| Exakt since | 0.8.4                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Slow (1 hour)            |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _is-composer-interface:

Is Composer Interface
+++++++++++++++++++++

 Mark interfaces as Composer interfaces.

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Composer/IsComposerInterface |
+-------------+------------------------------+
| Rulesets    | :ref:`CE`                    |
+-------------+------------------------------+
| Exakt since | 0.8.4                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Slow (1 hour)                |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _composer-namespace:

Composer Namespace
++++++++++++++++++

 Mark this namespace as a Composer namespace.

When the namespace is found in the composer database, it is marked as such. 

.. code-block:: php

   <?php 
   
   namespace Monolog;
   
   use Monolog\Processor\WebProcessor;
   use Monolog\Handler\TestHandler;
   
   class MyLogger extends WebProcessor {
       /**/
   }
   
   ?>


See also `Packagist <https://packagist.org/>`_.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Composer/IsComposerNsname |
+-------------+---------------------------+
| Rulesets    | :ref:`CE`                 |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _composer-usage:

Composer Usage
++++++++++++++

 Mark the usage of composer, mostly by having a ``composer.json`` file.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Composer/UseComposer |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _use-composer-lock:

Use Composer Lock
+++++++++++++++++

 Reports if ``composer.lock`` was committed to the archive.

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Composer/UseComposerLock |
+-------------+--------------------------+
| Rulesets    | :ref:`CE`                |
+-------------+--------------------------+
| Exakt since | 0.9.2                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Quick (30 mins)          |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _bad-constants-names:

Bad Constants Names
+++++++++++++++++++

 PHP's manual recommends that developer do not use constants with the convention ``__NAME__``. Those are reserved for PHP future use. 

For example, ``__TRAIT__`` recently appeared in PHP, as a magic constant. In the future, other may appear. 

.. code-block:: php

   <?php
   
   const __MY_APP_CONST__ = 1;
   
   const __MY_APP_CONST__ = 1;
   
   define('__MY_OTHER_APP_CONST__', 2);
   
   ?>


The analyzer will report any constant which name is ``__.*.__``, or even ``_.*_`` (only one underscore).

See also `Constants <https://www.php.net/manual/en/language.constants.php>`_.


Suggestions
^^^^^^^^^^^

* Avoid using names that doesn't comply with PHP's convention

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------+
| Short name  | Constants/BadConstantnames                                                                        |
+-------------+---------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                    |
+-------------+---------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                             |
+-------------+---------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                               |
+-------------+---------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                             |
+-------------+---------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                     |
+-------------+---------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                              |
+-------------+---------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-prestashop-constants-badconstantnames`, :ref:`case-zencart-constants-badconstantnames` |
+-------------+---------------------------------------------------------------------------------------------------+


.. _case-insensitive-constants:

Case Insensitive Constants
++++++++++++++++++++++++++

 PHP constants may be case insensitive, when defined with `define() <https://www.php.net/define>`_ and the third argument.

This feature is deprecated since PHP 7.3 and will be removed in PHP 8.0.

.. code-block:: php

   <?php
   
   // case sensitive
   define('A', 1);
   
   // case insensitive
   define('B', 1, true);
   
   echo A;
   // This is not possible
   //echo a;
   
   // both possible
   echo B;
   echo b;
   
   ?>


See also `define <https://www.php.net/define>`_.

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Constants/CaseInsensitiveConstants   |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP73` |
+-------------+--------------------------------------+
| Exakt since | 1.3.9                                |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Critical                             |
+-------------+--------------------------------------+
| Time To Fix | Slow (1 hour)                        |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _conditioned-constants:

Conditioned Constants
+++++++++++++++++++++

 Indicates if a constant will be defined only if a condition is met.

.. code-block:: php

   <?php
   
   if (time() > 1519629617) {
       define('MY_CONST', false);
   } else {
       define('MY_CONST', time() - 1519629617);
   }
   
   ?>

Specs
^^^^^
+-------------+--------------------------------+
| Short name  | Constants/ConditionedConstants |
+-------------+--------------------------------+
| Rulesets    | :ref:`CE`                      |
+-------------+--------------------------------+
| Exakt since | 0.8.4                          |
+-------------+--------------------------------+
| Php Version | All                            |
+-------------+--------------------------------+
| Severity    | Minor                          |
+-------------+--------------------------------+
| Time To Fix | Slow (1 hour)                  |
+-------------+--------------------------------+
| Precision   | High                           |
+-------------+--------------------------------+


.. _constants-names:

Constants Names
+++++++++++++++

 List of PHP constants being defined.

.. code-block:: php

   <?php
   
   // with const
   const X = 1;
   
   // with define()
   define ('Y', 2);
   
   ?>

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Constants/Constantnames |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _constants-with-strange-names:

Constants With Strange Names
++++++++++++++++++++++++++++

 List of constants being defined with names that are incompatible with PHP standards. 

.. code-block:: php

   <?php
   
   // Define a valid PHP constant
   define('ABC', 1); 
   const ABCD = 2; 
   
   // Define an invalid PHP constant
   define('ABC!', 1); 
   echo defined('ABC!') ? constant('ABC!') : 'Undefined';
   
   // Const doesn't allow illegal names
   
   ?>


See also `PHP Constants <https://www.php.net/manual/en/language.constants.php>`_.



Suggestions
^^^^^^^^^^^

* Rename constants to be valid constants
* Adopt a naming conversion scheme, to translate names from an incompatible source to PHP's standard (and back).

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Constants/ConstantStrangeNames              |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.8.4                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Slow (1 hour)                               |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _constants-usage:

Constants Usage
+++++++++++++++

 List of constants being used.

.. code-block:: php

   <?php
   
   const MY_CONST = 'Hello';
   
   // PHP_EOL (native PHP Constant)
   // MY_CONST (custom constant)
   echo PHP_EOL . MY_CONST;
   
   ?>

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Constants/ConstantUsage |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _const-or-define-preference:

Const Or Define Preference
++++++++++++++++++++++++++

 ``Const`` and `define() <https://www.php.net/define>`_ have almost the same functional use : they create constants. 

The analyzed code has less than 10% of one of them : for consistency reasons, it is recommended to make constant definition consistent. 

It is recommended to use ``const`` for global constants, as this keyword is processed at compile time, while `define() <https://www.php.net/define>`_ is executed.

Note that `define() <https://www.php.net/define>`_ used to allow the creation of case-insensitive constants, but this is deprecated since PHP 7.3 and will be removed in PHP 8.0.

.. code-block:: php

   <?php
   
       define('A1', 1);
       define('A2', 1);
       define('A3', 1);
       define('A4', 1);
       define('A5', 1);
       define('A6', 1);
       define('A7', 1);
       define('A8', 1);
       define('A9', 1);
       define('A10',1);
       
       const B = 3;
       
   ?>


See also `Constant definition <https://www.php.net/const>`_ and `Define <https://www.php.net/define>`_.

Specs
^^^^^
+-------------+---------------------------------+
| Short name  | Constants/ConstDefinePreference |
+-------------+---------------------------------+
| Rulesets    | none                            |
+-------------+---------------------------------+
| Exakt since | 1.3.9                           |
+-------------+---------------------------------+
| Php Version | All                             |
+-------------+---------------------------------+
| Severity    | Minor                           |
+-------------+---------------------------------+
| Time To Fix | Slow (1 hour)                   |
+-------------+---------------------------------+
| Precision   | High                            |
+-------------+---------------------------------+


.. _use-const:

Use const
+++++++++

 The const keyword may be used to define constant, just like the `define() <https://www.php.net/define>`_ function. 

When defining a constant, it is recommended to use 'const' when the features of the constant are not dynamical (name or value are known at compile time). 
This way, constant will be defined at compile time, and not at execution time. 

.. code-block:: php

   <?php
     //Do
     const A = 1;
     // Don't 
     define('A', 1);
     
   ?>


`define() <https://www.php.net/define>`_ function is useful when the constant is not known at compile time, or when case sensitivity is necessary.

.. code-block:: php

   <?php
     // Read $a in database or config file
     define('A', $a);
   
     // Read $a in database or config file
     define('B', 1, true);
     echo b;
   ?>


See also `Syntax <https://www.php.net/manual/en/language.constants.syntax.php>`_.


Suggestions
^^^^^^^^^^^

* Use const instead of define()

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------------+
| Short name  | Constants/ConstRecommended                                                                       |
+-------------+--------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Top10`                                        |
+-------------+--------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                            |
+-------------+--------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                              |
+-------------+--------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                            |
+-------------+--------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                    |
+-------------+--------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                             |
+-------------+--------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-phpmyadmin-constants-constrecommended`, :ref:`case-piwigo-constants-constrecommended` |
+-------------+--------------------------------------------------------------------------------------------------+


.. _could-be-constant:

Could Be Constant
+++++++++++++++++

 Literals may be replaced by an existing constant. 

Constants makes the code easier to read, as they may bear a meaningful name. They also hide implementation values, with a readable name, such as ``const READABLE= true;``. Later, upgrading constant values is easier than scouring the code with a new literal. 

Not all literal can be replaced by a constant values : sometimes, literal may have the same literal value, but different meanings. Check with your application semantics before changing any literal with a constant.

.. code-block:: php

   <?php
   
   const A = 'abc';
   define('B', 'ab');
   
   class foo {
       const X = 'abcd';
   }
   
   // Could be replaced by B;
   $a = 'ab'; 
   
   // Could be replaced by A;
   $a = 'abc'; 
   
   // Could be replaced by foo::X;
   $a = 'abcd'; 
   
   ?>


This analysis currently doesn't support arrays. 

This analysis also skips very common values, such as boolean, ``0`` and ``1``. This prevents too many false positive.



Suggestions
^^^^^^^^^^^

* Turn the literal into an existing constant

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Constants/CouldBeConstant |
+-------------+---------------------------+
| Rulesets    | :ref:`Suggestions`        |
+-------------+---------------------------+
| Exakt since | 1.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _constants-created-outside-its-namespace:

Constants Created Outside Its Namespace
+++++++++++++++++++++++++++++++++++++++

 Constants Created Outside Its Namespace.

Using the `define() <https://www.php.net/define>`_ function, it is possible to create constant outside their namespace, but using the fully qualified namespace.

.. code-block:: php

   <?php
   
   namespace A\B {
       // define A\B\C as 1
       define('C', 1);
   }
   
   namespace D\E {
       // define A\B\C as 1, while outside the A\B namespace
       define('A\B\C', 1);
   }
   
   ?>


However, this makes the code confusing and difficult to debug. It is recommended to move the constant definition to its namespace.

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Constants/CreatedOutsideItsNamespace |
+-------------+--------------------------------------+
| Rulesets    | :ref:`Analyze`                       |
+-------------+--------------------------------------+
| Exakt since | 0.8.4                                |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Minor                                |
+-------------+--------------------------------------+
| Time To Fix | Slow (1 hour)                        |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _custom-constant-usage:

Custom Constant Usage
+++++++++++++++++++++

 Using constants that were not defined in PHP extensions or PHP itself.

.. code-block:: php

   <?php
   
   // display MY_CONSTANT : MY_CONSTANT is a user constant.
   echo MY_CONSTANT;
   
   // display PHP version : PHP_VERSION is a native PHP constant.
   echo PHP_VERSION;
   
   // MY_CONSTANT definition. 
   const MY_CONSTANT;
   
   ?>


See also `PHP Constants <https://www.php.net/manual/en/language.constants.php>`_.

Specs
^^^^^
+-------------+-------------------------------+
| Short name  | Constants/CustomConstantUsage |
+-------------+-------------------------------+
| Rulesets    | :ref:`CE`                     |
+-------------+-------------------------------+
| Exakt since | 0.8.4                         |
+-------------+-------------------------------+
| Php Version | All                           |
+-------------+-------------------------------+
| Severity    | Minor                         |
+-------------+-------------------------------+
| Time To Fix | Slow (1 hour)                 |
+-------------+-------------------------------+
| Precision   | High                          |
+-------------+-------------------------------+


.. _constant-case-preference:

Constant Case Preference
++++++++++++++++++++++++

 `Define() <https://www.php.net/define>`_ creates constants which are case sensitive or not. 

The analyzed code has less than 10% of one of them : for consistency reasons, it is recommended to make constant sentivity definition consistent. 

Note that `define() <https://www.php.net/define>`_ used to allow the creation of case-sensitive constants, but this is deprecated since PHP 7.3 and will be removed in PHP 8.0.

.. code-block:: php

   <?php
   
       define('A1', 1);
       define('A2', 1);
       define('A3', 1);
       define('A4', 1);
       define('A5', 1);
       define('A6', 1);
       define('A7', 1);
       define('A8', 1);
       define('A9', 1);
       define('A10',1);
       
       define('A10',1, true);
       
   ?>


See also `Constant definition <https://www.php.net/const>`_.

Specs
^^^^^
+-------------+---------------------------------------+
| Short name  | Constants/DefineInsensitivePreference |
+-------------+---------------------------------------+
| Rulesets    | none                                  |
+-------------+---------------------------------------+
| Exakt since | 1.3.8                                 |
+-------------+---------------------------------------+
| Php Version | All                                   |
+-------------+---------------------------------------+
| Severity    | Minor                                 |
+-------------+---------------------------------------+
| Time To Fix | Slow (1 hour)                         |
+-------------+---------------------------------------+
| Precision   | High                                  |
+-------------+---------------------------------------+


.. _constant-dynamic-creation:

Constant Dynamic Creation
+++++++++++++++++++++++++

 Registering constant with dynamic values. Dynamic values include values read in external sources (files, databases, remote API, `... <https://www.php.net/manual/en/functions.arguments.php#functions.variable-arg-list>`_ ), random sources (time, `rand() <https://www.php.net/rand>`_, `...) <https://www.php.net/manual/en/functions.arguments.php#functions.variable-arg-list>`_

Dynamic constants are not possible with the ``const`` keyword, though `static <https://www.php.net/manual/en/language.oop5.static.php>`_ constant expression allows for a good range of combinations, including conditions. 

.. code-block:: php

   <?php
   
   $a = range(0, 4);
   foreach($array as $i) {
       define(A$i, $i);
       define(N$i, true);
   }
   
   define(C, 5);
   
   ?>

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Constants/DynamicCreation |
+-------------+---------------------------+
| Rulesets    | :ref:`CE`                 |
+-------------+---------------------------+
| Exakt since | 1.6.7                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _true-false-inconsistant-case:

True False Inconsistant Case
++++++++++++++++++++++++++++

 TRUE or true or True is the favorite.

Usually, PHP projects choose between ALL CAPS True/False, or all lowercase True/False. Sometimes, the project will have no recommendations. 

When your project use a vast majority of one of the convention, then the analyzer will report all remaining inconsistently cased constant. 

.. code-block:: php

   <?php
   
   $a1 = true;
   $a2 = true;
   $a3 = true;
   $a4 = true;
   $a5 = true;
   $a6 = true;
   $a7 = true;
   $a8 = true;
   $a9 = true;
   $a10 = true;
   
   // This convention is inconsistence with the rest
   $b1 = TRUE;
   ?>

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Constants/InconsistantCase |
+-------------+----------------------------+
| Rulesets    | none                       |
+-------------+----------------------------+
| Exakt since | 0.8.4                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Quick (30 mins)            |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _invalid-constant-name:

Invalid Constant Name
+++++++++++++++++++++

 There is a naming convention for PHP constants names. 

According to PHP's manual, constant names, ' A valid constant name starts with a letter or underscore, followed by any number of letters, numbers, or underscores.'.

Constant, must follow this regex : ``/[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/``.

In particular when defined using `define() <https://www.php.net/define>`_ function, no error is produced. When using ``const``, on the other hand, the 

.. code-block:: php

   <?php
   
   define('+3', 1); // wrong constant! 
   
   echo constant('+3'); // invalid constant access
   
   ?>


See also `Constants <https://www.php.net/manual/en/language.constants.php>`_.


Suggestions
^^^^^^^^^^^

* Change constant name

Specs
^^^^^
+-------------+-------------------------------------------+
| Short name  | Constants/InvalidName                     |
+-------------+-------------------------------------------+
| Rulesets    | :ref:`Analyze`                            |
+-------------+-------------------------------------------+
| Exakt since | 0.8.4                                     |
+-------------+-------------------------------------------+
| Php Version | All                                       |
+-------------+-------------------------------------------+
| Severity    | Major                                     |
+-------------+-------------------------------------------+
| Time To Fix | Quick (30 mins)                           |
+-------------+-------------------------------------------+
| Precision   | High                                      |
+-------------+-------------------------------------------+
| Examples    | :ref:`case-openemr-constants-invalidname` |
+-------------+-------------------------------------------+


.. _is-an-extension-constant:

Is An Extension Constant
++++++++++++++++++++++++

 Mark a constant if it belongs to a known extension.

.. code-block:: php

   <?php
   
   // JSON_HEX_AMP is a constant from ext/json
   echo json_encode($object, JSON_HEX_AMP);
   
   // JSON_HEX_AMP is a constant from ext/json
   echo json_encode($object, JSON_HOAX_AMP);
   
   ?>


See also `Supported PHP Extensions <http://exakat.readthedocs.io/en/latest/Annex.html#supported-php-extensions>`_.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Constants/IsExtConstant |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _is-global-constant:

Is Global Constant
++++++++++++++++++

 Mark a constant that may fallback to a global const definition, even though it is in a namespace. 

This analysis skips PHP and ext's functions, namespaced constants. 

.. code-block:: php

   <?php
   
   namespace X {
   
       const PHP_VERSION = 1;
       
       // Local constant
       echo PHP_VERSION; 
       
       // This constant fallsback to \E_ALL, unless DNS_NS is defined in this namespace
       echo E_ALL; 
   
       // This constant is always \DNS_NS
       echo \DNS_NS; 
       
       // This is a Notice
       echo UNDEFINED_CONSTANT;
   }
   
   ?>


See also `$GLOBALS <https://www.php.net/manual/en/reserved.variables.globals.php>`_ and `Variable scope <https://www.php.net/manual/en/language.variables.scope.php>`_.

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Constants/IsGlobalConstant |
+-------------+----------------------------+
| Rulesets    | none                       |
+-------------+----------------------------+
| Exakt since | 0.8.4                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Slow (1 hour)              |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _is-php-constant:

Is PHP Constant
+++++++++++++++

 Mark a constant if it is a PHP constant.

.. code-block:: php

   <?php
   
   // This is an PHP constant
   $a = HTML_ENTITIES;
   
   // This is an PHP function
   $a = CMS_ORDER;
   
   ?>

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Constants/IsPhpConstant |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _magic-constant-usage:

Magic Constant Usage
++++++++++++++++++++

 There are eight magical constants that change depending on where they are used. For example, the value of ``__LINE__`` depends on the line that it's used on in your script. These special constants are case-insensitive.

+ ``__LINE__``
+ ``__FILE__``
+ ``__DIR__``
+ ``__FUNCTION__``
+ ``__CLASS__``
+ ``__TRAIT__``
+ ``__METHOD__``
+ ``__NAMESPACE__``


.. code-block:: php

   <?php
   
   echo 'This code is in file '__FILE__.', line '.__LINE__;
   
   ?>


See also `Magic Constants <https://www.php.net/manual/en/language.constants.predefined.php>`_.

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Constants/MagicConstantUsage |
+-------------+------------------------------+
| Rulesets    | :ref:`CE`                    |
+-------------+------------------------------+
| Exakt since | 0.8.4                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Slow (1 hour)                |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _multiple-constant-definition:

Multiple Constant Definition
++++++++++++++++++++++++++++

 Some constants are defined several times in your code. This will lead to a fatal error, if they are defined during the same execution. 

Multiple definitions may happens at bootstrap, when the application code is collecting information about the current environment. It may also happen at inclusion time, which one set of constant being loaded, while other definition are not, avoiding conflict. Both are false positive. 

.. code-block:: php

   <?php
   
   // OS is defined twice. 
   if (PHP_OS == 'Windows') {
       define('OS', 'Win');
   } else {
       define('OS', 'Other');
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Move the constants to a class, and include the right class based on control flow.
* Give different names to the constants, and keep the condition close to utilisation.
* Move the constants to an external configuration file : it will be easier to identify that those constants may change.

Specs
^^^^^
+-------------+----------------------------------------------------------------------------------------------------------------------+
| Short name  | Constants/MultipleConstantDefinition                                                                                 |
+-------------+----------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                                          |
+-------------+----------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                                |
+-------------+----------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                                  |
+-------------+----------------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                                |
+-------------+----------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                      |
+-------------+----------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                 |
+-------------+----------------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-dolibarr-constants-multipleconstantdefinition`, :ref:`case-openconf-constants-multipleconstantdefinition` |
+-------------+----------------------------------------------------------------------------------------------------------------------+


.. _php-constant-usage:

PHP Constant Usage
++++++++++++++++++

 List of PHP constants being used.

.. code-block:: php

   <?php
   
   const MY_CONST = 'Hello';
   
   // PHP_EOL (native PHP Constant)
   // MY_CONST (custom constant, not reported)
   echo PHP_EOL . MY_CONST;
   
   ?>


See also `Predefined Constants <https://www.php.net/manual/en/reserved.constants.php>`_.

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Constants/PhpConstantUsage |
+-------------+----------------------------+
| Rulesets    | :ref:`CE`                  |
+-------------+----------------------------+
| Exakt since | 0.8.4                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Slow (1 hour)              |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _strange-name-for-constants:

Strange Name For Constants
++++++++++++++++++++++++++

 Those constants looks like a typo from other names.

.. code-block:: php

   <?php
   
   // This code looks OK : DIRECTORY_SEPARATOR is a native PHP constant
   $path = $path . DIRECTORY_SEPARATOR . $file;
   
   // Strange name DIRECOTRY_SEPARATOR
   $path = $path . DIRECOTRY_SEPARATOR . $file;
   
   ?>




Suggestions
^^^^^^^^^^^

* Fix any typo in the spelling of the constants
* Tell us about common misspelling so we can upgrade this analysis

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Constants/StrangeName |
+-------------+-----------------------+
| Rulesets    | :ref:`Analyze`        |
+-------------+-----------------------+
| Exakt since | 0.10.5                |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _undefined-constants:

Undefined Constants
+++++++++++++++++++

 Constants definition can't be located.

Those constants are not defined in the code, and will raise errors, or use the fallback mechanism of being treated like a string. 

.. code-block:: php

   <?php
   
   const A = 1;
   define('B', 2);
   
   // here, C is not defined in the code and is reported
   echo A.B.C;
   
   ?>


It is recommended to define them all, or to avoid using them.

See also `Constants <https://www.php.net/manual/en/language.constants.php>`_.



Suggestions
^^^^^^^^^^^

* Define the constant
* Fix the name of the constant
* Fix the namespace of the constant (FQN or use)
* Remove the usage of the constant

Specs
^^^^^
+-------------+------------------------------------------------------------------------+
| Short name  | Constants/UndefinedConstants                                           |
+-------------+------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`CompatibilityPHP72` |
+-------------+------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                  |
+-------------+------------------------------------------------------------------------+
| Php Version | All                                                                    |
+-------------+------------------------------------------------------------------------+
| Severity    | Minor                                                                  |
+-------------+------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                        |
+-------------+------------------------------------------------------------------------+
| Precision   | Very high                                                              |
+-------------+------------------------------------------------------------------------+


.. _unused-constants:

Unused Constants
++++++++++++++++

 Those constants are defined in the code but never used. Defining unused constants slow down the application, as they are executed and stored in PHP hashtables. 

.. code-block:: php

   <?php
   
   // const-defined constant
   const USED_CONSTANT  = 0;
   const UNUSED_CONSTANT = 1 + USED_CONSTANT;
   
   // define-defined constant
   define('ANOTHER_UNUSED_CONSTANT', 3);
   
   ?>


It is recommended to comment them out, and only define them when it is necessary.

Suggestions
^^^^^^^^^^^

* Make use of the constant
* Remove the constant

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Constants/UnusedConstants    |
+-------------+------------------------------+
| Rulesets    | :ref:`Dead code <dead-code>` |
+-------------+------------------------------+
| Exakt since | 0.8.4                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Instant (5 mins)             |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _variable-constants:

Variable Constants
++++++++++++++++++

 Variable constants are actually constants whose value is accessed via the function `constant() <https://www.php.net/constant>`_. Otherwise, there is no way to dynamically access a constant (aka, when the developer has the name of the constant as a incoming parameter, and it requires the value of it). 

.. code-block:: php

   <?php
   
   const A = 'constant_value';
   
   $constant_name = 'A';
   
   $variableConstant = constant($constant_name);
   
   ?>


See also `constant() <https://www.php.net/constant>`_.

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Constants/VariableConstant |
+-------------+----------------------------+
| Rulesets    | :ref:`CE`                  |
+-------------+----------------------------+
| Exakt since | 0.8.4                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Slow (1 hour)              |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _call-order:

Call Order
++++++++++

 This is a representation of the code. Each node is a function or method, and each link a is call from a method to another.

The only link is the possible call from a method to the other. All control flow is omitted, including conditional calls and loops.

.. code-block:: php

   <?php
       
       function foo() {
           bar();
           foobar();
       }
       
       function bar() {
           foobar();
       }
       
       function foobar() {
       
       }
   ?>



From the above script, the resulting network will display 'foo() -> bar(), foo() -> foobar(), bar() -> foobar()' calls. 



Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-----------------+
| Short name  | Dump/CallOrder  |
+-------------+-----------------+
| Rulesets    | :ref:`CE`       |
+-------------+-----------------+
| Exakt since | 2.1.4           |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Quick (30 mins) |
+-------------+-----------------+
| Precision   | High            |
+-------------+-----------------+


.. _collect-atom-counts:

Collect Atom Counts
+++++++++++++++++++

Specs
^^^^^
+-------------+------------------------+
| Short name  | Dump/CollectAtomCounts |
+-------------+------------------------+
| Rulesets    | :ref:`CE`              |
+-------------+------------------------+
| Exakt since | 2.1.8                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Quick (30 mins)        |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _collect-block-size:

Collect Block Size
++++++++++++++++++

 Collect block size for for, foreach, while, do...while, ifthen.

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Dump/CollectBlockSize |
+-------------+-----------------------+
| Rulesets    | none                  |
+-------------+-----------------------+
| Exakt since | 2.2.0                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Quick (30 mins)       |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _dump-collectclasschanges:

Dump/CollectClassChanges
++++++++++++++++++++++++

 

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Dump/CollectClassChanges |
+-------------+--------------------------+
| Rulesets    | :ref:`CE`                |
+-------------+--------------------------+
| Exakt since | 2.1.5                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Quick (30 mins)          |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _collect-class-children-count:

Collect Class Children Count
++++++++++++++++++++++++++++

 Count the number of class children for each class.

.. code-block:: php

   <?php
   
   // 2 children
   class a {}
   
   // 1 children
   class b extends a {}
   
   // no children
   class c extends b {}
   
   // no children
   class d extends a {}
   ?>

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Dump/CollectClassChildren |
+-------------+---------------------------+
| Rulesets    | :ref:`CE`                 |
+-------------+---------------------------+
| Exakt since | 2.0.3                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _collect-class-constant-counts:

Collect Class Constant Counts
+++++++++++++++++++++++++++++

 This analysis collects the number of class constants per class or interface. 

The count applies to classes, anonymous classes and interfaces. They are considered distinct one from another. 

.. code-block:: php

   <?php
   
   class foo {
       // 3 constant
       const A =1, B =2;
   }
   
   interface bar {
       // 3 properties
       const A=1, B=2, C=3;
   }
   
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+---------------------------------+
| Short name  | Dump/CollectClassConstantCounts |
+-------------+---------------------------------+
| Rulesets    | :ref:`CE`                       |
+-------------+---------------------------------+
| Exakt since | 2.1.2                           |
+-------------+---------------------------------+
| Php Version | All                             |
+-------------+---------------------------------+
| Severity    | Minor                           |
+-------------+---------------------------------+
| Time To Fix | Quick (30 mins)                 |
+-------------+---------------------------------+
| Precision   | High                            |
+-------------+---------------------------------+


.. _collect-class-depth:

Collect Class Depth
+++++++++++++++++++

 Count the number of level of extends for classes.

.. code-block:: php

   <?php
   
   class a {}
   
   class b extends a {}
   
   class c extends b {}
   
   class d extends a {}
   ?>

Specs
^^^^^
+-------------+------------------------+
| Short name  | Dump/CollectClassDepth |
+-------------+------------------------+
| Rulesets    | :ref:`CE`              |
+-------------+------------------------+
| Exakt since | 2.0.3                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Quick (30 mins)        |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _collect-classes-dependencies:

Collect Classes Dependencies
++++++++++++++++++++++++++++

 Collect Classes Dependencies

Specs
^^^^^
+-------------+---------------------------------+
| Short name  | Dump/CollectClassesDependencies |
+-------------+---------------------------------+
| Rulesets    | :ref:`CE`                       |
+-------------+---------------------------------+
| Exakt since | 2.1.8                           |
+-------------+---------------------------------+
| Php Version | All                             |
+-------------+---------------------------------+
| Severity    | Minor                           |
+-------------+---------------------------------+
| Time To Fix | Quick (30 mins)                 |
+-------------+---------------------------------+
| Precision   | High                            |
+-------------+---------------------------------+


.. _collect-class-interface-counts:

Collect Class Interface Counts
++++++++++++++++++++++++++++++

 Collect the number of interfaces implemented per class.

.. code-block:: php

   <?php
   
   // This class implements 3 interfaces
   class x implements i, j, k {
       // Some code
   }
   
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+----------------------------------+
| Short name  | Dump/CollectClassInterfaceCounts |
+-------------+----------------------------------+
| Rulesets    | :ref:`CE`                        |
+-------------+----------------------------------+
| Exakt since | 2.0.3                            |
+-------------+----------------------------------+
| Php Version | All                              |
+-------------+----------------------------------+
| Severity    | Minor                            |
+-------------+----------------------------------+
| Time To Fix | Quick (30 mins)                  |
+-------------+----------------------------------+
| Precision   | High                             |
+-------------+----------------------------------+


.. _collect-class-traits-counts:

Collect Class Traits Counts
+++++++++++++++++++++++++++

 Counts the number of trait used in a class. 

.. code-block:: php

   <?php
   
   // Use no traits
   class x {}
   
   // Use one trait
   class y {
       use TraitT;
   }
   
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-------------------------------+
| Short name  | Dump/CollectClassTraitsCounts |
+-------------+-------------------------------+
| Rulesets    | :ref:`CE`                     |
+-------------+-------------------------------+
| Exakt since | 2.1.7                         |
+-------------+-------------------------------+
| Php Version | All                           |
+-------------+-------------------------------+
| Severity    | Minor                         |
+-------------+-------------------------------+
| Time To Fix | Quick (30 mins)               |
+-------------+-------------------------------+
| Precision   | High                          |
+-------------+-------------------------------+


.. _dump-collectdefinitionsstats:

Dump/CollectDefinitionsStats
++++++++++++++++++++++++++++

 

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Dump/CollectDefinitionsStats |
+-------------+------------------------------+
| Rulesets    | :ref:`CE`                    |
+-------------+------------------------------+
| Exakt since | 2.1.7                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Quick (30 mins)              |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _collect-files-dependencies:

Collect Files Dependencies
++++++++++++++++++++++++++

 Collect all dependencies between files, based on definitions and usage.

For example, file `A.php`, which defines de class `A`, is a dependence to a file `B.php`, which makes a call to a method from `A`,  or use `A` as a typehint, etc..

Specs
^^^^^
+-------------+-------------------------------+
| Short name  | Dump/CollectFilesDependencies |
+-------------+-------------------------------+
| Rulesets    | :ref:`CE`                     |
+-------------+-------------------------------+
| Exakt since | 2.1.8                         |
+-------------+-------------------------------+
| Php Version | All                           |
+-------------+-------------------------------+
| Severity    | Minor                         |
+-------------+-------------------------------+
| Time To Fix | Quick (30 mins)               |
+-------------+-------------------------------+
| Precision   | High                          |
+-------------+-------------------------------+


.. _foreach()-favorite:

Foreach() Favorite
++++++++++++++++++

 Collect the name used in `foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_ loops. Then, sorts them in order of popularity.

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Dump/CollectForeachFavorite |
+-------------+-----------------------------+
| Rulesets    | :ref:`CE`                   |
+-------------+-----------------------------+
| Exakt since | 1.9.7                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Quick (30 mins)             |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _dump-collectglobalvariables:

Dump/CollectGlobalVariables
+++++++++++++++++++++++++++

 

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Dump/CollectGlobalVariables |
+-------------+-----------------------------+
| Rulesets    | :ref:`CE`                   |
+-------------+-----------------------------+
| Exakt since | 2.1.7                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Quick (30 mins)             |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _collect-literals:

Collect Literals
++++++++++++++++

 Collects all literals in the application, for inventory purposes.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Dump/CollectLiterals |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 1.9.5                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Quick (30 mins)      |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _collect-local-variable-counts:

Collect Local Variable Counts
+++++++++++++++++++++++++++++

 This analysis collects the number of local variables used in a method or a function. 

The count applies to functions, methods, closures and arrow functions. 

Arguments and global variables are not counted. `Static <https://www.php.net/manual/en/language.oop5.static.php>`_ variables are. 

.. code-block:: php

   <?php
   
   function foo($arg) {
       global $w;
       
       // This is a local variable
       $x = rand(1, 2);
       
       return $x + $arg + $w;
   }
   
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+---------------------------------+
| Short name  | Dump/CollectLocalVariableCounts |
+-------------+---------------------------------+
| Rulesets    | :ref:`CE`                       |
+-------------+---------------------------------+
| Exakt since | 2.1.2                           |
+-------------+---------------------------------+
| Php Version | All                             |
+-------------+---------------------------------+
| Severity    | Minor                           |
+-------------+---------------------------------+
| Time To Fix | Quick (30 mins)                 |
+-------------+---------------------------------+
| Precision   | High                            |
+-------------+---------------------------------+


.. _collect-mbstring-encodings:

Collect Mbstring Encodings
++++++++++++++++++++++++++

 This analysis collects the encoding names, used by ext/mb functions. 

.. code-block:: php

   <?php
   
   mb_stotolower('PHP', 'iso-8859-1');
   
   mb_stotolower('PHP', 'iso-8859-1');
   
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-------------------------------+
| Short name  | Dump/CollectMbstringEncodings |
+-------------+-------------------------------+
| Rulesets    | :ref:`CE`                     |
+-------------+-------------------------------+
| Exakt since | 1.9.9                         |
+-------------+-------------------------------+
| Php Version | All                           |
+-------------+-------------------------------+
| Severity    | Minor                         |
+-------------+-------------------------------+
| Time To Fix | Quick (30 mins)               |
+-------------+-------------------------------+
| Precision   | High                          |
+-------------+-------------------------------+


.. _collect-method-counts:

Collect Method Counts
+++++++++++++++++++++

 This analysis collects the number of methods per class, trait or interface. 

The count applies to classes, anonymous classes, traits and interfaces. They are considered distinct one from another. 

.. code-block:: php

   <?php
   
   class foo {
       // 2 methods
       function __construct() {}
       function foo() {}
   }
   
   interface bar {
       // 1 method
       function a() ;
   }
   
   class barbar {
       // 3 methods
       function __construct() {}
       function foo() {}
       function a() {}
   }
   
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Dump/CollectMethodCounts |
+-------------+--------------------------+
| Rulesets    | :ref:`CE`                |
+-------------+--------------------------+
| Exakt since | 2.1.2                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Quick (30 mins)          |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _collect-native-calls-per-expressions:

Collect Native Calls Per Expressions
++++++++++++++++++++++++++++++++++++

 Computes the number of PHP native call per expression.

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+---------------------------------------+
| Short name  | Dump/CollectNativeCallsPerExpressions |
+-------------+---------------------------------------+
| Rulesets    | :ref:`CE`                             |
+-------------+---------------------------------------+
| Exakt since | 2.1.7                                 |
+-------------+---------------------------------------+
| Php Version | All                                   |
+-------------+---------------------------------------+
| Severity    | Minor                                 |
+-------------+---------------------------------------+
| Time To Fix | Quick (30 mins)                       |
+-------------+---------------------------------------+
| Precision   | High                                  |
+-------------+---------------------------------------+


.. _collect-parameter-counts:

Collect Parameter Counts
++++++++++++++++++++++++

 This analysis collects the number of parameter per method. 

The count applies to functions, methods, closures and arrow functions.

.. code-block:: php

   <?php
   
   // parameter count on function : 1
   function foo($a) { }
   
   // parameter count on closure : 2
   function ($b, $c = 2) {}
   
   // parameter count on method : 0 (none)
   class x {
       function moo() { }
   }
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Dump/CollectParameterCounts |
+-------------+-----------------------------+
| Rulesets    | :ref:`CE`                   |
+-------------+-----------------------------+
| Exakt since | 1.9.6                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Quick (30 mins)             |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _collect-parameter-names:

Collect Parameter Names
+++++++++++++++++++++++

 This analysis collects the names of all parameters. It also counts the number of occurrences of each name.

The names are collected from functions, methods, closures and arrow functions. Compulsory and optional parameters are all processed.

.. code-block:: php

   <?php
   
   // parameter $a
   function foo($a) { }
   
   // parameter $b, $c
   function ($b, $c = 2) {}
   
   // parameters in interfaces are counted too.
   // Here, $a will be counted with the one above.
   interfaces x {
       function moo($a);
   }
   ?>

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Dump/CollectParameterNames |
+-------------+----------------------------+
| Rulesets    | :ref:`CE`                  |
+-------------+----------------------------+
| Exakt since | 2.1.5                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Quick (30 mins)            |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _collect-php-structures:

Collect Php Structures
++++++++++++++++++++++

 Collect Php Structures

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Dump/CollectPhpStructures |
+-------------+---------------------------+
| Rulesets    | :ref:`CE`                 |
+-------------+---------------------------+
| Exakt since | 2.1.8                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _collect-property-counts:

Collect Property Counts
+++++++++++++++++++++++

 This analysis collects the number of properties per class or trait. 

The count applies to classes, anonymous classes and traits. They are considered distinct one from another. 

Properties may be ``static`` or not. Visibility, default values and typehints are omitted.

.. code-block:: php

   <?php
   
   class foo {
       // 3 properties
       private $p1, $p2, $p3;
   }
   
   trait foo {
       // 3 properties
       protected $p1;
       public $p2 = 1, $p3;
   }
   
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Dump/CollectPropertyCounts |
+-------------+----------------------------+
| Rulesets    | :ref:`CE`                  |
+-------------+----------------------------+
| Exakt since | 2.1.2                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Quick (30 mins)            |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _collect-readability:

Collect Readability
+++++++++++++++++++

 Measure readability for methods, functions and closures, then report them.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Dump/CollectReadability |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 2.1.7                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Quick (30 mins)         |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _collect-use-counts:

Collect Use Counts
++++++++++++++++++

 Count the number of use expression in a file. This count 4 uses. 

.. code-block:: php

   <?php
   
   use A as B;
   use F\C, F\D, F\E;
   
   ?>

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Dump/CollectUseCounts |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 2.1.9                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Quick (30 mins)       |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _collect-variables:

Collect Variables
+++++++++++++++++

 Collect all variables from the code. Their type is mentionned, as variable, object or array, depending on their usage. 

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Dump/CollectVariables |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 2.1.7                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Quick (30 mins)       |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _constant-order:

Constant Order
++++++++++++++

 Order of dependency of constants. 

Constants, either global or class, may be built using `static <https://www.php.net/manual/en/language.oop5.static.php>`_ expression. In turn, this means that constants have now a build order. For example : 

.. code-block:: php

   <?php
   
   // A is an independant global constant
   const A = 1;
   // B is an dependant global constant : it is built with A
   const B = A + 1;
   
   class x {
       // x::C is an dependant class constant : it is built with A 
       const C = A + 3;
   }
   
   ?>


The code above leads to the following order : ``A`` - ``B``, ``C``. ``A`` can be built without constraints, while ``B`` and ``C`` must be build when ``A`` is available. Note that ``B`` and ``C`` are both dependant on ``A``, but are not dependant on each other.

The resulting tree displays the different relationship between the constants. 

Note : ``define``constants are not considered here. Only ``const`` constants, global or class.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Dump/ConstantOrder |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 2.0.7              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Quick (30 mins)    |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _cyclomatic-complexity:

Cyclomatic Complexity
+++++++++++++++++++++

 Calculate cyclomatic complexity for each methods, function, and closures.

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Dump/CyclomaticComplexity |
+-------------+---------------------------+
| Rulesets    | :ref:`CE`                 |
+-------------+---------------------------+
| Exakt since | 1.9.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _dump-dereferencinglevels:

Dump/DereferencingLevels
++++++++++++++++++++++++

 

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Dump/DereferencingLevels |
+-------------+--------------------------+
| Rulesets    | :ref:`CE`                |
+-------------+--------------------------+
| Exakt since | 1.9.6                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Quick (30 mins)          |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _environment-variable-usage:

Environment Variable Usage
++++++++++++++++++++++++++

 Collects all environment variables in the application, for inventory purposes.

.. code-block:: php

   <?php
   
   $implicit_global = 1;
   global $explicit_global;
   
   function foo() {
       $local_variable = 2;
   }
   
   ?>


See also `Variable scope <https://www.php.net/manual/en/language.variables.scope.php>`_.

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Dump/EnvironnementVariables |
+-------------+-----------------------------+
| Rulesets    | :ref:`CE`                   |
+-------------+-----------------------------+
| Exakt since | 1.9.5                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Quick (30 mins)             |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _dump-fossilizedmethods:

Dump/FossilizedMethods
++++++++++++++++++++++

 

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+------------------------+
| Short name  | Dump/FossilizedMethods |
+-------------+------------------------+
| Rulesets    | :ref:`CE`              |
+-------------+------------------------+
| Exakt since | 2.1.5                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Quick (30 mins)        |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _dump-inclusions:

Dump/Inclusions
+++++++++++++++

 

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-----------------+
| Short name  | Dump/Inclusions |
+-------------+-----------------+
| Rulesets    | :ref:`CE`       |
+-------------+-----------------+
| Exakt since | 2.0.2           |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Quick (30 mins) |
+-------------+-----------------+
| Precision   | High            |
+-------------+-----------------+


.. _indentation-levels:

Indentation Levels
++++++++++++++++++

 Collect all level of nesting for methods and functions.

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+------------------------+
| Short name  | Dump/IndentationLevels |
+-------------+------------------------+
| Rulesets    | :ref:`CE`              |
+-------------+------------------------+
| Exakt since | 1.9.3                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Quick (30 mins)        |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _new-order:

New Order
+++++++++

 Order in which new calls are done. 

.. code-block:: php

   <?php
   
   class x {}
   
   // class Y has precedence over class X, as it needs to be called first to get to X
   class y {
       function foo() {
           return new x();
       }
   }
   
   
   ?>

Specs
^^^^^
+-------------+-----------------+
| Short name  | Dump/NewOrder   |
+-------------+-----------------+
| Rulesets    | :ref:`CE`       |
+-------------+-----------------+
| Exakt since | 2.0.2           |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Quick (30 mins) |
+-------------+-----------------+
| Precision   | High            |
+-------------+-----------------+


.. _links-between-parameter-and-argument:

Links Between Parameter And Argument
++++++++++++++++++++++++++++++++++++

 Collect various stats about arguments and parameter usage. 

A parameter is one slot in the method definition. An argument is a slot in the method call. Both are linked by the method and their respective position in the argument list.

+ Total number of argument usage, linked to a parameter : this excludes arguments from external libraries and native PHP functions. For reference.
+ Number of identical parameter : cases where argument and parameter have the same name. 
+ Number of different parameter : cases where argument and parameter have the different name. 
+ Number of expression argument : cases where argument is an expression
+ Number of constant argument : cases where the argument is a constant

.. code-block:: php

   <?php
   
   function foo($a, $b) {
       // some code
   }
   
   // $a is the same as the parameter
   // $c is different from the paramter $b
   foo($a, $c);
   
   const C = 1;
   
   // Foo is called with a constant (1rst argument)
   // Foo is called with a expression (2nd argument)
   foo(C, 1+3);
   
   ?>

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Dump/ParameterArgumentsLinks |
+-------------+------------------------------+
| Rulesets    | :ref:`CE`                    |
+-------------+------------------------------+
| Exakt since | 2.0.6                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Quick (30 mins)              |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _typehinting-stats:

Typehinting Stats
+++++++++++++++++

 This module collects statistics about typehinting usage.

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Dump/TypehintingStats |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 1.9.9                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Quick (30 mins)       |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _typehint-order:

Typehint Order
++++++++++++++

 Topological order, based on typehints. 

Each function, method that use typehint is a link between a type of data and another one. The argument typehint acts as a filter, and the returned type hint is the next step.

.. code-block:: php

   <?php
   
   // This library imposes the following order : A -> B -> C 
   function foo(A $a) : B { }
   function bar(B $b) : C { }
   
   ?>

Specs
^^^^^
+-------------+--------------------+
| Short name  | Dump/Typehintorder |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 2.0.2              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Quick (30 mins)    |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _exception-order:

Exception Order
+++++++++++++++

 When catching exception, the most specialized exceptions must be in the early catch, and the most general exceptions must be in the later catch. Otherwise, the general catches intercept the exception, and the more specialized will not be read.

.. code-block:: php

   <?php
   
   class A extends \Exception {}
   class B extends A {}
   
   try {
       throw new A();
   } 
   catch(A $a1) { }
   catch(B $b2 ) { 
       // Never reached, as previous Catch is catching the early worm
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Remove one of the catch clause

Specs
^^^^^
+-------------+--------------------------------------------------+
| Short name  | Exceptions/AlreadyCaught                         |
+-------------+--------------------------------------------------+
| Rulesets    | :ref:`Dead code <dead-code>`                     |
+-------------+--------------------------------------------------+
| Exakt since | 0.8.4                                            |
+-------------+--------------------------------------------------+
| Php Version | All                                              |
+-------------+--------------------------------------------------+
| Severity    | Minor                                            |
+-------------+--------------------------------------------------+
| Time To Fix | Slow (1 hour)                                    |
+-------------+--------------------------------------------------+
| Precision   | High                                             |
+-------------+--------------------------------------------------+
| Examples    | :ref:`case-woocommerce-exceptions-alreadycaught` |
+-------------+--------------------------------------------------+


.. _can't-throw-throwable:

Can't Throw Throwable
+++++++++++++++++++++

 Classes extending ``Throwable`` can't be thrown. The same applies to interfaces. 

Although this code lints, PHP throws a Fatal error when executing or including it : ``Class fooThrowable cannot implement interface `Throwable <https://www.php.net/manual/en/class.throwable.php>`_, extend Exception or Error instead``.

.. code-block:: php

   <?php
   
   // This is the way to go
   class fooException extends \Exception { }
   
   // This is not possible and a lot of work
   class fooThrowable implements \throwable { }
   
   ?>


See also `Throwable <https://www.php.net/manual/en/class.throwable.php>`_, `Exception <https://www.php.net/manual/en/class.exception.php>`_ and `Error <https://www.php.net/manual/en/class.error.php>`_.


Suggestions
^^^^^^^^^^^

* Extends the \Exception class
* Extends the \Error class

Specs
^^^^^
+-------------+----------------------------------------+
| Short name  | Exceptions/CantThrow                   |
+-------------+----------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`LintButWontExec` |
+-------------+----------------------------------------+
| Exakt since | 1.3.3                                  |
+-------------+----------------------------------------+
| Php Version | All                                    |
+-------------+----------------------------------------+
| Severity    | Minor                                  |
+-------------+----------------------------------------+
| Time To Fix | Slow (1 hour)                          |
+-------------+----------------------------------------+
| Precision   | High                                   |
+-------------+----------------------------------------+


.. _caught-variable:

Caught Variable
+++++++++++++++

 

Suggestions
^^^^^^^^^^^

* Make all caught constant consistent, and avoid using them for something else

Specs
^^^^^
+-------------+-------------------+
| Short name  | Exceptions/CatchE |
+-------------+-------------------+
| Rulesets    | none              |
+-------------+-------------------+
| Exakt since | 1.7.6             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _catch-undefined-variable:

Catch Undefined Variable
++++++++++++++++++++++++

 Always initialize variable before the try block, when they are used in a catch block. If the exception is raised before the variable is defined, the catch block may have to handle an undefined variable, leading to more chaos.

.. code-block:: php

   <?php
   
   $a = 1;
   try {
       mayThrowAnException();
       $b = 2;
   } catch (\Exception $e) {
       // $a is already defined, as it was done before the try block
       // $b may not be defined, as it was initialized after the exception-throwing expression
       echo $a + $b;
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Always define the variable used in the catch clause, before the try block.

Specs
^^^^^
+-------------+-----------------------------------+
| Short name  | Exceptions/CatchUndefinedVariable |
+-------------+-----------------------------------+
| Rulesets    | :ref:`Analyze`                    |
+-------------+-----------------------------------+
| Exakt since | 2.1.5                             |
+-------------+-----------------------------------+
| Php Version | All                               |
+-------------+-----------------------------------+
| Severity    | Minor                             |
+-------------+-----------------------------------+
| Time To Fix | Quick (30 mins)                   |
+-------------+-----------------------------------+
| Precision   | High                              |
+-------------+-----------------------------------+


.. _undefined-caught-exceptions:

Undefined Caught Exceptions
+++++++++++++++++++++++++++

 Those are exceptions that are caught in the code, but are not defined in the application. 

They may be externally defined, such as in core PHP, extensions or libraries. Make sure those exceptions are useful to your application : otherwise, they are dead code.

.. code-block:: php

   <?php
   
   try {
       library_function($some, $args);
       
   } catch (LibraryException $e) {
       // This exception is not defined, and probably belongs to Library
       print Library failed\n;
   
   } catch (OtherLibraryException $e) {
       // This exception is not defined, and probably do not belongs to this code
       print Library failed\n;
   
   } catch (\Exception $e) {
       // This exception is a PHP standard exception
       print Something went wrong, but not at Libary level\n;
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Remove the catch clause, as it is dead code
* Make sure the exception is thrown by the underlying code

Specs
^^^^^
+-------------+-------------------------------+
| Short name  | Exceptions/CaughtButNotThrown |
+-------------+-------------------------------+
| Rulesets    | :ref:`Dead code <dead-code>`  |
+-------------+-------------------------------+
| Exakt since | 0.8.4                         |
+-------------+-------------------------------+
| Php Version | All                           |
+-------------+-------------------------------+
| Severity    | Minor                         |
+-------------+-------------------------------+
| Time To Fix | Slow (1 hour)                 |
+-------------+-------------------------------+
| Precision   | High                          |
+-------------+-------------------------------+


.. _caught-exceptions:

Caught Exceptions
+++++++++++++++++

 Exceptions used in catch clause. 

.. code-block:: php

   <?php
   
   try {
       foo();
   } catch (MyException $e) {
       fixException();
   } finally {
       clean();
   }
   
   ?>


See also `Exceptions <https://www.php.net/manual/en/language.exceptions.php>`_.

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Exceptions/CaughtExceptions |
+-------------+-----------------------------+
| Rulesets    | none                        |
+-------------+-----------------------------+
| Exakt since | 0.8.4                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Slow (1 hour)               |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _could-use-try:

Could Use Try
+++++++++++++

 Some commands may raise exceptions. It is recommended to use the try/catch block to intercept those exceptions, and process them.

* / : ``DivisionByZeroError``
* % : ``DivisionByZeroError``
* `intdiv() <https://www.php.net/intdiv>`_ : ``DivisionByZeroError``
* << : ``ArithmeticError``
* >> : ``ArithmeticError``
* ``Phar\:\:mungserver`` : ``PharException``
* ``Phar\:\:webphar`` : ``PharException``

See also `Predefined Exceptions <https://www.php.net/manual/en/reserved.exceptions.php>`_, `PharException <https://www.php.net/manual/en/class.pharexception.php>`_.


Suggestions
^^^^^^^^^^^

* Add a try/catch clause around those commands
* Add a check on the values used with those operator : for example, check a dividend is not 0, or a bitshift is not negative

Specs
^^^^^
+-------------+-------------------------------------------+
| Short name  | Exceptions/CouldUseTry                    |
+-------------+-------------------------------------------+
| Rulesets    | :ref:`Suggestions`                        |
+-------------+-------------------------------------------+
| Exakt since | 1.5.0                                     |
+-------------+-------------------------------------------+
| Php Version | All                                       |
+-------------+-------------------------------------------+
| Severity    | Minor                                     |
+-------------+-------------------------------------------+
| Time To Fix | Quick (30 mins)                           |
+-------------+-------------------------------------------+
| Precision   | High                                      |
+-------------+-------------------------------------------+
| Examples    | :ref:`case-mautic-exceptions-couldusetry` |
+-------------+-------------------------------------------+


.. _defined-exceptions:

Defined Exceptions
++++++++++++++++++

 This is the list of defined exceptions.

.. code-block:: php

   <?php
   
   class myException extends \Exception {}
   
   // A defined exception
   throw new myException();
   
   // not a defined exception : it is already defined. 
   throw new \RuntimeException();
   
   ?>


See also `Exceptions <https://www.php.net/manual/en/language.exceptions.php>`_.

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Exceptions/DefinedExceptions |
+-------------+------------------------------+
| Rulesets    | :ref:`CE`                    |
+-------------+------------------------------+
| Exakt since | 0.8.4                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Slow (1 hour)                |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _forgotten-thrown:

Forgotten Thrown
++++++++++++++++

 An exception is instantiated, but not thrown. 

.. code-block:: php

   <?php
   
   class MyException extends \Exception { }
   
   if ($error !== false) {
       // This looks like 'throw' was omitted
       new MyException();
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Remove the throw expression
* Add the new to the throw expression

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Exceptions/ForgottenThrown |
+-------------+----------------------------+
| Rulesets    | :ref:`Analyze`             |
+-------------+----------------------------+
| Exakt since | 0.10.2                     |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Major                      |
+-------------+----------------------------+
| Time To Fix | Instant (5 mins)           |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _php-exception:

PHP Exception
+++++++++++++

 Mark an exception as a native exception. They may come from PHP standard distribution or an extension.

.. code-block:: php

   <?php
   
   // From the native set
   $a = new LogicException('Logic error');
   throw $a;
   
   // From an extension
   throw new ZookeeperException('Zookeeper error');
   
   ?>


See also `Exceptions <https://www.php.net/manual/en/language.exceptions.php>`_.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Exceptions/IsPhpException |
+-------------+---------------------------+
| Rulesets    | none                      |
+-------------+---------------------------+
| Exakt since | 1.5.2                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _large-try-block:

Large Try Block
+++++++++++++++

 Try block should enclosing only the expression that may emit an exception. 

When writing large blocks of code in a try, it becomes difficult to understand where the expression is coming from. Large blocks may also lead to catch multiples exceptions, with a long list of catch clause. 

In particular, the catch clause will resume the execution without knowing where the try was interrupted : there are no indication of achievement, even partial. In fact, catching an exception signals a very dirty situation.

.. code-block:: php

   <?php
   
   // try is one expression only
   try {
       $database->query($query);
   } catch (DatabaseException $e) {
       // process exception
   }
   
   // Too many expressions around the one that may actually emit the exception
   try {
       $SQL = build_query($arguments);
       $database = new Database($dsn);
       $database->setOption($options);
       $statement = $database->prepareQuery($SQL);
       $result = $statement->query($query);
   } catch (DatabaseException $e) {
       // process exception
   }
   
   ?>


This analysis reports try blocks that are 5 lines or more. This threshold may be configured with the directive ``tryBlockMaxSize``. Catch clause, and finally are not considered here.



Suggestions
^^^^^^^^^^^

* Reduce the amount of code in the block, by moving it before and after

+-----------------+---------+---------+-------------------------------------------------+
| Name            | Default | Type    | Description                                     |
+-----------------+---------+---------+-------------------------------------------------+
| tryBlockMaxSize | 5       | integer | Maximal number of expressions in the try block. |
+-----------------+---------+---------+-------------------------------------------------+



Specs
^^^^^
+-------------+--------------------------+
| Short name  | Exceptions/LargeTryBlock |
+-------------+--------------------------+
| Rulesets    | :ref:`Suggestions`       |
+-------------+--------------------------+
| Exakt since | 2.1.5                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Quick (30 mins)          |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _long-preparation-for-throw:

Long Preparation For Throw
++++++++++++++++++++++++++

 When throwing an exception, move the preparing code in the exception. This will keep the ``throw`` call simple.

.. code-block:: php

   <?php
   
   // Examples extracted from Alain Schlesser's blog
   public function render( $view ): string {
    
      if ( ! $this->views->has( $view ) ) {
         switch ( gettype( $view ) ) {
            case 'object':
               $view = get_class( $view );
            case 'string':
               $message = sprintf(
                  'The requested View %s does not exist.',
                  $view
               );
               break;
            default:
               $message = sprintf(
                  'An unknown View type of %s was requested.',
                  $view
               );
         }
    
         throw new ViewWasNotFound( $message );
      }
    
      echo $this->views->get( $view )
                ->render();
   }
   
   ?>


See also `Structuring PHP Exceptions session <https://phpconference.com/blog/structuring-php-exceptions/>`_ and `Best practices for handling exceptional behavior <https://www.nikolaposa.in.rs/blog/2016/08/17/exceptional-behavior-best-practices/>`_.


Suggestions
^^^^^^^^^^^

* Move the preparation into the Exception to keep the throw simple

+----------------------+---------+---------+-------------------------------------------+
| Name                 | Default | Type    | Description                               |
+----------------------+---------+---------+-------------------------------------------+
| preparationLineCount | 8       | integer | Minimal number of lines before the throw. |
+----------------------+---------+---------+-------------------------------------------+



Specs
^^^^^
+-------------+----------------------------+
| Short name  | Exceptions/LongPreparation |
+-------------+----------------------------+
| Rulesets    | :ref:`Suggestions`         |
+-------------+----------------------------+
| Exakt since | 2.2.0                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Quick (30 mins)            |
+-------------+----------------------------+
| Precision   | Unknown                    |
+-------------+----------------------------+


.. _multiple-exceptions-catch():

Multiple Exceptions Catch()
+++++++++++++++++++++++++++

 It is possible to have several distinct exceptions class caught by the same catch, preventing code repetition. 

This is a new feature since PHP 7.1.

.. code-block:: php

   <?php
   
   // PHP 7.1 and more recent
   try {  
       throw new someException(); 
   } catch (Single $s) {
       doSomething();
   } catch (oneType | anotherType $s) {
       processIdentically();
   } finally {
   
   }
   
   // PHP 7.0 and older
   try {  
       throw new someException(); 
   } catch (Single $s) {
       doSomething();
   } catch (oneType $s) {
       processIdentically();
   } catch (anotherType $s) {
       processIdentically();
   } finally {
   
   }
   
   ?>


This is a backward incompatible feature of PHP 7.1.

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Exceptions/MultipleCatch                                                                                                                         |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70` |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                                                            |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                                                              |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                                                            |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                                                  |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                             |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+


.. _overwritten-exceptions:

Overwritten Exceptions
++++++++++++++++++++++

 In catch blocks, it is good practice to avoid overwriting the incoming exception, as information about the exception will be lost.

.. code-block:: php

   <?php
   
   try {
       doSomething();
   } catch (SomeException $e) { 
       // $e is overwritten 
       $e = new anotherException($e->getMessage()); 
       throw $e;
   } catch (SomeOtherException $e) { 
       // $e is chained with the next exception 
       $e = new Exception($e->getMessage(), 0, $e); 
       throw $e;
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Use another variable name to create new values inside the catch
* Use anonymous catch clause (no variable caught) in PHP 8.0, to make this explicit

Specs
^^^^^
+-------------+-----------------------------------------------------------------+
| Short name  | Exceptions/OverwriteException                                   |
+-------------+-----------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Suggestions` |
+-------------+-----------------------------------------------------------------+
| Exakt since | 0.8.4                                                           |
+-------------+-----------------------------------------------------------------+
| Php Version | All                                                             |
+-------------+-----------------------------------------------------------------+
| Severity    | Minor                                                           |
+-------------+-----------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                 |
+-------------+-----------------------------------------------------------------+
| Precision   | High                                                            |
+-------------+-----------------------------------------------------------------+


.. _rethrown-exceptions:

Rethrown Exceptions
+++++++++++++++++++

 Throwing a caught exception is usually useless and dead code.

When exceptions are caught, they should be processed or transformed, but not rethrown as is.

Those issues often happen when a catch structure was positioned for debug purposes, but lost its usage later. 

.. code-block:: php

   <?php
   
   try {
       doSomething();
   } catch (Exception $e) {
       throw $e;
   }
   
   ?>


See also `What are the best practices for catching and re-throwing exceptions? <https://stackoverflow.com/questions/5551668/what-are-the-best-practices-for-catching-and-re-throwing-exceptions/5551828>`_ and `Exception chaining <https://www.php.net/manual/en/exception.construct.php>`_.



Suggestions
^^^^^^^^^^^

* Log the message of the exception for later usage.
* Remove the try/catch and let the rest of the application handle this exception.
* Chain the exception, by throwing a new exception, including the caught exception.

Specs
^^^^^
+-------------+--------------------------------------------+
| Short name  | Exceptions/Rethrown                        |
+-------------+--------------------------------------------+
| Rulesets    | :ref:`Dead code <dead-code>`               |
+-------------+--------------------------------------------+
| Exakt since | 0.9.0                                      |
+-------------+--------------------------------------------+
| Php Version | All                                        |
+-------------+--------------------------------------------+
| Severity    | Minor                                      |
+-------------+--------------------------------------------+
| Time To Fix | Quick (30 mins)                            |
+-------------+--------------------------------------------+
| Precision   | High                                       |
+-------------+--------------------------------------------+
| Examples    | :ref:`case-prestashop-exceptions-rethrown` |
+-------------+--------------------------------------------+


.. _throw-functioncall:

Throw Functioncall
++++++++++++++++++

 The ``throw`` keyword expects to use an exception. Calling a function to prepare that exception before throwing it is possible, but forgetting the new keyword is also possible. 

.. code-block:: php

   <?php
   
   // Forgotten new
   throw \RuntimeException('error!');
   
   // Code is OK, function returns an exception
   throw getException(ERROR_TYPE, 'error!');
   
   function getException(ERROR_TYPE, $message) {
       return new \RuntimeException($messsage);
   }
   
   ?>


When the ``new`` keyword is forgotten, then the class constructor is used as a function name, and now exception is emitted, but an ``Undefined function`` fatal error is emitted. 

See also `Exceptions <https://www.php.net/manual/en/language.exceptions.php>`_.


Suggestions
^^^^^^^^^^^

* Add the new operator to the call
* Make sure the function is really a functioncall, not a class name
* Use return typehints for functions, so that Exception may be detected

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------+
| Short name  | Exceptions/ThrowFunctioncall                                                                      |
+-------------+---------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                       |
+-------------+---------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                             |
+-------------+---------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                               |
+-------------+---------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                             |
+-------------+---------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                  |
+-------------+---------------------------------------------------------------------------------------------------+
| Precision   | Medium                                                                                            |
+-------------+---------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-sugarcrm-exceptions-throwfunctioncall`, :ref:`case-zurmo-exceptions-throwfunctioncall` |
+-------------+---------------------------------------------------------------------------------------------------+


.. _thrown-exceptions:

Thrown Exceptions
+++++++++++++++++

 Usage of throw keyword.

.. code-block:: php

   <?php
   
   throw new MyException('Error happened');
   
   ?>


See also `Exceptions <https://www.php.net/manual/en/language.exceptions.php>`_.

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Exceptions/ThrownExceptions |
+-------------+-----------------------------+
| Rulesets    | :ref:`CE`                   |
+-------------+-----------------------------+
| Exakt since | 0.8.4                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Slow (1 hour)               |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _uncaught-exceptions:

Uncaught Exceptions
+++++++++++++++++++

 The following exceptions are thrown in the code, but are never caught. 

.. code-block:: php

   <?php
   
   // This exception is throw, but not caught. It will lead to a fatal error.
   if ($message = check_for_error()) {
       throw new My\Exception($message);
   }
   
   // This exception is throw, and caught. 
   try {
       if ($message = check_for_error()) {
           throw new My\Exception($message);
       }
   } catch (\Exception $e) {
       doSomething();
   }
   
   ?>


Either they will lead to a Fatal Error, or they have to be caught by an including application. This is a valid behavior for libraries, but is not for a final application.

See also `Structuring PHP Exceptions <https://www.alainschlesser.com/structuring-php-exceptions/>`_.


Suggestions
^^^^^^^^^^^

* Catch all the exceptions you throw

Specs
^^^^^
+-------------+-------------------------------+
| Short name  | Exceptions/UncaughtExceptions |
+-------------+-------------------------------+
| Rulesets    | :ref:`Analyze`                |
+-------------+-------------------------------+
| Exakt since | 0.8.4                         |
+-------------+-------------------------------+
| Php Version | All                           |
+-------------+-------------------------------+
| Severity    | Minor                         |
+-------------+-------------------------------+
| Time To Fix | Quick (30 mins)               |
+-------------+-------------------------------+
| Precision   | High                          |
+-------------+-------------------------------+


.. _unthrown-exception:

Unthrown Exception
++++++++++++++++++

 These are exceptions that are defined in the code but never thrown. 

.. code-block:: php

   <?php
   
   //This exception is defined but never used in the code.
   class myUnusedException extends \Exception {}
   
   //This exception is defined and used in the code.
   class myUsedException extends \Exception {}
   
   throw new myUsedException('I was called');
   
   ?>


See also `Exceptions <https://www.php.net/manual/en/language.exceptions.php>`_.

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------------------+
| Short name  | Exceptions/Unthrown                                                                                         |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Dead code <dead-code>`                                                                |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                       |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                         |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                       |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                             |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                        |
+-------------+-------------------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-unthrown-exceptions <https://github.com/dseguy/clearPHP/tree/master/rules/no-unthrown-exceptions.md>`__ |
+-------------+-------------------------------------------------------------------------------------------------------------+


.. _unused-exception-variable:

Unused Exception Variable
+++++++++++++++++++++++++

 The variable from a catch clause is not used. It is expected to be used, either by chaining the exception, or logging the message.

In PHP 8.0, this variable may be omitted. 

.. code-block:: php

   <?php
   
   try{
       doSomething();
   } catch (A $a) {
       // $a is caught, but not used here
   } catch (B $b) {
       // $b is caught, and used
       log($b->getMessage());
   } catch (C) {
       // Caught and ignored (PHP 8.0 +)
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Drop the variable in the clause expression (PHP 8.0 and more recent)
* Chain the exception
* Log the exception message

Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Exceptions/UnusedExceptionVariable |
+-------------+------------------------------------+
| Rulesets    | :ref:`Suggestions`                 |
+-------------+------------------------------------+
| Exakt since | 2.2.0                              |
+-------------+------------------------------------+
| Php Version | All                                |
+-------------+------------------------------------+
| Severity    | Minor                              |
+-------------+------------------------------------+
| Time To Fix | Quick (30 mins)                    |
+-------------+------------------------------------+
| Precision   | High                               |
+-------------+------------------------------------+


.. _useless-catch:

Useless Catch
+++++++++++++

 Catch clause should handle the exception with some work. 

Among the task of a catch clause : log the exception, clean any mess that was introduced, fail graciously. 

.. code-block:: php

   <?php
   
   function foo($a) {
       try {
           $b = doSomething($a);
       } catch (Throwable $e) {
           // No log of the exception : no one knows it happened.
           
           // return immediately ? 
           return false;
       }
       
       $b->complete();
       
       return $b;
   }
   
   ?>


See also `Exceptions <https://www.php.net/manual/en/language.exceptions.php>`_ and `Best practices for PHP exception handling <https://www.moxio.com/blog/34/best-practices-for-php-exception-handling>`_.


Suggestions
^^^^^^^^^^^

* Add a log call to the catch block
* Handle correctly the exception

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------+
| Short name  | Exceptions/UselessCatch                                                                   |
+-------------+-------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                               |
+-------------+-------------------------------------------------------------------------------------------+
| Exakt since | 1.1.4                                                                                     |
+-------------+-------------------------------------------------------------------------------------------+
| Php Version | All                                                                                       |
+-------------+-------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                     |
+-------------+-------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                             |
+-------------+-------------------------------------------------------------------------------------------+
| Precision   | High                                                                                      |
+-------------+-------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-zurmo-exceptions-uselesscatch`, :ref:`case-prestashop-exceptions-uselesscatch` |
+-------------+-------------------------------------------------------------------------------------------+


.. _ext-amqp:

ext/amqp
++++++++

 Extension ``amqp``.

PHP AMQP Binding Library. This is an interface with the `RabbitMQ AMQP client library <https://github.com/alanxz/rabbitmq-c>`_. It is a C-language AMQP client library for use with v2.0+ of the RabbitMQ broker.


.. code-block:: php

   <?php
   $cnn = new AMQPConnection();
   $cnn->connect();
   echo 'Used channels: ', $cnn->getUsedChannels(), PHP_EOL;
   $ch = new AMQPChannel($cnn);
   echo 'Used channels: ', $cnn->getUsedChannels(), PHP_EOL;
   $ch = new AMQPChannel($cnn);
   echo 'Used channels: ', $cnn->getUsedChannels(), PHP_EOL;
   $ch = null;
   echo 'Used channels: ', $cnn->getUsedChannels(), PHP_EOL;
   ?>


See also `PHP AMQP Binding Library <https://github.com/pdezwart/php-amqp>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extamqp |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-apache:

ext/apache
++++++++++

 Extension Apache.

These functions are only available when running PHP as an Apache module.

.. code-block:: php

   <?php
     $ret = apache_getenv(SERVER_ADDR);
     echo $ret;
   ?>


See also `Extension Apache <https://www.php.net/manual/en/book.apache.php>`_ and `Apache server <https://www.apache.org/>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Extensions/Extapache |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _ext-apc:

ext/apc
+++++++

 Extension Alternative PHP Cache.

The Alternative PHP Cache (APC) is a free and open opcode cache for PHP. Its goal is to provide a free, open, and robust framework for caching and optimizing PHP intermediate code.

This extension is considered unmaintained and dead. 

.. code-block:: php

   <?php
      $bar = 'BAR';
      apc_add('foo', $bar);
      var_dump(apc_fetch('foo'));
      echo PHP_EOL;
   
      $bar = 'NEVER GETS SET';
      apc_add('foo', $bar);
      var_dump(apc_fetch('foo'));
      echo PHP_EOL;
   ?>


See also `Alternative PHP Cache <https://www.php.net/apc>`_.

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Extensions/Extapc                    |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP55` |
+-------------+--------------------------------------+
| Exakt since | 0.8.4                                |
+-------------+--------------------------------------+
| Php Version | 7.0-                                 |
+-------------+--------------------------------------+
| Severity    | Major                                |
+-------------+--------------------------------------+
| Time To Fix | Slow (1 hour)                        |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _ext-apcu:

ext/apcu
++++++++

 Extension ``APCU``.

``APCu`` is ``APC`` stripped of opcode caching. The Alternative PHP Cache (APC) is a free and open opcode cache for PHP. Its goal is to provide a free, open, and robust framework for caching and optimizing PHP intermediate code.

.. code-block:: php

   <?php
   $bar = 'BAR';
   apcu_add('foo', $bar);
   var_dump(apcu_fetch('foo'));
   echo \n;
   $bar = 'NEVER GETS SET';
   apcu_add('foo', $bar);
   var_dump(apcu_fetch('foo'));
   echo \n;
   ?>


See also `APCU <http://www.php.net/manual/en/book.apcu.php>`_, `ext/apcu <https://pecl.php.net/package/APCu>`_ and `krakjoe/apcu <https://github.com/krakjoe/apcu>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extapcu |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-array:

ext/array
+++++++++

 Core functions processing arrays.

These functions manipulate arrays in various ways. Arrays are essential for storing, managing, and operating on sets of variables.

This is not a real extension : it is a documentation section, that helps classifying the functions.

.. code-block:: php

   <?php
   function odd($var)
   {
       // returns whether the input integer is odd
       return($var & 1);
   }
   
   function even($var)
   {
       // returns whether the input integer is even
       return(!($var & 1));
   }
   
   $array1 = array('a'=>1, 'b'=>2, 'c'=>3, 'd'=>4, 'e'=>5);
   $array2 = array(6, 7, 8, 9, 10, 11, 12);
   
   echo 'Odd :'.PHP_EOL;
   print_r(array_filter($array1, 'odd'));
   echo 'Even:'.PHP_EOL;
   print_r(array_filter($array2, 'even'));
   ?>


See also `Arrays <https://www.php.net/manual/en/book.array.php>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Extensions/Extarray |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.8.4               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _ext-php-ast:

ext/php-ast
+++++++++++

 PHP-AST extension (PHP 7.0 +).

.. code-block:: php

   <?php
   
   $code = <<<'EOC'
   <?php
   $var = 42;
   EOC;
   
   var_dump(ast\parse_code($code, $version=50));
   
   ?>


See also `ext/ast <https://pecl.php.net/package/ast>`_ and `Extension exposing PHP 7 abstract syntax tree <https://github.com/nikic/php-ast>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Extensions/Extast |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | 7.0+              |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _ext-async:

ext/async
+++++++++

 Concurrent Task Extension for PHP.

This extension provides concurrent Zend VM executions using native C fibers in PHP.

.. code-block:: php

   <?php
   namespace Concurrent;
   register_shutdown_function(function () {
       echo "===> Shutdown function(s) execute here.\n";
   });
   $work = function (string $title): void {
       var_dump($title);
   };
   Task::await(Task::async(function () use ($work) {
       $defer = new Deferred();
       
       Task::await(Task::async($work, 'A'));
       Task::await(Task::async($work, 'B'));
       
       Task::async(function () {
           $defer = new Deferred();
           
           Task::async(function () use ($defer) {
               (new Timer(1000))->awaitTimeout();
               
               $defer->resolve('H :)');
           });
           
           var_dump(Task::await($defer->awaitable()));
       });
       
       Task::async(function () use ($defer) {
           var_dump(Task::await($defer->awaitable()));
       });
       
       $timer = new Timer(500);
       
       Task::async(function () use ($timer, $defer, $work) {
           $timer->awaitTimeout();
           
           $defer->resolve('F');
           
           Task::async($work, 'G');
       });
       
       var_dump('ROOT TASK DONE');
   }));
   Task::async($work, 'C');
   Task::async(function () use ($work) {
       (new Timer(0))->awaitTimeout();
       
       Task::async($work, 'E');
   });
   Task::async(function ($v) {
       var_dump(Task::await($v));
   }, Deferred::value('D'));
   var_dump('=> END OF MAIN SCRIPT');
   
   ?>


See also `ext-async repository <https://github.com/concurrent-php/ext-async>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Extensions/Extasync |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 1.5.6               |
+-------------+---------------------+
| Php Version | 7.3+                |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Quick (30 mins)     |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _ext-bcmath:

ext/bcmath
++++++++++

 Extension BC Math.

For arbitrary precision mathematics PHP offers the Binary Calculator which supports numbers of any size and precision up to ``2147483647-1`` (or ``0x7FFFFFFF-1``) decimals, represented as strings.

.. code-block:: php

   <?php
   
   echo bcpow('2', '123'); 
   //10633823966279326983230456482242756608
   
   echo 2**123;
   //1.0633823966279E+37
   ?>


See also `BC Math Functions <http://www.php.net/bcmath>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Extensions/Extbcmath |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _ext-bzip2:

ext/bzip2
+++++++++

 Extension ext/bzip2.

Bzip2 Functions for PHP.

.. code-block:: php

   <?php
   
   $file = '/tmp/foo.bz2';
   $bz = bzopen($file, 'r') or die('Couldn\'t open $file for reading');
   
   bzclose($bz);
   
   ?>


See also `Bzip2 Functions <https://www.php.net/bzip2>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Extensions/Extbzip2 |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.8.4               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _ext-cairo:

ext/cairo
+++++++++

 Extension ext/cairo.

`Cairo <https://www.php.net/Cairo>`_ is a native PHP extension to create and modify graphics using the `Cairo Graphics Library <https://cairographics.org/>`_.

.. code-block:: php

   <?php
   // Example from https://github.com/gtkforphp/cairo/blob/master/examples/big-line.php
   $width = 100;
   $height = 100;
   $sur = new CairoPSSurface(temp.ps, $width, $height);
   
   $con = new CairoContext($sur);
   $con->setSourceRgb(0,0,1);
   $con->moveTo(50,50);
   $con->lineTo(50000,50000);
   $con->stroke();
   $con->setSourceRgb(0,1,0);
   $con->moveTo(50,50);
   $con->lineTo(-50000,50000);
   $con->stroke();
   $con->setSourceRgb(1,0,0);
   $con->moveTo(50,50);
   $con->lineTo(50000,-50000);
   $con->stroke();
   $con->setSourceRgb(1,1,0);
   $con->moveTo(50,50);
   $con->lineTo(-50000,-50000);
   $con->stroke();
   
   $sur->writeToPng(dirname(__FILE__)  . /big-line-php.png);
   ?>


See also `cairo <https://www.php.net/manual/en/book.cairo.php>`_, `gtkforphp/cairo <https://github.com/gtkforphp/cairo>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Extensions/Extcairo |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.8.4               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | Very high           |
+-------------+---------------------+


.. _ext-calendar:

ext/calendar
++++++++++++

 Extension ext/calendar.

The calendar extension presents a series of functions to simplify converting between different calendar formats. 

.. code-block:: php

   <?php
   $number = cal_days_in_month(CAL_GREGORIAN, 8, 2003); // 31
   echo "There were {$number} days in August 2003";
   ?>


See also `Calendar Functions <http://www.php.net/manual/en/ref.calendar.php>`_.

Specs
^^^^^
+-------------+------------------------+
| Short name  | Extensions/Extcalendar |
+-------------+------------------------+
| Rulesets    | :ref:`CE`              |
+-------------+------------------------+
| Exakt since | 0.8.4                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Slow (1 hour)          |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _ext-cmark:

ext/cmark
+++++++++

 Extension Cmark, for Common Mark.

cmark provides access to the reference implementation of CommonMark, a rationalized version of Markdown syntax with a specification.

.. code-block:: php

   <?php
   $text = new CommonMark\Node\Text;
   $text->literal = 'Hello World';
   $document = new CommonMark\Node\Document;
   $document->appendChild(
   	(new CommonMark\Node\Paragraph)
   		->appendChild($text));
   echo CommonMark\Render\HTML($document);
   ?>


See also `Cmark <https://github.com/commonmark/cmark>`_ and `ext/cmark <https://github.com/krakjoe/cmark>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Extensions/Extcmark |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 1.2.7               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _ext-com:

ext/com
+++++++

 Extension COM and ``.Net`` (Windows).

COM is an acronym for 'Component Object Model'; it is an object orientated layer (and associated services) on top of DCE RPC (an open standard) and defines a common calling convention that enables code written in any language to call and interoperate with code written in any other language (provided those languages are COM aware).

.. code-block:: php

   <?php 
   $domainObject = new COM(WinNT://Domain); 
   foreach ($domainObject as $obj) { 
      echo $obj->Name . <br />; 
   } 
   ?>


See also `COM and .Net (Windows) <https://www.php.net/manual/en/book.com.php>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Extensions/Extcom |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _ext-crypto:

ext/crypto
++++++++++

 Extension ext/crypto (PECL).

Objective PHP binding of OpenSSL Crypto library.

.. code-block:: php

   <?php
   use Crypto\Cipher;
   use Crypto\AlgorihtmException;
   $algorithm = 'aes-256-cbc';
   if (!Cipher::hasAlgorithm($algorithm)) {
   	die('Algorithm $algorithm not found' . PHP_EOL);
   }
   try {
   	$cipher = new Cipher($algorithm);
   	// Algorithm method for retrieving algorithm
   	echo 'Algorithm: ' . $cipher->getAlgorithmName() . PHP_EOL;
   	// Params
   	$key_len = $cipher->getKeyLength();
   	$iv_len = $cipher->getIVLength();
   	
   	echo 'Key length: ' . $key_len . PHP_EOL;
   	echo 'IV length: '  . $iv_len . PHP_EOL;
   	echo 'Block size: ' . $cipher->getBlockSize() . PHP_EOL;
   	// This is just for this example. You should never use such key and IV!
   	$key = str_repeat('x', $key_len);
   	$iv = str_repeat('i', $iv_len);
   	// Test data
   	$data1 = 'Test';
   	$data2 = 'Data';
   	$data = $data1 . $data2;
   	// Simple encryption
   	$sim_ct = $cipher->encrypt($data, $key, $iv);
   	
   	// init/update/finish encryption
   	$cipher->encryptInit($key, $iv);
   	$iuf_ct  = $cipher->encryptUpdate($data1);
   	$iuf_ct .= $cipher->encryptUpdate($data2);
   	$iuf_ct .= $cipher->encryptFinish();
   	// Raw data output (used base64 format for printing)
   	echo 'Ciphertext (sim): ' . base64_encode($sim_ct) . PHP_EOL;
   	echo 'Ciphertext (iuf): ' . base64_encode($iuf_ct) . PHP_EOL;
   	// $iuf_out == $sim_out
   	$ct = $sim_ct;
   	// Another way how to create a new cipher object (using the same algorithm and mode)
   	$cipher = Cipher::aes(Cipher::MODE_CBC, 256);
   	// Simple decryption
   	$sim_text = $cipher->decrypt($ct, $key, $iv);
   	
   	// init/update/finish decryption
   	$cipher->decryptInit($key, $iv);
   	$iuf_text = $cipher->decryptUpdate($ct);
   	$iuf_text .= $cipher->decryptFinish();
   	// Raw data output ($iuf_out == $sim_out)
   	echo 'Text (sim): ' . $sim_text . PHP_EOL;
   	echo 'Text (iuf): ' . $iuf_text . PHP_EOL;
   }
   catch (AlgorithmException $e) {
   	echo $e->getMessage() . PHP_EOL;
   }
   
   ?>


See also `pecl crypto <https://pecl.php.net/package/crypto>`_ and `php-crypto <https://github.com/bukka/php-crypto>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Extensions/Extcrypto |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _ext-csprng:

ext/csprng
++++++++++

 CSPRNG Functions : cryptographically secure pseudo-random number generator.

The CSPRNG API provides an easy and reliable way to generate crypto-strong random integers and bytes for use within cryptographic contexts.

.. code-block:: php

   <?php
   $bytes = random_bytes(5);
   var_dump(bin2hex($bytes));
   
   //string(10) 385e33f741
   ?>


See also `CSPRNG <https://www.php.net/manual/en/book.csprng.php>`_ and `Cryptographically secure pseudorandom number generator <https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Extensions/Extcsprng |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 1.3.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _ext-ctype:

ext/ctype
+++++++++

 Extension ext/ctype.

Ext/ctype checks whether a character or string falls into a certain character class according to the current locale.

.. code-block:: php

   <?php
   $strings = array('AbCd1zyZ9', 'foo!#$bar');
   foreach ($strings as $testcase) {
       if (ctype_alnum($testcase)) {
           echo "The string $testcase consists of all letters or digits.\n";
       } else {
           echo "The string $testcase does not consist of all letters or digits.\n";
       }
   }
   ?>


See also `Ctype funtions <https://www.php.net/manual/en/ref.ctype.php>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Extensions/Extctype |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.8.4               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _ext-curl:

ext/curl
++++++++

 Extension curl.

PHP supports libcurl, a library created by Daniel Stenberg. It allows the connection and communication to many different types of servers with many different types of protocols.

.. code-block:: php

   <?php
   
   $ch = curl_init("http://www.example.com/");
   $fp = fopen("example_homepage.txt", "w");
   
   curl_setopt($ch, CURLOPT_FILE, $fp);
   curl_setopt($ch, CURLOPT_HEADER, 0);
   
   curl_exec($ch);
   curl_close($ch);
   fclose($fp);
   ?>


See also `Curl for PHP <https://www.php.net/manual/en/book.curl.php>`_ and `curl <https://curl.haxx.se/libcurl/>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extcurl |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-cyrus:

ext/cyrus
+++++++++

 Extension ext/cyrus.

The Cyrus IMAP server is electronic mail server software developed by Carnegie Mellon University. 

.. code-block:: php

   <?php
   
   $connexion = cyrus_connect ('localhost');
   
   ?>


See also `Cyrus <https://www.php.net/manual/en/book.cyrus.php>`_ and `Cyrus IMAP server <https://en.wikipedia.org/wiki/Cyrus_IMAP_server>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Extensions/Extcyrus |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.8.4               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _ext-date:

ext/date
++++++++

 Extension ext/date.

These functions allows the manipulation of date and time from the server where the PHP scripts are running. 

.. code-block:: php

   <?php
   $dt = new DateTime('2015-11-01 00:00:00', new DateTimeZone('America/New_York'));
   echo 'Start: ', $dt->format('Y-m-d H:i:s P'), PHP_EOL;
   $dt->add(new DateInterval('PT3H'));
   echo 'End:   ', $dt->format('Y-m-d H:i:s P'), PHP_EOL;
   ?>


See also `Date and Time <https://www.php.net/manual/en/book.datetime.php>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extdate |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-db2:

ext/db2
+++++++

 Extension for IBM DB2, Cloudscape and Apache Derby.

This extension gives access to IBM DB2 Universal Database, IBM Cloudscape, and Apache Derby databases using the DB2 Call Level Interface (DB2 CLI).

.. code-block:: php

   <?php
   $conn = db2_connect($database, $user, $password);
   
   if ($conn) {
       $stmt = db2_exec($conn, 'SELECT count(*) FROM animals');
       $res = db2_fetch_array( $stmt );
       echo $res[0] . PHP_EOL;
       
       // Turn AUTOCOMMIT off
       db2_autocommit($conn, DB2_AUTOCOMMIT_OFF);
      
       // Delete all rows from ANIMALS
       db2_exec($conn, 'DELETE FROM animals');
       
       $stmt = db2_exec($conn, 'SELECT count(*) FROM animals');
       $res = db2_fetch_array( $stmt );
       echo $res[0] . PHP_EOL;
       
       // Roll back the DELETE statement
       db2_rollback( $conn );
       
       $stmt = db2_exec( $conn, 'SELECT count(*) FROM animals' );
       $res = db2_fetch_array( $stmt );
       echo $res[0] . PHP_EOL;
       db2_close($conn);
   }
   ?>


See also `IBM Db2 <https://www.php.net/manual/en/book.ibm-db2.php>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Extensions/Extdb2 |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 1.1.8             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _ext-dba:

ext/dba
+++++++

 Extension ext/dba.

These functions build the foundation for accessing Berkeley DB style databases.

.. code-block:: php

   <?php
   
   $id = dba_open('/tmp/test.db', 'n', 'db2');
   
   if (!$id) {
       echo 'dba_open failed'.PHP_EOL;
       exit;
   }
   
   dba_replace('key', 'This is an example!', $id);
   
   if (dba_exists('key', $id)) {
       echo dba_fetch('key', $id);
       dba_delete('key', $id);
   }
   
   dba_close($id);
   ?>


See also `Database (dbm-style) Abstraction Layer <https://www.php.net/manual/en/book.dba.php>`_.

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Extensions/Extdba                    |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP53` |
+-------------+--------------------------------------+
| Exakt since | 0.8.4                                |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Major                                |
+-------------+--------------------------------------+
| Time To Fix | Slow (1 hour)                        |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _ext-decimal:

ext/decimal
+++++++++++

 Extension php-decimal, by ``Rudi Theunissen``.

This library provides a PHP extension that adds support for correctly-rounded, arbitrary-precision decimal floating point arithmetic. Applications that rely on accurate numbers (ie. money, measurements, or mathematics) can use Decimal instead of float or string to represent numerical values.

.. code-block:: php

   <?php
   
   use Decimal\Decimal;
   
   $op1 = new Decimal(0.1, 4);
   $op2 = 0.123456789;
   
   print_r($op1 + $op2);
   
   
   use Decimal\Decimal;
   
   /**
    * @param int $n The factorial to calculate, ie. $n!
    * @param int $p The precision to calculate the factorial to.
    *
    * @return Decimal
    */
   function factorial(int $n, int $p = Decimal::DEFAULT_PRECISION): Decimal
   {
       return $n < 2 ? new Decimal($n, $p) : $n * factorial($n - 1, $p);
   }
   
   echo factorial(10000, 32);
   
   ?>


See also `PHP Decimal <http://php-decimal.io>`_ and `libmpdec <http://www.bytereef.org/mpdecimal/quickstart.html>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Extensions/Extdecimal |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 1.5.2                 |
+-------------+-----------------------+
| Php Version | 7.0+                  |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _ext-dio:

ext/dio
+++++++

 Extension DIO : Direct Input Output.

PHP supports the direct io functions as described in the Posix Standard (Section 6) for performing I/O functions at a lower level than the C-Language stream I/O functions

.. code-block:: php

   <?php
   
   $fd = dio_open('/dev/ttyS0', O_RDWR | O_NOCTTY | O_NONBLOCK);
   
   dio_close($fd);
   ?>


See also `DIO <https://www.php.net/manual/en/refs.fileprocess.file.php>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Extensions/Extdio |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _ext-dom:

ext/dom
+++++++

 Extension Document Object Model.

The DOM extension allows the manipulation of XML documents through the DOM API with PHP.

.. code-block:: php

   <?php
   
   $dom = new DOMDocument('1.0', 'utf-8');
   
   $element = $dom->createElement('test', 'This is the root element!');
   
   // We insert the new element as root (child of the document)
   $dom->appendChild($element);
   
   echo $dom->saveXML();
   ?>


See also `Document Object Model <https://www.php.net/manual/en/book.dom.php>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Extensions/Extdom |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _ext-ds:

ext/ds
++++++

 Extension Data Structures : `Data structures <http://docs.php.net/manual/en/book.ds.php>`_.

See also : `Efficient data structures for PHP 7 <https://medium.com/@rtheunissen/efficient-data-structures-for-php-7-9dda7af674cd#.x69w9j6ui>`_.

.. code-block:: php

   <?php
   
   $vector = new \Ds\Vector();
   
   $vector->push('a');
   $vector->push('b', 'c');
   
   $vector[] = 'd';
   
   print_r($vector);
   
   ?>

Specs
^^^^^
+-------------+------------------+
| Short name  | Extensions/Extds |
+-------------+------------------+
| Rulesets    | :ref:`CE`        |
+-------------+------------------+
| Exakt since | 0.10.4           |
+-------------+------------------+
| Php Version | All              |
+-------------+------------------+
| Severity    | Minor            |
+-------------+------------------+
| Time To Fix | Slow (1 hour)    |
+-------------+------------------+
| Precision   | High             |
+-------------+------------------+


.. _ext-eaccelerator:

ext/eaccelerator
++++++++++++++++

 Extension Eaccelerator.

eAccelerator is a free open-source PHP accelerator & optimizer. 

See also `Eaccelerator <http://eaccelerator.net/>`_ and `eaccelerator/eaccelerato <https://github.com/eaccelerator/eaccelerator>`_.

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Extensions/Exteaccelerator |
+-------------+----------------------------+
| Rulesets    | :ref:`CE`                  |
+-------------+----------------------------+
| Exakt since | 0.8.4                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Slow (1 hour)              |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _ext-eio:

ext/eio
+++++++

 Extension EIO.

This is a PHP extension wrapping functions of the `libeio <http://software.schmorp.de/pkg/libeio.html>`_ library written by Marc Lehmann.

Libeio is a an asynchronous I/O library. Features basically include asynchronous versions of POSIX API(read, write, open, close, stat, unlink, fdatasync, mknod, readdir etc.); sendfile (native on Solaris, Linux, HP-UX, FreeBSD); readahead. libeio itself emulates the system calls, if they are not available on specific(UNIX-like) platform.

.. code-block:: php

   <?php
   $str      = str_repeat('1', 20);
   $filename = '/tmp/tmp_file' .uniqid();
   @unlink($filename);
   touch($filename);
   eio_open($filename, EIO_O_RDWR, NULL, EIO_PRI_DEFAULT, function($filename, $fd) use ($str) {
   	eio_write($fd, $str, strlen($str), 0, null, function($fd, $written) use ($str, $filename) {
   		var_dump([
   			'written'  => $written,
   			'strlen'   => strlen($str),
   			'filesize' => filesize($filename),
   			'count'    => substr_count(file_get_contents($filename), '1')
   			]);
   	}, $fd);
   }, $filename);
   eio_event_loop();
   ?>


See also `libeio <http://software.schmorp.de/pkg/libeio.html>`_, `PHP extension for libeio <https://github.com/rosmanov/pecl-eio>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Extensions/Exteio |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 1.3.3             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _ext-enchant:

ext/enchant
+++++++++++

 Extension Enchant.

Enchant is the PHP binding for the `Enchant spelling library <https://www.php.net/manual/en/book.enchant.php>`_. Enchant steps in to provide uniformity and conformity on top of all spelling libraries, and implement certain features that may be lacking in any individual provider library. 

.. code-block:: php

   <?php
   $tag = 'en_US';
   $r = enchant_broker_init();
   $bprovides = enchant_broker_describe($r);
   echo 'Current broker provides the following backend(s):'.PHP_EOL;
   print_r($bprovides);
   
   $dicts = enchant_broker_list_dicts($r);
   print_r($dicts);
   if (enchant_broker_dict_exists($r,$tag)) {
       $d = enchant_broker_request_dict($r, $tag);
       $dprovides = enchant_dict_describe($d);
       echo 'dictionary $tag provides:'.PHP_EOL;
       $wordcorrect = enchant_dict_check($d, 'soong');
       print_r($dprovides);
       if (!$wordcorrect) {
           $suggs = enchant_dict_suggest($d, 'soong');
           echo 'Suggestions for "soong":';
           print_r($suggs);
       }
       enchant_broker_free_dict($d);
   } else {
   }
   enchant_broker_free($r);
   ?>


See also `Enchant spelling library <https://www.php.net/manual/en/book.enchant.php>`_ and `Enchant <https://www.abisource.com/projects/enchant/>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Extensions/Extenchant |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _ext-ereg:

ext/ereg
++++++++

 Extension ext/ereg.

.. code-block:: php

   <?php
   if (ereg ('([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})', $date, $regs)) {
       echo $regs[3].'.'.$regs[2].'.'.$regs[1];
   } else {
       echo 'Invalid date format: '.$date;
   }
   ?>


See also `Ereg <https://www.php.net/manual/en/function.ereg.php>`_.

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Extensions/Extereg                   |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP70` |
+-------------+--------------------------------------+
| Exakt since | 0.8.4                                |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Major                                |
+-------------+--------------------------------------+
| Time To Fix | Quick (30 mins)                      |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _ext-ev:

ext/ev
++++++

 Extension ev.

ext/ev is a high performance full-featured event loop written in C.

.. code-block:: php

   <?php
   // Create and start timer firing after 2 seconds
   $w1 = new EvTimer(2, 0, function () {
       echo '2 seconds elapsed'.PHP_EOL;
   });
   
   // Create and launch timer firing after 2 seconds repeating each second
   // until we manually stop it
   $w2 = new EvTimer(2, 1, function ($w) {
       echo 'is called every second, is launched after 2 seconds'.PHP_EOL;
       echo 'iteration = ', Ev::iteration(), PHP_EOL;
   
       // Stop the watcher after 5 iterations
       Ev::iteration() == 5 and $w->stop();
       // Stop the watcher if further calls cause more than 10 iterations
       Ev::iteration() >= 10 and $w->stop();
   });
   
   // Create stopped timer. It will be inactive until we start it ourselves
   $w_stopped = EvTimer::createStopped(10, 5, function($w) {
       echo 'Callback of a timer created as stopped'.PHP_EOL;
   
       // Stop the watcher after 2 iterations
       Ev::iteration() >= 2 and $w->stop();
   });
   
   // Loop until Ev::stop() is called or all of watchers stop
   Ev::run();
   
   // Start and look if it works
   $w_stopped->start();
   echo 'Run single iteration'.PHP_EOL;
   Ev::run(Ev::RUN_ONCE);
   
   echo 'Restart the second watcher and try to handle the same events, but don\'t block'.PHP_EOL;
   $w2->again();
   Ev::run(Ev::RUN_NOWAIT);
   
   $w = new EvTimer(10, 0, function() {});
   echo 'Running a blocking loop'.PHP_EOL;
   Ev::run();
   echo 'END'.PHP_EOL;
   ?>


See also `Ev <https://www.php.net/manual/en/book.ev.php>`_ and `libev <http://software.schmorp.de/pkg/libev.html>`_.

Specs
^^^^^
+-------------+------------------+
| Short name  | Extensions/Extev |
+-------------+------------------+
| Rulesets    | :ref:`CE`        |
+-------------+------------------+
| Exakt since | 0.8.4            |
+-------------+------------------+
| Php Version | All              |
+-------------+------------------+
| Severity    | Minor            |
+-------------+------------------+
| Time To Fix | Slow (1 hour)    |
+-------------+------------------+
| Precision   | High             |
+-------------+------------------+


.. _ext-event:

ext/event
+++++++++

 Extension event.

This is an extension to efficiently schedule I/O, time and signal based events using the best I/O notification mechanism available for specific platform. This is a port of libevent to the PHP infrastructure.

.. code-block:: php

   <?php
   // Read callback
   function readcb($bev, $base) {
       //$input = $bev->input; //$bev->getInput();
   
       //$pos = $input->search('TTP');
       $pos = $bev->input->search('TTP');
   
       while (($n = $bev->input->remove($buf, 1024)) > 0) {
           echo $buf;
       }
   }
   
   // Event callback
   function eventcb($bev, $events, $base) {
       if ($events & EventBufferEvent::CONNECTED) {
           echo 'Connected.';
       } elseif ($events & (EventBufferEvent::ERROR | EventBufferEvent::EOF)) {
           if ($events & EventBufferEvent::ERROR) {
               echo 'DNS error: ', $bev->getDnsErrorString(), PHP_EOL;
           }
   
           echo 'Closing'.PHP_EOL;
           $base->exit();
           exit('Done'.PHP_EOL);
       }
   }
   
   if ($argc != 3) {
       echo <<<EOS
   Trivial HTTP 0.x client
   Syntax: php {$argv[0]} [hostname] [resource]
   Example: php {$argv[0]} www.google.com /
   
   EOS;
       exit();
   }
   
   $base = new EventBase();
   
   $dns_base = new EventDnsBase($base, TRUE); // We'll use async DNS resolving
   if (!$dns_base) {
       exit('Failed to init DNS Base'.PHP_EOL);
   }
   
   $bev = new EventBufferEvent($base, /* use internal socket */ NULL,
       EventBufferEvent::OPT_CLOSE_ON_FREE | EventBufferEvent::OPT_DEFER_CALLBACKS,
       'readcb', /* writecb */ NULL, 'eventcb'
   );
   if (!$bev) {
       exit('Failed creating bufferevent socket'.PHP_EOL);
   }
   
   //$bev->setCallbacks('readcb', /* writecb */ NULL, 'eventcb', $base);
   $bev->enable(Event::READ | Event::WRITE);
   
   $output = $bev->output; //$bev->getOutput();
   if (!$output->add(
       'GET '.$argv[2].' HTTP/1.0'."\r\n".
       'Host: '.$argv[1]."\r\n".
       'Connection: Close'.\r\n\r\n
   )) {
       exit('Failed adding request to output buffer\n');
   }
   
   if (!$bev->connectHost($dns_base, $argv[1], 80, EventUtil::AF_UNSPEC)) {
       exit('Can\'t connect to host '.$argv[1].PHP_EOL);
   }
   
   $base->dispatch();
   ?>


See also `Event <https://www.php.net/event>`_ and `libevent <http://libevent.org/>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Extensions/Extevent |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.8.4               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _ext-exif:

ext/exif
++++++++

 Extension EXIF : Exchangeable image file format.

The EXIF extension manipulates image meta data.

.. code-block:: php

   <?php
   echo 'test1.jpg:<br />';
   $exif = exif_read_data('tests/test1.jpg', 'IFD0');
   echo $exif===false ? 'No header data found.<br />' : 'Image contains headers<br />';
   
   $exif = exif_read_data('tests/test2.jpg', 0, true);
   echo 'test2.jpg:<br />';
   foreach ($exif as $key => $section) {
       foreach ($section as $name => $val) {
           echo $key.$name.': '.$val.'<br />';
       }
   }
   ?>


See also `Exchangeable image information <https://www.php.net/manual/en/book.exif.php>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extexif |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-expect:

ext/expect
++++++++++

 Extension Expect.

This extension allows to interact with processes through ``PTY``. You may consider using the ``expect://`` wrapper with the filesystem functions which provide a simpler and more intuitive interface.

.. code-block:: php

   <?php
   ini_set('expect.loguser', 'Off');
   
   $stream = fopen('expect://ssh root@remotehost uptime', 'r');
   
   $cases = array (
       array (0 => 'password:', 1 => PASSWORD)
   );
   
   switch (expect_expectl ($stream, $cases)) {
       case PASSWORD:
           fwrite ($stream, 'password'.PHP_EOL);
           break;
    
       default:
           die ('Error was occurred while connecting to the remote host!'.PHP_EOL);
   }
   
   while ($line = fgets($stream)) {
         print $line;
   }
   fclose ($stream);
   ?>


See also `expect <https://www.php.net/manual/en/book.expect.php>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Extensions/Extexpect |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _ext-fam:

ext/fam
+++++++

 File Alteration Monitor extension.

`FAM <http://oss.sgi.com/projects/fam/>`_ monitors files and directories, notifying interested applications of changes.

ext/FAM is not available for Windows

.. code-block:: php

   <?php
   
   $fam = fam_open('myApplication');
   fam_monitor_directory($fam, '/tmp');
   fam_close($fam);
   
   ?>


See also `File Alteration Monitor <https://www.php.net/manual/en/book.fam.php>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Extensions/Extfam |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.12.8            |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _ext-fann:

ext/fann
++++++++

 Extension ``FANN`` : Fast Artificial Neural Network.

PHP binding for ``FANN`` library which implements multi-layer artificial neural networks with support for both fully connected and sparsely connected networks.

.. code-block:: php

   <?php
   $num_input = 2;
   $num_output = 1;
   $num_layers = 3;
   $num_neurons_hidden = 3;
   $desired_error = 0.001;
   $max_epochs = 500000;
   $epochs_between_reports = 1000;
   
   $ann = fann_create_standard($num_layers, $num_input, $num_neurons_hidden, $num_output);
   
   if ($ann) {
       fann_set_activation_function_hidden($ann, FANN_SIGMOID_SYMMETRIC);
       fann_set_activation_function_output($ann, FANN_SIGMOID_SYMMETRIC);
   
       $filename = dirname(__FILE__) . '/xor.data';
       if (fann_train_on_file($ann, $filename, $max_epochs, $epochs_between_reports, $desired_error))
           fann_save($ann, dirname(__FILE__) . '/xor_float.net');
   
       fann_destroy($ann);
   }
   ?>


See also `extension FANN <https://www.php.net/manual/en/book.fann.php>`_, `PHP-ML <https://php-ml.readthedocs.io/en/latest/>`_, `Rubix ML <https://rubixml.com/>`_, and `lib FANN <http://leenissen.dk/>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extfann |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Major              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-fdf:

ext/fdf
+++++++

 Extension ext/fdf.

Forms Data Format (`FDF <http://www.adobe.com/devnet/acrobat/fdftoolkit.html>`_) is a format for handling forms within PDF documents.

.. code-block:: php

   <?php
   $outfdf = fdf_create();
   fdf_set_value($outfdf, 'volume', $volume, 0);
   
   fdf_set_file($outfdf, 'http:/testfdf/resultlabel.pdf');
   fdf_save($outfdf, 'outtest.fdf');
   fdf_close($outfdf);
   Header('Content-type: application/vnd.fdf');
   $fp = fopen('outtest.fdf', 'r');
   fpassthru($fp);
   unlink('outtest.fdf');
   ?>


See also `Form Data Format <https://www.php.net/manual/en/book.fdf.php>`_.

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Extensions/Extfdf                    |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP53` |
+-------------+--------------------------------------+
| Exakt since | 0.8.4                                |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Major                                |
+-------------+--------------------------------------+
| Time To Fix | Slow (1 hour)                        |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _ext-ffi:

ext/ffi
+++++++

 Extension ``FFI`` : Foreign Function Interface .

This extension allows the loading of shared libraries (.DLL or .so), calling of C functions and accessing of C data structures in pure PHP, without having to have deep knowledge of the Zend extension API, and without having to learn a third “intermediate” language. The public API is implemented as a single class `FFI <https://www.php.net/ffi>`_ with several `static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods (some of them may be called dynamically), and overloaded object methods, which perform the actual interaction with C data.

.. code-block:: php

   <?php
   //Example : Calling a function from shared library
   // create FFI object, loading libc and exporting function printf()
   $ffi = FFI::cdef(
       "int printf(const char *format, ...);", // this is a regular C declaration
       "libc.so.6");
   // call C's printf()
   $ffi->printf("Hello %s!\n", "world");
   ?>


See also `Foreign Function Interface <https://www.php.net/manual/en/book.`ffi <https://www.php.net/ffi>`_.php>`_, and 
        `ext/`ffi <https://www.php.net/ffi>`_ <https://github.com/dstogov/php-`ffi <https://www.php.net/ffi>`_>`_ and 
        `A PHP Compiler, aka The `FFI <https://www.php.net/ffi>`_ Rabbit Hole <https://blog.ircmaxell.com/2019/04/compilers-`ffi <https://www.php.net/ffi>`_.html>`_.

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-------------------+
| Short name  | Extensions/Extffi |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 1.7.9             |
+-------------+-------------------+
| Php Version | 7.4+              |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Quick (30 mins)   |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _ext-ffmpeg:

ext/ffmpeg
++++++++++

 Extension ``ffmpeg`` for PHP.

``ffmpeg-php`` is an extension for PHP that adds an easy to use, object-oriented API for accessing and retrieving information from video and audio files.

.. code-block:: php

   <?php
   
   $movie = new ffmpeg_movie($path_to_media, $persistent);
   echo 'The movie lasts '.$movie->getDuration().' seconds';
   
   ?>


See also `ffmpeg-php <http://ffmpeg-php.sourceforge.net/>`_ and `FFMPEG <https://www.ffmpeg.org/>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Extensions/Extffmpeg |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _ext-file:

ext/file
++++++++

 Filesystem functions from standard.

Extension that handle access to file on the file system.

.. code-block:: php

   <?php
   $row = 1;
   if (($handle = fopen('test.csv', 'r')) !== FALSE) {
       while (($data = fgetcsv($handle, 1000, ',')) !== FALSE) {
           $num = count($data);
           echo '<p> $num fields in line $row: <br /></p>'.PHP_EOL;
           $row++;
           for ($c=0; $c < $num; $c++) {
               echo $data[$c] . '<br />'.PHP_EOL;
           }
       }
       fclose($handle);
   }
   ?>


See also `filesystem <http://www.php.net/manual/en/book.filesystem.php>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extfile |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-fileinfo:

ext/fileinfo
++++++++++++

 Extension ext/fileinfo.

This module guesses the content type and encoding of a file by looking for certain magic byte sequences at specific positions within the file.

.. code-block:: php

   <?php
   $finfo = finfo_open(FILEINFO_MIME_TYPE); // return mime type ala mimetype extension
   foreach (glob('*') as $filename) {
       echo finfo_file($finfo, $filename) . PHP_EOL;
   }
   finfo_close($finfo);
   ?>



See also `Filinfo <https://www.php.net/manual/en/book.fileinfo.php>`_.

Specs
^^^^^
+-------------+------------------------+
| Short name  | Extensions/Extfileinfo |
+-------------+------------------------+
| Rulesets    | :ref:`CE`              |
+-------------+------------------------+
| Exakt since | 0.8.4                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Slow (1 hour)          |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _ext-filter:

ext/filter
++++++++++

 Extension filter.

This extension filters data by either validating or sanitizing it.

.. code-block:: php

   <?php
   $email_a = 'joe@example.com';
   $email_b = 'bogus';
   
   if (filter_var($email_a, FILTER_VALIDATE_EMAIL)) {
       echo 'This ($email_a) email address is considered valid.'.PHP_EOL;
   }
   if (filter_var($email_b, FILTER_VALIDATE_EMAIL)) {
       echo 'This ($email_b) email address is considered valid.'.PHP_EOL;
   } else {
       echo 'This ($email_b) email address is considered invalid.'.PHP_EOL;
   }
   ?>


See also `Data filtering <https://www.php.net/manual/en/book.filter.php>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Extensions/Extfilter |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _ext-fpm:

ext/fpm
+++++++

 Extension FPM, FastCGI Process Manager.

FPM (FastCGI Process Manager) is an alternative PHP FastCGI implementation with some additional features (mostly) useful for heavy-loaded sites.
.. code-block:: php

   <?php
       echo $text;
       fastcgi_finish_request( );
   ?>


See also `FastCGI Process Manager <https://www.php.net/fpm>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Extensions/Extfpm |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _ext-ftp:

ext/ftp
+++++++

 Extension FTP.

The functions in this extension implement client access to files servers speaking the File Transfer Protocol (FTP) as defined in `RFC 959 <http://www.faqs.org/rfcs/rfc959>`_.

.. code-block:: php

   <?php
   // set up basic connection
   $conn_id = ftp_connect($ftp_server); 
   
   // login with username and password
   $login_result = ftp_login($conn_id, $ftp_user_name, $ftp_user_pass); 
   
   // check connection
   if ((!$conn_id) || (!$login_result)) { 
       echo 'FTP connection has failed!';
       echo 'Attempted to connect to $ftp_server for user $ftp_user_name'; 
       exit; 
   } else {
       echo 'Connected to $ftp_server, for user $ftp_user_name';
   }
   
   // upload the file
   $upload = ftp_put($conn_id, $destination_file, $source_file, FTP_BINARY); 
   
   // check upload status
   if (!$upload) { 
       echo 'FTP upload has failed!';
   } else {
       echo 'Uploaded $source_file to $ftp_server as $destination_file';
   }
   
   // close the FTP stream 
   ftp_close($conn_id); 
   ?>


See also `FTP <https://www.php.net/manual/en/book.ftp.php>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Extensions/Extftp |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _ext-gd:

ext/gd
++++++

 Extension GD for PHP.

This extension allows PHP to create and manipulate image files in a variety of different image formats, including GIF, PNG, JPEG, WBMP, and XPM.
 
.. code-block:: php

   <?php
   
   header("Content-type: image/png");
   $string = $_GET['text'];
   $im     = imagecreatefrompng("images/button1.png");
   $orange = imagecolorallocate($im, 220, 210, 60);
   $px     = (imagesx($im) - 7.5 * strlen($string)) / 2;
   imagestring($im, 3, $px, 9, $string, $orange);
   imagepng($im);
   imagedestroy($im);
   
   ?>


See also `Image Processing and GD <https://www.php.net/manual/en/book.image.php>`_.

Specs
^^^^^
+-------------+------------------+
| Short name  | Extensions/Extgd |
+-------------+------------------+
| Rulesets    | :ref:`CE`        |
+-------------+------------------+
| Exakt since | 0.8.4            |
+-------------+------------------+
| Php Version | All              |
+-------------+------------------+
| Severity    | Minor            |
+-------------+------------------+
| Time To Fix | Slow (1 hour)    |
+-------------+------------------+
| Precision   | High             |
+-------------+------------------+


.. _ext-gearman:

ext/gearman
+++++++++++

 Extension Gearman.

Gearman is a generic application framework for farming out work to multiple machines or processes. 

.. code-block:: php

   <?php
   
   # Create our client object.
   $gmclient= new GearmanClient();
   
   # Add default server (localhost).
   $gmclient->addServer();
   
   echo 'Sending job'.PHP_EOL;
   
   # Send reverse job
   do
   {
     $result = $gmclient->doNormal('reverse', 'Hello!');
   
     # Check for various return packets and errors.
     switch($gmclient->returnCode())
     {
       case GEARMAN_WORK_DATA:
         echo 'Data: '.$result . PHP_EOL;;
         break;
       case GEARMAN_WORK_STATUS:
         list($numerator, $denominator)= $gmclient->doStatus();
         echo 'Status: '.$numerator.'/'.$denominator.' complete'. PHP_EOL;
         break;
       case GEARMAN_WORK_FAIL:
         echo 'Failed\n';
         exit;
       case GEARMAN_SUCCESS:
         echo 'Success: $result\n';
         break;
       default:
         echo 'RET: ' . $gmclient->returnCode() . PHP_EOL;
         exit;
     }
   }
   while($gmclient->returnCode() != GEARMAN_SUCCESS);
   
   ?>


See also `Gearman on PHP <https://www.php.net/manual/en/book.gearman.php>`_ and `Gearman <http://gearman.org/>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Extensions/Extgearman |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _ext-gender:

ext/gender
++++++++++

 Gender extension.

The Gender PHP extension is a port of the gender.c program originally written by Joerg Michael. Its main purpose is to find out the gender of firstnames, based on a database of over 40000 firstnames from 54 countries.

.. code-block:: php

   <?php
   
   namespace Gender;
   
   $gender = new Gender;
   
    
   $name = 'Milene';
   $country = Gender::FRANCE;
    
   $result = $gender->get($name, $country);
   
   $data = $gender->country($country);
   
   switch($result) {
       case Gender::IS_FEMALE:
           printf('The name %s is female in %s\n', $name, $data['country']);
       break;
   
    
       case Gender::IS_MOSTLY_FEMALE:
           printf('The name %s is mostly female in %s\n', $name, $data['country']);
       break;
   
    
       case Gender::IS_MALE:
           printf('The name %s is male in %s\n', $name, $data['country']);
       break;
   
    
       case Gender::IS_MOSTLY_MALE:
           printf('The name %s is mostly male in %s\n', $name, $data['country']);
       break;
   
    
       case Gender::IS_UNISEX_NAME:
           printf('The name %s is unisex in %s\n', $name, $data['country']);
       break;
   
    
       case Gender::IS_A_COUPLE:
           printf('The name %s is both male and female in %s\n', $name, $data['country']);
       break;
   
    
       case Gender::NAME_NOT_FOUND:
           printf('The name %s was not found for %s\n', $name, $data['country']);
       break;
   
    
       case Gender::ERROR_IN_NAME:
           echo 'There is an error in the given name!'.PHP_EOL;
       break;
    
       default:
           echo 'An error occurred!'.PHP_EOL;
       break;
   
   }
   
   ?>


See also `ext/gender manual <https://www.php.net/manual/en/book.gender.php>`_ and `genderReader <https://github.com/cstuder/genderReader>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Extensions/Extgender |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.11.6               |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _ext-geoip:

ext/geoip
+++++++++

 Extension geoip for PHP.

The GeoIP extension allows the localisation of an IP address. 

.. code-block:: php

   <?php
   $org = geoip_org_by_name('www.example.com');
   if ($org) {
       echo 'This host IP is allocated to: ' . $org;
   }
   ?>


See also `GeoIP <https://www.php.net/manual/en/book.geoip.php>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Extensions/Extgeoip |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.8.4               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _ext-gettext:

ext/gettext
+++++++++++

 Extension Gettext.

The gettext functions implement an NLS (Native Language Support) API which can be used to internationalize your PHP applications.

.. code-block:: php

   <?php
   // Set language to German
   putenv('LC_ALL=de_DE');
   setlocale(LC_ALL, 'de_DE');
   
   // Specify location of translation tables
   bindtextdomain('myPHPApp', './locale');
   
   // Choose domain
   textdomain('myPHPApp');
   
   // Translation is looking for in ./locale/de_DE/LC_MESSAGES/myPHPApp.mo now
   
   // Print a test message
   echo gettext('Welcome to My PHP Application');
   
   // Or use the alias _() for gettext()
   echo _('Have a nice day');
   ?>


See also `Gettext <https://www.gnu.org/software/gettext/manual/gettext.html>`_ and `ext/gettext <https://www.php.net/manual/en/book.gettext.php>`_

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Extensions/Extgettext |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _ext-gmagick:

ext/gmagick
+++++++++++

 Extension gmagick.

`Gmagick <https://www.php.net/Gmagick>`_ is a php extension to create, modify and obtain meta information of images using the GraphicsMagick API.

.. code-block:: php

   <?php
   //Instantiate a new Gmagick object
   $image = new Gmagick('example.jpg');
   
   //Make thumbnail from image loaded. 0 for either axes preserves aspect ratio
   $image->thumbnailImage(100, 0);
   
   //Create a border around the image, then simulate how the image will look like as an oil painting
   //Note the chaining of mutator methods which is supported in gmagick
   $image->borderImage(yellow, 8, 8)->oilPaintImage(0.3);
   
   //Write the current image at the current state to a file
   $image->write('example_thumbnail.jpg');
   ?>


See also `PHP gmagick <http://www.php.net/manual/en/book.gmagick.php>`_ and `gmagick <http://www.graphicsmagick.org/>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Extensions/Extgmagick |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _ext-gmp:

ext/gmp
+++++++

 Extension ext/gmp.

These functions allow for arbitrary-length integers to be worked with using the GNU MP library.

.. code-block:: php

   <?php
   $pow1 = gmp_pow('2', 131);
   echo gmp_strval($pow1) . PHP_EOL;
   $pow2 = gmp_pow('0', 0);
   echo gmp_strval($pow2) . PHP_EOL;
   $pow3 = gmp_pow('2', -1); // Negative exp, generates warning
   echo gmp_strval($pow3) . PHP_EOL;
   ?>


See also `GMP <https://www.php.net/manual/en/book.gmp.php>`_ and `GNU MP library <https://gmplib.org/>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Extensions/Extgmp |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _ext-gnupgp:

ext/gnupgp
++++++++++

 Extension `GnuPG <https://www.php.net/gnupg>`_.

This module allows you to interact with `gnupg <https://www.php.net/gnupg>`_.

.. code-block:: php

   <?php
   // init gnupg
   $res = gnupg_init();
   // not really needed. Clearsign is default
   gnupg_setsignmode($res,GNUPG_SIG_MODE_CLEAR);
   // add key with passphrase 'test' for signing
   gnupg_addsignkey($res,"8660281B6051D071D94B5B230549F9DC851566DC","test");
   // sign
   $signed = gnupg_sign($res,"just a test");
   echo $signed;
   ?>


See also `Gnupg Function for PHP <http://www.php.net/manual/en/book.`gnupg <https://www.php.net/gnupg>`_.php>`_ and 
         `GnuPG <https://www.`gnupg <https://www.php.net/gnupg>`_.org/>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Extensions/Extgnupg |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.8.4               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _ext-grpc:

ext/grpc
++++++++

 Extension for GRPC : A high performance, open-source universal RPC framework.

.. code-block:: php

   <?php
   
   //https://github.com/grpc/grpc/blob/master/examples/php/greeter_client.php
   
   require dirname(__FILE__).'/vendor/autoload.php';
   // The following includes are needed when using protobuf 3.1.0
   // and will suppress warnings when using protobuf 3.2.0+
   @include_once dirname(__FILE__).'/helloworld.pb.php';
   @include_once dirname(__FILE__).'/helloworld_grpc_pb.php';
   function greet($name)
   {
       $client = new Helloworld\GreeterClient('localhost:50051', [
           'credentials' => Grpc\ChannelCredentials::createInsecure(),
       ]);
       $request = new Helloworld\HelloRequest();
       $request->setName($name);
       list($reply, $status) = $client->SayHello($request)->wait();
       $message = $reply->getMessage();
       return $message;
   }
   $name = !empty($argv[1]) ? $argv[1] : 'world';
   echo greet($name).\n;
   
   ?>


See also `GRPC <http://www.grpc.io/>`_ and `GRPC on PECL <https://pecl.php.net/package/gRPC>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extgrpc |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.11.3             |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-hash:

ext/hash
++++++++

 Extension for HASH Message Digest Framework.

Message Digest (hash) engine. Allows direct or incremental processing of arbitrary length messages using a variety of hashing algorithms.

.. code-block:: php

   <?php
   /* Create a file to calculate hash of */
   file_put_contents('example.txt', 'The quick brown fox jumped over the lazy dog.');
   
   echo hash_file('md5', 'example.txt');
   ?>


See also `HASH Message Digest Framework <http://www.php.net/manual/en/book.hash.php>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Exthash |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-hrtime:

ext/hrtime
++++++++++

 High resolution timing Extension.

The HRTime extension implements a high resolution `StopWatch` class. It uses the best possible API on different platforms which brings resolution up to nanoseconds. It also makes possible to implement a custom stopwatch using low level ticks delivered by the underlaying system.

.. code-block:: php

   <?php
   
   $c = new HRTime\StopWatch;
   
   $c->start();
   /* measure this code block execution */
   for ($i = 0; $i < 1024*1024; $i++);
   $c->stop();
   $elapsed0 = $c->getLastElapsedTime(HRTime\Unit::NANOSECOND);
   
   /* measurement is not running here*/
   for ($i = 0; $i < 1024*1024; $i++);
   
   $c->start();
   /* measure this code block execution */
   for ($i = 0; $i < 1024*1024; $i++);
   $c->stop();
   $elapsed1 = $c->getLastElapsedTime(HRTime\Unit::NANOSECOND);
   
   $elapsed_total = $c->getElapsedTime(HRTime\Unit::NANOSECOND);
   
   ?>


See also `ext/hrtime manual <https://www.php.net/manual/en/intro.hrtime.php>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Extensions/Exthrtime |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 1.1.5                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _ext-pecl\_http:

ext/pecl_http
+++++++++++++

 Extension HTTP.

This HTTP extension aims to provide a convenient and powerful set of functionalities for one of PHP major applications.

It eases handling of HTTP URL, headers and messages, provides means for negotiation of a client's preferred content type, language and charset, as well as a convenient way to send any arbitrary data with caching and resuming capabilities.

It provides powerful request functionality with support for parallel requests.

.. code-block:: php

   <?php 
   
   $client = new http\Client;
   $client->setSslOptions(array("verifypeer" => true));
   $client->addSslOptions(array("verifyhost" => 2));
   
   $client->enqueue($req = new http\Client\Request("GET", "https://twitter.com/"));
   $client->send();
   $ti = (array) $client->getTransferInfo($req);
   var_dump($ti);
   
   ?>


See also `ext-http <https://github.com/m6w6/ext-http>`_ and `pecl_http <https://pecl.php.net/package/pecl_http>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Exthttp |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-ibase:

ext/ibase
+++++++++

 Extensions ``Interbase`` and ``Firebird``.

``Firebird`` is a relational database offering many ISO SQL-2003 features that runs on Linux, Windows, and a variety of Unix platforms. 

.. code-block:: php

   <?php
   
   $host = 'localhost:/path/to/your.gdb';
   
   $dbh = ibase_connect($host, $username, $password);
   $stmt = 'SELECT * FROM tblname';
   
   $sth = ibase_query($dbh, $stmt) or die(ibase_errmsg());
   
   ?>


See also `Firebase / Interbase <https://www.php.net/manual/en/book.ibase.php>`_ and `Firebird <http://www.firebirdsql.org/>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Extensions/Extibase |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.8.4               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _ext-iconv:

ext/iconv
+++++++++

 Extension ext/iconv.

 With this module, you can turn a string represented by a local character set into the one represented by another character set, which may be the Unicode character set.

.. code-block:: php

   <?php
   $text = "This is the Euro symbol '€'.";
   
   echo 'Original : ', $text, PHP_EOL;
   echo 'TRANSLIT : ', iconv("UTF-8", "ISO-8859-1//TRANSLIT", $text), PHP_EOL;
   echo 'IGNORE   : ', iconv("UTF-8", "ISO-8859-1//IGNORE", $text), PHP_EOL;
   echo 'Plain    : ', iconv("UTF-8", "ISO-8859-1", $text), PHP_EOL;
   
   ?>


See also `Iconv <https://www.php.net/iconv>`_, and `libiconv <https://www.gnu.org/software/libiconv/>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Extensions/Exticonv |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.8.4               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _ext-igbinary:

ext/igbinary
++++++++++++

 Extension igbinary. 

igbinary is a drop in replacement for the standard php serializer. Instead of time and space consuming textual representation, igbinary stores php data structures in compact binary form. 

.. code-block:: php

   <?php
   	$serialized = igbinary_serialize($variable);
   	$unserialized = igbinary_unserialize($serialized);
   ?>


See also `igbinary <https://github.com/igbinary/igbinary/>`_.

Specs
^^^^^
+-------------+------------------------+
| Short name  | Extensions/Extigbinary |
+-------------+------------------------+
| Rulesets    | :ref:`CE`              |
+-------------+------------------------+
| Exakt since | 1.0.6                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Slow (1 hour)          |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _ext-iis:

ext/iis
+++++++

 Extension IIS Administration.

It provides functions to administrate Microsoft Internet Information Server (IIS).

.. code-block:: php

   <?php
     $path = iis_get_server_by_path('/path/to/root/folder/')
   ?>


This extension is available for Windows only. 

See also `IIS Administration <http://www.php.net/manual/en/book.iisfunc.php>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Extensions/Extiis |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _ext-imagick:

ext/imagick
+++++++++++

 Extension `Imagick <https://www.php.net/Imagick>`_ for PHP.

`Imagick <https://www.php.net/Imagick>`_ is a native php extension to create and modify images using the ImageMagick API.

.. code-block:: php

   <?php
   
   header('Content-type: image/jpeg');
   
   $image = new Imagick('image.jpg');
   
   // If 0 is provided as a width or height parameter,
   // aspect ratio is maintained
   $image->thumbnailImage(100, 0);
   
   echo $image;
   
   ?>


See also `Imagick for PHP <https://www.php.net/manual/en/book.imagick.php>`_ and `Imagick <https://www.imagemagick.org/script/index.php>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Extensions/Extimagick |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _ext-imap:

ext/imap
++++++++

 Extension ext/imap.

This extension operate with the IMAP protocol, as well as the NNTP, POP3 and local mailbox access methods.

.. code-block:: php

   <?php
   $mbox = imap_open('{imap.example.org}', 'username', 'password', OP_HALFOPEN)
         or die('can't connect: ' . imap_last_error());
   
   $list = imap_list($mbox, '{imap.example.org}', '*');
   if (is_array($list)) {
       foreach ($list as $val) {
           echo imap_utf7_decode($val) . PHP_EOL;
       }
   } else {
       echo 'imap_list failed: ' . imap_last_error() . PHP_EOL;
   }
   
   imap_close($mbox);
   ?>


See also `IMAP <http://www.php.net/imap>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extimap |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-info:

ext/info
++++++++

 PHP Options and Information.

These functions enable you to get a lot of information about PHP itself, e.g. runtime configuration, loaded extensions, version and much more. 

.. code-block:: php

   <?php
   /*
   Our php.ini contains the following settings:
   
   display_errors = On
   register_globals = Off
   post_max_size = 8M
   */
   
   echo 'display_errors = ' . ini_get('display_errors') . "\n";
   echo 'register_globals = ' . ini_get('register_globals') . "\n";
   echo 'post_max_size = ' . ini_get('post_max_size') . "\n";
   echo 'post_max_size+1 = ' . (ini_get('post_max_size')+1) . "\n";
   echo 'post_max_size in bytes = ' . return_bytes(ini_get('post_max_size'));
   
   function return_bytes($val) {
       $val = trim($val);
       $last = strtolower($val[strlen($val)-1]);
       switch($last) {
           // The 'G' modifier is available since PHP 5.1.0
           case 'g':
               $val *= 1024;
           case 'm':
               $val *= 1024;
           case 'k':
               $val *= 1024;
       }
   
       return $val;
   }
   
   ?>


See also `PHP Options And Information <https://www.php.net/manual/en/book.info.php>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extinfo |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-inotify:

ext/inotify
+++++++++++

 Extension inotify.

The Inotify extension gives access to the Linux kernel subsystem that acts to extend filesystems to notice changes to the filesystem, and report those changes to applications.

.. code-block:: php

   <?php
   // Open an inotify instance
   $fd = inotify_init();
   
   // Watch __FILE__ for metadata changes (e.g. mtime)
   $watch_descriptor = inotify_add_watch($fd, __FILE__, IN_ATTRIB);
   
   // generate an event
   touch(__FILE__);
   
   // Read events
   $events = inotify_read($fd);
   print_r($events);
   
   // The following methods allows to use inotify functions without blocking on inotify_read():
   
   // - Using stream_select() on $fd:
   $read = array($fd);
   $write = null;
   $except = null;
   stream_select($read,$write,$except,0);
   
   // - Using stream_set_blocking() on $fd
   stream_set_blocking($fd, 0);
   inotify_read($fd); // Does no block, and return false if no events are pending
   
   // - Using inotify_queue_len() to check if event queue is not empty
   $queue_len = inotify_queue_len($fd); // If > 0, inotify_read() will not block
   
   // Stop watching __FILE__ for metadata changes
   inotify_rm_watch($fd, $watch_descriptor);
   
   // Close the inotify instance
   // This may have closed all watches if this was not already done
   fclose($fd);
   
   ?>


See also `ext/inotify manual <https://www.php.net/manual/en/book.inotify.php>`_ and `inotify <https://en.wikipedia.org/wiki/Inotify>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Extensions/Extinotify |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _ext-intl:

ext/intl
++++++++

 Extension international.

Internationalization extension (further is referred as Intl) is a wrapper for `ICU <http://site.icu-project.org/>`_ library, enabling PHP programmers to perform various locale-aware operations including but not limited to formatting, transliteration, encoding conversion, calendar operations, `UCA <http://www.unicode.org/reports/tr10/>`_-conformant collation, locating text boundaries and working with locale identifiers, timezones and graphemes.

.. code-block:: php

   <?php
   $coll = new Collator('en_US');
   $al   = $coll->getLocale(Locale::ACTUAL_LOCALE);
   echo Actual locale: $al\n;
   
   $formatter = new NumberFormatter('en_US', NumberFormatter::DECIMAL);
   echo $formatter->format(1234567);
   ?>


See also `Internationalization Functions <https://www.php.net/manual/en/book.intl.php>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extintl |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-json:

ext/json
++++++++

 Extension JSON.

This extension implements the JavaScript Object Notation (JSON) data-interchange format. PHP implements a superset of JSON as specified in the original `RFC 7159 <http://www.faqs.org/rfcs/rfc7159>`_.

.. code-block:: php

   <?php
   $arr = array('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5);
   
   echo json_encode($arr);
   ?>


See also `JavaScript Object Notation <https://www.php.net/manual/en/book.json.php>`_ and `JSON <http://www.json.org/>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extjson |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-judy:

ext/judy
++++++++

 The `Judy <https://www.php.net/Judy>`_ extension. 

PHP `Judy <https://www.php.net/Judy>`_ is a PECL extension for the `Judy C library <http://judy.sourceforge.net/>`_ implementing dynamic sparse arrays.

.. code-block:: php

   <?php 
   $judy = new Judy(Judy::BITSET);
   if ($judy->getType() === judy_type($judy) &&
       $judy->getType() === Judy::BITSET) {
       echo 'Judy BITSET type OK'.PHP_EOL;
   } else {
       echo 'Judy BITSET type check fail'.PHP_EOL;
   }
   unset($judy);
   ?>


See also `php-judy <https://github.com/orieg/php-judy>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extjudy |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.11.6             |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-kdm5:

ext/kdm5
++++++++

 Extension kdm5 : Kerberos V .

These package allows you to access Kerberos V administration servers. You can create, modify, and delete Kerberos V principals and policies.

.. code-block:: php

   <?php
       // Extracted from the PHP Manual
     $handle = kadm5_init_with_password(afs-1, GONICUS.LOCAL, admin/admin, password);
   
     print <h1>get_principals</h1>\n;
     $principals = kadm5_get_principals($handle);
     for( $i=0; $i<count($principals); $i++)
         print $principals[$i]<br>\n;
   
     print <h1>get_policies</h1>\n;
     $policies = kadm5_get_policies($handle);
     for( $i=0; $i<count($policies); $i++)
         print $policies[$i]<br>\n;
   
     print <h1>get_principal burbach@GONICUS.LOCAL</h1>\n;
   
     $options = kadm5_get_principal($handle, burbach@GONICUS.LOCAL );
     $keys = array_keys($options);
     for( $i=0; $i<count($keys); $i++) {
       $value = $options[$keys[$i]];
       print $keys[$i]: $value<br>\n;
     }
   
     $options = array(KADM5_PRINC_EXPIRE_TIME => 0);
     kadm5_modify_principal($handle, burbach@GONICUS.LOCAL, $options);
   
     kadm5_destroy($handle);
   ?>


See also `Kerberos V <https://www.php.net/manual/en/book.kadm5.php>`_ and `Kerberos: The Network Authentication Protocol <http://web.mit.edu/kerberos/www/>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extkdm5 |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-lapack:

ext/lapack
++++++++++

 Extension `Lapack <https://www.php.net/lapack>`_. `LAPACK <https://www.php.net/lapack>`_ provides routines for solving systems of simultaneous linear equations, least-squares solutions of linear systems of equations, eigenvalue problems, and singular value problems. 

.. code-block:: php

   <?php
   
   $a = array(
       array( 1.44,  -7.84,  -4.39,   4.53),
       array(-9.96,  -0.28,  -3.24,   3.83),
       array(-7.55,   3.24,   6.27,  -6.64),
       array( 8.34,   8.09,   5.28,   2.06),
       array( 7.08,   2.52,   0.74,  -2.47),
       array(-5.45,  -5.70,  -1.19,   4.70),
   );
   
   $b = array(
       array( 8.58,   9.35),
       array( 8.26,  -4.43),
       array( 8.48,  -0.70),
       array(-5.28,  -0.26),
       array( 5.72,  -7.36),
       array( 8.93,  -2.52),
   );
   
   $result = Lapack::leastSquaresByFactorisation($a, $b);
   ?>

 
See also `Lapack <https://www.php.net/manual/en/book.`lapack <https://www.php.net/lapack>`_.php>`_ and `php-`lapack <https://www.php.net/lapack>`_ <https://github.com/ianbarber/php-`lapack <https://www.php.net/lapack>`_>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Extensions/Extlapack |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.12.2               |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _ext-ldap:

ext/ldap
++++++++

 Extension ext/ldap.

LDAP is the Lightweight `Directory <https://www.php.net/Directory>`_ Access Protocol, and is a protocol used to access '`Directory <https://www.php.net/Directory>`_ Servers'. The `Directory <https://www.php.net/Directory>`_ is a special kind of database that holds information in a tree structure.

.. code-block:: php

   <?php
   // basic sequence with LDAP is connect, bind, search, interpret search
   // result, close connection
   
   echo '<h3>LDAP query test</h3>';
   echo 'Connecting ...';
   $ds=ldap_connect('localhost');  // must be a valid LDAP server!
   echo 'connect result is ' . $ds . '<br />';
   
   if ($ds) { 
       echo 'Binding ...'; 
       $r=ldap_bind($ds);     // this is an 'anonymous' bind, typically
                              // read-only access
       echo 'Bind result is ' . $r . '<br />';
   
       echo 'Searching for (sn=S*) ...';
       // Search surname entry
       $sr=ldap_search($ds, 'o=My Company, c=US', 'sn=S*');  
       echo 'Search result is ' . $sr . '<br />';
   
       echo 'Number of entries returned is ' . ldap_count_entries($ds, $sr) . '<br />';
   
       echo 'Getting entries ...<p>';
       $info = ldap_get_entries($ds, $sr);
       echo 'Data for ' . $info['count'] . ' items returned:<p>';
   
       for ($i=0; $i<$info['count']; $i++) {
           echo 'dn is: ' . $info[$i]['dn'] . '<br />';
           echo 'first cn entry is: ' . $info[$i]['cn'][0] . '<br />';
           echo 'first email entry is: ' . $info[$i]['mail'][0] . '<br /><hr />';
       }
   
       echo 'Closing connection';
       ldap_close($ds);
   
   } else {
       echo '<h4>Unable to connect to LDAP server</h4>';
   }
   ?>


See also `Lightweight `Directory <https://www.php.net/Directory>`_ Access Protocol <https://www.php.net/manual/en/book.ldap.php>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extldap |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-leveldb:

ext/leveldb
+++++++++++

 PHP Binding for `LevelDB <https://www.php.net/LevelDB>`_.

`LevelDB <https://www.php.net/LevelDB>`_ is a fast key-value storage library written at Google that provides an ordered mapping from string keys to string values.

.. code-block:: php

   <?php
   
   $db = new LevelDB($leveldb_path);
   
   $batch = new LevelDBWriteBatch();
   $batch->set('batch_foo', 'batch_bar');
   $batch->put('batch_foo2', 'batch_bar2');
   $batch->delete('batch_foo');
   
   $db->write($batch);
   
   $batch->clear();
   $batch->delete('batch_foo2');
   $batch->set('batch_foo', 'batch again');
   
   ?>


See also `ext/leveldb on Github <https://github.com/reeze/php-leveldb>`_ and `Leveldb <https://github.com/google/leveldb>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Extensions/Extleveldb |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 1.1.7                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _ext-libevent:

ext/libevent
++++++++++++

 Extension libevent.

Libevent is a library that provides a mechanism to execute a callback function when a specific event occurs on a file descriptor or after a timeout has been reached.

.. code-block:: php

   <?php
   
   function print_line($fd, $events, $arg)
   {
       static $max_requests = 0;
   
       $max_requests++;
   
       if ($max_requests == 10) {
           // exit loop after 10 writes
           event_base_loopexit($arg[1]);
       }
   
       // print the line
       echo  fgets($fd);
   }
   
   // create base and event
   $base = event_base_new();
   $event = event_new();
   
   $fd = STDIN;
   
   // set event flags
   event_set($event, $fd, EV_READ | EV_PERSIST, 'print_line', array($event, $base));
   // set event base
   event_base_set($event, $base);
   
   // enable event
   event_add($event);
   // start event loop
   event_base_loop($base);
   
   ?>


See also `libevent <http://libevent.org/>`_ and `Libevent ext <https://www.php.net/manual/en/book.libevent.php>`_.

Specs
^^^^^
+-------------+------------------------+
| Short name  | Extensions/Extlibevent |
+-------------+------------------------+
| Rulesets    | :ref:`CE`              |
+-------------+------------------------+
| Exakt since | 0.8.4                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Slow (1 hour)          |
+-------------+------------------------+
| Precision   | Very high              |
+-------------+------------------------+


.. _ext-libsodium:

ext/libsodium
+++++++++++++

 Extension for libsodium : in PECL until PHP 7.2, and in core ever since. 

The Sodium crypto library (libsodium) is a modern, easy-to-use software library for encryption, decryption, signatures, password hashing and more.

Sodium supports a variety of compilers and operating systems, including Windows (with MinGW or Visual Studio, x86 and x64), iOS and Android.

The design choices emphasize security, and "magic constants" have clear rationales.

.. code-block:: php

   <?php
   // Example from the docs : https://paragonie.com/book/pecl-libsodium/read/06-hashing.md#crypto-generichash
   
   // Fast, unkeyed hash function.
   // Can be used as a secure replacement for MD5
   $h = \Sodium\crypto_generichash('msg');
   
   // Fast, keyed hash function.
   // The key can be of any length between \Sodium\CRYPTO_GENERICHASH_KEYBYTES_MIN
   // and \Sodium\CRYPTO_GENERICHASH_KEYBYTES_MAX, in bytes.
   // \Sodium\CRYPTO_GENERICHASH_KEYBYTES is the recommended length.
   $h = \Sodium\crypto_generichash('msg', $key);
   
   // Fast, keyed hash function, with user-chosen output length, in bytes.
   // Output length can be between \Sodium\CRYPTO_GENERICHASH_BYTES_MIN and
   // \Sodium\CRYPTO_GENERICHASH_BYTES_MAX.
   // \Sodium\CRYPTO_GENERICHASH_BYTES is the default length.
   $h = \Sodium\crypto_generichash('msg', $key, 64);
   
   ?>


See also `PHP extension for libsodium <https://github.com/jedisct1/libsodium-php>`_ and `Using Libsodium in PHP Projects <https://paragonie.com/book/pecl-libsodium/read/00-intro.md>`_.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Extensions/Extlibsodium |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 0.10.2                  |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _ext-libxml:

ext/libxml
++++++++++

 Extension libxml.

These functions/constants are available as of PHP 5.1.0, and the following core extensions rely on this libxml extension: DOM, libxml, SimpleXML, SOAP, WDDX, XSL, XML, XMLReader, XMLRPC and XMLWriter.

.. code-block:: php

   <?php
   
   // $xmlstr is a string, containing a XML document. 
   
   $doc = simplexml_load_string($xmlstr);
   $xml = explode(PHP_EOL, $xmlstr);
   
   if ($doc === false) {
       $errors = libxml_get_errors();
   
       foreach ($errors as $error) {
           echo display_xml_error($error, $xml);
       }
   
       libxml_clear_errors();
   }
   
   
   function display_xml_error($error, $xml)
   {
       $return  = $xml[$error->line - 1] . PHP_EOL;
       $return .= str_repeat('-', $error->column) . '^'.PHP_EOL;
   
       switch ($error->level) {
           case LIBXML_ERR_WARNING:
               $return .= 'Warning ',$error->code.': ';
               break;
            case LIBXML_ERR_ERROR:
               $return .= 'Error '.$error->code.': ';
               break;
           case LIBXML_ERR_FATAL:
               $return .= 'Fatal Error '.$error->code.': ';
               break;
       }
   
       $return .= trim($error->message) .
                  PHP_EOL.'  Line: '.$error->line .
                  PHP_EOL.'  Column: '.$error->column;
   
       if ($error->file) {
           $return .= "\n  File: $error->file";
       }
   
       return $return.PHP_EOL.PHP_EOL.'--------------------------------------------'.PHP_EOL.PHP_EOL;
   }
   
   ?>


See also `libxml <http://www.php.net/manual/en/book.libxml.php>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Extensions/Extlibxml |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _ext-lua:

ext/lua
+++++++

 Extension `Lua <https://www.php.net/Lua>`_.

'`Lua <https://www.php.net/Lua>`_ is a powerful, fast, light-weight, embeddable scripting language.' This extension embeds the lua interpreter and offers an OO-API to lua variables and functions.

.. code-block:: php

   <?php
   $lua = new Lua();
   $lua->eval(<<<CODE
       print(2);
   CODE
   );
   ?>


See also `ext/lua manual <https://www.php.net/manual/en/book.lua.php>`_ and 
         `LUA <https://www.lua.org/>`_

Specs
^^^^^
+-------------+-------------------+
| Short name  | Extensions/Extlua |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _ext-lzf:

ext/lzf
+++++++

 Extension LZF.

LZF is a very fast compression algorithm, ideal for saving space with only slight speed cost. It can be optimized for speed or space at the time of compilation.

.. code-block:: php

   <?php
   $compressed = lzf_compress(This is test of LZF extension);
   
   echo base64_encode($compressed);
   ?>


See also `lzf <https://www.php.net/lzf>`_ and `liblzf <http://oldhome.schmorp.de/marc/liblzf.html>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Extensions/Extlzf |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 1.3.5             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _ext-mail:

ext/mail
++++++++

 Extension for mail.

The `mail() <https://www.php.net/mail>`_ function allows you to send mail.

.. code-block:: php

   <?php
   // The message
   $message = "Line 1\r\nLine 2\r\nLine 3";
   
   // In case any of our lines are larger than 70 characters, we should use wordwrap()
   $message = wordwrap($message, 70, "\r\n");
   
   // Send
   mail('caffeinated@example.com', 'My Subject', $message);
   ?>


See also `Mail related functions <http://www.php.net/manual/en/book.mail.php>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extmail |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-mailparse:

ext/mailparse
+++++++++++++

 Extension mailparse.

Mailparse is an extension for parsing and working with email messages. It can deal with `RFC 822 (MIME) <http://www.faqs.org/rfcs/rfc822.html>`_ and `RFC 2045 (MIME) <http://www.faqs.org/rfcs/rfc2045.html>`_ compliant messages.

.. code-block:: php

   <?php
   
   $mail = mailparse_msg_create();
   mailparse_msg_parse($mail, $mailInString);
   $parts = mailparse_msg_get_structure($mail); 
   
   foreach($parts as $part) { 
       $section = mailparse_msg_get_part($mail, $part); 
       $info = mailparse_msg_get_part_data($section); 
   }
   
   ?>


See also `Mailparse <https://www.php.net/manual/en/book.mailparse.php>`_.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Extensions/Extmailparse |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _ext-math:

ext/math
++++++++

 Core functions that provides math standard functions.

This is not a real extension : it is a documentation section, that helps sorting the functions. 

.. code-block:: php

   <?php
   echo decbin(12) . PHP_EOL;
   echo decbin(26);
   ?>


See also `Mathematical Functions <https://www.php.net/manual/en/book.math.php>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extmath |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-mbstring:

ext/mbstring
++++++++++++

 Extension ``ext/mbstring``.

``mbstring`` provides multibyte specific string functions that help you deal with multibyte encodings in PHP.

.. code-block:: php

   <?php
   /* Convert internal character encoding to SJIS */
   $str = mb_convert_encoding($str, "SJIS");
   
   /* Convert EUC-JP to UTF-7 */
   $str = mb_convert_encoding($str, "UTF-7", "EUC-JP");
   
   /* Auto detect encoding from JIS, eucjp-win, sjis-win, then convert str to UCS-2LE */
   $str = mb_convert_encoding($str, "UCS-2LE", "JIS, eucjp-win, sjis-win");
   
   /* "auto" is expanded to "ASCII,JIS,UTF-8,EUC-JP,SJIS" */
   $str = mb_convert_encoding($str, "EUC-JP", "auto");
   ?>


See also `Mbstring <http://www.php.net/manual/en/book.mbstring.php>`_.

Specs
^^^^^
+-------------+------------------------+
| Short name  | Extensions/Extmbstring |
+-------------+------------------------+
| Rulesets    | :ref:`CE`              |
+-------------+------------------------+
| Exakt since | 0.8.4                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Slow (1 hour)          |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _ext-mcrypt:

ext/mcrypt
++++++++++

 Extension for mcrypt.

This extension has been deprecated as of PHP 7.1.0 and moved to PECL as of PHP 7.2.0.

This is an interface to the mcrypt library, which supports a wide variety of block algorithms such as DES, TripleDES, Blowfish (default), 3-WAY, SAFER-SK64, SAFER-SK128, TWOFISH, TEA, RC2 and GOST in CBC, OFB, CFB and ECB cipher modes. Additionally, it supports RC6 and IDEA which are considered 'non-free'. CFB/OFB are 8bit by default.

.. code-block:: php

   <?php
       # --- ENCRYPTION ---
   
       # the key should be random binary, use scrypt, bcrypt or PBKDF2 to
       # convert a string into a key
       # key is specified using hexadecimal
       $key = pack('H*', 'bcb04b7e103a0cd8b54763051cef08bc55abe029fdebae5e1d417e2ffb2a00a3');
       
       # show key size use either 16, 24 or 32 byte keys for AES-128, 192
       # and 256 respectively
       $key_size =  strlen($key);
       echo 'Key size: ' . $key_size . PHP_EOL;
       
       $plaintext = 'This string was AES-256 / CBC / ZeroBytePadding encrypted.';
   
       # create a random IV to use with CBC encoding
       $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
       $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);
       
       # creates a cipher text compatible with AES (Rijndael block size = 128)
       # to keep the text confidential 
       # only suitable for encoded input that never ends with value 00h
       # (because of default zero padding)
       $ciphertext = mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key,
                                    $plaintext, MCRYPT_MODE_CBC, $iv);
   
       # prepend the IV for it to be available for decryption
       $ciphertext = $iv . $ciphertext;
       
       # encode the resulting cipher text so it can be represented by a string
       $ciphertext_base64 = base64_encode($ciphertext);
   
       echo  $ciphertext_base64 . PHP_EOL;
   
       # === WARNING ===
   
       # Resulting cipher text has no integrity or authenticity added
       # and is not protected against padding oracle attacks.
       
       # --- DECRYPTION ---
       
       $ciphertext_dec = base64_decode($ciphertext_base64);
       
       # retrieves the IV, iv_size should be created using mcrypt_get_iv_size()
       $iv_dec = substr($ciphertext_dec, 0, $iv_size);
       
       # retrieves the cipher text (everything except the $iv_size in the front)
       $ciphertext_dec = substr($ciphertext_dec, $iv_size);
   
       # may remove 00h valued characters from end of plain text
       $plaintext_dec = mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key,
                                       $ciphertext_dec, MCRYPT_MODE_CBC, $iv_dec);
       
       echo  $plaintext_dec . PHP_EOL;
   ?>


See also `extension mcrypt <http://www.php.net/manual/en/book.mcrypt.php>`_ and `mcrypt <http://mcrypt.sourceforge.net/>`_.

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Extensions/Extmcrypt                 |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP71` |
+-------------+--------------------------------------+
| Exakt since | 0.8.4                                |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Major                                |
+-------------+--------------------------------------+
| Time To Fix | Slow (1 hour)                        |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _ext-memcache:

ext/memcache
++++++++++++

 Extension `Memcache <https://www.php.net/Memcache>`_.

`Memcache <https://www.php.net/Memcache>`_ module provides handy procedural and object oriented interface to memcached, highly effective caching daemon, which was especially designed to decrease database load in dynamic web applications.

.. code-block:: php

   <?php
   
   $memcache = new Memcache;
   $memcache->connect('localhost', 11211) or die ('Could not connect');
   
   $version = $memcache->getVersion();
   echo 'Server\'s version: '.$version.'<br/>';
   
   $tmp_object = new stdClass;
   $tmp_object->str_attr = 'test';
   $tmp_object->int_attr = 123;
   
   $memcache->set('key', $tmp_object, false, 10) or die ('Failed to save data at the server');
   echo 'Store data in the cache (data will expire in 10 seconds)<br/>';
   
   $get_result = $memcache->get('key');
   echo 'Data from the cache:<br/>';
   
   var_dump($get_result);
   
   ?>


See also `Memcache on PHP <http://www.php.net/manual/en/book.memcache.php>`_ and `memcached <http://www.memcached.org/>`_.

Specs
^^^^^
+-------------+------------------------+
| Short name  | Extensions/Extmemcache |
+-------------+------------------------+
| Rulesets    | :ref:`CE`              |
+-------------+------------------------+
| Exakt since | 0.8.4                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Slow (1 hour)          |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _ext-memcached:

ext/memcached
+++++++++++++

 Extension ext-memcached.

This extension uses the libmemcached library to provide an API for communicating with memcached servers. It also provides a session handler (`memcached`).

.. code-block:: php

   <?php
   $m = new Memcached();
   $m->addServer('localhost', 11211);
   
   $m->set('foo', 100);
   var_dump($m->get('foo'));
   ?>


See also `ext/memcached manual <https://www.php.net/manual/en/book.memcached.php>`_ and `memcached <http://www.memcached.org/>`_.


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Extensions/Extmemcached |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | Very high               |
+-------------+-------------------------+


.. _ext-mhash:

ext/mhash
+++++++++

 Extension mhash (obsolete since PHP 5.3.0).

This extension provides functions, intended to work with `mhash <http://mhash.sourceforge.net/>`_.

.. code-block:: php

   <?php
   $input = 'what do ya want for nothing?';
   $hash = mhash(MHASH_MD5, $input);
   echo 'The hash is ' . bin2hex($hash) . '<br />'.PHP_EOL;
   $hash = mhash(MHASH_MD5, $input, 'Jefe');
   echo 'The hmac is ' . bin2hex($hash) . '<br />'.PHP_EOL;
   ?>


See also `Extension mhash <https://www.php.net/manual/en/book.mhash.php>`_.

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Extensions/Extmhash                  |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP54` |
+-------------+--------------------------------------+
| Exakt since | 0.9.4                                |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Major                                |
+-------------+--------------------------------------+
| Time To Fix | Slow (1 hour)                        |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _ext-ming:

ext/ming
++++++++

 Extension ext/ming, to create swf files with PHP.

Ming is an open-source (LGPL) library which allows you to create SWF ('Flash') format movies. 

.. code-block:: php

   <?php
     $s = new SWFShape();
     $f = $s->addFill(0xff, 0, 0);
     $s->setRightFill($f);
   
     $s->movePenTo(-500, -500);
     $s->drawLineTo(500, -500);
     $s->drawLineTo(500, 500);
     $s->drawLineTo(-500, 500);
     $s->drawLineTo(-500, -500);
   
     $p = new SWFSprite();
     $i = $p->add($s);
     $i->setDepth(1);
     $p->nextFrame();
   
     for ($n=0; $n<5; ++$n) {
       $i->rotate(-15);
       $p->nextFrame();
     }
   
     $m = new SWFMovie();
     $m->setBackground(0xff, 0xff, 0xff);
     $m->setDimension(6000, 4000);
   
     $i = $m->add($p);
     $i->setDepth(1);
     $i->moveTo(-500,2000);
     $i->setName('box');
   
     $m->add(new SWFAction('/box.x += 3;'));
     $m->nextFrame();
     $m->add(new SWFAction('gotoFrame(0); play();'));
     $m->nextFrame();
   
     header('Content-type: application/x-shockwave-flash');
     $m->output();
   ?>


See also `Ming (flash) <http://www.libming.org/>`_ and `Ming <http://www.libming.org/>`_.

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Extensions/Extming                   |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP53` |
+-------------+--------------------------------------+
| Exakt since | 0.8.4                                |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Major                                |
+-------------+--------------------------------------+
| Time To Fix | Slow (1 hour)                        |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _ext-mongo:

ext/mongo
+++++++++

 Extension `MongoDB <https://www.php.net/MongoDB>`_ driver (legacy).

.. code-block:: php

   <?php
   
   // connect
   $m = new MongoClient();
   
   // select a database
   $db = $m->comedy;
   
   // select a collection (analogous to a relational database\'s table)
   $collection = $db->cartoons;
   
   // add a record
   $document = array( 'title' => 'Calvin and Hobbes', 'author' => 'Bill Watterson' );
   $collection->insert($document);
   
   // add another record, with a different 'shape'
   $document = array( 'title' => 'XKCD', 'online' => true );
   $collection->insert($document);
   
   // find everything in the collection
   $cursor = $collection->find();
   
   // iterate through the results
   foreach ($cursor as $document) {
       echo $document['title'] . PHP_EOL;
   }
   
   ?>


Note : this is not the `MongoDB driver <https://www.php.net/mongo>`_. This is the legacy extension.

See also `ext/mongo manual <https://www.php.net/manual/en/book.mongo.php>`_ and `MongdDb <https://www.mongodb.com/>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Extensions/Extmongo |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.8.4               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _ext-mongodb:

ext/mongodb
+++++++++++

 Extension MongoDb.

Do not mistake with extension `Mongo <https://www.php.net/Mongo>`_, the previous version.

Mongodb driver supports both PHP and HHVM and is developed atop the `libmongoc <https://github.com/mongodb/mongo-c-driver>`_ and `libbson <https://github.com/mongodb/libbson>`_ libraries. 

.. code-block:: php

   <?php
   require 'vendor/autoload.php'; // include Composer's autoloader
   
   $client = new MongoDB\Client(mongodb://localhost:27017);
   $collection = $client->demo->beers;
   
   $result = $collection->insertOne( [ 'name' => 'Hinterland', 'brewery' => 'BrewDog' ] );
   
   echo Inserted with Object ID {$result->getInsertedId()};
   ?>

 
See also `MongoDB driver <https://www.php.net/manual/en/set.mongodb.php>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Extensions/Extmongodb |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 0.9.5                 |
+-------------+-----------------------+
| Php Version | 7.0+                  |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _ext-msgpack:

ext/msgpack
+++++++++++

 Extension msgPack.

This extension provide API for communicating with `MessagePack <https://www.php.net/MessagePack>`_ serialization.

.. code-block:: php

   <?php
   
       $serialized = msgpack_serialize(array('a' => true, 'b' => 4));
       $unserialized = msgpack_unserialize($serialized);
   
   ?>


See also `msgpack for PHP <https://github.com/msgpack/msgpack-php>`_ and `MessagePack <https://msgpack.org/>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Extensions/Extmsgpack |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 1.3.5                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _ext-mssql:

ext/mssql
+++++++++

 Extension MSSQL, Microsoft SQL Server.

These functions allow you to access MS SQL Server database.

.. code-block:: php

   <?php
   // Connect to MSSQL
   $link = mssql_connect('KALLESPC\SQLEXPRESS', 'sa', 'phpfi');
   
   if (!$link || !mssql_select_db('php', $link)) {
       die('Unable to connect or select database!');
   }
   
   // Do a simple query, select the version of 
   // MSSQL and print it.
   $version = mssql_query('SELECT @@VERSION');
   $row = mssql_fetch_array($version);
   
   echo $row[0];
   
   // Clean up
   mssql_free_result($version);
   ?>


See also `Microsoft SQL Server <http://www.php.net/manual/en/book.mssql.php>`_ and `Microsoft PHP Driver for SQL Server <https://docs.microsoft.com/en-us/sql/connect/php/microsoft-php-driver-for-sql-server>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Extensions/Extmssql |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.8.4               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _ext-mysql:

ext/mysql
+++++++++

 Extension for MySQL (Original MySQL API).

This extension is deprecated as of PHP 5.5.0, and has been removed as of PHP 7.0.0. Instead, either the `mysqli <https://www.php.net/mysqli>`_ or PDO_MySQL extension should be used. See also the MySQL API Overview for further help while choosing a MySQL API. .. code-block:: php <?php $result = mysql_query('SELECT * WHERE 1=1'); if (!$result) { die('Invalid query: ' . mysql_error()); } ?> See also `Original MySQL API <http://www.php.net/manual/en/book.mysql.php>`_ and `MySQL <http://www.mysql.com/>`_.

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Extensions/Extmysql                  |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP55` |
+-------------+--------------------------------------+
| Exakt since | 0.8.4                                |
+-------------+--------------------------------------+
| Php Version | 7.0-                                 |
+-------------+--------------------------------------+
| Severity    | Major                                |
+-------------+--------------------------------------+
| Time To Fix | Slow (1 hour)                        |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _ext-mysqli:

ext/mysqli
++++++++++

 Extension `mysqli <https://www.php.net/mysqli>`_ for MySQL.

The `mysqli <https://www.php.net/mysqli>`_ extension allows you to access the functionality provided by MySQL 4.1 and above.

.. code-block:: php

   <?php
   $mysqli = new mysqli('localhost', 'my_user', 'my_password', 'world');
   
   /* check connection */
   if (mysqli_connect_errno()) {
       printf('Connect failed: %s\n', mysqli_connect_error());
       exit();
   }
   
   $city = 'Amersfoort';
   
   /* create a prepared statement */
   if ($stmt = $mysqli->prepare('SELECT District FROM City WHERE Name=?')) {
   
       /* bind parameters for markers */
       $stmt->bind_param('s', $city);
   
       /* execute query */
       $stmt->execute();
   
       /* bind result variables */
       $stmt->bind_result($district);
   
       /* fetch value */
       $stmt->fetch();
   
       printf('%s is in district %s\n', $city, $district);
   
       /* close statement */
       $stmt->close();
   }
   
   /* close connection */
   $mysqli->close();
   ?>


See also `MySQL Improved Extension <https://www.php.net/manual/en/book.`mysqli <https://www.php.net/mysqli>`_.php>`_ and `MySQL <http://www.mysql.com/>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Extensions/Extmysqli |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _ext-ncurses:

ext/ncurses
+++++++++++

 Extension ncurses (CLI).

ncurses (new curses) is a free software emulation of curses in System V Rel 4.0 (and above). 

.. code-block:: php

   <?php
   ncurses_init();
   ncurses_start_color();
   ncurses_init_pair(1, NCURSES_COLOR_GREEN, NCURSES_COLOR_BLACK);
   ncurses_init_pair(2, NCURSES_COLOR_RED,   NCURSES_COLOR_BLACK);
   ncurses_init_pair(3, NCURSES_COLOR_WHITE, NCURSES_COLOR_BLACK);
   ncurses_color_set(1);
   ncurses_addstr('OK   ');
   ncurses_color_set(3);
   ncurses_addstr('Success!'.PHP_EOL);
   ncurses_color_set(2);
   ncurses_addstr('FAIL ');
   ncurses_color_set(3);
   ncurses_addstr('Success!'.PHP_EOL);
   ?>


See also `Ncurses Terminal Screen Control <https://www.php.net/manual/en/book.ncurses.php>`_ and `Ncurses <https://www.gnu.org/software/ncurses/ncurses.html>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Extensions/Extncurses |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 0.9.2                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _ext-newt:

ext/newt
++++++++

 Newt PHP CLI extension.

This is a PHP language extension for RedHat Newt library, a terminal-based window and widget library for writing applications with user friendly interface.

.. code-block:: php

   <?php
   newt_init ();
   newt_cls ();
   
   newt_draw_root_text (0, 0, Test Mode Setup Utility 1.12);
   newt_push_help_line (null);
   
   newt_get_screen_size ($rows, $cols);
   
   newt_open_window ($rows/2-17, $cols/2-10, 34, 17, Choose a Tool);
   
   $form = newt_form ();
   
   $list = newt_listbox (3, 2, 10);
   
   foreach (array (
       Authentication configuration,
       Firewall configuration,
       Mouse configuration,
       Network configuration,
       Printer configuration,
       System services) as $l_item)
   {
       newt_listbox_add_entry ($list, $l_item, $l_item);
   }
   
   $b1 = newt_button (5, 12, Run Tool);
   $b2 = newt_button (21, 12, Quit);
   
   newt_form_add_component ($form, $list);
   newt_form_add_components ($form, array($b1, $b2));
   
   newt_refresh ();
   newt_run_form ($form);
   
   newt_pop_window ();
   newt_pop_help_line ();
   newt_finished ();
   newt_form_destroy ($form);
   ?>


See also `Newt <http://people.redhat.com/rjones/ocaml-newt/html/Newt.html>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extnewt |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.9.2              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-nsapi:

ext/nsapi
+++++++++

 NSAPI specific functions calls. 

These functions are only available when running PHP as a NSAPI module in Netscape/iPlanet/Sun webservers.

.. code-block:: php

   <?php
   
   // This scripts depends on ext/nsapi
   if (ini_get('nsapi.read_timeout') < 60) {
       doSomething();
   }
   
   ?>


See also `Sun, iPlanet and Netscape servers on Sun Solaris <https://www.php.net/manual/en/install.unix.sun.php>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Extensions/Extnsapi |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.9.2               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _ext-ob:

ext/ob
++++++

 Extension Output Buffering Control.

The Output Control functions allow you to control when output is sent from the script.

.. code-block:: php

   <?php
   
   ob_start();
   echo Hello\n;
   
   setcookie(cookiename, cookiedata);
   
   ob_end_flush();
   
   ?>



See also `Output Buffering Control <https://www.php.net/manual/en/book.outcontrol.php>`_.

Specs
^^^^^
+-------------+------------------+
| Short name  | Extensions/Extob |
+-------------+------------------+
| Rulesets    | :ref:`CE`        |
+-------------+------------------+
| Exakt since | 0.8.4            |
+-------------+------------------+
| Php Version | All              |
+-------------+------------------+
| Severity    | Minor            |
+-------------+------------------+
| Time To Fix | Slow (1 hour)    |
+-------------+------------------+
| Precision   | High             |
+-------------+------------------+


.. _ext-oci8:

ext/oci8
++++++++

 Extension ext/oci8.

OCI8 gives access Oracle Database 12c, 11g, 10g, 9i and 8i. 

.. code-block:: php

   <?php
   
   $conn = oci_connect('hr', 'welcome', 'localhost/XE');
   if (!$conn) {
       $e = oci_error();
       trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
   }
   
   // Prepare the statement
   $stid = oci_parse($conn, 'SELECT * FROM departments');
   if (!$stid) {
       $e = oci_error($conn);
       trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
   }
   
   // Perform the logic of the query
   $r = oci_execute($stid);
   if (!$r) {
       $e = oci_error($stid);
       trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
   }
   
   // Fetch the results of the query
   print '<table border='1'>' . PHP_EOL;
   while ($row = oci_fetch_array($stid, OCI_ASSOC+OCI_RETURN_NULLS)) {
       print '<tr>' . PHP_EOL;
       foreach ($row as $item) {
           print '    <td>' . ($item !== null ? htmlentities($item, ENT_QUOTES) : '&nbsp;') . '</td>' . PHP_EOL;
       }
       print '</tr>' . PHP_EOL;
   }
   print '</table>' . PHP_EOL;
   
   oci_free_statement($stid);
   oci_close($conn);
   
   ?>


See also `Oracle OCI8 <https://www.php.net/manual/en/book.oci8.php>`_ and `Oracle <https://www.oracle.com/>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extoci8 |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-odbc:

ext/odbc
++++++++

 Extension ODBC.

In addition to normal ODBC support, the Unified ODBC functions in PHP allow you to access several databases that have borrowed the semantics of the ODBC API to implement their own API. Instead of maintaining multiple database drivers that were all nearly identical, these drivers have been unified into a single set of ODBC functions.

.. code-block:: php

   <?php
   $a = 1;
   $b = 2;
   $c = 3;
   $stmt    = odbc_prepare($conn, 'CALL myproc(?,?,?)');
   $success = odbc_execute($stmt, array($a, $b, $c));
   ?>


See also `ODBC (Unified) <http://www.php.net/manual/en/book.uodbc.php>`_, `Unixodbc <http://www.unixodbc.org/>`_ and `IODBC <http://www.iodbc.org/dataspace/doc/iodbc/wiki/iodbcWiki/WelcomeVisitors>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extodbc |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-opcache:

ext/opcache
+++++++++++

 Extension opcache.

OPcache improves PHP performance by storing precompiled script bytecode in shared memory, thereby removing the need for PHP to load and parse scripts on each request.

.. code-block:: php

   <?php
   
   echo opcache_compile_file('/var/www/index.php');
   
   print_r(opcache_get_status());
   
   ?>


See also `OPcache functions <http://www.php.net/manual/en/book.opcache.php>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Extensions/Extopcache |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _ext-opencensus:

ext/opencensus
++++++++++++++

 Extension PHP for OpenCensus : 

A stats collection and distributed tracing framework.

.. code-block:: php

   <?php
   opencensus_trace_begin('root', ['spanId' => '1234']);
   opencensus_trace_add_annotation('foo');
   opencensus_trace_begin('inner', []);
   opencensus_trace_add_annotation('asdf', ['spanId' => '1234']);
   opencensus_trace_add_annotation('abc');
   opencensus_trace_finish();
   opencensus_trace_finish();
   $traces = opencensus_trace_list();
   echo Number of traces: . count($traces) . \n;
   $span = $traces[0];
   print_r($span->timeEvents());
   $span2 = $traces[1];
   print_r($span2->timeEvents());
   ?>



See also `opencensus <https://github.com/census-instrumentation/opencensus-php>`_.

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Extensions/Extopencensus |
+-------------+--------------------------+
| Rulesets    | :ref:`CE`                |
+-------------+--------------------------+
| Exakt since | 1.1.7                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Slow (1 hour)            |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _ext-openssl:

ext/openssl
+++++++++++

 Extension Openssl.

This extension binds functions of ``OpenSSL`` library for symmetric and asymmetric encryption and decryption, ``PBKDF2``, ``PKCS7``, ``PKCS12``, ``X509`` and other cryptographic operations. In addition to that it provides implementation of ``TLS`` streams.

.. code-block:: php

   <?php
   // $data and $signature are assumed to contain the data and the signature
   
   // fetch public key from certificate and ready it
   $pubkeyid = openssl_pkey_get_public("file://src/openssl-0.9.6/demos/sign/cert.pem");
   
   // state whether signature is okay or not
   $ok = openssl_verify($data, $signature, $pubkeyid);
   if ($ok == 1) {
       echo "good";
   } elseif ($ok == 0) {
       echo "bad";
   } else {
       echo "ugly, error checking signature";
   }
   // free the key from memory
   openssl_free_key($pubkeyid);
   ?>


See also `ext/OpenSSL <https://www.php.net/manual/en/book.openssl.php>`_ and `OpenSSL <https://www.openssl.org/>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Extensions/Extopenssl |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _ext-parle:

ext/parle
+++++++++

 Extension Parser and Lexer.

The parle extension provides lexing and parsing facilities. The implementation is based on » Ben Hanson's libraries and requires a » C++14 capable compiler. 

.. code-block:: php

   <?php
   
   use Parle\{Token, Lexer, LexerException};
   
   /* name => id */
   $token = array(
           'EOI' => 0,
           'COMMA' => 1,
           'CRLF' => 2,
           'DECIMAL' => 3,
   );
   /* id => name */
   $token_rev = array_flip($token);
   
   $lex = new Lexer;
   $lex->push("[\x2c]", $token['COMMA']);
   $lex->push("[\r][\n]", $token['CRLF']);
   $lex->push("[\d]+", $token['DECIMAL']);
   $lex->build();
   
   $in = 0,1,2\r\n3,42,5\r\n6,77,8\r\n;
   
   $lex->consume($in);
   
   do {
           $lex->advance();
           $tok = $lex->getToken();
   
           if (Token::UNKNOWN == $tok->id) {
                   throw new LexerException('Unknown token "'.$tok->value.'" at offset '.$tok->offset.'.');
           }
   
           echo 'TOKEN: ', $token_rev[$tok->id], PHP_EOL;
   } while (Token::EOI != $tok->id);
   
   ?>


See also `Parsing and Lexing <https://www.php.net/manual/en/book.parle.php>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Extensions/Extparle |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.12.12             |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _ext-parsekit:

ext/parsekit
++++++++++++

 Extension Parsekit.

These functions allow runtime analysis of opcodes compiled from PHP scripts.

.. code-block:: php

   <?php
   var_dump(parsekit_compile_file('hello_world.php', $errors, PARSEKIT_SIMPLE));
   ?>


See also `Parsekit <http://www.php.net/manual/en/book.parsekit.php>`_.

Specs
^^^^^
+-------------+------------------------+
| Short name  | Extensions/Extparsekit |
+-------------+------------------------+
| Rulesets    | :ref:`CE`              |
+-------------+------------------------+
| Exakt since | 0.8.4                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Slow (1 hour)          |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _ext-password:

ext/password
++++++++++++

 Extension password.

The password hashing API provides an easy to use wrapper around `crypt() <https://www.php.net/crypt>`_ and some other password hashing algorithms, to make it easy to create and manage passwords in a secure manner.

.. code-block:: php

   <?php
   // See the password_hash() example to see where this came from.
   $hash = '\$2y\$07$BCryptRequires22Chrcte/VlQH0piJtjXl.0t1XkA8pw9dMXTpOq';
   
   if (password_verify('rasmuslerdorf', $hash)) {
       echo 'Password is valid!';
   } else {
       echo 'Invalid password.';
   }
   ?>


See also `Password Hashing <https://www.php.net/manual/en/book.password.php>`_ and `crypt man page <http://man7.org/linux/man-pages/man3/crypt.3.html>`_.

Specs
^^^^^
+-------------+------------------------+
| Short name  | Extensions/Extpassword |
+-------------+------------------------+
| Rulesets    | :ref:`CE`              |
+-------------+------------------------+
| Exakt since | 0.8.4                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Slow (1 hour)          |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _ext-pcntl:

ext/pcntl
+++++++++

 Extension for process control.

Process Control support in PHP implements the Unix style of process creation, program execution, signal handling and process termination. Process Control should not be enabled within a web server environment and unexpected results may happen if any Process Control functions are used within a web server environment.

.. code-block:: php

   <?php
   declare(ticks=1);
   
   $pid = pcntl_fork();
   if ($pid == -1) {
        die('could not fork'); 
   } else if ($pid) {
        exit(); // we are the parent 
   } else {
        // we are the child
   }
   
   // detatch from the controlling terminal
   if (posix_setsid() == -1) {
       die('could not detach from terminal');
   }
   
   // setup signal handlers
   pcntl_signal(SIGTERM, 'sig_handler');
   pcntl_signal(SIGHUP, 'sig_handler');
   
   // loop forever performing tasks
   while (1) {
   
       // do something interesting here
   
   }
   
   function sig_handler($signo) 
   {
   
        switch ($signo) {
            case SIGTERM:
                // handle shutdown tasks
                exit;
                break;
            case SIGHUP:
                // handle restart tasks
                break;
            default:
                // handle all other signals
        }
   
   }
   
   ?>


See also `Process Control <https://www.php.net/manual/en/book.pcntl.php>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Extensions/Extpcntl |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.8.4               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _ext-pcov:

ext/pcov
++++++++

 CodeCoverage compatible driver for PHP

A `self <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ contained CodeCoverage compatible driver for PHP7

.. code-block:: php

   <?php
   \pcov\start();
   $d = [];
   for ($i = 0; $i < 10; $i++) {
   	$d[] = $i * 42;
   }
   \pcov\stop();
   var_dump(\pcov\collect());
   ?>


See also `PCOV <https://github.com/krakjoe/pcov>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extpcov |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 1.6.5              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Quick (30 mins)    |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-pcre:

ext/pcre
++++++++

 Extension ext/pcre. PCRE stands for Perl Compatible Regular Expression. It is a standard PHP extension.

.. code-block:: php

   <?php
   
   $zip_code = $_GET['zip'];
   
   // Canadian Zip code H2M 3J1
   $zip_ca = '/^([a-zA-Z]\d[a-zA-Z])\ {0,1}(\d[a-zA-Z]\d)$/';
   
   // French Zip code  75017
   $zip_fr = '/^\d{5}$/';
   
   // Chinese Zip code  590615
   $zip_cn = '/^\d{6}$/';
   
   var_dump(preg_match($_GET['zip']));
   
   ?>


See also `Regular Expressions (Perl-Compatible) <https://www.php.net/manual/en/book.pcre.php>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extpcre |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-pdo:

ext/pdo
+++++++

 Generic extension `PDO <https://www.php.net/PDO>`_.

The PHP Data Objects (`PDO) <https://www.php.net/PDO>`_ extension defines a lightweight, consistent interface for accessing databases in PHP. 

.. code-block:: php

   <?php
   /* Execute a prepared statement by passing an array of values */
   $sql = 'SELECT name, colour, calories
       FROM fruit
       WHERE calories < :calories AND colour = :colour';
   $sth = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
   $sth->execute(array(':calories' => 150, ':colour' => 'red'));
   $red = $sth->fetchAll();
   $sth->execute(array(':calories' => 175, ':colour' => 'yellow'));
   $yellow = $sth->fetchAll();
   ?>


See also `PHP Data Object <https://www.php.net/manual/en/book.pdo.php>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Extensions/Extpdo |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _ext-pgsql:

ext/pgsql
+++++++++

 Extension PostGreSQL.

PostgreSQL is an open source descendant of this original Berkeley code.  It provides SQL92/SQL99 language support, transactions, referential integrity, stored procedures and type extensibility. 

.. code-block:: php

   <?php
   // Connect to a database named 'mary'
   $dbconn = pg_connect('dbname=mary');
   
   // Prepare a query for execution
   $result = pg_prepare($dbconn, 'my_query', 'SELECT * FROM shops WHERE name = \$1');
   
   // Execute the prepared query.  Note that it is not necessary to escape
   // the string 'Joe's Widgets' in any way
   $result = pg_execute($dbconn, 'my_query', array('Joe\'s Widgets'));
   
   // Execute the same prepared query, this time with a different parameter
   $result = pg_execute($dbconn, 'my_query', array('Clothes Clothes Clothes'));
   
   ?>


See also `PostgreSQL <https://www.php.net/manual/en/book.pgsql.php>`_ and `PostgreSQL: The world's most advanced open source database <https://www.postgresql.org/>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Extensions/Extpgsql |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.8.4               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _ext-phalcon:

ext/phalcon
+++++++++++

 Extension Phalcon : High Performance PHP Framework.

Phalcon's autoload examples from the docs :  `Tutorial 1: Let’s learn by example <https://docs.phalconphp.com/en/latest/reference/tutorial.html>`_

.. code-block:: php

   <?php
   
   use Phalcon\Loader;
   
   // ...
   
   $loader = new Loader();
   
   $loader->registerDirs(
       [
           ../app/controllers/,
           ../app/models/,
       ]
   );
   
   $loader->register();
   
   ?>


See also `PhalconPHP <https://phalconphp.com/>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Extensions/Extphalcon |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _ext-phar:

ext/phar
++++++++

 Extension phar.

The phar extension provides a way to put entire PHP applications into a single file called a ``phar`` (PHP Archive) for easy distribution and installation. 

.. code-block:: php

   <?php
   try {
       $p = new Phar('/path/to/my.phar', 0, 'my.phar');
       $p['myfile.txt'] = 'hi';
       $file = $p['myfile.txt'];
       var_dump($file->isCompressed(Phar::BZ2));
       $p['myfile.txt']->compress(Phar::BZ2);
       var_dump($file->isCompressed(Phar::BZ2));
   } catch (Exception $e) {
       echo 'Create/modify operations on my.phar failed: ', $e;
   }
   ?>


See also `phar <http://www.php.net/manual/en/book.phar.php>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extphar |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-posix:

ext/posix
+++++++++

 Extension POSIX.

Ext/posix contains an interface to those functions defined in the IEEE 1003.1 (POSIX.1) standards document which are not accessible through other means.

.. code-block:: php

   <?php
   posix_kill(999459,SIGKILL);
   echo 'Your error returned was '.posix_get_last_error(); //Your error was ___
   ?>


See also `1003.1-2008 - IEEE Standard for Information Technology - Portable Operating System Interface (POSIX(R)) <https://standards.ieee.org/findstds/standard/1003.1-2008.html>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Extensions/Extposix |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.8.4               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _ext-proctitle:

ext/proctitle
+++++++++++++

 Extension proctitle.

This extension allows changing the current process', and thread, name on Linux and *BSD systems. This is useful when using `pcntl_fork() <https://www.php.net/pcntl_fork>`_ to identify running processes in process list

.. code-block:: php

   <?php
   setproctitle('myscript');
   ?>


See also `proctitle <https://www.php.net/manual/en/book.proctitle.php>`_.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Extensions/Extproctitle |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _ext-pspell:

ext/pspell
++++++++++

 Extension pspell.

These functions allow you to check the spelling of a word and offer suggestions.

.. code-block:: php

   <?php
   $pspell_link = pspell_new('en');
   
   if (pspell_check($pspell_link, 'testt')) {
       echo 'This is a valid spelling';
   } else {
       echo 'Sorry, wrong spelling';
   }
   ?>


See also `Pspell <https://www.php.net/manual/en/book.pspell.php>`_ and `pspell <https://en.wikipedia.org/wiki/Pspell>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Extensions/Extpspell |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _ext-psr:

ext/psr
+++++++

 Extension PSR : PHP Standards Recommendations.

This PHP extension provides the interfaces from the PSR standards as established by the PHP-FIG group. You can use interfaces provided by this extension in another extension easily - see this example.

Currently supported PSR : 

* `PSR-3 <https://www.php-fig.org/psr/psr-3>`_ - `psr/http-message`
* `PSR-11 <https://www.php-fig.org/psr/psr-11>`_ - `psr/container`
* `PSR-13 <https://www.php-fig.org/psr/psr-13>`_ - `psr/link`
* `PSR-15 <https://www.php-fig.org/psr/psr-15>`_ - `psr/http-server`
* `PSR-16 <https://www.php-fig.org/psr/psr-16>`_ - `psr/simple-cache`
* `PSR-17 <https://www.php-fig.org/psr/psr-17>`_ - `psr/http-factory`


.. code-block:: php

   <?php
   // Example from the tests, for Cache (PSR-6)
   use Psr\Cache\CacheException;
   class MyCacheException extends Exception implements CacheException {}
   $ex = new MyCacheException('test');
   var_dump($ex instanceof CacheException);
   var_dump($ex instanceof Exception);
   try {
       throw $ex;
   } catch( CacheException $e ) {
       var_dump($e->getMessage());
   }
   ?>


See also `php-psr <https://github.com/jbboehr/php-psr>`_ and `PHP-FIG <https://www.php-fig.org/>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Extensions/Extpsr |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 1.5.2             |
+-------------+-------------------+
| Php Version | 7.0+              |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _ext-rar:

ext/rar
+++++++

 Extension RAR. 

Rar is a powerful and effective archiver created by Eugene Roshal. This extension gives you possibility to read Rar archives but doesn't support writing Rar archives, because this is not supported by the UnRar library and is directly prohibited by its license.

.. code-block:: php

   <?php
   
   $arch = RarArchive::open(example.rar);
   if ($arch === FALSE)
       die(Cannot open example.rar);
   
   $entries = $arch->getEntries();
   if ($entries === FALSE)
       die(Cannot retrieve entries);
   
   
   ?>


See also `Rar archiving <https://www.php.net/manual/en/book.rar.php>`_ and `rarlabs <http://www.rarlabs.com/>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Extensions/Extrar |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.7             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _ext-rdkafka:

ext/rdkafka
+++++++++++

 Extension for RDkafka.

PHP-rdkafka is a thin librdkafka binding providing a working PHP 5 / PHP 7 Kafka 0.8 / 0.9 / 0.10 client.

.. code-block:: php

   <?php
   
   $rk = new RdKafka\Producer();
   $rk->setLogLevel(LOG_DEBUG);
   $rk->addBrokers(10.0.0.1,10.0.0.2);
   
   ?>


See also `Kafka client for PHP <https://github.com/arnaud-lb/php-rdkafka>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Extensions/Extrdkafka |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 0.12.8                |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _ext-readline:

ext/readline
++++++++++++

 Extension readline.

The readline functions implement an interface to the GNU Readline library. These are functions that provide editable command lines.

.. code-block:: php

   <?php
   //get 3 commands from user
   for ($i=0; $i < 3; $i++) {
           $line = readline("Command: ");
           readline_add_history($line);
   }
   
   //dump history
   print_r(readline_list_history());
   
   //dump variables
   print_r(readline_info());
   ?>


See also `ext/readline <https://www.php.net/manual/en/book.readline.php>`_ and `The GNU Readline Library <https://tiswww.case.edu/php/chet/readline/rltop.html>`_.

Specs
^^^^^
+-------------+------------------------+
| Short name  | Extensions/Extreadline |
+-------------+------------------------+
| Rulesets    | :ref:`CE`              |
+-------------+------------------------+
| Exakt since | 0.8.4                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Slow (1 hour)          |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _ext-recode:

ext/recode
++++++++++

 Extension GNU Recode.

This module contains an interface to the GNU Recode library. The GNU Recode library converts files between various coded character sets and surface encodings.

.. code-block:: php

   <?php
   echo recode_string('us..flat', 'The following character has a diacritical mark: á');
   ?>


This extension is not available on Windows.

See also `ext/recode <http://www.php.net/manual/en/book.recode.php>`_ and `Recode <https://github.com/pinard/Recode>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Extensions/Extrecode |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _ext-redis:

ext/redis
+++++++++

 Extension ext/redis.

The phpredis extension provides an API for communicating with the `Redis <https://www.php.net/Redis>`_ key-value store. 

.. code-block:: php

   <?php
   
   $redis = new Redis();
   $redis->connect('127.0.0.1', 6379);
   
   $redis->setOption(Redis::OPT_SERIALIZER, Redis::SERIALIZER_NONE);	// don't serialize data
   $redis->setOption(Redis::OPT_SERIALIZER, Redis::SERIALIZER_PHP);	// use built-in serialize/unserialize
   $redis->setOption(Redis::OPT_SERIALIZER, Redis::SERIALIZER_IGBINARY);	// use igBinary serialize/unserialize
   
   $redis->setOption(Redis::OPT_PREFIX, 'myAppName:');	// use custom prefix on all keys
   
   /* Options for the SCAN family of commands, indicating whether to abstract
      empty results from the user.  If set to SCAN_NORETRY (the default), phpredis
      will just issue one SCAN command at a time, sometimes returning an empty
      array of results.  If set to SCAN_RETRY, phpredis will retry the scan command
      until keys come back OR Redis returns an iterator of zero
   */
   $redis->setOption(Redis::OPT_SCAN, Redis::SCAN_NORETRY);
   $redis->setOption(Redis::OPT_SCAN, Redis::SCAN_RETRY);
   ?>


See also `A PHP extension for `Redis <https://www.php.net/Redis>`_ <https://github.com/phpredis/phpredis/>`_ and `Redis <https://redis.io/>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Extensions/Extredis |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.8.4               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _ext-reflection:

ext/reflection
++++++++++++++

 Extension `Reflection <https://www.php.net/Reflection>`_.

PHP comes with a complete reflection API that adds the ability to reverse-engineer classes, interfaces, functions, methods and extensions. Additionally, the reflection API offers ways to retrieve doc comments for functions, classes and methods.

.. code-block:: php

   <?php
   /**
    * A simple counter
    *
    * @return    int
    */
   function counter1()
   {
       static $c = 0;
       return ++$c;
   }
   
   /**
    * Another simple counter
    *
    * @return    int
    */
   $counter2 = function()
   {
       static $d = 0;
       return ++$d;
   
   };
   
   function dumpReflectionFunction($func)
   {
       // Print out basic information
       printf(
           PHP_EOL.'===> The %s function '%s''.PHP_EOL.
           '     declared in %s'.PHP_EOL.
           '     lines %d to %d'.PHP_EOL,
           $func->isInternal() ? 'internal' : 'user-defined',
           $func->getName(),
           $func->getFileName(),
           $func->getStartLine(),
           $func->getEndline()
       );
   
       // Print documentation comment
       printf('---> Documentation:'.PHP_EOL.' %s',PHP_EOL, var_export($func->getDocComment(), 1));
   
       // Print static variables if existant
       if ($statics = $func->getStaticVariables())
       {
           printf('---> Static variables: %s',PHP_EOL, var_export($statics, 1));
       }
   }
   
   // Create an instance of the ReflectionFunction class
   dumpReflectionFunction(new ReflectionFunction('counter1'));
   dumpReflectionFunction(new ReflectionFunction($counter2));
   ?>


See also `Reflection <https://www.php.net/manual/en/book.reflection.php>`_.

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Extensions/Extreflection |
+-------------+--------------------------+
| Rulesets    | :ref:`CE`                |
+-------------+--------------------------+
| Exakt since | 0.8.4                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Slow (1 hour)            |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _ext-runkit:

ext/runkit
++++++++++

 Extension Runkit.

The runkit extension provides means to modify constants, user-defined functions, and user-defined classes. It also provides for custom superglobal variables and embeddable sub-interpreters via sandboxing.

.. code-block:: php

   <?php
   class Example {
       function foo() {
           echo 'foo!'.PHP_EOL;
       }
   }
   
   // create an Example object
   $e = new Example();
   
   // Add a new public method
   runkit_method_add(
       'Example',
       'add',
       '$num1, $num2',
       'return $num1 + $num2;',
       RUNKIT_ACC_PUBLIC
   );
   
   // add 12 + 4
   echo $e->add(12, 4);
   ?>


See also `runkit <https://www.php.net/manual/en/book.runkit.php>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Extensions/Extrunkit |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _ext-sdl:

ext/sdl
+++++++

 Extensions ext/sdl.

Simple DirectMedia Layer (SDL) is a cross-platform software development library designed to provide a hardware abstraction layer for computer multimedia hardware components. 

.. code-block:: php

   <?php
   /**
    * Example of how to change screen properties such as title, icon or state using the PHP-SDL extension.
    *
    * @author Santiago Lizardo <santiagolizardo@php.net>
    */
   require 'common.php';
   SDL_Init( SDL_INIT_VIDEO );
   $screen = SDL_SetVideoMode( 640, 480, 16, SDL_HWSURFACE );
   if( null == $screen )
   {
   	fprintf( STDERR, 'Error: %s' . PHP_EOL, SDL_GetError() );
   }
   for( $i = 3; $i > 0; $i-- )
   {
   	SDL_WM_SetCaption( Switching to fullscreen mode in $i seconds..., null );
   	SDL_Delay( 1000 );
   }
   SDL_WM_ToggleFullscreen( $screen );
   SDL_Delay( 3000 );
   SDL_WM_ToggleFullscreen( $screen );
   SDL_WM_SetCaption( Back from fullscreen mode. Quitting in 2 seconds..., null );
   SDL_Delay( 2000 );
   SDL_FreeSurface( $screen );
   SDL_Quit();
   
   ?>


See also `phpsdl <https://github.com/Ponup/phpsdl>`_, `Simple DirectMedia Layer <https://en.wikipedia.org/wiki/Simple_DirectMedia_Layer>`_ and `About SDL <https://www.libsdl.org/>`_.


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-------------------+
| Short name  | Extensions/Extsdl |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 1.5.6             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Quick (30 mins)   |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _ext-seaslog:

ext/seaslog
+++++++++++

 Extension `Seaslog <https://www.php.net/Seaslog>`_.

An effective,fast,stable log extension for PHP.

.. code-block:: php

   <?php
   $basePath_1 = SeasLog::getBasePath();
   
   SeasLog::setBasePath('/log/base_test');
   $basePath_2 = SeasLog::getBasePath();
   
   var_dump($basePath_1,$basePath_2);
   
   /*
   string(19) /log/seaslog-ciogao
   string(14) /log/base_test
   */
   
   $lastLogger_1 = SeasLog::getLastLogger();
   
   SeasLog::setLogger('testModule/app1');
   $lastLogger_2 = SeasLog::getLastLogger();
   
   var_dump($lastLogger_1,$lastLogger_2);
   /*
   string(7) default
   string(15) testModule/app1
   */
   ?>


See also `ext/SeasLog on Github <https://github.com/SeasX/SeasLog>`_, and `SeasLog <http://seasx.github.io/SeasLog/>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Extensions/Extseaslog |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 1.4.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _ext-sem:

ext/sem
+++++++

 Extension Semaphore, Shared Memory and IPC.

This module provides wrappers for the System V IPC family of functions. It includes semaphores, shared memory and inter-process messaging (IPC).

.. code-block:: php

   <?php
   
   $key         = ftok(__FILE__,'a');
   $semaphore   = sem_get($key);
   sem_acquire($semaphore);
   sem_release($semaphore);
   sem_remove($semaphore);
   
   ?>


See also `Semaphore, Shared Memory and IPC <https://www.php.net/manual/en/book.sem.php>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Extensions/Extsem |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _ext-session:

ext/session
+++++++++++

 Extension ext/session.

Session support in PHP consists of a way to preserve certain data across subsequent accesses.

.. code-block:: php

   <?php
   session_start();
   if (!isset($_SESSION['count'])) {
     $_SESSION['count'] = 0;
   } else {
     $_SESSION['count']++;
   }
   ?>


See also `Session <https://www.php.net/manual/en/book.session.php>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Extensions/Extsession |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _ext-shmop:

ext/shmop
+++++++++

 Extension ext/shmop.

Shmop is an easy to use set of functions that allows PHP to read, write, create and delete Unix shared memory segments.

.. code-block:: php

   <?php
   // Create a temporary file and return its path
   $tmp = tempnam('/tmp', 'PHP');
   
   // Get the file token key
   $key = ftok($tmp, 'a');
   
   // Attach the SHM resource, notice the cast afterwards
   $id = shm_attach($key);
   
   if ($id === false) {
       die('Unable to create the shared memory segment');
   }
   
   // Cast to integer, since prior to PHP 5.3.0 the resource id 
   // is returned which can be exposed when casting a resource
   // to an integer
   $id = (integer) $id;
   ?>


See also `Semaphore, Shared Memory and IPC <https://www.php.net/manual/en/book.sem.php>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Extensions/Extshmop |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.8.4               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _ext-simplexml:

ext/simplexml
+++++++++++++

 Extension ``SimpleXML``.

The ``SimpleXML`` extension provides a very simple and easily usable toolset to convert XML to an object that can be processed with normal property selectors and array iterators.

.. code-block:: php

   <?php
   
   $xml = <<<'XML'
   <?xml version='1.0' standalone='yes' ? >
   <movies>
    <movie>
     <title>PHP: Behind the Parser</title>
     <characters>
      <character>
       <name>Ms. Coder</name>
       <actor>Onlivia Actora</actor>
      </character>
      <character>
       <name>Mr. Coder</name>
       <actor>El Act&#211;r</actor>
      </character>
     </characters>
     <plot>
      So, this language. It's like, a programming language. Or is it a
      scripting language? All is revealed in this thrilling horror spoof
      of a documentary.
     </plot>
     <great-lines>
      <line>PHP solves all my web problems</line>
     </great-lines>
     <rating type="thumbs">7</rating>
     <rating type="stars">5</rating>
    </movie>
   </movies>
   XML;
   
   $movies = new SimpleXMLElement($xml);
   
   echo $movies->movie[0]->plot;
   ?>


See also `SimpleXML <https://www.php.net/manual/en/book.simplexml.php>`_.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Extensions/Extsimplexml |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _ext-snmp:

ext/snmp
++++++++

 Extension `SNMP <https://www.php.net/SNMP>`_.

The `SNMP <https://www.php.net/SNMP>`_ extension provides a very simple and easily usable toolset for managing remote devices via the Simple Network Management Protocol.

.. code-block:: php

   <?php
   $nameOfSecondInterface = snmp3_get('localhost', 'james', 'authPriv', 'SHA', 'secret007', 'AES', 'secret007', 'IF-MIB::ifName.2');
   ?>


See also `Net `SNMP <https://www.php.net/SNMP>`_ <http://www.net-snmp.org/>`_ and `SNMP <https://www.php.net/manual/en/book.snmp.php>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extsnmp |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-soap:

ext/soap
++++++++

 Extension SOAP.

The SOAP extension can be used to write SOAP Servers and Clients. It supports subsets of » SOAP 1.1, » SOAP 1.2 and » WSDL 1.1 specifications.

.. code-block:: php

   <?php
   
   $client = new SoapClient("some.wsdl");
   
   $client = new SoapClient("some.wsdl", array('soap_version'   => SOAP_1_2));
   
   $client = new SoapClient("some.wsdl", array('login'          => "some_name",
                                               'password'       => "some_password"));
   
   ?>


See also `SOAP <https://www.php.net/manual/en/book.soap.php>`_ and `SOAP specifications <https://www.w3.org/TR/soap/>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extsoap |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-sockets:

ext/sockets
+++++++++++

 Extension socket.

The socket extension implements a low-level interface to the socket communication functions based on the popular BSD sockets, providing the possibility to act as a socket server as well as a client.

.. code-block:: php

   <?php
   
   //Example #2 Socket example: Simple TCP/IP client
   //From the PHP manual
   
   error_reporting(E_ALL);
   
   echo "<h2>TCP/IP Connection</h2>\n";
   
   /* Get the port for the WWW service. */
   $service_port = getservbyname('www', 'tcp');
   
   /* Get the IP address for the target host. */
   $address = gethostbyname('www.example.com');
   
   /* Create a TCP/IP socket. */
   $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
   if ($socket === false) {
       echo 'socket_create() failed: reason: ' . socket_strerror(socket_last_error()) . PHP_EOL;
   } else {
       echo 'OK.'.PHP_EOL;
   }
   
   echo 'Attempting to connect to '$address' on port '$service_port'...';
   $result = socket_connect($socket, $address, $service_port);
   if ($result === false) {
       echo 'socket_connect() failed.\nReason: ($result) ' . socket_strerror(socket_last_error($socket)) . '\n';
   } else {
       echo 'OK.'.PHP_EOL;
   }
   
   $in = ""HEAD / HTTP/1.1\r\n"";
   $in .= ""Host: www.example.com\r\n"";
   $in .= ""Connection: Close\r\n\r\n"";
   $out = '';
   
   echo 'Sending HTTP HEAD request...';
   socket_write($socket, $in, strlen($in));
   echo "OK.\n";
   
   echo 'Reading response:\n\n';
   while ($out = socket_read($socket, 2048)) {
       echo $out;
   }
   
   echo 'Closing socket...';
   socket_close($socket);
   echo 'OK.\n\n';
   ?>


See also `Sockets <https://www.php.net/manual/en/book.sockets.php>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Extensions/Extsockets |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _ext-sphinx:

ext/sphinx
++++++++++

 Extension for the `Sphinx <https://www.php.net/Sphinx>`_ search server.

This extension provides bindings for `Sphinx <https://www.php.net/Sphinx>`_ search client library. 

.. code-block:: php

   <?php
   
   $s = new SphinxClient;
   $s->setServer(localhost, 6712);
   $s->setMatchMode(SPH_MATCH_ANY);
   $s->setMaxQueryTime(3);
   
   $result = $s->query(test);
   
   var_dump($result);
   
   ?>


See also `Sphinx Client <https://www.php.net/manual/en/book.sphinx.php>`_ and `Sphinx Search <http://sphinxsearch.com/>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Extensions/Extsphinx |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.11.3               |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _ext-spl:

ext/spl
+++++++

 SPL extension.

The Standard PHP Library (SPL) is a collection of interfaces and classes that are meant to solve common problems.

.. code-block:: php

   <?php
   
   // Example with FilesystemIterator
   $files = new FilesystemIterator('/path/to/dir');
   foreach($files as $file) {
       echo $file->getFilename() . PHP_EOL;
   }
   
   ?>


See also `Standard PHP Library (SPL) <http://www.php.net/manual/en/book.spl.php>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Extensions/Extspl |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _ext-sqlite:

ext/sqlite
++++++++++

 Extension Sqlite 2.

Support for SQLite version 2 databases. The support for this version of Sqlite is not maintained anymore. It is recommended to use ``SQLite3``.

.. code-block:: php

   <?php
   
   if ($db = sqlite_open('mysqlitedb', 0666, $sqliteerror)) { 
       sqlite_query($db, 'CREATE TABLE foo (bar varchar(10))');
       sqlite_query($db, 'INSERT INTO foo VALUES ("fnord")');
       $result = sqlite_query($db, 'select bar from foo');
       var_dump(sqlite_fetch_array($result)); 
   } else {
       die($sqliteerror);
   }
   
   ?>


See also `ext/sqlite <https://www.php.net/manual/en/book.sqlite.php>`_ and `SQLite <http://sqlite.org/>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Extensions/Extsqlite |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Major                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _ext-sqlite3:

ext/sqlite3
+++++++++++

 Extension Sqlite3.

Support for SQLite version 3 databases.

.. code-block:: php

   <?php
   $db = new SQLite3('mysqlitedb.db');
   
   $results = $db->query('SELECT bar FROM foo');
   while ($row = $results->fetchArray()) {
       var_dump($row);
   }
   ?>


See also `ext/sqlite3 <https://www.php.net/manual/en/book.sqlite3.php>`_ and `Sqlite <http://sqlite.org/>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Extensions/Extsqlite3 |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _ext-sqlsrv:

ext/sqlsrv
++++++++++

 Extension for Microsoft SQL Server Driver.

The SQLSRV extension allows you to access Microsoft SQL Server and SQL Azure databases when running PHP on Windows. 

.. code-block:: php

   <?php
   $serverName = 'serverName\sqlexpress';
   $connectionInfo = array( 'Database'=>'dbName', 'UID'=>'username', 'PWD'=>'password' );
   $conn = sqlsrv_connect( $serverName, $connectionInfo);
   if( $conn === false ) {
        die( print_r( sqlsrv_errors(), true));
   }
   
   $sql = 'INSERT INTO Table_1 (id, data) VALUES (?, ?)';
   $params = array(1, 'some data');
   
   $stmt = sqlsrv_query( $conn, $sql, $params);
   if( $stmt === false ) {
        die( print_r( sqlsrv_errors(), true));
   }
   ?>


See also `Microsoft SQL Server Driver <https://www.php.net/sqlsrv>`_ and `PHP Driver for SQL Server Support for LocalDB <http://msdn.microsoft.com/en-us/library/hh487161.aspx>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Extensions/Extsqlsrv |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _ext-ssh2:

ext/ssh2
++++++++

 Extension ext/ssh2.

.. code-block:: php

   <?php
   /* Notify the user if the server terminates the connection */
   function my_ssh_disconnect($reason, $message, $language) {
     printf("Server disconnected with reason code [%d] and message: %s\n",
            $reason, $message);
   }
   
   $methods = array(
     'kex' => 'diffie-hellman-group1-sha1',
     'client_to_server' => array(
       'crypt' => '3des-cbc',
       'comp' => 'none'),
     'server_to_client' => array(
       'crypt' => 'aes256-cbc,aes192-cbc,aes128-cbc',
       'comp' => 'none'));
   
   $callbacks = array('disconnect' => 'my_ssh_disconnect');
   
   $connection = ssh2_connect('shell.example.com', 22, $methods, $callbacks);
   if (!$connection) die('Connection failed');
   ?>


See also `SSH2 functions <https://www.php.net/manual/en/book.ssh2.php>`_ and `ext/ssh2 on PECL <http://pecl.php.net/package/ssh2>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extssh2 |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-standard:

ext/standard
++++++++++++

 Standards PHP functions.

This is not a real PHP extension : it covers the core functions.

.. code-block:: php

   <?php
   /*
   Our php.ini contains the following settings:
   
   display_errors = On
   register_globals = Off
   post_max_size = 8M
   */
   
   echo 'display_errors = ' . ini_get('display_errors') . PHP_EOL;
   echo 'register_globals = ' . ini_get('register_globals') . PHP_EOL;
   echo 'post_max_size = ' . ini_get('post_max_size') . PHP_EOL;
   echo 'post_max_size+1 = ' . (ini_get('post_max_size')+1) . PHP_EOL;
   echo 'post_max_size in bytes = ' . return_bytes(ini_get('post_max_size'));
   
   function return_bytes($val) {
       $val = trim($val);
       $last = strtolower($val[strlen($val)-1]);
       switch($last) {
           // The 'G' modifier is available since PHP 5.1.0
           case 'g':
               $val *= 1024;
           case 'm':
               $val *= 1024;
           case 'k':
               $val *= 1024;
       }
   
       return $val;
   }
   
   ?>


See also `PHP Options/Info Functions <https://www.php.net/manual/en/ref.info.php>`_.

Specs
^^^^^
+-------------+------------------------+
| Short name  | Extensions/Extstandard |
+-------------+------------------------+
| Rulesets    | :ref:`CE`              |
+-------------+------------------------+
| Exakt since | 0.8.4                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Slow (1 hour)          |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _ext-stats:

ext/stats
+++++++++

 Statistics extension.

This extension contains few dozens of functions useful for statistical computations. It is a wrapper around 2 scientific libraries, namely `DCDFLIB <https://people.sc.fsu.edu/~jburkardt/c_src/cdflib/cdflib.html>`_ (Library of C routines for Cumulative Distributions Functions, Inverses, and Other parameters) by B. Brown & J. Lavato and `RANDLIB <http://people.sc.fsu.edu/~jburkardt/f77_src/ranlib/ranlib.html>`_ by Barry Brown, James Lavato & Kathy Russell. 

.. code-block:: php

   <?php
   
   $x = [ 15, 16, 8, 6, 15, 12, 12, 18, 12, 20, 12, 14, ];
   $y = [ 17.24, 15, 14.91, 4.5, 18, 6.29, 19.23, 18.69, 7.21, 42.06, 7.5, 8,];
   
   sprintf(%2.9f, stats_covariance($a_1, $a_2));
   
   ?>


See also `Statistics <https://www.php.net/manual/en/book.stats.php>`_ and `ext/stats <https://pecl.php.net/package/stats>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Extensions/Extstats |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.11.5              |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _string:

String
++++++

 Strings in PHP. Strings are part of the core of PHP, and are not a separate extension.

.. code-block:: php

   <?php
   $str = Mary Had A Little Lamb and She LOVED It So;
   $str = strtolower($str);
   
   echo $str; // Prints mary had a little lamb and she loved it so
   ?>


See also `String functions <https://www.php.net/manual/en/ref.strings.php>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Extensions/Extstring |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.9.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _ext-suhosin:

ext/suhosin
+++++++++++

 Suhosin extension.

Suhosin (pronounced 'su-ho-shin') is an advanced protection system for PHP installations. It was designed to protect servers and users from known and unknown flaws in PHP applications and the PHP core.

.. code-block:: php

   <?php
   
   // sha256 is a ext/suhosin specific function
   $sha256 = sha256($string);
   
   ?>


See also `Suhosin.org <https://suhosin.org/>`_

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Extensions/Extsuhosin |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _ext-svm:

ext/svm
+++++++

 Extension ``SVM``.

``SVM`` is in interface with the ``libsvm``, from . ``libsvm``is a library for Support Vector Machines, a classification tool for machine learning.

.. code-block:: php

   <?php
      $data = array(
          array(-1, 1 => 0.43, 3 => 0.12, 9284 => 0.2),
          array(1, 1 => 0.22, 5 => 0.01, 94 => 0.11),
      );
      
      $svm = new SVM();
      $model = $svm->train($data);
      
      $data = array(1 => 0.43, 3 => 0.12, 9284 => 0.2);
      $result = $model->predict($data);
      var_dump($result);
      $model->save('model.svm');
   ?>


See also `SVM <http://www.php.net/`svm <https://www.php.net/svm>`_>`_, `LIBSVM -- A Library for Support Vector Machines <https://www.csie.ntu.edu.tw/~cjlin/libsvm/>`_, `ext/`svm <https://www.php.net/svm>`_ <https://pecl.php.net/package/`svm <https://www.php.net/svm>`_>`_ and `ianbarber/php-`svm <https://www.php.net/svm>`_ <https://github.com/ianbarber/php-`svm <https://www.php.net/svm>`_>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Extensions/Extsvm |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 1.7.8             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _ext-swoole:

ext/swoole
++++++++++

 Swoole : Production-Grade Async programming Framework for PHP.

Swoole is an event-driven asynchronous & concurrent networking communication framework with high performance written only in C for PHP.

.. code-block:: php

   <?php
   for($i = 0; $i < 100; $i++) {
       Swoole\Coroutine::create(function() use ($i) {
           $redis = new Swoole\Coroutine\Redis();
           $res = $redis->connect('127.0.0.1', 6379);
           $ret = $redis->incr('coroutine');
           $redis->close();
           if ($i == 50) {
               Swoole\Coroutine::create(function() use ($i) {
                   $redis = new Swoole\Coroutine\Redis();
                   $res = $redis->connect('127.0.0.1', 6379);
                   $ret = $redis->set('coroutine_i', 50);
                   $redis->close();
               });
           }
       });
   }
   
   ?>


See also `Swoole <https://www.swoole.com/>`_ and `Swoole src <https://github.com/swoole/swoole-src>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Extensions/Extswoole |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.12.0               |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _ext-tidy:

ext/tidy
++++++++

 Extension `Tidy <https://www.php.net/tidy>`_.

`Tidy <https://www.php.net/tidy>`_ is a binding for the `Tidy <https://www.php.net/tidy>`_ HTML clean and repair utility which allows you to not only clean and otherwise manipulate HTML documents, but also traverse the document tree.

.. code-block:: php

   <?php
   ob_start();
   ?>

<html>a html document</html>
.. code-block:: php

   <?php
   $html = ob_get_clean();
   
   // Specify configuration
   $config = array(
              'indent'         => true,
              'output-xhtml'   => true,
              'wrap'           => 200);
   
   // Tidy
   $tidy = new tidy;
   $tidy->parseString($html, $config, 'utf8');
   $tidy->cleanRepair();
   
   // Output
   echo $tidy;
   ?>


See also `Tidy <https://www.php.net/manual/en/book.`tidy <https://www.php.net/tidy>`_.php>`_ and 
         `HTML-`tidy <https://www.php.net/tidy>`_ <http://www.html-`tidy <https://www.php.net/tidy>`_.org/>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Exttidy |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-tokenizer:

ext/tokenizer
+++++++++++++

 Extension Tokenizer.

The Tokenizer functions provide an interface to the PHP tokenizer embedded in the Zend Engine.

.. code-block:: php

   <?php
   /*
   * T_ML_COMMENT does not exist in PHP 5.
   * The following three lines define it in order to
   * preserve backwards compatibility.
   *
   * The next two lines define the PHP 5 only T_DOC_COMMENT,
   * which we will mask as T_ML_COMMENT for PHP 4.
   */
   if (!defined('T_ML_COMMENT')) {
      define('T_ML_COMMENT', T_COMMENT);
   } else {
      define('T_DOC_COMMENT', T_ML_COMMENT);
   }
   
   $source = file_get_contents('example.php');
   $tokens = token_get_all($source);
   
   foreach ($tokens as $token) {
      if (is_string($token)) {
          // simple 1-character token
          echo $token;
      } else {
          // token array
          list($id, $text) = $token;
   
          switch ($id) { 
              case T_COMMENT: 
              case T_ML_COMMENT: // we\'ve defined this
              case T_DOC_COMMENT: // and this
                  // no action on comments
                  break;
   
              default:
                  // anything else -> output 'as is'
                  echo $text;
                  break;
          }
      }
   }
   ?>


See also `tokenizer <http://www.php.net/tokenizer>`_.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Extensions/Exttokenizer |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _ext-tokyotyrant:

ext/tokyotyrant
+++++++++++++++

 Extension for Tokyo Tyrant.

tokyo_tyrant extension provides a wrapper for Tokyo Tyrant client libraries. 

.. code-block:: php

   <?php
   $tt = new TokyoTyrant("localhost");
   $tt->put("key", "value");
   echo $tt->get("key");
   ?>


See also `tokyo_tyrant <https://www.php.net/manual/en/book.tokyo-tyrant.php>`_ and `Tokyo cabinet <http://fallabs.com/tokyocabinet/>`_.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Extensions/Exttokyotyrant |
+-------------+---------------------------+
| Rulesets    | :ref:`CE`                 |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _ext-trader:

ext/trader
++++++++++

 Extension trader.

The trader extension is a free open source stock library based on TA-Lib. It's dedicated to trading software developers requiring to perform technical analysis of financial market data. 

.. code-block:: php

   <?php
   
   // get_data() reads the data from a source 
   var_dump(trader_avgprice(
   	get_data(open, $data0),
   	get_data(high, $data0),
   	get_data(low, $data0),
   	get_data(close, $data0)
   ));
   
   ?>


See also `trader (PECL) <https://pecl.php.net/package/trader>`_, 'TA-lib <http://www.ta-lib.org/>`_ and `ext/trader <https://www.php.net/manual/en/book.trader.php>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Extensions/Exttrader |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _ext-uopz:

ext/uopz
++++++++

 Extension UOPZ : User Operations for Zend.

The uopz extension is focused on providing utilities to aid with unit testing PHP code.

It supports the following activities: Intercepting function execution, Intercepting object creation, Hooking into function execution, Manipulation of function statics, Manipulation of function flags, Redefinition of constants, Deletion of constants, Runtime creation of functions and methods, 

.. code-block:: php

   <?php
   // The example is extracted from the UOPZ extension test suite : tests/001.phpt
   class Foo {
   	public function bar(int $arg) : int {
   		return $arg;
   	}
   }
   var_dump(uopz_set_return(Foo::class, 'bar', true));
   $foo = new Foo();
   var_dump($foo->bar(1));
   uopz_set_return(Foo::class, 'bar', function(int $arg) : int {
   	return $arg * 2;
   }, true);
   var_dump($foo->bar(2));
   try {
   	uopz_set_return(Foo::class, 'nope', 1);
   } catch(Throwable $t) {
   	var_dump($t->getMessage());
   }
   class Bar extends Foo {}
   try {
   	uopz_set_return(Bar::class, 'bar', null);
   } catch (Throwable $t) {
   	var_dump($t->getMessage());
   }
   
   	uopz_set_something(Bar::class, 'bar', null);
   
   ?>


See also `ext/uopz <https://pecl.php.net/package/uopz>`_ and `User Operations for Zend <https://github.com/krakjoe/uopz>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extuopz |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 1.1.7              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-uuid:

ext/uuid
++++++++

 Extension ``UUID``. A universally unique identifier (UUID) is a 128-bit number used to identify information in computer systems.

An interface to the libuuid system library. The libuuid library is used to generate unique identifiers for objects that may be accessible beyond the local system. The Linux implementation was created to uniquely identify ext2 filesystems created by a machine. This library generates UUIDs compatible with those created by the Open Software Foundation (OSF) Distributed Computing Environment (DCE) utility uuidgen.

.. code-block:: php

   <?php
       // example from the test suitee of the extension.
       
       // check basic format of generated UUIDs
       $uuid = uuid_create();
       if (preg_match("/[[:xdigit:]]{8}-[[:xdigit:]]{4}-[[:xdigit:]]{4}-[[:xdigit:]]{4}-[[:xdigit:]]{12}/", $uuid)) {
               echo "basic format ok\n";
       } else {
               echo "basic UUID format check failed, generated UUID was $uuid\n";
       }
       
   ?>


See also `libuuid <https://linux.`die <https://www.php.net/die>`_.net/man/3/libuuid>`_ and 
        `ext/uuid <https://github.com/php/pecl-networking-uuid>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extuuid |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 1.7.9              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-v8js:

ext/v8js
++++++++

 Extension `v8js <https://www.php.net/v8js>`_.

This extension embeds the `V8 Javascript Engine <https://bugs.chromium.org/p/v8/issues/list>`_ into PHP.

.. code-block:: php

   <?php
   
   $v8 = new V8Js();
   
   /* basic.js */
   $JS = <<< EOT
   len = print('Hello' + ' ' + 'World!' + '\n');
   len;
   EOT;
   
   try {
     var_dump($v8->executeString($JS, 'basic.js'));
   } catch (V8JsException $e) {
     var_dump($e);
   }
   
   ?>


See also `V8 Javascript Engine Integration <https://www.php.net/manual/en/book.`v8js <https://www.php.net/v8js>`_.php>`_, 
         `V8 Javascript Engine for PHP <https://github.com/phpv8/`v8js <https://www.php.net/v8js>`_>`_ and 
         `pecl `v8js <https://www.php.net/v8js>`_ <https://pecl.php.net/package/`v8js <https://www.php.net/v8js>`_>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extv8js |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-varnish:

ext/varnish
+++++++++++

 Extension PHP for varnish.

Varnish Cache is an open source, state of the art web application accelerator. The extension makes it possible to interact with a running varnish instance through TCP socket or shared memory.

.. code-block:: php

   <?php
       $args = array(
           VARNISH_CONFIG_HOST => '::1',
           VARNISH_CONFIG_PORT => 6082,
           VARNISH_CONFIG_SECRET => '5174826b-8595-4958-aa7a-0609632ad7ca',
           VARNISH_CONFIG_TIMEOUT => 300,
       );
       $va = new VarnishAdmin($args);
   ?>


See also `ext/varnish <https://www.php.net/manual/en/book.varnish.php>`_ and `pecl/Varnish <http://svn.php.net/viewvc/pecl/varnish/trunk/tests/>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Extensions/Extvarnish |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 1.1.7                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _ext-vips:

ext/vips
++++++++

 Extension VIPS.

The VIPS image processing system is a very fast, multi-threaded image processing library with low memory needs.

.. code-block:: php

   <?php
   	dl('vips.' . PHP_SHLIB_SUFFIX);
   	$x = vips_image_new_from_file($argv[1])[out];
   	vips_image_write_to_file($x, $argv[2]);
   ?>


See also `php-vips-ext <https://github.com/jcupitt/php-vips-ext>`_, `libvips <https://jcupitt.github.io/libvips/>`_ and `libvips adapter for PHP Imagine <https://www.liip.ch/en/blog/libvips-adapter-for-php-imagine>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extvips |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 1.0.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-wasm:

ext/wasm
++++++++

 Extension WASM.

The goal of the project is to be able to run WebAssembly binaries from PHP directly. So much fun coming!

From the php-ext-wasm documentation : 

.. code-block:: php

   <?php
   
   //There is a toy program in examples/simple.rs, written in Rust (or any other language that compiles to WASM):
   // Stored in file __DIR__ . '/simple.wasm'
   /*
   #[no_mangle]
   pub extern C fn sum(x: i32, y: i32) -> i32 {
       x + y
   }
   */
   
   $instance = new WASM\Instance(__DIR__ . '/simple.wasm');
   
   var_dump(
       $instance->sum(5, 37) // 42!
   );
   
   ?>


See also `php-ext-wasm <https://github.com/Hywan/php-ext-wasm>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extwasm |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 1.5.7              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Quick (30 mins)    |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-wddx:

ext/wddx
++++++++

 Extension WDDX.

The Web Distributed Data Exchange, or WDDX, is a free, open XML-based technology that allows Web applications created with any platform to easily exchange data with one another over the Web.

.. code-block:: php

   <?php
     echo wddx_serialize_value("PHP to WDDX packet example", "PHP packet");
   ?>


See also `Wddx on PHP <https://www.php.net/manual/en/intro.wddx.php>`_ and `WDDX <http://www.openwddx.org/>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extwddx |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-weakref:

ext/weakref
+++++++++++

 Weak References for PHP.

Weak references provide a non-intrusive gateway to ephemeral objects. Unlike normal (strong) references, weak references do not prevent the garbage collector from freeing that object. For this reason, an object may be destroyed even though a weak reference to that object still exists. In such conditions, the weak reference seamlessly becomes invalid.

.. code-block:: php

   <?php
   class MyClass {
       public function __destruct() {
           echo Destroying object!\n;
       }
   }
   
   $o1 = new MyClass;
   
   $r1 = new WeakRef($o1);
   
   if ($r1->valid()) {
       echo Object still exists!\n;
       var_dump($r1->get());
   } else {
       echo Object is dead!\n;
   }
   
   unset($o1);
   
   if ($r1->valid()) {
       echo Object still exists!\n;
       var_dump($r1->get());
   } else {
       echo Object is dead!\n;
   }
   ?>


See also `Weak references <https://www.php.net/manual/en/book.`weakref <https://www.php.net/weakref>`_.php>`_ and 
         `PECL extension that implements weak references and weak maps in PHP <https://github.com/colder/php-`weakref <https://www.php.net/weakref>`_>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Extensions/Extweakref |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 1.6.5                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Quick (30 mins)       |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _ext-wikidiff2:

ext/wikidiff2
+++++++++++++

 Extension wikidiff2.

Wikidiff2 is a PHP and HHVM module that provides the external diff engine for MediaWiki. 

.. code-block:: php

   <?php
   $x = <<<EOT
   foo bar
   baz
   quux
   bang
   EOT;
   
   $y = <<<EOT
   foo test
   baz
   test
   bang
   EOT;
   
   print wikidiff2_inline_diff( $x, $y, 2 );
   ?>


See also `wikidiff2 <https://www.mediawiki.org/wiki/Extension:Wikidiff2>`_ and `wikidiff2 (C ext) <https://github.com/Seb35/wikidiff2>`_.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Extensions/Extwikidiff2 |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _ext-wincache:

ext/wincache
++++++++++++

 Extension Wincache.

The `Wincache extension for PHP <http://www.php.net/wincache>`_ is a PHP accelerator that is used to increase the speed of PHP applications running on Windows and Windows Server.

.. code-block:: php

   <?php
   $fp = fopen('/tmp/lock.txt', 'r+');
   if (wincache_lock(“lock_txt_lock”)) { // do an exclusive lock
       ftruncate($fp, 0); // truncate file
       fwrite($fp, 'Write something here\n');
       wincache_unlock(“lock_txt_lock”); // release the lock
   } else {
       echo 'Couldn't get the lock!';
   }
   fclose($fp);
   ?>


See also `WinCache Homepage <https://www.iis.net/downloads/microsoft/wincache-extension>`_.

Specs
^^^^^
+-------------+------------------------+
| Short name  | Extensions/Extwincache |
+-------------+------------------------+
| Rulesets    | :ref:`CE`              |
+-------------+------------------------+
| Exakt since | 0.8.4                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Slow (1 hour)          |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _ext-xattr:

ext/xattr
+++++++++

 Extensions xattr.

The xattr extension allows for the manipulation of extended attributes on a filesystem.

.. code-block:: php

   <?php
   $file = 'my_favourite_song.wav';
   xattr_set($file, 'Artist', 'Someone');
   xattr_set($file, 'My ranking', 'Good');
   xattr_set($file, 'Listen count', '34');
   
   /* ... other code ... */
   
   printf('You\'ve played this song %d times', xattr_get($file, 'Listen count')); 
   ?>


See also `xattr <https://www.php.net/manual/en/book.xattr.php>`_ and `Extended attributres <https://en.wikipedia.org/wiki/Extended_file_attributes>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Extensions/Extxattr |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.12.4              |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _ext-xcache:

ext/xcache
++++++++++

 Extension Xcache.

XCache is a open-source opcode cacher, which means that it accelerates the performance of PHP on servers. 

.. code-block:: php

   <?php
   if (!xcache_isset(count)) {
     xcache_set(count, load_count_from_mysql());
   }
   ?>

This guest book has been visited .. code-block:: php

   <?php echo $count = xcache_inc(count); ?>
 times.
.. code-block:: php

   <?php
   // save every 100 hits
   if (($count % 100) == 0) {
     save_count_to_mysql($count);
   }
   ?>


See also `xcache <https://xcache.lighttpd.net/>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Extensions/Extxcache |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _ext-xdebug:

ext/xdebug
++++++++++

 Xdebug extension.

The Xdebug is a extension PHP which provides debugging and profiling capabilities.

.. code-block:: php

   <?php
   class Strings
   {
       static function fix_string($a)
       {
           echo
               xdebug_call_class().
               "::".
               xdebug_call_function().
               " is called at ".
               xdebug_call_file().
               ":".
               xdebug_call_line();
       }
   }
   
   $ret = Strings::fix_string( 'Derick' );
   ?>


See also `Xdebug <https://xdebug.org/>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Extensions/Extxdebug |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _ext-xdiff:

ext/xdiff
+++++++++

 Extension xdiff.

xdiff extension enables you to create and apply patch files containing differences between different revisions of files.

.. code-block:: php

   <?php
   $old_version = 'my_script-1.0.php';
   $patch = 'my_script.patch';
   
   $errors = xdiff_file_patch($old_version, $patch, 'my_script-1.1.php');
   if (is_string($errors)) {
      echo 'Rejects:'.PHP_EOL;
      echo $errors;
   }
   
   ?>


See also `xdiff <https://www.php.net/manual/en/book.xdiff.php>`_ and `libxdiff <http://www.xmailserver.org/xdiff-lib.html>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Extensions/Extxdiff |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.8.4               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _ext-xhprof:

ext/xhprof
++++++++++

 Extension xhprof.

XHProf is a light-weight hierarchical and instrumentation based profiler. 

.. code-block:: php

   <?php
   xhprof_enable(XHPROF_FLAGS_CPU + XHPROF_FLAGS_MEMORY);
   
   for ($i = 0; $i <= 1000; $i++) {
       $a = $i * $i;
   }
   
   $xhprof_data = xhprof_disable();
   
   $XHPROF_ROOT = '/tools/xhprof/';
   include_once $XHPROF_ROOT . '/xhprof_lib/utils/xhprof_lib.php';
   include_once $XHPROF_ROOT . '/xhprof_lib/utils/xhprof_runs.php';
   
   $xhprof_runs = new XHProfRuns_Default();
   $run_id = $xhprof_runs->save_run($xhprof_data, 'xhprof_testing');
   
   echo 'http://localhost/xhprof/xhprof_html/index.php?run={$run_id}&source=xhprof_testing'.PHP_EOL;
   
   ?>


See also `XHprof Documentation <http://web.archive.org/web/20110514095512/http://mirror.facebook.net/facebook/xhprof/doc.html>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Extensions/Extxhprof |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _ext-xml:

ext/xml
+++++++

 Extension xml (Parser).

This PHP extension implements support for James Clark's expat in PHP. This toolkit lets you parse, but not validate, XML documents. 

.. code-block:: php

   <?php
   $file = data.xml;
   $depth = array();
   
   function startElement($parser, $name, $attrs)
   {
       global $depth;
   
       if (!isset($depth[$parser])) {
           $depth[$parser] = 0;
       }
   
       for ($i = 0; $i < $depth[$parser]; $i++) {
           echo ;
       }
       echo $name\n;
       $depth[$parser]++;
   }
   
   function endElement($parser, $name)
   {
       global $depth;
       $depth[$parser]--;
   }
   
   $xml_parser = xml_parser_create();
   xml_set_element_handler($xml_parser, startElement, endElement);
   if (!($fp = fopen($file, r))) {
       die(could not open XML input);
   }
   
   while ($data = fread($fp, 4096)) {
       if (!xml_parse($xml_parser, $data, feof($fp))) {
           die(sprintf(XML error: %s at line %d,
                       xml_error_string(xml_get_error_code($xml_parser)),
                       xml_get_current_line_number($xml_parser)));
       }
   }
   xml_parser_free($xml_parser);
   ?>


See also `XML Parser <http://www.php.net/manual/en/book.xml.php>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Extensions/Extxml |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _ext-xmlreader:

ext/xmlreader
+++++++++++++

 Extension XMLReader.

The XMLReader extension is an XML Pull parser. The reader acts as a cursor going forward on the document stream and stopping at each node on the way.

.. code-block:: php

   <?php
   
       $xmlreader = new XMLReader();
       $xmlreader->xml("<xml><div>Content</div></xml>");
       $xmlreader->read();
       $xmlreader->read();
       $xmlreader->readString();
   
   ?>


See also `xmlreader <http://www.php.net/manual/en/book.xmlreader.php>`_.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Extensions/Extxmlreader |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _ext-xmlrpc:

ext/xmlrpc
++++++++++

 Extension ext/xmlrpc.

This extension can be used to write XML-RPC servers and clients.

.. code-block:: php

   <?php
   $request = xmlrpc_encode_request('method', array(1, 2, 3));
   $context = stream_context_create(array('http' => array(
       'method' => 'POST',
       'header' => 'Content-Type: text/xml',
       'content' => $request
   )));
   $file = file_get_contents('http://www.example.com/xmlrpc', false, $context);
   $response = xmlrpc_decode($file);
   if ($response && xmlrpc_is_fault($response)) {
       trigger_error('xmlrpc: '.$response['faultString'].' ('.$response['faultCode']));
   } else {
       print_r($response);
   }
   ?>


See also `XML-RPC <http://www.php.net/manual/en/book.xmlrpc.php>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Extensions/Extxmlrpc |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _ext-xmlwriter:

ext/xmlwriter
+++++++++++++

 Extension ext/xmlwriter.

The XMLWriter extension wraps the libxml xmlWriter API inside PHP.

.. code-block:: php

   <?php
   $xw = xmlwriter_open_memory();
   xmlwriter_set_indent($xw, TRUE);
   xmlwriter_start_document($xw, NULL, 'UTF-8');
   xmlwriter_start_element($xw, 'root');
   xmlwriter_write_attribute_ns($xw, 'prefix', '', 'http://www.php.net/uri');
   xmlwriter_start_element($xw, 'elem1');
   xmlwriter_write_attribute($xw, 'attr1', 'first');
   xmlwriter_end_element($xw);
   xmlwriter_full_end_element($xw);
   xmlwriter_end_document($xw);
   $output = xmlwriter_flush($xw, true);
   print $output;
   // write attribute_ns without start_element first
   $xw = xmlwriter_open_memory();
   var_dump(xmlwriter_write_attribute_ns($xw, 'prefix', 'id', 'http://www.php.net/uri', 'elem1'));
   print xmlwriter_output_memory($xw);
   ?>


See also `XMLWriter <https://www.php.net/manual/en/book.xmlwriter.php>`_ and `Module xmlwriter from libxml2 <http://xmlsoft.org/html/libxml-xmlwriter.html>`_.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Extensions/Extxmlwriter |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _ext-xsl:

ext/xsl
+++++++

 Extension XSL.

The XSL extension implements the XSL standard, performing XSLT transformations using the libxslt library.

.. code-block:: php

   <?php
   
   // Example from the PHP manual
   
   $xmldoc = new DOMDocument();
   $xsldoc = new DOMDocument();
   $xsl = new XSLTProcessor();
   
   $xmldoc->loadXML('fruits.xml');
   $xsldoc->loadXML('fruits.xsl');
   
   libxml_use_internal_errors(true);
   $result = $xsl->importStyleSheet($xsldoc);
   if (!$result) {
       foreach (libxml_get_errors() as $error) {
           echo "Libxml error: {$error->message}\n";
       }
   }
   libxml_use_internal_errors(false);
   
   if ($result) {
       echo $xsl->transformToXML($xmldoc);
   }
   
   ?>


See also `XSL extension <https://www.php.net/manual/en/intro.xsl.php>`_;

Specs
^^^^^
+-------------+-------------------+
| Short name  | Extensions/Extxsl |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _ext-xxtea:

ext/xxtea
+++++++++

 Extension xxtea : XXTEA encryption algorithm extension for PHP.

XXTEA is a fast and secure encryption algorithm. This is a XXTEA extension for PHP.
It is different from the original XXTEA encryption algorithm. It encrypts and decrypts string instead of uint32 array, and the key is also string.

.. code-block:: php

   <?php
   // Example is extracted from the xxtea repository on github : tests/xxtea.phpt
   
   $str = 'Hello World! 你好，中国🇨🇳！';
   $key = '1234567890';
   $base64 = 'D4t0rVXUDl3bnWdERhqJmFIanfn/6zAxAY9jD6n9MSMQNoD8TOS4rHHcGuE=';
   $encrypt_data = xxtea_encrypt($str, $key);
   $decrypt_data = xxtea_decrypt($encrypt_data, $key);
   if ($str == $decrypt_data && base64_encode($encrypt_data) == $base64) {
       echo 'success!';
   } else {
       echo base64_encode($encrypt_data);
       echo 'fail!';
   }
   ?>


See also `PECL ext/xxtea <https://pecl.php.net/package/xxtea>`_ and `ext/xxtea on Github <https://github.com/xxtea/xxtea-pecl>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Extensions/Extxxtea |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 1.1.7               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _ext-yaml:

ext/yaml
++++++++

 Extension YAML.

This extension implements the `YAML Ain't Markup Language <http://www.yaml.org/>`_ (YAML) data serialization standard. Parsing and emitting are handled by the `LibYAML <http://pyyaml.org/wiki/LibYAML>`_ library.

.. code-block:: php

   <?php
   $addr = array(
       'given' => 'Chris',
       'family'=> 'Dumars',
       'address'=> array(
           'lines'=> '458 Walkman Dr.
           Suite #292',
           'city'=> 'Royal Oak',
           'state'=> 'MI',
           'postal'=> 48046,
         ),
     );
   $invoice = array (
       'invoice'=> 34843,
       'date'=> '2001-01-23',
       'bill-to'=> $addr,
       'ship-to'=> $addr,
       'product'=> array(
           array(
               'sku'=> 'BL394D',
               'quantity'=> 4,
               'description'=> 'Basketball',
               'price'=> 450,
             ),
           array(
               'sku'=> 'BL4438H',
               'quantity'=> 1,
               'description'=> 'Super Hoop',
               'price'=> 2392,
             ),
         ),
       'tax'=> 251.42,
       'total'=> 4443.52,
       'comments'=> 'Late afternoon is best. Backup contact is Nancy Billsmer @ 338-4338.',
       );
   
   // generate a YAML representation of the invoice
   $yaml = yaml_emit($invoice);
   var_dump($yaml);
   
   // convert the YAML back into a PHP variable
   $parsed = yaml_parse($yaml);
   
   // check that roundtrip conversion produced an equivalent structure
   var_dump($parsed == $invoice);
   ?>



See also `YAML <https://www.php.net/manual/en/book.yaml.php>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extyaml |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-yis:

ext/yis
+++++++

 Yellow Pages extensions (NIS).

NIS (formerly called Yellow Pages) allows network management of important administrative files (e.g. the password file).

.. code-block:: php

   <?php
   $entry = yp_first($domain, 'passwd.byname');
   
   $key = key($entry);
   $value = $entry[$key];
   
   echo 'First entry in this map has key ' . $key . ' and value ' . $value;
   ?>


See also `The Linux NIS(YP)/NYS/NIS+ HOWTO <http://www.tldp.org/HOWTO/NIS-HOWTO/index.html>`_ and `YP/NIS <https://www.php.net/manual/en/book.nis.php>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Extensions/Extyis |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _ext-zbarcode:

ext/zbarcode
++++++++++++

 Extension Zbarcode. 

PHP extension for reading barcodes.

.. code-block:: php

   <?php
   /* Create new image object */
   $image = new ZBarCodeImage('test.jpg');
   
   /* Create a barcode scanner */
   $scanner = new ZBarCodeScanner();
   
   /* Scan the image */
   $barcode = $scanner->scan($image);
   
   /* Loop through possible barcodes */
   if (!empty($barcode)) {
   	foreach ($barcode as $code) {
   		printf('Found type %s barcode with data %s\n', $code['type'], $code['data']);
   	}
   }
   ?>


See also `php-zbarcode <https://github.com/mkoppanen/php-zbarcode>`_.

Specs
^^^^^
+-------------+------------------------+
| Short name  | Extensions/Extzbarcode |
+-------------+------------------------+
| Rulesets    | :ref:`CE`              |
+-------------+------------------------+
| Exakt since | 0.9.5                  |
+-------------+------------------------+
| Php Version | 7.0+                   |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Slow (1 hour)          |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _ext-zend\_monitor:

ext/zend_monitor
++++++++++++++++

 Extension ``zend_monitor``. 

See also `Zend Monitor - PHP API <http://files.zend.com/help/Zend-Server/content/zendserverapi/zend_monitor-php_api.htm>`_.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Extensions/Extzendmonitor |
+-------------+---------------------------+
| Rulesets    | :ref:`CE`                 |
+-------------+---------------------------+
| Exakt since | 1.7.9                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _ext-zip:

ext/zip
+++++++

 Extension ext/zip.

This extension enables you to transparently read or write ZIP compressed archives and the files inside them.

.. code-block:: php

   <?php
   
   $zip = new ZipArchive();
   $filename = './test112.zip';
   
   if ($zip->open($filename, ZipArchive::CREATE)!==TRUE) {
       exit('cannot open <$filename>');
   }
   
   $zip->addFromString('testfilephp.txt' . time(), '#1 This is a test string added as testfilephp.txt.'.PHP_EOL);
   $zip->addFromString('testfilephp2.txt' . time(), '#2 This is a test string added as testfilephp2.txt.'.PHP_EOL);
   $zip->addFile($thisdir . '/too.php','/testfromfile.php');
   echo 'numfiles: ' . $zip->numFiles . PHP_EOL;
   echo 'status:' . $zip->status . PHP_EOL;
   $zip->close();
   ?>


See also `Zip <https://www.php.net/manual/en/book.zip.php>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Extensions/Extzip |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | Very high         |
+-------------+-------------------+


.. _ext-zlib:

ext/zlib
++++++++

 Extension ext/zlib.

.. code-block:: php

   <?php
   
   $filename = tempnam('/tmp', 'zlibtest') . '.gz';
   echo "<html>\n<head></head>\n<body>\n<pre>\n";
   $s = "Only a test, test, test, test, test, test, test, test!\n";
   
   // open file for writing with maximum compression
   $zp = gzopen($filename, 'w9');
   
   // write string to file
   gzwrite($zp, $s);
   
   // close file
   gzclose($zp);
   
   ?>


See also `Zlib <https://www.php.net/manual/en/book.zlib.php>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Extensions/Extzlib |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _ext-0mq:

ext/0mq
+++++++

 Extension ext/zmq for ``0mq``.

``ØMQ is a software library that lets you quickly design and implement a fast message-based application.`` 

.. code-block:: php

   <?php
   
   // Example from https://github.com/kuying/ZeroMQ/blob/d80dcc3dc1c14a343ca90bbd656b98fd55366548/zguide/examples/PHP/msgqueue.php
       /*
        *  Simple message queuing broker
        *  Same as request-reply broker but using QUEUE device
        * @author Ian Barber <ian(dot)barber(at)gmail(dot)com>
        */
       $context = new ZMQContext();
       //  Socket facing clients
       $frontend = $context->getSocket(ZMQ::SOCKET_ROUTER);
       $frontend->bind(tcp://*:5559);
       //  Socket facing services
       $backend = $context->getSocket(ZMQ::SOCKET_DEALER);
       $backend->bind(tcp://*:5560);
       //  Start built-in device
       new ZMQDevice($frontend, $backend);
   
   ?>


See also `ZeroMQ <http://zeromq.org/>`_ and `ZMQ <https://www.php.net/manual/en/book.zmq.php>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Extensions/Extzmq |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _ext-zookeeper:

ext/zookeeper
+++++++++++++

 Extension for Apache `Zookeeper <https://www.php.net/Zookeeper>`_. 

ZooKeeper is an Apache project that enables centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services.

.. code-block:: php

   <?php
   $zookeeper = new Zookeeper('locahost:2181');
   $path = '/path/to/node';
   $value = 'nodevalue';
   $zookeeper->set($path, $value);
   
   $r = $zookeeper->get($path);
   if ($r)
     echo $r;
   else
     echo 'ERR';
   ?>


See also `ext/zookeeper <https://www.php.net/zookeeper>`_, 
         `Install `Zookeeper <https://www.php.net/Zookeeper>`_ PHP Extension <https://blog.programster.org/install-zookeeper-php-extension>`_
         `Zookeeper <https://zookeeper.apache.org/>`_ and .

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Extensions/Extzookeeper |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 1.2.5                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _definitions-only:

Definitions Only
++++++++++++++++

 File is definition only.

Definition-only files only include structure definitions : class, functions, traits, interfaces, constants, global, declare(), use and include().

Some functioncalls are also considered definition only, as they configure PHP, but don't process data : 
* `ini_set() <https://www.php.net/ini_set>`_
* error_reporting
* `register_shutdown_function() <https://www.php.net/register_shutdown_function>`_
* set_session_handler()
* `set_error_handler() <https://www.php.net/set_error_handler>`_
* `spl_autoload_register() <https://www.php.net/spl_autoload_register>`_


File A : 
.. code-block:: php

   <?php
   
   // This file has only definitions
   function foo() {}
   
   define('a', 1);
   
   class bar {}
   
   ?>


File B : 
.. code-block:: php

   <?php
   
   // This file has only definitions
   function foo() {}
   
   define('a', 1);
   
   class bar {}
   
   ?>

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Files/DefinitionsOnly |
+-------------+-----------------------+
| Rulesets    | none                  |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Major                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _global-code-only:

Global Code Only
++++++++++++++++

 This file has only global code.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Files/GlobalCodeOnly |
+-------------+----------------------+
| Rulesets    | none                 |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _inclusion-wrong-case:

Inclusion Wrong Case
++++++++++++++++++++

 Inclusion should follow exactly the case of included files and path. This prevents the infamous case-sensitive filesystem bug, where files are correctly included in a case-insensitive system, and failed to be when moved to production.

.. code-block:: php

   <?php
   
   // There must exist a path called path/to and a file library.php with this case
   include path/to/library.php;
   
   // Error on the case, while the file does exist
   include path/to/LIBRARY.php;
   
   // Error on the case, on the PATH
   include path/TO/library.php;
   
   ?>


See also `include_once <https://www.php.net/manual/en/function.include-once.php>`_, about case sensitivity and inclusions.



Suggestions
^^^^^^^^^^^

* Make the inclusion string identical to the file name. 
* Change the name of the file to reflect the actual inclusion. This is the best way when a naming convention has been set up for the project, and the file doesn't adhere to it. Remember to change all other inclusion.

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Files/InclusionWrongCase |
+-------------+--------------------------+
| Rulesets    | :ref:`Analyze`           |
+-------------+--------------------------+
| Exakt since | 1.1.1                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Major                    |
+-------------+--------------------------+
| Time To Fix | Slow (1 hour)            |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _is-cli-script:

Is CLI Script
+++++++++++++

 Mark a file as a CLI script, based on the usage of #!.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Files/IsCliScript |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _file-is-component:

File Is Component
+++++++++++++++++

 Check that a file only contains definition elements, such as traits, interfaces, classes, constants, global variables, use or inclusions. 

Such a file is a component, that may be included in some other code and used. By itself, it doesn't run.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Files/IsComponent |
+-------------+-------------------+
| Rulesets    | none              |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _missing-include:

Missing Include
+++++++++++++++

 The included files doesn't exists in the repository. The inclusions target a files that doesn't exist.

The analysis works with every type of inclusion : include(), require(), include_once() and require_once(). It also works with parenthesis when used as parameter delimiter.

The analysis doesn't take into account ``include_path``. This may yield false positives.

.. code-block:: php

   <?php
   
   include 'non_existent.php';
   
   // variables are not resolved. This won't be reported.
   require ($path.'non_existent.php');
   
   ?>


Missing included files may lead to a fatal error, a warning or other error later in the execution.

+---------------------------+---------+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Name                      | Default | Type   | Description                                                                                                                                                                                                                                                                                                                                                                                    |
+---------------------------+---------+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| constant_or_variable_name | 100     | string | Literal value to be used when including files. For example, by configuring 'Files_MissingInclude["HOME_DIR"] = "/tmp/myDir/";', then 'include HOME_DIR . "my_class.php"; will be actually be used as '/tmp/myDir/my_class.php'. Constants must be configured with their correct case. Variable must be configured with their initial '$'. Configure any number of variable and constant names. |
+---------------------------+---------+--------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+



Specs
^^^^^
+-------------+----------------------+
| Short name  | Files/MissingInclude |
+-------------+----------------------+
| Rulesets    | :ref:`Analyze`       |
+-------------+----------------------+
| Exakt since | 1.1.2                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Critical             |
+-------------+----------------------+
| Time To Fix | Instant (5 mins)     |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _not-definitions-only:

Not Definitions Only
++++++++++++++++++++

 Files should only include definitions (class, functions, traits, interfaces, constants), or global instructions, but not both. 

.. code-block:: php

   <?php
   // This whole script is a file
   
   // It contains definitions and global code
   class foo {
       static public $foo = null;
   }
   //This can be a singleton creation
   foo::$foo = new foo();
   
   trait t {}
   
   class bar {}
   
   ?>


Within this context, globals, use, and namespaces instructions are not considered a warning.

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Files/NotDefinitionsOnly |
+-------------+--------------------------+
| Rulesets    | :ref:`CE`                |
+-------------+--------------------------+
| Exakt since | 0.8.4                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Slow (1 hour)            |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _external-config-files:

External Config Files
+++++++++++++++++++++

 List services being used in this code repository, based on configuration files that are committed. 

For example, a .git folder is an artefact of a GIT repository.

Specs
^^^^^
+-------------+----------------+
| Short name  | Files/Services |
+-------------+----------------+
| Rulesets    | none           |
+-------------+----------------+
| Exakt since | 0.8.4          |
+-------------+----------------+
| Php Version | All            |
+-------------+----------------+
| Severity    | Minor          |
+-------------+----------------+
| Time To Fix | Slow (1 hour)  |
+-------------+----------------+
| Precision   | High           |
+-------------+----------------+


.. _add-default-value:

Add Default Value
+++++++++++++++++

 Parameter in methods definition may receive a default value. This allows the called method to set a value when the parameter is omitted. 

.. code-block:: php

   <?php
   
   function foo($i) {
       if (!is_integer($i)) {
           $i = 0;
       }
   }
   
   ?>


See also `Function arguments <https://www.php.net/manual/en/functions.arguments.php>`_.


Suggestions
^^^^^^^^^^^

* Add a default value for parameters

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------+
| Short name  | Functions/AddDefaultValue                                                                |
+-------------+------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Suggestions`                                                                       |
+-------------+------------------------------------------------------------------------------------------+
| Exakt since | 1.4.5                                                                                    |
+-------------+------------------------------------------------------------------------------------------+
| Php Version | All                                                                                      |
+-------------+------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                    |
+-------------+------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                          |
+-------------+------------------------------------------------------------------------------------------+
| Precision   | High                                                                                     |
+-------------+------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-zurmo-functions-adddefaultvalue`, :ref:`case-typo3-functions-adddefaultvalue` |
+-------------+------------------------------------------------------------------------------------------+


.. _aliases-usage:

Aliases Usage
+++++++++++++

 PHP manual recommends to avoid function aliases.

Some functions have several names, and both may be used the same way. However, one of the names is the main name, and the others are aliases. Aliases may be removed or change or dropped in the future. Even if this is not forecast, it is good practice to use the main name, instead of the aliases. 

.. code-block:: php

   <?php
   
   // official way to count an array
   $n = count($array);
   
   // official way to count an array
   $n = sizeof($array);
   
   ?>


Aliases are compiled in PHP, and do not provide any performances over the normal function. 

Aliases are more likely to be removed later, but they have been around for a long time.

See documentation : `List of function aliases <https://www.php.net/manual/en/aliases.php>`_.


Suggestions
^^^^^^^^^^^

* Always use PHP recommended functions

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------+
| Short name  | Functions/AliasesUsage                                                                        |
+-------------+-----------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                   |
+-------------+-----------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------+
| Php Version | All                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                               |
+-------------+-----------------------------------------------------------------------------------------------+
| Precision   | High                                                                                          |
+-------------+-----------------------------------------------------------------------------------------------+
| ClearPHP    | `no-aliases <https://github.com/dseguy/clearPHP/tree/master/rules/no-aliases.md>`__           |
+-------------+-----------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-cleverstyle-functions-aliasesusage`, :ref:`case-phpmyadmin-functions-aliasesusage` |
+-------------+-----------------------------------------------------------------------------------------------+


.. _use-named-boolean-in-argument-definition:

Use Named Boolean In Argument Definition
++++++++++++++++++++++++++++++++++++++++

 Boolean in argument definitions is confusing. 

It is recommended to use explicit constant names, instead. They are more readable. They also allow for easy replacement when the code evolve and has to replace those booleans by strings. This works even also with classes, and class constants.

.. code-block:: php

   <?php
   
   function flipImage($im, $horizontal = NO_HORIZONTAL_FLIP, $vertical = NO_VERTICAL_FLIP) { }
   
   // with constants
   const HORIZONTAL_FLIP = true;
   const NO_HORIZONTAL_FLIP = true;
   const VERTICAL_FLIP = true;
   const NO_VERTICAL_FLIP = true;
   
   rotateImage($im, HORIZONTAL_FLIP, NO_VERTICAL_FLIP);
   
   
   // without constants 
   function flipImage($im, $horizontal = false, $vertical = false) { }
   
   rotateImage($im, true, false);
   
   ?>


See also `Flag Argument <https://martinfowler.com/bliki/FlagArgument.html>`_, to avoid boolean altogether.

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------------+
| Short name  | Functions/AvoidBooleanArgument                                                                                |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                                |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.0.6                                                                                                         |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                           |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                         |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                                 |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                          |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-phpmyadmin-functions-avoidbooleanargument`, :ref:`case-cleverstyle-functions-avoidbooleanargument` |
+-------------+---------------------------------------------------------------------------------------------------------------+


.. _bad-typehint-relay:

Bad Typehint Relay
++++++++++++++++++

 A bad typehint relay happens where a type hinted argument is relayed to a parameter with another typehint. This will lead to a Fatal error, and stop the code. This is possibly a piece of dead code.

.. code-block:: php

   <?php
   
   // the $i argument is relayed to bar, which is expecting a string. 
   function foo(int $i) : string {
       return bar($i);
   }
   
   // the return value for the bar function is not compatible with the one from foo;
   function bar(string $s) : int {
       return (int) $string + 1;
   }
   
   ?>


It is recommended to harmonize the typehints, so the two methods are compatible.



Suggestions
^^^^^^^^^^^

* Harmonize the typehint so they match one with the other.
* Remove dead code
* Apply type casting before calling the next function, or return value

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Functions/BadTypehintRelay |
+-------------+----------------------------+
| Rulesets    | :ref:`Typechecks`          |
+-------------+----------------------------+
| Exakt since | 1.6.6                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Quick (30 mins)            |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _callback-function-needs-return:

Callback Function Needs Return
++++++++++++++++++++++++++++++

 When used with `array_map() <https://www.php.net/array_map>`_ functions, the callback must return something. This return may be in the form of a ``return`` statement, a global variable or a parameter with a reference. All those solutions extract information from the callback. 

.. code-block:: php

   <?php
   
   // This filters each element
   $filtered = array_filter($array, function ($x) {return $x == 2; });
   
   // This return void for every element
   $filtered = array_filter($array, function ($x) {return ; });
   
   // costly array_sum()
   $sum = 0;
   $filtered = array_filter($array, function ($x) use (&$sum) {$sum += $x; });
   
   // costly array_sum()
   global $sum = 0;
   $filtered = array_filter($array, function () {global $sum; $sum += $x; });
   
   // register_shutown_function() doesn't require any return
   register_shutown_function(my_shutdown);
   
   ?>


The following functions are omitted, as they don't require the return : 

+ `forward_static_call_array() <https://www.php.net/forward_static_call_array>`_
+ `forward_static_call() <https://www.php.net/forward_static_call>`_
+ `register_shutdown_function() <https://www.php.net/register_shutdown_function>`_
+ `register_tick_function() <https://www.php.net/register_tick_function>`_

See also `array_map <https://www.php.net/array_map>`_.


Suggestions
^^^^^^^^^^^

* Add an explicit return to the callback
* Use `null` to unset elements in an array without destroying the index

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------------+
| Short name  | Functions/CallbackNeedsReturn                                                                             |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                               |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Exakt since | 1.2.6                                                                                                     |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                       |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                     |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                          |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                      |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-contao-functions-callbackneedsreturn`, :ref:`case-phpdocumentor-functions-callbackneedsreturn` |
+-------------+-----------------------------------------------------------------------------------------------------------+


.. _cancelled-parameter:

Cancelled Parameter
+++++++++++++++++++

 When a parameter is hardcoded, and cannot be changed from the calling expression. The argument is in the signature, but it is later hardcoded to a literal value : thus, it is not usable, from the caller point of view.

Reference argument are omitted here, as the value change, however hardcoded, may have an impact on the calling code.

.. code-block:: php

   <?php
   
   function foo($a, $b) {
       // $b is cancelled, and cannot be changed.
       $b = 3;
   
       // $a is the only parameter here
       return $a + $b;
   }
   
   function bar($a, $b) {
       // $b is actually processed
       $c = $b;
       $c = process($c);
       
       $b = $c;
   
       // $a is the only parameter here
       return $a + $b;
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Remove the parameter in the method signature

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Functions/CancelledParameter |
+-------------+------------------------------+
| Rulesets    | :ref:`Analyze`               |
+-------------+------------------------------+
| Exakt since | 2.2.0                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Quick (30 mins)              |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _cannot-use-static-for-closure:

Cannot Use Static For Closure
+++++++++++++++++++++++++++++

 The reported closures and arrow functions cannot use the `static <https://www.php.net/manual/en/language.oop5.static.php>`_ keyword. 

Closures that makes use of the `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ pseudo-variable cannot use the `static <https://www.php.net/manual/en/language.oop5.static.php>`_ keyword, at it prevents the import of the `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ context in the closure. It will fail at execution.

Closures that makes use of the bindTo() method, to change the context of execution, also cannot use the `static <https://www.php.net/manual/en/language.oop5.static.php>`_ keyword. Even if `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ is not used in the closure, the `static <https://www.php.net/manual/en/language.oop5.static.php>`_ keyword prevents the call to bindTo().

.. code-block:: php

   <?php
   
   class x {
       function foo() {
           // Not possible, $this is now undefined in the body of the closure
           static function () { return $this->a;};
       }
   
       function foo2() {
           // Not possible, $this is now undefined in the body of the arrow function
           static fn () => $this->a;
       }
       
       function foo3() {
           // Not possible, the closure gets a new context before being called.
           $a = static fn () => $ba;
           $this->foo4($a);
       }
       
       function foo4($c) {
           $c->bindTo($this);
           $c();
       }
       
   }
   ?>


See also `Static anonymous functions <https://www.php.net/manual/en/functions.anonymous.php#functions.anonymous-functions.`static <https://www.php.net/manual/en/language.oop5.static.php>`_>`_.



Suggestions
^^^^^^^^^^^

* Remove the static keyword
* Remove the call to bindTo() method
* Remove the usage of the $this variable

Specs
^^^^^
+-------------+-------------------------------------+
| Short name  | Functions/CannotUseStaticForClosure |
+-------------+-------------------------------------+
| Rulesets    | :ref:`Analyze`                      |
+-------------+-------------------------------------+
| Exakt since | 2.2.2                               |
+-------------+-------------------------------------+
| Php Version | All                                 |
+-------------+-------------------------------------+
| Severity    | Major                               |
+-------------+-------------------------------------+
| Time To Fix | Quick (30 mins)                     |
+-------------+-------------------------------------+
| Precision   | Medium                              |
+-------------+-------------------------------------+


.. _cant-use-function:

Cant Use Function
+++++++++++++++++

 Those functions only contains an error or an exception. As such, they are a warning that such function or method shouldn't be used. 

.. code-block:: php

   <?php
   
   function obsoleteFoo() {
       throw new exception('Don\'t use obsoleteFoo() but rather the new version of foo().');
   }
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-------------------+
| Short name  | Functions/CantUse |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 1.8.7             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Quick (30 mins)   |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _closure-could-be-a-callback:

Closure Could Be A Callback
+++++++++++++++++++++++++++

 `Closure <https://www.php.net/manual/en/class.closure.php>`_ or arrowfunction could be simplified to a callback. Callbacks are strings or arrays.

A simple closure that only returns arguments relayed to another function or method, could be reduced to a simpler expression. They 

`Closure <https://www.php.net/manual/en/class.closure.php>`_ may be simplified with a string, for functioncall, with an array for methodcalls and `static <https://www.php.net/manual/en/language.oop5.static.php>`_ methodcalls. 

Performances : simplifying a closure tends to reduce the call time by 50%. 

.. code-block:: php

   <?php
   
   // Simple and faster call to strtoupper
   $filtered = array_map('strtoupper', $array);
   
   // Here the closure doesn't add any feature over strtoupper
   $filtered = array_map(function ($x) { return strtoupper($x);}, $array);
   
   // Methodcall example : no fix
   $filtered = array_map(function ($x) { return $x->strtoupper() ;}, $array);
   
   // Methodcall example  : replace with array($y, 'strtoupper')
   $filtered = array_map(function ($x) use ($y) { return $y->strtoupper($x) ;}, $array);
   
   // Static methodcall example 
   $filtered = array_map(function ($x) { return $x::strtoupper() ;}, $array);
   
   // Static methodcall example   : replace with array('A', 'strtoupper')
   $filtered = array_map(function ($x) { return A::strtoupper($x) ;}, $array);
   
   ?>


See also `Closure class <https://www.php.net/closure>`_ and `Callbacks / Callables <https://www.php.net/manual/en/language.types.callable.php>`_.


Suggestions
^^^^^^^^^^^

* Replace the closure by a string, with the name of the called function
* Replace the closure by an array, with the name of the called method and the object as first element

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------+
| Short name  | Functions/Closure2String                                                                    |
+-------------+---------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Performances`, :ref:`Suggestions`                                                     |
+-------------+---------------------------------------------------------------------------------------------+
| Exakt since | 1.4.3                                                                                       |
+-------------+---------------------------------------------------------------------------------------------+
| Php Version | All                                                                                         |
+-------------+---------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                       |
+-------------+---------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                             |
+-------------+---------------------------------------------------------------------------------------------+
| Precision   | High                                                                                        |
+-------------+---------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-tine20-functions-closure2string`, :ref:`case-nextcloud-functions-closure2string` |
+-------------+---------------------------------------------------------------------------------------------+


.. _closures-glossary:

Closures Glossary
+++++++++++++++++

 List of all the closures in the code.

.. code-block:: php

   <?php
   
   // A closure is also a unnamed function
   $closure = function ($arg) { return 'A'.strtolower($arg); }
   
   ?>


See also `The `Closure <https://www.php.net/manual/en/class.closure.php>`_ Class <https://www.php.net/manual/en/class.closure.php>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Functions/Closures |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | Very high          |
+-------------+--------------------+


.. _conditioned-function:

Conditioned Function
++++++++++++++++++++

 Indicates if a function is defined only if a condition is met.

<?php

// This is a conditioned function. 
// it only exists if the PHP binary doesn't have it already.
if (!function_exists('join')) {
    function join($glue, $array) {
        return implode($glue, $array);
    }

}

Specs
^^^^^
+-------------+--------------------------------+
| Short name  | Functions/ConditionedFunctions |
+-------------+--------------------------------+
| Rulesets    | :ref:`CE`                      |
+-------------+--------------------------------+
| Exakt since | 0.8.4                          |
+-------------+--------------------------------+
| Php Version | All                            |
+-------------+--------------------------------+
| Severity    | Minor                          |
+-------------+--------------------------------+
| Time To Fix | Slow (1 hour)                  |
+-------------+--------------------------------+
| Precision   | High                           |
+-------------+--------------------------------+


.. _could-be-typehinted-callable:

Could Be Typehinted Callable
++++++++++++++++++++++++++++

 Those arguments may use the callable Typehint. 

'callable' is a PHP keyword that represents callback functions. Those may be used in dynamic function call, like $function(); or as callback functions, like with `array_map() <https://www.php.net/array_map>`_;

callable may be a string representing a function name or a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ call (including \:\:), an array with two elements, (a class or object, and a method), or a closure.

When arguments are used to call a function, but are not marked with 'callable', they are reported by this analysis.

.. code-block:: php

   <?php
   
   function foo(callable $callable) {
       // very simple callback
       return $callable();
   }
   
   function foo2($array, $callable) {
       // very simple callback
       return array_map($array, $callable);
   }
   
   ?>


See also `Callback / callable <https://www.php.net/manual/en/language.types.callable.php>`_.



Suggestions
^^^^^^^^^^^

* Add the typehint callable
* Use the function is_callable() inside the method if 'callable' is too strong.

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------+
| Short name  | Functions/CouldBeCallable                                                                       |
+-------------+-------------------------------------------------------------------------------------------------+
| Rulesets    | none                                                                                            |
+-------------+-------------------------------------------------------------------------------------------------+
| Exakt since | 0.10.5                                                                                          |
+-------------+-------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                             |
+-------------+-------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                           |
+-------------+-------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                 |
+-------------+-------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                            |
+-------------+-------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-magento-functions-couldbecallable`, :ref:`case-prestashop-functions-couldbecallable` |
+-------------+-------------------------------------------------------------------------------------------------+


.. _could-be-static-closure:

Could Be Static Closure
+++++++++++++++++++++++

 `Closure <https://www.php.net/manual/en/class.closure.php>`_ and arrow functions may be `static <https://www.php.net/manual/en/language.oop5.static.php>`_, and prevent the import of ``$this``. 

By preventing the useless import of ``$this``, you avoid useless work. 

This also has the added value to prevent the usage of ``$this`` from the closure. This is a good security practice.

.. code-block:: php

   <?php
   
   class Foo
   {
       function __construct()
       {
   
           // Not possible to use $this
           $func = static function() {
               var_dump($this);
           };
           $func();
   
           // Normal import of $this
           $closure = function() {
               var_dump($this);
           };
       }
   };
   new Foo();
   
   ?>


This is a micro-optimisation. Apply it in case of intensive usage.

See also `Anonymous functions <https://www.php.net/manual/en/functions.anonymous.php>`_, `GeneratedHydrator <https://github.com/Ocramius/GeneratedHydrator/releases/tag/3.0.0>`_ and `Static anonymous functions <https://www.php.net/manual/en/functions.anonymous.php#functions.anonymous-functions.`static <https://www.php.net/manual/en/language.oop5.static.php>`_>`_.


Suggestions
^^^^^^^^^^^

* Add the static keyword to the closure.
* Make actual usage of $this in the closure.

Specs
^^^^^
+-------------+---------------------------------------------------+
| Short name  | Functions/CouldBeStaticClosure                    |
+-------------+---------------------------------------------------+
| Rulesets    | :ref:`Suggestions`                                |
+-------------+---------------------------------------------------+
| Exakt since | 1.3.2                                             |
+-------------+---------------------------------------------------+
| Php Version | All                                               |
+-------------+---------------------------------------------------+
| Severity    | Minor                                             |
+-------------+---------------------------------------------------+
| Time To Fix | Quick (30 mins)                                   |
+-------------+---------------------------------------------------+
| Precision   | High                                              |
+-------------+---------------------------------------------------+
| Examples    | :ref:`case-piwigo-functions-couldbestaticclosure` |
+-------------+---------------------------------------------------+


.. _could-make-a-function:

Could Make A Function
+++++++++++++++++++++

 When a function is called across the code with the same arguments often enough, it should be turned into a local API. 

This approach is similar to turning literals into constants : it centralize the value, it helps refactoring by updating it. It also makes the code more readable. Moreover, it often highlight common grounds between remote code locations. 

The analysis looks for functions calls, and checks the arguments. When the calls occurs more than 4 times, it is reported. 

.. code-block:: php

   <?php
   
   // str_replace is used to clean '&' from strings. 
   // It should be upgraded to a central function
   function foo($arg ) {
       $arg = str_replace('&', '', $arg);
       // do something with $arg
   }
   
   class y {
       function bar($database ) {
           $value = $database->queryName();
           $value = str_replace('&', '', $value);
           // $value = removeAmpersand($value);
           // do something with $arg2
       }
   }
   
   // helper function
   function removeAmpersand($string) {
       return str_replace('&', '', $string);
   }
   
   ?>


See also `Don't repeat yourself (DRY) <https://en.wikipedia.org/wiki/Don%27t_repeat_yourself>`_.


Suggestions
^^^^^^^^^^^

* Create a constant for common pieces of data
* Create a function based on context-free repeated elements
* Create a class based on repeated elements with dependent values

+---------------------+---------+---------+-------------------------------------------------------------------+
| Name                | Default | Type    | Description                                                       |
+---------------------+---------+---------+-------------------------------------------------------------------+
| centralizeThreshold | 8       | integer | Minimal number of calls of the function with one common argument. |
+---------------------+---------+---------+-------------------------------------------------------------------+



Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Functions/CouldCentralize          |
+-------------+------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Suggestions` |
+-------------+------------------------------------+
| Exakt since | 0.11.6                             |
+-------------+------------------------------------+
| Php Version | All                                |
+-------------+------------------------------------+
| Severity    | Minor                              |
+-------------+------------------------------------+
| Time To Fix | Slow (1 hour)                      |
+-------------+------------------------------------+
| Precision   | High                               |
+-------------+------------------------------------+


.. _could-typehint:

Could Typehint
++++++++++++++

 Arguments that are tested with `instanceof <https://www.php.net/manual/en/language.operators.type.php>`_ gain from making it a Typehint.

.. code-block:: php

   <?php
   
   function foo($a, $b) {
       // $a is tested for B with instanceof. 
       if (!$a instanceof B) {
           return;
       }
       
       // More code
   }
   
   function foo(B $a, $b) {
       // May omit the initial test
       
       // More code
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Add the typehint, remove the test on the type

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Functions/CouldTypehint |
+-------------+-------------------------+
| Rulesets    | none                    |
+-------------+-------------------------+
| Exakt since | 0.11.5                  |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Quick (30 mins)         |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _could-type-with-array:

Could Type With Array
+++++++++++++++++++++

 That argument may be typed with ``array``. 

.. code-block:: php

   <?php
   
   // $a is used with a function which requires an int. 
   function foo($a) {
       return array_keys($a);
   }
   
   ?>


See also `Type declarations <https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration>`_.


Suggestions
^^^^^^^^^^^

* Add the ``array`` typehint to the function.

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Functions/CouldTypeWithArray |
+-------------+------------------------------+
| Rulesets    | none                         |
+-------------+------------------------------+
| Exakt since | 1.9.9                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Quick (30 mins)              |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _could-type-with-boolean:

Could Type With Boolean
+++++++++++++++++++++++

 That argument may be typed with ``bool``. 

.. code-block:: php

   <?php
   
   // $a is used with a function which requires a boolean. 
   function foo($code, $a) {
       return var_dump($code, $a);
   }
   
   ?>


See also `Type declarations <https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration>`_.


Suggestions
^^^^^^^^^^^

* Add the ``bool`` typehint to the function.

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Functions/CouldTypeWithBool |
+-------------+-----------------------------+
| Rulesets    | none                        |
+-------------+-----------------------------+
| Exakt since | 1.9.9                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Quick (30 mins)             |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _could-type-with-int:

Could Type With Int
+++++++++++++++++++

 That argument may be typed with ``int``. 

.. code-block:: php

   <?php
   
   // $a is used with a function which requires an int. 
   function foo($a) {
       return chr($a);
   }
   
   ?>


See also `Type declarations <https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration>`_.


Suggestions
^^^^^^^^^^^

* Add the ``int`` typehint to the function.

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Functions/CouldTypeWithInt |
+-------------+----------------------------+
| Rulesets    | none                       |
+-------------+----------------------------+
| Exakt since | 1.9.9                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Quick (30 mins)            |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _could-type-with-iterable:

Could Type With Iterable
++++++++++++++++++++++++

 Suggest using ``iterable`` typehint for arguments.

``iterable`` represents both ``array`` and objects that implements ``Iterator`` interface. Both types are coerced, and usable here. 

.. code-block:: php

   <?php
   
   // $s may be both an array or an iterator
   function foo($s) : int {
       $t = 0;
       foreach($s as $v) {
           $t += (int) $v;
       }
       
       return $t;
   }
   
   ?>


See also `Iterables <https://www.php.net/manual/en/language.types.iterable.php>`_.


Suggestions
^^^^^^^^^^^

* Add the iterable type

Specs
^^^^^
+-------------+---------------------------------+
| Short name  | Functions/CouldTypeWithIterable |
+-------------+---------------------------------+
| Rulesets    | none                            |
+-------------+---------------------------------+
| Exakt since | 1.9.9                           |
+-------------+---------------------------------+
| Php Version | All                             |
+-------------+---------------------------------+
| Severity    | Minor                           |
+-------------+---------------------------------+
| Time To Fix | Quick (30 mins)                 |
+-------------+---------------------------------+
| Precision   | Medium                          |
+-------------+---------------------------------+


.. _could-type-with-string:

Could Type With String
++++++++++++++++++++++

 That argument may be typed with ``string``. 

.. code-block:: php

   <?php
   
   // $a is used with a function which requires a string. 
   function foo($a) {
       return strtolower($a);
   }
   
   ?>


See also `Type declarations <https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration>`_.


Suggestions
^^^^^^^^^^^

* Add the ``string`` typehint to the function.

Specs
^^^^^
+-------------+-------------------------------+
| Short name  | Functions/CouldTypeWithString |
+-------------+-------------------------------+
| Rulesets    | none                          |
+-------------+-------------------------------+
| Exakt since | 1.9.9                         |
+-------------+-------------------------------+
| Php Version | All                           |
+-------------+-------------------------------+
| Severity    | Minor                         |
+-------------+-------------------------------+
| Time To Fix | Quick (30 mins)               |
+-------------+-------------------------------+
| Precision   | High                          |
+-------------+-------------------------------+


.. _deep-definitions:

Deep Definitions
++++++++++++++++

 Structures, such as functions, classes, interfaces, traits, etc. may be defined anywhere in the code, including inside functions. This is legit code for PHP. 

Since the availability of autoload, with spl_register_autoload(), there is no need for that kind of code. Structures should be defined, and accessible to the autoloading. Inclusions and deep definitions should be avoided, as they compel code to load some definitions, while autoloading will only load them if needed. 

.. code-block:: php

   <?php
   
   class X {
       function init() {
           // myFunction is defined when and only if X::init() is called.
           if (!function_exists('myFunction'){
               function myFunction($a) {
                   return $a + 1;
               }
           })
       }
   }
   
   ?>


Functions are excluded from autoload, but shall be gathered in libraries, and not hidden inside other code.

Constants definitions are tolerated inside functions : they may be used for avoiding repeat, or noting the usage of such function. 

Definitions inside a if/then statement, that include PHP version check are accepted here.

See also `Autoloading Classes <https://www.php.net/manual/en/language.oop5.autoload.php>`_.


Suggestions
^^^^^^^^^^^

* Move function definitions to the global space : outside structures, and method.

Specs
^^^^^
+-------------+-----------------------------------------------+
| Short name  | Functions/DeepDefinitions                     |
+-------------+-----------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`                     |
+-------------+-----------------------------------------------+
| Exakt since | 0.8.4                                         |
+-------------+-----------------------------------------------+
| Php Version | All                                           |
+-------------+-----------------------------------------------+
| Severity    | Major                                         |
+-------------+-----------------------------------------------+
| Time To Fix | Slow (1 hour)                                 |
+-------------+-----------------------------------------------+
| Precision   | High                                          |
+-------------+-----------------------------------------------+
| Examples    | :ref:`case-dolphin-functions-deepdefinitions` |
+-------------+-----------------------------------------------+


.. _dont-collect-void:

Dont Collect Void
+++++++++++++++++

 When a method returns void, there is no need to collect the result. The collected value will actually be ``null``.

.. code-block:: php

   <?php
   
   function foo() : void {
       // doSomething()
   }
   
   // This is useless
   $result = foo(); 
   
   // This is useless. It looks like this is a left over from code refactoring
   echo foo(); 
   
   ?>




Suggestions
^^^^^^^^^^^

* Move the call to the function to its own expression with a semi-colon.
* Remove assignation of the result of such calls.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Functions/DontUseVoid |
+-------------+-----------------------+
| Rulesets    | :ref:`Analyze`        |
+-------------+-----------------------+
| Exakt since | 2.0.9                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Quick (30 mins)       |
+-------------+-----------------------+
| Precision   | Very high             |
+-------------+-----------------------+


.. _dynamic-function-call:

Dynamic Function Call
+++++++++++++++++++++

 Mark a functioncall made with a variable name.

.. code-block:: php

   <?php
   
   // function definition
   function foo() {}
   
   // function name is in a variable, as a string.
   $var = 'foo'; 
   
   // dynamic call of a function
   $var();
   
   call_user_func($var);
   
   ?>

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Functions/Dynamiccall |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _function-with-dynamic-code:

Function With Dynamic Code
++++++++++++++++++++++++++

 Mark a method, function, closure, arrow function that includes dynamic code. 

Dynamic code is based on usage of include() and co, `extract() <https://www.php.net/extract>`_ and `eval() <https://www.php.net/eval>`_. 

.. code-block:: php

   <?php
   
   // Function with dynamic code
   function foo($x) {
       include $x;
       return $y;
   }
   
   // Static coe Function
   function foo($x) {
       return $y + $x;
   }
   
   ?>


This is a support rule, to help omits some special cases in other rules.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Functions/DynamicCode |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 2.1.8                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Quick (30 mins)       |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _empty-function:

Empty Function
++++++++++++++

 Function or method whose body is empty. 

Such functions or methods are rarely useful. As a bare minimum, the function should return some useful value, even if constant.

A method is considered empty when it contains nothing, or contains expressions without impact. 

.. code-block:: php

   <?php
   
   // classic empty function
   function emptyFunction() {}
   
   class bar {
       // classic empty method
       function emptyMethod() {}
   
       // classic empty function
       function emptyMethodWithParent() {}
   }
   
   class barbar extends bar {
       // NOT an empty method : it overwrites the parent method
       function emptyMethodWithParent() {}
   }
   
   ?>


Methods which overwrite another methods are omitted. Methods which are the concrete version of an abstract method are considered.



Suggestions
^^^^^^^^^^^

* Fill the function with actual code
* Remove any usage of the function, then remove the function

Specs
^^^^^
+-------------+--------------------------------------------+
| Short name  | Functions/EmptyFunction                    |
+-------------+--------------------------------------------+
| Rulesets    | :ref:`Analyze`                             |
+-------------+--------------------------------------------+
| Exakt since | 0.8.4                                      |
+-------------+--------------------------------------------+
| Php Version | All                                        |
+-------------+--------------------------------------------+
| Severity    | Minor                                      |
+-------------+--------------------------------------------+
| Time To Fix | Quick (30 mins)                            |
+-------------+--------------------------------------------+
| Precision   | High                                       |
+-------------+--------------------------------------------+
| Examples    | :ref:`case-contao-functions-emptyfunction` |
+-------------+--------------------------------------------+


.. _exceeding-typehint:

Exceeding Typehint
++++++++++++++++++

 The typehint is not fully used in the method. Some of the defined methods in the typehint are unused. A tighter typehint could be used, to avoid method pollution.

.. code-block:: php

   <?php
   
   interface i {
       function i1();
       function i2();
   }
   
   interface j {
       function j1();
       function j2();
   }
   
   function foo(i $a, j $b) {
       // the i typehint is totally used
       $a->i1();
       $a->i2();
       
       // the i typehint is not totally used : j2() is not used.
       $b->j1();
   }
   
   ?>


Tight typehint prevents the argument from doing too much. They also require more maintenance : creation of dedicated interfaces, method management to keep all typehint tight.

See also :ref:`insufficient-typehint`. 


Suggestions
^^^^^^^^^^^

* Keep the typehint tight, do not inject more than needed.

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Functions/ExceedingTypehint |
+-------------+-----------------------------+
| Rulesets    | :ref:`ClassReview`          |
+-------------+-----------------------------+
| Exakt since | 2.0.3                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Quick (30 mins)             |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _fallback-function:

Fallback Function
+++++++++++++++++

 A function that is called with its name alone, and whose definition is in the global scope.

.. code-block:: php

   <?php
   
   namespace {
       // global definition
       function foo() {}
   }
   
   namespace Bar {
       // local definition
       function foo2() {}
       
       foo(); // definition is in the global namespace
       foo2(); // definition is in the Bar namespace
   }
   
   ?>


See also `Using namespaces: fallback to global function/constant <https://www.php.net/manual/en/language.namespaces.fallback.php>`_.

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Functions/FallbackFunction |
+-------------+----------------------------+
| Rulesets    | :ref:`CE`                  |
+-------------+----------------------------+
| Exakt since | 1.1.4                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Slow (1 hour)              |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _fn-argument-variable-confusion:

Fn Argument Variable Confusion
++++++++++++++++++++++++++++++

 Avoid using local variables as arrow function arguments.

When a local variable name is used as an argument's name in an arrow function, the local variable from the original scope is not imported. They are now two distinct variables.

When the local variable is not listed as argument, it is then imported in the arrow function.

.. code-block:: php

   <?php
   
   function foo() {
       $locale = 1;
   
       // Actually ignores the argument, and returns the local variable ``$locale``.
       $fn2 = fn ($argument) => $locale;
   
       // Seems similar to above, but returns the incoming argument    
       $fn2 = fn ($locale) => $locale;
   }
   
   ?>


See also `Arrow functions <https://www.php.net/manual/en/functions.arrow.php>`_.


Suggestions
^^^^^^^^^^^

* Change the name of the local variable
* Change the name of the argument

Specs
^^^^^
+-------------+---------------------------------------+
| Short name  | Functions/FnArgumentVariableConfusion |
+-------------+---------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Semantics`      |
+-------------+---------------------------------------+
| Exakt since | 2.1.0                                 |
+-------------+---------------------------------------+
| Php Version | 7.4+                                  |
+-------------+---------------------------------------+
| Severity    | Minor                                 |
+-------------+---------------------------------------+
| Time To Fix | Quick (30 mins)                       |
+-------------+---------------------------------------+
| Precision   | High                                  |
+-------------+---------------------------------------+


.. _func\_get\_arg()-modified:

func_get_arg() Modified
+++++++++++++++++++++++

 `func_get_arg() <https://www.php.net/func_get_arg>`_ and `func_get_args() <https://www.php.net/func_get_args>`_ used to report the calling value of the argument until PHP 7. Since PHP 7, it is reporting the value of the argument at calling time, which may have been modified by a previous instruction. 

.. code-block:: php

   <?php
   
   function x($a) {
       $a++;
       print func_get_arg(0);
   }
   
   x(0);
   ?>


This code will display 1 in PHP 7, and 0 in PHP 5.

Specs
^^^^^
+-------------+-------------------------------------------+
| Short name  | Functions/funcGetArgModified              |
+-------------+-------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CompatibilityPHP70` |
+-------------+-------------------------------------------+
| Exakt since | 0.8.4                                     |
+-------------+-------------------------------------------+
| Php Version | All                                       |
+-------------+-------------------------------------------+
| Severity    | Major                                     |
+-------------+-------------------------------------------+
| Time To Fix | Quick (30 mins)                           |
+-------------+-------------------------------------------+
| Precision   | High                                      |
+-------------+-------------------------------------------+


.. _function-called-with-other-case-than-defined:

Function Called With Other Case Than Defined
++++++++++++++++++++++++++++++++++++++++++++

 Functions and methods are defined with a specific case. Often, this is done on purpose,
either to distinguish the method from others, such as PHP natives functions, or to follow a naming
convention. 

PHP functions are case insensitive, which leads to situations like : 

.. code-block:: php

   <?php
     function myUtility($arg) { 
       /* some code here */
     } 
   
      myutility($var);
   ?>


It is recommended to use the same casing in the function call and the function definition.


Suggestions
^^^^^^^^^^^

* Use the same case for the function and its call.

Specs
^^^^^
+-------------+---------------------------------------+
| Short name  | Functions/FunctionCalledWithOtherCase |
+-------------+---------------------------------------+
| Rulesets    | none                                  |
+-------------+---------------------------------------+
| Exakt since | 0.8.4                                 |
+-------------+---------------------------------------+
| Php Version | All                                   |
+-------------+---------------------------------------+
| Severity    | Minor                                 |
+-------------+---------------------------------------+
| Time To Fix | Slow (1 hour)                         |
+-------------+---------------------------------------+
| Precision   | High                                  |
+-------------+---------------------------------------+


.. _functions-glossary:

Functions Glossary
++++++++++++++++++

 List of all the defined functions in the code.

.. code-block:: php

   <?php
   
   // A function
   function aFunction() {}
   
   // Closures (not reported)
   $closure = function ($arg) {  }
   
   // Methods
   class foo {
       function aMethod() {}
   }
   
   ?>

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Functions/Functionnames |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _functions-using-reference:

Functions Using Reference
+++++++++++++++++++++++++

 Functions and methods using references in their signature.

.. code-block:: php

   <?php
   
   function usingReferences( &$a) {}
   
   class foo {
       public function methodUsingReferences($b, &$c = 1) {}
   }
   ?>

Specs
^^^^^
+-------------+-----------------------------------+
| Short name  | Functions/FunctionsUsingReference |
+-------------+-----------------------------------+
| Rulesets    | :ref:`CE`                         |
+-------------+-----------------------------------+
| Exakt since | 0.8.4                             |
+-------------+-----------------------------------+
| Php Version | All                               |
+-------------+-----------------------------------+
| Severity    | Minor                             |
+-------------+-----------------------------------+
| Time To Fix | Slow (1 hour)                     |
+-------------+-----------------------------------+
| Precision   | High                              |
+-------------+-----------------------------------+


.. _generator-cannot-return:

Generator Cannot Return
+++++++++++++++++++++++

 Generators could not use return and yield at the same time. In PHP 7.0, generator can now use both of them.

.. code-block:: php

   <?php
   
   // This is not allowed until PHP 7.0
   function foo() {
       yield 1;
       return 'b';
   }
   
   ?>


Suggestions
^^^^^^^^^^^

* Remove the return

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------+
| Short name  | Functions/GeneratorCannotReturn                                                                            |
+-------------+------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56` |
+-------------+------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.8.7                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Php Version | 7.0+                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                            |
+-------------+------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+


.. _hardcoded-passwords:

Hardcoded Passwords
+++++++++++++++++++

 Hardcoded passwords in the code. 

Hardcoding passwords is a bad idea. Not only it make the code difficult to change, but it is an information leak. It is better to hide this kind of information out of the code.

.. code-block:: php

   <?php
   
   $ftp_server = '300.1.2.3';   // yes, this doesn't exists, it's an example
   $conn_id = ftp_connect($ftp_server); 
   
   // login with username and password
   $login_result = ftp_login($conn_id, 'login', 'password'); 
   
   ?>


See also `10 GitHub Security Best Practices <https://snyk.io/blog/ten-git-hub-security-best-practices/>`_ and `Git How-To: Remove Your Password from a Repository <https://davidverhasselt.com/git-how-to-remove-your-password-from-a-repository/>`_.


Suggestions
^^^^^^^^^^^

* Remove all passwords from the code. Also, check for history if you are using a VCS.

+---------------+--------------------+------+-------------------------------------------------------------------------------------------------+
| Name          | Default            | Type | Description                                                                                     |
+---------------+--------------------+------+-------------------------------------------------------------------------------------------------+
| passwordsKeys | password_keys.json | data | List of array index and property names that shall be checked for potential secret key storages. |
+---------------+--------------------+------+-------------------------------------------------------------------------------------------------+



Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------------+
| Short name  | Functions/HardcodedPasswords                                                                                  |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Security`                                                                               |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                         |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                           |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                         |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                                 |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                          |
+-------------+---------------------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-hardcoded-credential <https://github.com/dseguy/clearPHP/tree/master/rules/no-hardcoded-credential.md>`__ |
+-------------+---------------------------------------------------------------------------------------------------------------+


.. _method-has-fluent-interface:

Method Has Fluent Interface
+++++++++++++++++++++++++++

 Mark a method when it only returns `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_.

Fluent interfaces allows for chaining methods calls. This implies that `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ is always returned, so that the next method call is done on the same object.

.. code-block:: php

   <?php
   
   $object = new foo();
   $object->this()
          ->is()
          ->a()
          ->fluent()
          ->interface();
          
   class foo {
       function this() {
           // doSomething
           return $this;
       }
   
       function is() {
           // doSomethingElse
           return $this;
       }
       
       /// Etc. for a(), fluent(), interface()...
   }
   
   ?>


See also `Fluent Interfaces in PHP <http://mikenaberezny.com/2005/12/20/fluent-interfaces-in-php/>`_ and `Fluent Interfaces are Evil <https://ocramius.github.io/blog/fluent-interfaces-are-evil/>`_.

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Functions/HasFluentInterface |
+-------------+------------------------------+
| Rulesets    | none                         |
+-------------+------------------------------+
| Exakt since | 0.8.4                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Slow (1 hour)                |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _method-has-no-fluent-interface:

Method Has No Fluent Interface
++++++++++++++++++++++++++++++

 Mark a method as such when it contains at least one return that doesn't return `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_.

Specs
^^^^^
+-------------+---------------------------------+
| Short name  | Functions/HasNotFluentInterface |
+-------------+---------------------------------+
| Rulesets    | none                            |
+-------------+---------------------------------+
| Exakt since | 0.8.4                           |
+-------------+---------------------------------+
| Php Version | All                             |
+-------------+---------------------------------+
| Severity    | Minor                           |
+-------------+---------------------------------+
| Time To Fix | Slow (1 hour)                   |
+-------------+---------------------------------+
| Precision   | High                            |
+-------------+---------------------------------+


.. _insufficient-typehint:

Insufficient Typehint
+++++++++++++++++++++

 An argument is typehinted, but it actually calls methods that are not listed in the interface.

Classes may be implementing more methods than the one that are listed in the interface they also implements. This means that filtering objects with a typehint, but calling other methods will be solved at execution time : if the method is available, it will be used; if it is not, a fatal error is reported.

.. code-block:: php

   <?php
   
   class x implements i {
       function methodI() {}
       function notInI() {}
   }
   
   interface i {
       function methodI();
   }
   
   function foo(i $x) {
       $x->methodI(); // this call is valid
       $x->notInI();  // this call is not garanteed
   }
   ?>


Inspired by discussion with `Brandon Savage <https://twitter.com/BrandonSavage>`_.



Suggestions
^^^^^^^^^^^

* Extend the interface with the missing called methods
* Change the body of the function to use only the methods that are available in the interface
* Change the used objects so they don't depend on extra methods

Specs
^^^^^
+-------------+-----------------------------------+
| Short name  | Functions/InsufficientTypehint    |
+-------------+-----------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Typechecks` |
+-------------+-----------------------------------+
| Exakt since | 1.6.6                             |
+-------------+-----------------------------------+
| Php Version | All                               |
+-------------+-----------------------------------+
| Severity    | Major                             |
+-------------+-----------------------------------+
| Time To Fix | Quick (30 mins)                   |
+-------------+-----------------------------------+
| Precision   | High                              |
+-------------+-----------------------------------+


.. _is-an-extension-function:

Is An Extension Function
++++++++++++++++++++++++

 This is an extension function. 

.. code-block:: php

   <?php
   
   // range is a native PHP function. It is always available
   $array = range(0, 100);
   
   // json_encode is an extension function : it requires that PHP was compile with ext/json
   echo json_encode($array);
   
   ?>


Almost every PHP extension defines extra functions. Nowadays, they are prefixed, like ``mysqli_connect``, ``ldap_close``, or ``zlib_decode``. Sometimes, they are even in a namespace. Refer to the extension itself to learn more about its functions usage.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Functions/IsExtFunction |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _is-generator:

Is Generator
++++++++++++

 Mark as such functions or methods that are using yield and yield from.

.. code-block:: php

   <?php
   
   function generator() {
       yield from generator2();
       
       return 3;
   }
   
   function generator2() {
       yield 1;
       yield 2;
   }
   
   ?>

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Functions/IsGenerator |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _functioncall-is-global:

Functioncall Is Global
++++++++++++++++++++++

 Marks functioncall when they are global and not located in another function, class or trait (namespaces are OK).

Specs
^^^^^
+-------------+--------------------+
| Short name  | Functions/IsGlobal |
+-------------+--------------------+
| Rulesets    | none               |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _exit-like-methods:

Exit-like Methods
+++++++++++++++++

 Those methods terminate the execution. 

They are detected when they do call `exit() <https://www.php.net/`exit <https://www.www.php.net/exit>`_>`_ or `die() <https://www.php.net/`die <https://www.php.net/die>`_>`_. They may also be identified with the PHP 8.0 `#[NoReturn]` attribute, or the PHPDOC ``@noreturn`` (case insensitive).

If they are called, they will stop the application. They are a user-land equivalent of `exit <https://www.www.php.net/exit>`_ or `die <https://www.php.net/die>`_. 

.. code-block:: php

   <?php
   
   // This function anytime the code has finished its processing.
   function finish() {
       global $html;
       
       echo $html;
       die();
   }
   
   ?>


See also `PhpStorm 2020.3 EAP #4: Custom PHP 8 Attributes  <https://blog.jetbrains.com/phpstorm/2020/10/phpstorm-2020-3-eap-4/>`_.

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Functions/KillsApp           |
+-------------+------------------------------+
| Rulesets    | :ref:`Attributes`, :ref:`CE` |
+-------------+------------------------------+
| Exakt since | 0.8.4                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Slow (1 hour)                |
+-------------+------------------------------+
| Precision   | Medium                       |
+-------------+------------------------------+


.. _functions-in-loop-calls:

Functions In Loop Calls
+++++++++++++++++++++++

 The following functions call each-other in a loop fashion : A -> B -> A.

When those functions have no other interaction, the code is useless and should be dropped.

.. code-block:: php

   <?php
   
   function foo1($a) {
       if ($a < 1000) {
           return foo2($a + 1);
       }
       return $a;
   }
   
   function foo2($a) {
       if ($a < 1000) {
           return foo1($a + 1);
       }
       return $a;
   }
   
   // if foo1 nor foo2 are called, then this is dead code. 
   // if foo1 or foo2 are called, this recursive call should be investigated.
   
   ?>


Loops of size 2, 3 and 4 function are supported by this analyzer.


Suggestions
^^^^^^^^^^^

* Drop all the functions in the loop, as they are dead code

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Functions/LoopCalling |
+-------------+-----------------------+
| Rulesets    | none                  |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _mark-callable:

Mark Callable
+++++++++++++

 Create an attribute that guess what are the called function or methods, when possible.

Specs
^^^^^
+-------------+------------------------+
| Short name  | Functions/MarkCallable |
+-------------+------------------------+
| Rulesets    | :ref:`CE`              |
+-------------+------------------------+
| Exakt since | 0.8.4                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Quick (30 mins)        |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _mismatched-default-arguments:

Mismatched Default Arguments
++++++++++++++++++++++++++++

 Arguments are relayed from one method to the other, and the arguments have different default values. 

Although it is possible to have different default values, it is worth checking why this is actually the case.

.. code-block:: php

   <?php
   
   function foo($a = null, $b = array() ) {
       // foo method calls directly bar. 
       // When argument are provided, it's OK
       // When argument are omited, the default value is not the same as the next method
       bar($a, $b);
   }
   
   function bar($c = 1, $d = array() ) {
   
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Synchronize default values to avoid surprises
* Drop some of the default values

Specs
^^^^^
+-------------+-------------------------------------------------------+
| Short name  | Functions/MismatchedDefaultArguments                  |
+-------------+-------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Typechecks`                     |
+-------------+-------------------------------------------------------+
| Exakt since | 0.12.3                                                |
+-------------+-------------------------------------------------------+
| Php Version | All                                                   |
+-------------+-------------------------------------------------------+
| Severity    | Minor                                                 |
+-------------+-------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                       |
+-------------+-------------------------------------------------------+
| Precision   | High                                                  |
+-------------+-------------------------------------------------------+
| Examples    | :ref:`case-spip-functions-mismatcheddefaultarguments` |
+-------------+-------------------------------------------------------+


.. _mismatched-typehint:

Mismatched Typehint
+++++++++++++++++++

 Relayed arguments don't have the same typehint.

Typehint acts as a filter method. When an object is checked with a first class, and then checked again with a second distinct class, the whole process is always false : $a can't be of two different classes at the same time.

.. code-block:: php

   <?php
   
   // Foo() calls bar()
   function foo(A $a, B $b) {
       bar($a, $b);
   }
   
   // $a is of A typehint in both methods, but 
   // $b is of B then BB typehing
   function bar(A $a, BB $b) {
   
   }
   
   ?>


Note : This analysis currently doesn't check generalisation of classes : for example, when B is a child of BB, it is still reported as a mismatch.



Suggestions
^^^^^^^^^^^

* Ensure that the default value match the expected typehint.

Specs
^^^^^
+-------------+----------------------------------------------------+
| Short name  | Functions/MismatchedTypehint                       |
+-------------+----------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Typechecks`                  |
+-------------+----------------------------------------------------+
| Exakt since | 0.12.3                                             |
+-------------+----------------------------------------------------+
| Php Version | All                                                |
+-------------+----------------------------------------------------+
| Severity    | Major                                              |
+-------------+----------------------------------------------------+
| Time To Fix | Quick (30 mins)                                    |
+-------------+----------------------------------------------------+
| Precision   | High                                               |
+-------------+----------------------------------------------------+
| Examples    | :ref:`case-wordpress-functions-mismatchedtypehint` |
+-------------+----------------------------------------------------+


.. _mismatch-parameter-and-type:

Mismatch Parameter And Type
+++++++++++++++++++++++++++

 When the name of the parameter contradicts the type of the parameter.

This is mostly semantics, so it will affect the coder and the auditor of the code. PHP is immune to those errors. 

.. code-block:: php

   <?php
   
   // There is a discrepancy between the typehint and the name of the variable
   function foo(int $string) { }
   
   // The parameter name is practising coding convention typehints
   function bar(int $int) { }
   
   ?>




Suggestions
^^^^^^^^^^^

* Synch the name of the parameter and the typehint.

Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Functions/MismatchParameterAndType |
+-------------+------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Semantics`   |
+-------------+------------------------------------+
| Exakt since | 2.1.8                              |
+-------------+------------------------------------+
| Php Version | All                                |
+-------------+------------------------------------+
| Severity    | Minor                              |
+-------------+------------------------------------+
| Time To Fix | Quick (30 mins)                    |
+-------------+------------------------------------+
| Precision   | High                               |
+-------------+------------------------------------+


.. _mismatch-parameter-name:

Mismatch Parameter Name
+++++++++++++++++++++++

 Parameter name change in overwritten method. This may lead to errors when using PHP 8.0 named arguments. 

PHP use the name of the parameter in the method whose code is executed. When the name change between the method and the overwritten method, the consistency is broken.

.. code-block:: php

   <?php
   
   class x {
       function getValue($name) {}
   }
   
   class y extends x {
       // consistent with the method above
       function getValue($name) {}
   }
   
   class z extends x {
       // inconsistent with the method above
       function getValue($label) {}
   }
   
   ?>


Here is another example, in early PHP 8.0 (courtesy of `Carnage <https://twitter.com/giveupalready>`_).

.. code-block:: php

   <?php
   
   interface Pager 
   {
       public function fetch($page = 0, ...$categories);
   }
    
   class DbPager implements Pager
   {
       public function fetch($seite = 0, ...$kategorien)
       {
           var_dump($kategorien);
       }
   }
    
   $dbPager = new DbPager();
   $dbPager->fetch(page: 1, categories: 2);
   
   ?>




Suggestions
^^^^^^^^^^^

* Make sure all the names are the same, between methods

Specs
^^^^^
+-------------+------------------------------------------------------+
| Short name  | Functions/MismatchParameterName                      |
+-------------+------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CompatibilityPHP80` |
+-------------+------------------------------------------------------+
| Exakt since | 2.1.8                                                |
+-------------+------------------------------------------------------+
| Php Version | All                                                  |
+-------------+------------------------------------------------------+
| Severity    | Minor                                                |
+-------------+------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                      |
+-------------+------------------------------------------------------+
| Precision   | High                                                 |
+-------------+------------------------------------------------------+


.. _mismatch-type-and-default:

Mismatch Type And Default
+++++++++++++++++++++++++

 The argument typehint and its default value don't match. 

The code may lint and load, and even work when the arguments are provided. Though, PHP won't eventually execute it. 

Most of the mismatch problems are caught by PHP at linting time. It displays the following error message : 'Argument 1 passed to foo() must be of the type integer, string given'.

The default value may be a constant (normal or class constant) : as such, PHP might find its value only at execution time, from another include. As such, PHP doesn't report anything about the situation at compile time.

The default value may also be a constant scalar expression : since PHP 7, some of the simple operators such as +, -, *, %, `** <https://www.php.net/manual/en/language.operators.arithmetic.php>`_, etc. are available to build default values. Among them, the ternary operator and Coalesce. Again, those expression may be only evaluated at execution time, when the value of the constants are known. 

.. code-block:: php

   <?php
   
   // bad definition : the string is actually an integer
   const STRING = 3;
   
   function foo(string $s = STRING) {
       echo $s;
   }
   
   // works without problem
   foo('string');
   
   // Fatal error at compile time
   foo();
   
   // Fail only at execution time (missing D), and when default is needed
   function foo2(string $s = D ? null : array()) {
       echo $s;
   }
   
   ?>


PHP reports typehint and default mismatch at compilation time, unless there is a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ expression that can't be resolved within the compiled file : then it is checked only at runtime, leading to a Fatal error.

See also `Type declarations <https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration>`_.



Suggestions
^^^^^^^^^^^

* Match the typehint with the default value
* Do not rely on PHP type juggling to change the type on the fly

Specs
^^^^^
+-------------+-----------------------------------------------------------+
| Short name  | Functions/MismatchTypeAndDefault                          |
+-------------+-----------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`LintButWontExec`, :ref:`Typechecks` |
+-------------+-----------------------------------------------------------+
| Exakt since | 1.2.9                                                     |
+-------------+-----------------------------------------------------------+
| Php Version | All                                                       |
+-------------+-----------------------------------------------------------+
| Severity    | Critical                                                  |
+-------------+-----------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                             |
+-------------+-----------------------------------------------------------+
| Precision   | Medium                                                    |
+-------------+-----------------------------------------------------------+


.. _missing-typehint:

Missing Typehint
++++++++++++++++

 No typehint was found for a parameter, a return type for a method or a property.

void is considered a specified typehint, and is not reported here.

.. code-block:: php

   <?php
   
   class x {
       private $no_property;
       
       function foo($no_typehint) : void {}
   
       function no_return_type() {}
   }
   ?>


See also `Type Declaration <https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration>`_.


Suggestions
^^^^^^^^^^^

* Add a type to the argument, property or method

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Functions/MissingTypehint |
+-------------+---------------------------+
| Rulesets    | :ref:`Typechecks`         |
+-------------+---------------------------+
| Exakt since | 2.0.5                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _modified-typed-parameter:

Modified Typed Parameter
++++++++++++++++++++++++

 Reports modified parameters, which have a non-scalar typehint. Such variables should not be changed within the body of the method. Unlike typed properties, which always hold the expected type, typed parameters are only guaranteed type at the beginning of the method block. 

.. code-block:: php

   <?php
   
   class x {
   
       function foo(Y $y) {
           // $y is type Y
   
           // A cast version of $y is stored into $yAsString. $y is untouched.
           $yAsString = (string) $y;
   
           // $y is of type 'int', now.
           $y = 1;
   
           // Some more code
   
           // display the string version.
           echo $yAsString; 
           // so, Y $y is now raising an error
           echo $y->name; 
       }
   }
   
   ?>


This problem doesn't apply to scalar types : by default, PHP pass scalar parameters by value, not by reference. Class types are always passed by reference.

This problem is similar to `Classes/DontUnsetProperties`_ : the `static <https://www.php.net/manual/en/language.oop5.static.php>`_ specification of the property may be unset, leading to confusing 'undefined property', while the class hold the property definition.



Suggestions
^^^^^^^^^^^

* Use different variable names when converting a parameter to a different type.
* Only use methods and properties calls on a typed parameter.

Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Functions/ModifyTypedParameter     |
+-------------+------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`ClassReview` |
+-------------+------------------------------------+
| Exakt since | 2.1.9                              |
+-------------+------------------------------------+
| Php Version | All                                |
+-------------+------------------------------------+
| Severity    | Minor                              |
+-------------+------------------------------------+
| Time To Fix | Quick (30 mins)                    |
+-------------+------------------------------------+
| Precision   | Very high                          |
+-------------+------------------------------------+


.. _multiple-functions-declarations:

Multiple Functions Declarations
+++++++++++++++++++++++++++++++

 Some functions are declared multiple times in the code. 

PHP accepts multiple definitions for the same functions, as long as they are not in the same file (linting error), or not included simultaneously during the execution. 

This creates to several situations in which the same functions are defined multiple times : the function may be compatible with various PHP version, but their implementation may not. Or the function is part of a larger library, and sometimes only need without the rest of the library. 

It is recommended to avoid having several functions with the same name in one repository. Turn those functions into methods and load them when needed. 

.. code-block:: php

   <?php
   
   namespace a {
       function foo() {}
   }
   
   // Other file
   namespace a {
       function foo() {}
       function bar() {}
   }
   
   
   ?>

Specs
^^^^^
+-------------+--------------------------------+
| Short name  | Functions/MultipleDeclarations |
+-------------+--------------------------------+
| Rulesets    | :ref:`CE`                      |
+-------------+--------------------------------+
| Exakt since | 0.12.0                         |
+-------------+--------------------------------+
| Php Version | All                            |
+-------------+--------------------------------+
| Severity    | Minor                          |
+-------------+--------------------------------+
| Time To Fix | Slow (1 hour)                  |
+-------------+--------------------------------+
| Precision   | High                           |
+-------------+--------------------------------+


.. _multiple-identical-closure:

Multiple Identical Closure
++++++++++++++++++++++++++

 Several closures are defined with the same code. 

It may be interesting to check if a named function could be defined from them.

.. code-block:: php

   <?php
   
   // the first squares, with closure
   $squares= array_map(function ($a) {return $a * $a; }, range(0, 10) );
   
   // later, in another file...
   // another identical closure 
   $squaring = function ($x) { return $x * $x; };
   foo($x, $squaring);
   
   ?>


This analysis also reports functions and methods that look like the closures : they may be considered for switch.



Suggestions
^^^^^^^^^^^

* Create a function with the body of those closures, and replace the closures by the function's name.

Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Functions/MultipleIdenticalClosure |
+-------------+------------------------------------+
| Rulesets    | none                               |
+-------------+------------------------------------+
| Exakt since | 1.5.8                              |
+-------------+------------------------------------+
| Php Version | All                                |
+-------------+------------------------------------+
| Severity    | Minor                              |
+-------------+------------------------------------+
| Time To Fix | Slow (1 hour)                      |
+-------------+------------------------------------+
| Precision   | Medium                             |
+-------------+------------------------------------+


.. _multiple-returns:

Multiple Returns
++++++++++++++++

 Functions and methods that have multiple return statement. 

This makes it difficult to maintain : since the function may be short-circuited early, some later instruction may be omitted.

Ideally, guard clauses, which check if arguments are valid or not at the beginning of the method are the only exception to this rule.

.. code-block:: php

   <?php
   
   function foo() {
       // This is a guard clause, that checks arguments. 
       if ($a < 0) {
           return false;
       }
       
       $b = 0;
       for($i = 0; $i < $a; $i++) {
           $b += bar($i);
       }
       
       return $b;
   }
   ?>


Currently, the engine doesn't spot guard clauses.

See also `Single Function `Exit <https://www.www.php.net/exit>`_ Point <http://wiki.c2.com/?SingleFunctionExitPoint>`_.

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Functions/MultipleReturn |
+-------------+--------------------------+
| Rulesets    | none                     |
+-------------+--------------------------+
| Exakt since | 0.8.4                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Slow (1 hour)            |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _multiple-definition-of-the-same-argument:

Multiple Definition Of The Same Argument
++++++++++++++++++++++++++++++++++++++++

 A method's signature is holding twice (or more) the same argument. For example, function x ($a, $a) { `... <https://www.php.net/manual/en/functions.arguments.php#functions.variable-arg-list>`_ }. 

This is accepted as is by PHP 5, and the last parameter's value will be assigned to the variable. PHP 7.0 and more recent has dropped this feature, and reports a fatal error when linting the code.

.. code-block:: php

   <?php
     function x ($a, $a) { print $a; };
     x(1,2); => display 2
   
       // special case with a closure : 
     function ($a) use ($a) { print $a; };
     x(1,2); => display 2
   
   ?>


However, this is not common programming practise : all arguments should be named differently.

See also `Prepare for PHP 7 error messages (part 3) <https://www.exakat.io/prepare-for-php-7-error-messages-part-3/>`_.


Suggestions
^^^^^^^^^^^

* Give different names to different parameters

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------+
| Short name  | Functions/MultipleSameArguments                                                                            |
+-------------+------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56` |
+-------------+------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Php Version | 7.0-                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                           |
+-------------+------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+
| ClearPHP    | `all-unique-arguments <https://github.com/dseguy/clearPHP/tree/master/rules/all-unique-arguments.md>`__    |
+-------------+------------------------------------------------------------------------------------------------------------+


.. _must-return-methods:

Must Return Methods
+++++++++++++++++++

 The following methods are expected to return a value that will be used later. Without return, they are useless.

Methods that must return are : `__get() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__isset() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__sleep() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__toString() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__set_state() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__invoke() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__debugInfo() <https://www.php.net/manual/en/language.oop5.magic.php>`_.
Methods that may not return, but are often expected to : `__call() <https://www.php.net/manual/en/language.oop5.magic.php>`_, `__callStatic() <https://www.php.net/manual/en/language.oop5.magic.php>`_.


.. code-block:: php

   <?php
   
   class foo {
       public function __isset($a) {
           // returning something useful
           return isset($this->$var[$a]);
       }
   
       public function __get($a) {
           $this->$a++;
           // not returning... 
       }
   
       public function __call($name, $args) {
           $this->$name(...$args);
           // not returning anything, but that's OK
       }
   
   }
   ?>





Suggestions
^^^^^^^^^^^

* Add a return expression, with a valid data type
* Remove the return typehint

Specs
^^^^^
+-------------+---------------------------------------------------------------------+
| Short name  | Functions/MustReturn                                                |
+-------------+---------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`LintButWontExec` |
+-------------+---------------------------------------------------------------------+
| Exakt since | 0.8.4                                                               |
+-------------+---------------------------------------------------------------------+
| Php Version | All                                                                 |
+-------------+---------------------------------------------------------------------+
| Severity    | Major                                                               |
+-------------+---------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                     |
+-------------+---------------------------------------------------------------------+
| Precision   | High                                                                |
+-------------+---------------------------------------------------------------------+


.. _never-used-parameter:

Never Used Parameter
++++++++++++++++++++

 When a parameter is never used at calltime, it may be turned into a local variable.

It seems that the parameter was set up initially, but never found its practical usage. It is never mentioned, and always fall back on its default value.  

Parameter without a default value are reported by PHP, and are usually always filled. 

.. code-block:: php

   <?php
   
   // $b may be turned into a local var, it is unused
   function foo($a, $b = 1) {
       return $a + $b;
   }
   
   // whenever foo is called, the 2nd arg is not mentionned
   foo($a);
   foo(3);
   foo('a');
   foo($c);
   
   ?>




Suggestions
^^^^^^^^^^^

* Drop the unused argument in the method definition
* Actually use the argument when calling the method
* Drop the default value, and check warnings that mention usage of this parameter

Specs
^^^^^
+-------------+-------------------------------------------------+
| Short name  | Functions/NeverUsedParameter                    |
+-------------+-------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Suggestions`              |
+-------------+-------------------------------------------------+
| Exakt since | 1.0.6                                           |
+-------------+-------------------------------------------------+
| Php Version | All                                             |
+-------------+-------------------------------------------------+
| Severity    | Minor                                           |
+-------------+-------------------------------------------------+
| Time To Fix | Slow (1 hour)                                   |
+-------------+-------------------------------------------------+
| Precision   | High                                            |
+-------------+-------------------------------------------------+
| Examples    | :ref:`case-piwigo-functions-neverusedparameter` |
+-------------+-------------------------------------------------+


.. _no-boolean-as-default:

No Boolean As Default
+++++++++++++++++++++

 Default values should always be set up with a constant name.

Class constants and constants improve readability when calling the methods or comparing values and statuses.

.. code-block:: php

   <?php
   
   const CASE_INSENSITIVE = true;
   const CASE_SENSITIVE = false;
   
   function foo($case_insensitive = true) {
       // doSomething()
   }
   
   // Readable code 
   foo(CASE_INSENSITIVE);
   foo(CASE_SENSITIVE);
   
   
   // unreadable code  : is true case insensitive or case sensitive ? 
   foo(true);
   foo(false);
   
   ?>


See also `FlagArgument <https://www.martinfowler.com/bliki/FlagArgument.html>`_ and `Clean code: The curse of a boolean parameter <https://medium.com/@amlcurran/clean-code-the-curse-of-a-boolean-parameter-c237a830b7a3>`_.


Suggestions
^^^^^^^^^^^

* Use constants or class constants to give value to a boolean literal
* When constants have been defined, use them when calling the code
* Split the method into two methods, one for each case

Specs
^^^^^
+-------------+---------------------------------------------------+
| Short name  | Functions/NoBooleanAsDefault                      |
+-------------+---------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                    |
+-------------+---------------------------------------------------+
| Exakt since | 0.10.0                                            |
+-------------+---------------------------------------------------+
| Php Version | All                                               |
+-------------+---------------------------------------------------+
| Severity    | Minor                                             |
+-------------+---------------------------------------------------+
| Time To Fix | Quick (30 mins)                                   |
+-------------+---------------------------------------------------+
| Precision   | High                                              |
+-------------+---------------------------------------------------+
| Examples    | :ref:`case-openconf-functions-nobooleanasdefault` |
+-------------+---------------------------------------------------+


.. _no-class-as-typehint:

No Class As Typehint
++++++++++++++++++++

 Avoid using classes as typehint : always use interfaces. This way, different classes, or versions of classes may be passed as argument. The typehint is not linked to an implementation, but to signatures.

A class is needed when the object is with properties : interfaces do not allow the specifications of properties.

.. code-block:: php

   <?php
   
   class X {
       public $p = 1;
   
       function foo() {}
   }
   
   interface i {
       function foo();
   }
   
   // X is a class : any update in the code requires changing / subclassing X or the rest of the code.
   function bar(X $x) {
       $x->foo();
   }
   
   // I is an interface : X may implements this interface without refactoring and pass
   // later, newer versions of X may get another name, but still implement I, and still pass
   function bar2(I $x) {
       $x->foo();
   }
   
   function bar3(I $x) {
       echo $x->p;
   }
   
   ?>


See also `Type hinting for interfaces <http://phpenthusiast.com/object-oriented-php-tutorials/type-hinting-for-interfaces>`_.


Suggestions
^^^^^^^^^^^

* Create an interface with the important methods, and use that interface
* Create an abstract class, when public properties are also needed

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------+
| Short name  | Functions/NoClassAsTypehint                                                                         |
+-------------+-----------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Typechecks`                                                                                   |
+-------------+-----------------------------------------------------------------------------------------------------+
| Exakt since | 0.11.4                                                                                              |
+-------------+-----------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                 |
+-------------+-----------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                               |
+-------------+-----------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                     |
+-------------+-----------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                |
+-------------+-----------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-vanilla-functions-noclassastypehint`, :ref:`case-phpmyadmin-functions-noclassastypehint` |
+-------------+-----------------------------------------------------------------------------------------------------+


.. _no-literal-for-reference:

No Literal For Reference
++++++++++++++++++++++++

 Method arguments and return values may be by reference. Then, they need to be a valid variable.

Objects are always passed by reference, so there is no need to explicitly declare it.

Expressions, including ternary operator, produce value, and can't be used by reference directly. This is also the case for expression that include one or more reference. 

.. code-block:: php

   <?php
   
   // variables, properties, static properties, array items are all possible
   $a = 1;
   foo($a);
   
   //This is not possible, as a literal can't be a reference
   foo(1);
   
   function foo(&$int) { return $int; }
   
   
   // This is not a valid reference
   function &bar() { return 2; }
   function &bar2() { return 2 + $r; }
   
   ?>


Wrongly passing a value as a reference leads to a PHP Notice.

See also `References <https://www.php.net/references>`_.



Suggestions
^^^^^^^^^^^

* Remove the reference in the method signature (argument or return value)
* Make the argument an object, by using a typehint (non-scalar)
* Put the value into a variable prior to call (or return) the method

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Functions/NoLiteralForReference             |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 1.9.5                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _no-return-used:

No Return Used
++++++++++++++

 The return value of the following functions are never used. The return argument may be dropped from the code, as it is dead code.

This analysis supports functions and `static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods, when a definition may be found. It doesn't support method calls.

.. code-block:: php

   <?php
   
   function foo($a = 1;) { return 1; }
   foo();
   foo();
   foo();
   foo();
   foo();
   foo();
   
   // This function doesn't return anything. 
   function foo2() { }
   
   // The following function are used in an expression, thus the return is important
   function foo3() {  return 1;}
   function foo4() {  return 1;}
   function foo5() {  return 1;}
   
   foo3() + 1; 
   $a = foo4();
   foo(foo5());
   
   ?>



Suggestions
^^^^^^^^^^^

* Remove the return statement in the function
* Actually use the value returned by the method, for test or combination with other values

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------+
| Short name  | Functions/NoReturnUsed                                                                |
+-------------+---------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Suggestions`                                                    |
+-------------+---------------------------------------------------------------------------------------+
| Exakt since | 0.11.3                                                                                |
+-------------+---------------------------------------------------------------------------------------+
| Php Version | All                                                                                   |
+-------------+---------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                 |
+-------------+---------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                         |
+-------------+---------------------------------------------------------------------------------------+
| Precision   | High                                                                                  |
+-------------+---------------------------------------------------------------------------------------+
| Examples    | :ref:`case-spip-functions-noreturnused`, :ref:`case-livezilla-functions-noreturnused` |
+-------------+---------------------------------------------------------------------------------------+


.. _nullable-with-constant:

Nullable With Constant
++++++++++++++++++++++

 Arguments are automatically nullable with a literal null. They used to also be nullable with a constant null, before PHP 8.0.

.. code-block:: php

   <?php
   
   // Extracted from https://github.com/php/php-src/blob/master/UPGRADING
   
   // Replace
   function test(int $arg = CONST_RESOLVING_TO_NULL) {}
   // With
   function test(?int $arg = CONST_RESOLVING_TO_NULL) {}
   // Or
   function test(int $arg = null) {}
           
   ?>



Suggestions
^^^^^^^^^^^

* Use the valid syntax

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Functions/NullableWithConstant       |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP80` |
+-------------+--------------------------------------+
| Exakt since | 2.1.9                                |
+-------------+--------------------------------------+
| Php Version | 8.0-                                 |
+-------------+--------------------------------------+
| Severity    | Minor                                |
+-------------+--------------------------------------+
| Time To Fix | Quick (30 mins)                      |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _nullable-without-check:

Nullable Without Check
++++++++++++++++++++++

 Nullable typehinted argument should be checked before usage.

.. code-block:: php

   <?php
   
   // This will emit a fatal error when $a = null
   function foo(?A $a) {
       return $a->m();
   }
   
   // This is stable
   function foo(?A $a) {
       if ($a === null) {
           return 42;
       } else {
           return $a->m();
       }
   }
   
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+--------------------------------+
| Short name  | Functions/NullableWithoutCheck |
+-------------+--------------------------------+
| Rulesets    | :ref:`ClassReview`             |
+-------------+--------------------------------+
| Exakt since | 2.0.2                          |
+-------------+--------------------------------+
| Php Version | All                            |
+-------------+--------------------------------+
| Severity    | Minor                          |
+-------------+--------------------------------+
| Time To Fix | Quick (30 mins)                |
+-------------+--------------------------------+
| Precision   | High                           |
+-------------+--------------------------------+


.. _one-letter-functions:

One Letter Functions
++++++++++++++++++++

 One letter functions seems to be really short for a meaningful name. This may happens for very high usage functions, so as to keep code short, but such functions should be rare.

.. code-block:: php

   <?php
   
   // Always use a meaningful name 
   function addition($a, $b) {
       return $a + $b;
   }
   
   // One letter functions are rarely meaningful
   function f($a, $b) {
       return $a + $b;
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Use full names for functions
* Remove the function name altogether : use a closure

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------+
| Short name  | Functions/OneLetterFunctions                                                                            |
+-------------+---------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Semantics`                                                                                        |
+-------------+---------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                   |
+-------------+---------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                     |
+-------------+---------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                   |
+-------------+---------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                         |
+-------------+---------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                    |
+-------------+---------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-thinkphp-functions-oneletterfunctions`, :ref:`case-cleverstyle-functions-oneletterfunctions` |
+-------------+---------------------------------------------------------------------------------------------------------+


.. _only-variable-for-reference:

Only Variable For Reference
+++++++++++++++++++++++++++

 When a method is requesting an argument to be a reference, it cannot be called with a literal value.

The call must be made with a variable, or any assimilated data container : array, property or `static <https://www.php.net/manual/en/language.oop5.static.php>`_ property. 

.. code-block:: php

   <?php
   
   // This is not possible
   foo(1,2);
   
   // This is working
   foo($a, $b);
   
   function foo($a, &$b) {}
   
   ?>


Note that PHP may detect this error at linting time, if the method is defined after being called : at that point, PHP will only check the problem during execution. This is definitely the case for methods, compared to functions or `static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods.

See also `Passing arguments by reference <https://www.php.net/manual/en/functions.arguments.php#functions.arguments.by-reference>`_.


Suggestions
^^^^^^^^^^^

* Put the literal value in a variable before calling the method.
* Omit the arguments, when it won't be used.

Specs
^^^^^
+-------------+----------------------------------------+
| Short name  | Functions/OnlyVariableForReference     |
+-------------+----------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`LintButWontExec` |
+-------------+----------------------------------------+
| Exakt since | 1.4.6                                  |
+-------------+----------------------------------------+
| Php Version | All                                    |
+-------------+----------------------------------------+
| Severity    | Critical                               |
+-------------+----------------------------------------+
| Time To Fix | Quick (30 mins)                        |
+-------------+----------------------------------------+
| Precision   | Medium                                 |
+-------------+----------------------------------------+


.. _only-variable-passed-by-reference:

Only Variable Passed By Reference
+++++++++++++++++++++++++++++++++

 When an argument is expected by reference, it is compulsory to provide a container. A container may be a variable, an array, a property or a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ property. 

This may be linted by PHP, when the function definition is in the same file as the function usage. This is silently linted if definition and usage are separated, if the call is dynamical or made as a method.

.. code-block:: php

   <?php
   
   function foo(&$bar) { /**/ }
   
   function &bar() { /**/ }
   
   // This is not possible : strtolower() returns a value
   foo(strtolower($string));
   
   // This is valid : bar() returns a reference
   foo(bar($string));
   
   ?>


This analysis currently covers functioncalls and `static <https://www.php.net/manual/en/language.oop5.static.php>`_ methodcalls, but omits methodcalls.


Suggestions
^^^^^^^^^^^

* Store the previous result in a variable, and then call the function.

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------------------------------------+
| Short name  | Functions/OnlyVariablePassedByReference                                                                                  |
+-------------+--------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                                           |
+-------------+--------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.11.3                                                                                                                   |
+-------------+--------------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                                      |
+-------------+--------------------------------------------------------------------------------------------------------------------------+
| Severity    | Critical                                                                                                                 |
+-------------+--------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                                            |
+-------------+--------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                     |
+-------------+--------------------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-dolphin-functions-onlyvariablepassedbyreference`, :ref:`case-phpipam-functions-onlyvariablepassedbyreference` |
+-------------+--------------------------------------------------------------------------------------------------------------------------+


.. _optional-parameter:

Optional Parameter
++++++++++++++++++

 An optional parameter is a method argument that has both a typehint and a default value. 

Such argument is optional, as it may be omitted. When this is the case, the code has to differentiate between the default behavior or the actual usage. It is recommended to avoid providing a default value, and use a null object.

.. code-block:: php

   <?php
       
   class foo {
       function methodWithOptionalArgument(bar $x = null) {
           if ($x === null) {
               // default behavior
           } else {
               // normal behavior
           }
       }
   
       function methodWithCompulsoryArgument(bar $x) {
           // normal behavior
           // $x is always a bar. 
       }
   }
   ?>

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Functions/OptionalParameter |
+-------------+-----------------------------+
| Rulesets    | none                        |
+-------------+-----------------------------+
| Exakt since | 0.12.4                      |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Slow (1 hour)               |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _parameter-hiding:

Parameter Hiding
++++++++++++++++

 When a parameter is set to another variable, and never used.

While this is a legit syntax, parameter hiding tends to make the code confusing. The parameter itself seems to be unused, while some extra variable appears.

Keep this code simple by removing the hiding parameter.

.. code-block:: php

   <?php
   
   function substract($a, $b) {
       // $b is given to $c;
       $c = $b; 
   
       $c is used, but $b would be the same
       return $a - $c;
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Remove the hiding parameter

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Functions/ParameterHiding |
+-------------+---------------------------+
| Rulesets    | :ref:`Semantics`          |
+-------------+---------------------------+
| Exakt since | 1.9.8                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _prefix-and-suffixes-with-typehint:

Prefix And Suffixes With Typehint
+++++++++++++++++++++++++++++++++

 This analysis checks the relationship between methods prefixes and suffixes, with their corresponding return typehint.

For example, a method with the signature ``function isACustomer() {}`` should return a boolean. That boolean can then be read when calling the method : ``if ($user->isACustomer()) {}``.

There are multiple such conventions that may be applied. For example, ``has*`` should return a boolean, ``set*`` should return nothing (a.k.a ``void``), and ``get*`` shall return any kind of type. 

.. code-block:: php

   <?php
   
   class x  {
       // Easy to read convention
       function isAUser() : bool {}
   
       // shall return a boolean
       function isACustomer() {}
   
       // shall return a string, based on suffix 'name => string'
       function getName() {}
   
       // shall return a string, based on suffix 'name => string'
       function getUsername() {}
   
       // shall return \Uuid, based on prefix 'uuid => \Uuid'
       function getUuid() {}
   
       // shall return anything, based on no prefix nor suffix
       function getBirthday() {}
   
   }
   
   ?>


There are 2 parameters for this analysis. It is recommended to customize them to get an better results, related to the naming conventions used in the code.

``prefixedType`` is used for prefix in method names, which is the beginning of the name. ``suffixedType`` is used for suffixes : the ending part of the name. Matching is case insensitive.

The prefix is configured as the index of the map, while the related type is configured as the value of the map.

``prefixToType['is'] = 'bool';`` will be use as ``is*`` shall use the ``bool`` typehint.

Multiple typehints may be used at the same time. PHP supports multiple types since PHP 8.0, and Exakat will support them with any PHP version. Specify multiple types by separating them with comma. Any typehint not found in this list will be reported, including ``null``.

PHP scalar types are available : ``string``, ``int``, ``void``, etc. Explicit types, based on classes or interfaces, must use the fully qualified name, not the short name. ``suffixToType['uuid'] = '\Uuid';`` will be use as ``*uuid`` shall use the ``\Uuid`` typehint.

When multiple rules applies, only one is reported. 



Suggestions
^^^^^^^^^^^

*

+--------------+-----------------------------------------+----------+------------------------------------------------+
| Name         | Default                                 | Type     | Description                                    |
+--------------+-----------------------------------------+----------+------------------------------------------------+
| prefixedType | prefixedType['is'] = 'bool';            | ini_hash | List of prefixes and their expected returntype |
|              | prefixedType['has'] = 'bool';           |          |                                                |
|              | prefixedType['set'] = 'void';           |          |                                                |
|              | prefixedType['list'] = 'array';         |          |                                                |
+--------------+-----------------------------------------+----------+------------------------------------------------+
| suffixedType | prefixedType['list'] = 'bool';          | ini_hash | List of suffixes and their expected returntype |
|              | prefixedType['int'] = 'int';            |          |                                                |
|              | prefixedType['string'] = 'string';      |          |                                                |
|              | prefixedType['name'] = 'string';        |          |                                                |
|              | prefixedType['description'] = 'string'; |          |                                                |
|              | prefixedType['id'] = 'int';             |          |                                                |
|              | prefixedType['uuid'] = '\Uuid';         |          |                                                |
+--------------+-----------------------------------------+----------+------------------------------------------------+



Specs
^^^^^
+-------------+------------------------+
| Short name  | Functions/PrefixToType |
+-------------+------------------------+
| Rulesets    | :ref:`Semantics`       |
+-------------+------------------------+
| Exakt since | 2.1.1                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Quick (30 mins)        |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _real-functions:

Real Functions
++++++++++++++

 Real functions, not methods.

Function keywords, that are not in a class, trait, interface, nor a closure.

.. code-block:: php

   <?php
   
   // a real Function
   function realFunction () {}
   
   // Those are not real functions
   function ($closure) { }
   
   class foo {
       function isAClassMethod() {}
   }
   
   interface fooi {
       function isAnInterfaceMethod() {}
   }
   
   trait foot {
       function isATraitMethod() {}
   }
   ?>

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Functions/RealFunctions |
+-------------+-------------------------+
| Rulesets    | none                    |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _recursive-functions:

Recursive Functions
+++++++++++++++++++

 Recursive functions are functions that calls itself.

.. code-block:: php

   <?php
   
   // a recursive function ; it calls itself
   function factorial($n) {
       if ($n == 1) { return 1; }
       
       return factorial($n - 1) * $n;
   }
   ?>


Methods are not handled here.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Functions/Recursive |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.8.4               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _redeclared-php-functions:

Redeclared PHP Functions
++++++++++++++++++++++++

 Function that bear the same name as a PHP function, and that are declared. 

This is useful when managing backward compatibility, like emulating an old function, or preparing for newer PHP versions, like emulating new upcoming function.

.. code-block:: php

   <?php
   
   if (version_compare(PHP_VERSION, 7.0) > 0) {
       function split($separator, $string) {
           return explode($separator, $string);
       }
   }
   
   print_r( split(' ', '2 3'));
   
   ?>



Suggestions
^^^^^^^^^^^

* Check if it is still worth emulating that function

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Functions/RedeclaredPhpFunction             |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.8.4                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Slow (1 hour)                               |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _relay-function:

Relay Function
++++++++++++++

 Relay function only delegate workload to another one. 

Relay functions and methods are delegating the actual work to another function or method. They do not have any impact on the results, besides exposing another name for the same feature.

.. code-block:: php

   <?php
   
   function myStrtolower($string) {
       return \strtolower($string);
   }
   
   ?>


Relay functions are typical of transition API, where an old API have to be preserved until it is fully migrated. Then, they may be removed, so as to reduce confusion, and simplify the API. 


Suggestions
^^^^^^^^^^^

* Remove relay function, call directly the final function
* Remove the target function, and move the code here
* Add more logic to that function, like conditions or cache

Specs
^^^^^
+-------------+----------------------------------------------------------------------------------------+
| Short name  | Functions/RelayFunction                                                                |
+-------------+----------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                         |
+-------------+----------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                  |
+-------------+----------------------------------------------------------------------------------------+
| Php Version | All                                                                                    |
+-------------+----------------------------------------------------------------------------------------+
| Severity    | Major                                                                                  |
+-------------+----------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                        |
+-------------+----------------------------------------------------------------------------------------+
| Precision   | High                                                                                   |
+-------------+----------------------------------------------------------------------------------------+
| Examples    | :ref:`case-teampass-functions-relayfunction`, :ref:`case-spip-functions-relayfunction` |
+-------------+----------------------------------------------------------------------------------------+


.. _semantic-typing:

Semantic Typing
+++++++++++++++

 Arguments names are only useful inside the method's body. They are not actual type.

.. code-block:: php

   <?php
   
   // arguments should be a string and an array
   function foo($array, $str) {
       // more code
       return $boolean;
   }
   
   // typehint is actually checking the values
   function bar(iterable $closure) : bool {
       // more code
       return true;
   }
   
   ?>


 

Suggestions
^^^^^^^^^^^

* Use a typehint to make sure the argument is of the expected type.

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Functions/SemanticTyping |
+-------------+--------------------------+
| Rulesets    | :ref:`Semantics`         |
+-------------+--------------------------+
| Exakt since | 2.0.5                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Quick (30 mins)          |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _argument-should-be-typehinted:

Argument Should Be Typehinted
+++++++++++++++++++++++++++++

 When a method expects objects as argument, those arguments should be typehinted. This way, it provides early warning that a wrong object is being sent to the method.

The analyzer will detect situations where a class, or the keywords 'array' or 'callable'. 

.. code-block:: php

   <?php
   
   // What are the possible classes that have a 'foo' method? 
   function foo($bar) {
       return $bar->foo();
   }
   
   ?>


`Closure <https://www.php.net/manual/en/class.closure.php>`_ arguments are omitted.

See also `Type declarations <https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration>`_.


Suggestions
^^^^^^^^^^^

* Add the typehint to the function arguments

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------+
| Short name  | Functions/ShouldBeTypehinted                                                                      |
+-------------+---------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Typechecks`                                                                                 |
+-------------+---------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                             |
+-------------+---------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                               |
+-------------+---------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                             |
+-------------+---------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                     |
+-------------+---------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                              |
+-------------+---------------------------------------------------------------------------------------------------+
| ClearPHP    | `always-typehint <https://github.com/dseguy/clearPHP/tree/master/rules/always-typehint.md>`__     |
+-------------+---------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-dolphin-functions-shouldbetypehinted`, :ref:`case-mautic-functions-shouldbetypehinted` |
+-------------+---------------------------------------------------------------------------------------------------+


.. _should-use-constants:

Should Use Constants
++++++++++++++++++++

 The following functions have related constants that should be used as arguments, instead of scalar literals, such as integers or strings.

.. code-block:: php

   <?php
   
   // The file is read and new lines are ignored.
   $lines = file('file.txt', FILE_IGNORE_NEW_LINES)
   
   // What is this doing, with 2 ? 
   $lines = file('file.txt', 2);
   
   ?>


See also `Bitmask Constant Arguments in PHP <https://medium.com/@liamhammett/bitmask-constant-arguments-in-php-cf32bf35c73>`_.


Suggestions
^^^^^^^^^^^

* Use PHP native constants whenever possible, for better readability.

Specs
^^^^^
+-------------+-------------------------------------------------+
| Short name  | Functions/ShouldUseConstants                    |
+-------------+-------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                  |
+-------------+-------------------------------------------------+
| Exakt since | 0.8.4                                           |
+-------------+-------------------------------------------------+
| Php Version | All                                             |
+-------------+-------------------------------------------------+
| Severity    | Minor                                           |
+-------------+-------------------------------------------------+
| Time To Fix | Quick (30 mins)                                 |
+-------------+-------------------------------------------------+
| Precision   | High                                            |
+-------------+-------------------------------------------------+
| Examples    | :ref:`case-tine20-functions-shoulduseconstants` |
+-------------+-------------------------------------------------+


.. _should-yield-with-key:

Should Yield With Key
+++++++++++++++++++++

 `iterator_to_array() <https://www.php.net/iterator_to_array>`_ will overwrite generated values with the same key. 

PHP generators are based on the ``yield`` keyword. They also delegate some generating to other methods, with ``yield from``. 

When delegating, ``yield from`` uses the keys that are generated with ``yield``, and otherwise, it uses auto-generated index, starting with 0. 

The trap is that each ``yield from`` reset the index generation and start again with 0. Coupled with `iterator_to_array() <https://www.php.net/iterator_to_array>`_, this means that the final generated array may lack some values, while a `foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_ loop would yield all of them.

.. code-block:: php

   <?php 
   
   function g1() : Generator {
   	for ( $i = 0; $i < 4; $i++ ) { yield $i; }
   }
   
   function g2() : Generator {
   	for ( $i = 5; $i < 10; $i++ ) { yield $i; }
   }
   
   function aggregator() : Generator {
   	yield from g1();
   	yield from g2();
   }
   
   print_r(iterator_to_array());
   
   /*
   Array
   (
       [0] => 6
       [1] => 7
       [2] => 8
       [3] => 9
       [4] => 4  // Note that 4 and 5 still appears
       [5] => 5  // They are not overwritten by the second yield
   )
   */
   
   
   foreach ( aggregator() as $i ) {
   	print $i.PHP_EOL;
   }
   
   /*
   0  // Foreach has no overlap and yield it all.
   1
   2
   3
   4
   5
   6
   7
   8
   9
   */
   
   ?>


Thanks to `Holger Woltersdorf <https://twitter.com/hollodotme>`_ for `pointing this <https://twitter.com/hollodotme/status/1057909890566537217>`_.

See also `Generator syntax <https://www.php.net/manual/en/language.generators.syntax.php>`_ and `Yielding values with keys <https://www.php.net/manual/en/language.generators.syntax.php#control-structures.yield.associative>`_.


Suggestions
^^^^^^^^^^^

* Use iterator_to_array() on each generator separately, and use array_merge() to merge all the arrays.
* Always yield with distinct keys
* Avoid iterator_to_array() and use foreach()

Specs
^^^^^
+-------------+-----------------------------------------------------------+
| Short name  | Functions/ShouldYieldWithKey                              |
+-------------+-----------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Top10` |
+-------------+-----------------------------------------------------------+
| Exakt since | 1.5.2                                                     |
+-------------+-----------------------------------------------------------+
| Php Version | All                                                       |
+-------------+-----------------------------------------------------------+
| Severity    | Major                                                     |
+-------------+-----------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                             |
+-------------+-----------------------------------------------------------+
| Precision   | High                                                      |
+-------------+-----------------------------------------------------------+


.. _too-many-local-variables:

Too Many Local Variables
++++++++++++++++++++++++

 Too many local variables were found in the methods. When over 15 variables are found in such a method, a violation is reported.

Local variables exclude globals (imported with global) and arguments. Local variable include `static <https://www.php.net/manual/en/language.oop5.static.php>`_ variables.

When too many variables are used in a function, it is a code smells. The function is trying to do too much and needs extra space for juggling.
Beyond 15 variables, it becomes difficult to keep track of their name and usage, leading to confusion, overwriting or hijacking. 

.. code-block:: php

   <?php
   
   // This function is OK : 3 vars are arguments, 3 others are globals.
   function a20a3g3($a1, $a2, $a3) {
       global $a4, $a5, $a6;
       
       $a1  = 1;
       $a2  = 2;
       $a3  = 3 ;
       $a4  = 4 ;
       $a5  = 5 ;
       $a6  = 6 ;
       $a7  = 7 ;
       $a8  = 8 ;
       $a9  = 9 ;
       $a10 = 10;
       $a11  = 11;
       $a12  = 12;
       $a13  = 13 ;
       $a14  = 14 ;
       $a15  = 15 ;
       $a16  = 16 ;
       $a17  = 17 ;
       $a18  = 18 ;
       $a19  = 19 ;
       $a20 = 20;
   
   }
   
   // This function has too many variables
   function a20() {
       
       $a1  = 1;
       $a2  = 2;
       $a3  = 3 ;
       $a4  = 4 ;
       $a5  = 5 ;
       $a6  = 6 ;
       $a7  = 7 ;
       $a8  = 8 ;
       $a9  = 9 ;
       $a10 = 10;
       $a11  = 11;
       $a12  = 12;
       $a13  = 13 ;
       $a14  = 14 ;
       $a15  = 15 ;
       $a16  = 16 ;
       $a17  = 17 ;
       $a18  = 18 ;
       $a19  = 19 ;
       $a20 = 20;
   
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Remove some of the variables, and inline them
* Break the big function into smaller ones
* Find repeated code and make it a separate function

+-------------------------------+---------+---------+------------------------------------------------------------------+
| Name                          | Default | Type    | Description                                                      |
+-------------------------------+---------+---------+------------------------------------------------------------------+
| tooManyLocalVariableThreshold | 15      | integer | Minimal number of variables in one function or method to report. |
+-------------------------------+---------+---------+------------------------------------------------------------------+



Specs
^^^^^
+-------------+------------------------------------------------------+
| Short name  | Functions/TooManyLocalVariables                      |
+-------------+------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                       |
+-------------+------------------------------------------------------+
| Exakt since | 0.9.2                                                |
+-------------+------------------------------------------------------+
| Php Version | All                                                  |
+-------------+------------------------------------------------------+
| Severity    | Minor                                                |
+-------------+------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                        |
+-------------+------------------------------------------------------+
| Precision   | High                                                 |
+-------------+------------------------------------------------------+
| Examples    | :ref:`case-humo-gen-functions-toomanylocalvariables` |
+-------------+------------------------------------------------------+


.. _too-many-parameters:

Too Many Parameters
+++++++++++++++++++

 Method has too many parameters. Exakat has a default parameter count which may be configured.

A method that needs more than 8 parameters is trying to do too much : it should be reviewed and split into smaller methods. 

.. code-block:: php

   <?php
   
   // This methods has too many parameters.
   function alertSomeone($name, $email, $title, $message, $attachements, $signature, $bcc, $cc, $extra_headers) { 
       /* too much code here */ 
   }
   
   ?>


See also `How many parameters is too many ? <https://www.exakat.io/how-many-parameters-is-too-many/>`_ and `Too Many Parameters <http://wiki.c2.com/?TooManyParameters>`_.



Suggestions
^^^^^^^^^^^

* Reduce the number of parameters to a lower level
* Break the function into smaller functions
* Turn the function into a class

+-----------------+---------+---------+-----------------------------------------+
| Name            | Default | Type    | Description                             |
+-----------------+---------+---------+-----------------------------------------+
| parametersCount | 8       | integer | Minimal number of parameters to report. |
+-----------------+---------+---------+-----------------------------------------+



Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------+
| Short name  | Functions/TooManyParameters                                                                          |
+-------------+------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Suggestions`                                                                                   |
+-------------+------------------------------------------------------------------------------------------------------+
| Exakt since | 1.1.9                                                                                                |
+-------------+------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                  |
+-------------+------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                |
+-------------+------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                        |
+-------------+------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                 |
+-------------+------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-wordpress-functions-toomanyparameters`, :ref:`case-churchcrm-functions-toomanyparameters` |
+-------------+------------------------------------------------------------------------------------------------------+


.. _too-much-indented:

Too Much Indented
+++++++++++++++++

 Reports methods that are using more than one level of indentation on average. 

Indentations levels are counted for each for, foreach, if...then, while, do..while, try..catch..finally structure met. Compulsory expressions, such as conditions, are not counted in the total. Levels of indentation start at 0 (no indentation needed)

This analysis targets methods which are build around large conditions : the actual useful code is nested inside the branches of the if/then/else (for example). 

The default threshold ``indentationAverage`` of 1 is a good start for spotting large methods with big conditional code, and will leave smaller methods, even when they only contain one if/then. Larger methods shall be refactored in smaller size. 

The parameter ``minimumSize`` set aside methods which are too small for refactoring.

.. code-block:: php

   <?php
   
   // average 0
   function foo0() {
       $a = rand(1,2);
       $a *= 3;
       
       return $a;
   }
   
   // average 0.66 = (0 + 1 + 1) / 3
   function foo0_66() {
       // if () is at level 0
       if ($a == 2) { // condition is not counted
           $a = 1;    // level 1
       } else {
           $a = 2;    // level 1
       }
   }
   
   // average 1 = (0 + 2 + 1 + 1) / 4
   function foo1() {
       // if () is at level 0
       if ($a == 2) {
           // if () is at level 1
           if ($a == 2) {
               $a = 1; // level 2
           }
           $a = 1; // level 1
       } else {
           $a = 2; // level 1
       }
   }
   
   ?>


This analysis is distinct from Structures/MaxLevelOfIdentation, which only reports the highest level of indentation. This one reports how one method is build around one big 

See also :ref:`max-level-of-nesting`. 


Suggestions
^^^^^^^^^^^

* Refactor the method to reduce the highest level of indentation
* Refactor the method move some of the code to external methods.

+--------------------+---------+------+------------------------------------------------------------------------------------------------------------------------------------------------------+
| Name               | Default | Type | Description                                                                                                                                          |
+--------------------+---------+------+------------------------------------------------------------------------------------------------------------------------------------------------------+
| indentationAverage | 1       | real | Minimal average of indentation in a method to report. Default is 1.0, which means that the method is on average at one level of indentation or more. |
+--------------------+---------+------+------------------------------------------------------------------------------------------------------------------------------------------------------+
| minimumSize        | 3       | real | Minimal number of expressions in a method to apply this analysis.                                                                                    |
+--------------------+---------+------+------------------------------------------------------------------------------------------------------------------------------------------------------+



Specs
^^^^^
+-------------+---------------------------+
| Short name  | Functions/TooMuchIndented |
+-------------+---------------------------+
| Rulesets    | :ref:`Suggestions`        |
+-------------+---------------------------+
| Exakt since | 2.1.2                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _typehinted-references:

Typehinted References
+++++++++++++++++++++

 Typehinted arguments have no need for references. Since they are only an object, they are already a reference.

In fact, adding the & on the argument definition may lead to error like ``Only variables should be passed by reference``.

This applies to the ``object`` type hint, but not the the others, such as ``int`` or ``bool``.

.. code-block:: php

   <?php
       // a class
       class X {
           public $a = 3;
       }
   
       // typehinted reference
       //function foo(object &$x) works too
       function foo(X &$x) {
           $x->a = 1;
       
           return $x;
       }
   
       // Send an object 
       $y = foo(new X);
   
       // This prints 1;
       print $y->a;
   ?>


See also `Passing by reference <https://www.php.net/manual/en/language.references.pass.php>`_ and `Objects and references <https://www.php.net/manual/en/language.oop5.references.php>`_.


Suggestions
^^^^^^^^^^^

* Remove reference for typehinted arguments, unless the typehint is a scalar typehint.

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Functions/TypehintedReferences              |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 1.2.8                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Instant (5 mins)                            |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _typehint-must-be-returned:

Typehint Must Be Returned
+++++++++++++++++++++++++

 When using a typehint for a method, it is compulsory to use a at least one return in the method's body. This is true for nullable typehint too : ``return`` alone won't be sufficient.

.. code-block:: php

   <?php
   
   // The function returns a value (here, correct object)
   function foo() : Bar { return new Bar(); }
   
   // The function should at least, return a value
   function foo() : Bar { }
   
   // The function should at least, return a value : Null or an object. Void, here, is not acceptable.
   function foo() : ?Bar { return; }
   
   ?>


PHP lint this, but won't execute it.

This analysis doesn't check if the returned value is compatible with the returned typehint. Only its presence is checked.

See also `Return Type Declaration <https://www.php.net/manual/en/functions.returning-values.php#functions.returning-values.type-declaration>`_ and `Type hint in PHP function parameters and return values <https://mlocati.github.io/articles/php-type-hinting.html>`_.


Suggestions
^^^^^^^^^^^

* Add a return with a valid value

Specs
^^^^^
+-------------+---------------------------------------------------------------------+
| Short name  | Functions/TypehintMustBeReturned                                    |
+-------------+---------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`LintButWontExec` |
+-------------+---------------------------------------------------------------------+
| Exakt since | 1.6.9                                                               |
+-------------+---------------------------------------------------------------------+
| Php Version | All                                                                 |
+-------------+---------------------------------------------------------------------+
| Severity    | Major                                                               |
+-------------+---------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                     |
+-------------+---------------------------------------------------------------------+
| Precision   | High                                                                |
+-------------+---------------------------------------------------------------------+


.. _typehints:

Typehints
+++++++++

 List of all the types (classes or scalar) used in Typehinting.

.. code-block:: php

   <?php
   
   // here, array, myObject and string are all typehints.
   function foo(array $array, myObject $x, string $string) {
   
   }
   
   ?>


See also `Type declarations <https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Functions/Typehints |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.8.4               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _unbinding-closures:

Unbinding Closures
++++++++++++++++++

 Never drop ``$this``, once a closure was created in a non-`static <https://www.php.net/manual/en/language.oop5.static.php>`_ method. 

From the PHP wiki : Currently it is possible to unbind the `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ variable from a closure that originally had one by using $closure->bindTo(null). Due to the removal of `static <https://www.php.net/manual/en/language.oop5.static.php>`_ calls to non-`static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods in PHP 8, we now have a guarantee that `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ always exists inside non-`static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods. We would like to have a similar guarantee that `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ always exists for non-`static <https://www.php.net/manual/en/language.oop5.static.php>`_ closures declared inside non-`static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods. Otherwise, we will end up imposing an unnecessary performance penalty either on `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ accesses in general, or `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ accesses inside such closures.

.. code-block:: php

   <?php
   
   class x {
       private $a = 3;
       
       function foo() {
           return function () { echo $this->a; };
       }
   }
   
   $closure = (new x)->foo();
   
   // $this was expected, and it is not anymore
   $closure->bindTo(null);
   
   $closure->bindTo(new x);
   
   ?>


Calling bindTo() with a valid object is still valid.

See also `Unbinding `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ from non-`static <https://www.php.net/manual/en/language.oop5.static.php>`_ closures <https://wiki.php.net/rfc/deprecations_php_7_4#unbinding_this_from_non-static_closures>`_.



Suggestions
^^^^^^^^^^^

* Create a static closure, which doesn't rely on $this at all
* Remove the call to bindTo(null).

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Functions/UnbindingClosures          |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP74` |
+-------------+--------------------------------------+
| Exakt since | 1.9.0                                |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Minor                                |
+-------------+--------------------------------------+
| Time To Fix | Quick (30 mins)                      |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _undefined-functions:

Undefined Functions
+++++++++++++++++++

 Some functions are called, but not defined in the code. This means that the functions are probably defined in a missing library, or in an extension. If not, this will yield a Fatal error at execution.

.. code-block:: php

   <?php
   
   // Undefined function 
   foo($a);
   
   // valid function, as it belongs to the ext/yaml extension
   $parsed = yaml_parse($yaml);
   
   // This function is not defined in the a\b\c namespace, nor in the global namespace
   a\b\c\foo(); 
   
   ?>


See also `Functions <https://www.php.net/manual/en/language.functions.php>`_.



Suggestions
^^^^^^^^^^^

* Fix the name of the function in the code
* Remove the functioncall in the code
* Define the function for the code to call it
* Include the correct library in the code source

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Functions/UndefinedFunctions                |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.8.4                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Major                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _unknown-parameter-name:

Unknown Parameter Name
++++++++++++++++++++++

 The name of the parameter doesn't belong to the method signature. Named arguments was introduced in PHP 8.0.

.. code-block:: php

   <?php
   
   // All good
   foo(a:1, b:2, c:3);
   foo(...['a':1, 'b':2, 'c':3]);
   
   // A is not a parameter name, it should be a : names are case sensitive
   foo(A:1, b:2, c:3);
   foo(...['A':1, 'b':2, 'c':3]);
   
   function foo($a, $b, $c) {}
   ?>


See also `Named Arguments <https://wiki.php.net/rfc/named_params>`_.



Suggestions
^^^^^^^^^^^

* Fix the name of the parameter and use a valid one
* Remove the parameter name, and revert to positional notation

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Functions/UnknownParameterName              |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 2.1.6                                       |
+-------------+---------------------------------------------+
| Php Version | 8.0+                                        |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _unset-arguments:

Unset Arguments
+++++++++++++++

 There is no need to unset arguments. Those values will be freed at the end of the function anyhow. 

.. code-block:: php

   <?php
   
   function foo($a, $b) {
       $b = $a * 2;
       // This is useless. $a will be freed at the end of the function.
       unset($a);
   }
   
   ?>

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Functions/UnsetOnArguments |
+-------------+----------------------------+
| Rulesets    | none                       |
+-------------+----------------------------+
| Exakt since | 0.8.4                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Quick (30 mins)            |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _unused-arguments:

Unused Arguments
++++++++++++++++

 Those arguments are not used in the method or function. 

Unused arguments should be removed in functions : they are just dead code.

Unused argument may have to stay in methods, as the signature is actually defined in the `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ class. 

.. code-block:: php

   <?php
   
   // $unused is in the signature, but not used. 
   function foo($unused, $b, $c) {
       return $b + $c;
   }
   ?>




Suggestions
^^^^^^^^^^^

* Drop the argument from the signature
* Actually use that argument in the body of the method

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------------+
| Short name  | Functions/UnusedArguments                                                                        |
+-------------+--------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                   |
+-------------+--------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                            |
+-------------+--------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                              |
+-------------+--------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                            |
+-------------+--------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                  |
+-------------+--------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                             |
+-------------+--------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-thinkphp-functions-unusedarguments`, :ref:`case-phpmyadmin-functions-unusedarguments` |
+-------------+--------------------------------------------------------------------------------------------------+


.. _unused-functions:

Unused Functions
++++++++++++++++

 The functions below are unused. They look like dead code.

Recursive functions, level 1, are detected : they are only reported when a call from outside the function is made. Recursive functions calls of higher level (A calls B calls A) are not handled.

.. code-block:: php

   <?php
   
   function used() {}
   // The 'unused' function is defined but never called
   function unused() {}
   
   // The 'used' function is called at least once
   used();
   
   ?>




Suggestions
^^^^^^^^^^^

* Use the function in the code
* Remove the functions from the code

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------+
| Short name  | Functions/UnusedFunctions                                                                       |
+-------------+-------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Dead code <dead-code>`                                                                    |
+-------------+-------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                           |
+-------------+-------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                             |
+-------------+-------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                           |
+-------------+-------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                 |
+-------------+-------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                            |
+-------------+-------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-woocommerce-functions-unusedfunctions`, :ref:`case-piwigo-functions-unusedfunctions` |
+-------------+-------------------------------------------------------------------------------------------------+


.. _unused-inherited-variable-in-closure:

Unused Inherited Variable In Closure
++++++++++++++++++++++++++++++++++++

 Some closures forgot to make usage of inherited variables.

`Closure <https://www.php.net/manual/en/class.closure.php>`_ have two separate set of incoming variables : the arguments (between parenthesis) and the inherited variables, in the 'use' clause. Inherited variables are extracted from the local environment at creation time, and keep their value until execution. 

The reported closures are requesting some local variables, but do not make any usage of them. They may be considered as dead code.  

.. code-block:: php

   <?php
   
   // In this closure, $y is forgotten, but $u is used.
   $a = function ($y) use ($u) { return $u; };
   
   // In this closure, $u is forgotten
   $a = function ($y, $z) use ($u) { return $u; };
   
   ?>


See also `Anonymous functions <https://www.php.net/manual/en/functions.anonymous.php>`_.


Suggestions
^^^^^^^^^^^

* Remove the unused inherited variable
* Make us of the unused inherited variable

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------------------------+
| Short name  | Functions/UnusedInheritedVariable                                                                            |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Dead code <dead-code>`                                    |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.0.11                                                                                                       |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                          |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                        |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                              |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                         |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-shopware-functions-unusedinheritedvariable`, :ref:`case-mautic-functions-unusedinheritedvariable` |
+-------------+--------------------------------------------------------------------------------------------------------------+


.. _unused-returned-value:

Unused Returned Value
+++++++++++++++++++++

 The function called returns a value, which is ignored. 

Usually, this is a sign of dead code, or a missed check on the results of the functioncall. At times, it may be a valid call if the function has voluntarily no return value. 

It is recommended to add a check on the return value, or remove the call. 

.. code-block:: php

   <?php
   
   // simplest form
   function foo() {
       return 1;
   }
   
   foo();
   
   // In case of multiple return, any one that returns something means that return value is meaningful
   function bar() {
       if (rand(0, 1)) {
           return 1;
       } else {
           return ;
       }
   }
   
   bar();
   
   ?>


Note that this analysis ignores functions that return void (same meaning that PHP 7.1 : return ; or no return in the function body).

Specs
^^^^^
+-------------+----------------------------------------------+
| Short name  | Functions/UnusedReturnedValue                |
+-------------+----------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Dead code <dead-code>` |
+-------------+----------------------------------------------+
| Exakt since | 0.8.5                                        |
+-------------+----------------------------------------------+
| Php Version | All                                          |
+-------------+----------------------------------------------+
| Severity    | Minor                                        |
+-------------+----------------------------------------------+
| Time To Fix | Quick (30 mins)                              |
+-------------+----------------------------------------------+
| Precision   | High                                         |
+-------------+----------------------------------------------+


.. _use-arrow-functions:

Use Arrow Functions
+++++++++++++++++++

 Arrow functions are closures that require less code to write.

Arrow functions were introduced in PHP 7.4. They added the reserved keyword ``fn``. s

.. code-block:: php

   <?php
   
   array_map(fn(A $b): int => $b->c, $array);
   
   function array_values_from_keys($arr, $keys) {
       return array_map(fn($x) => $arr[$x], $keys);
   }
   ?>


See also `RFC : Arrow functions <https://wiki.php.net/rfc/arrow_functions>`_ and `Arrow functions in PHP <https://stitcher.io/blog/short-closures-in-php>`_.

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Functions/UseArrowFunctions |
+-------------+-----------------------------+
| Rulesets    | :ref:`CE`                   |
+-------------+-----------------------------+
| Exakt since | 1.9.4                       |
+-------------+-----------------------------+
| Php Version | 7.4+                        |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Quick (30 mins)             |
+-------------+-----------------------------+
| Precision   | Very high                   |
+-------------+-----------------------------+


.. _use-constant-as-arguments:

Use Constant As Arguments
+++++++++++++++++++++++++

 Some methods and functions are defined to be used with constants as arguments. Those constants are made to be meaningful and readable, keeping the code maintenable. It is recommended to use such constants as soon as they are documented.

.. code-block:: php

   <?php
   
   // Turn off all error reporting
   // 0 and -1 are accepted 
   error_reporting(0);
   
   // Report simple running errors
   error_reporting(E_ERROR | E_WARNING | E_PARSE);
   
   // The first argument can be one of INPUT_GET, INPUT_POST, INPUT_COOKIE, INPUT_SERVER, or INPUT_ENV.
   $search_html = filter_input(INPUT_GET, 'search', FILTER_SANITIZE_SPECIAL_CHARS);
   
   // sort accepts one of SORT_REGULAR, SORT_NUMERIC, SORT_STRING, SORT_LOCALE_STRING, SORT_NATURAL
   // SORT_FLAG_CASE may be added, and combined with SORT_STRING or SORT_NATURAL
   sort($fruits);
   
   ?>


Here is the list of function that use a unique PHP constant as argument : 

+ `array_change_key_case() <https://www.php.net/array_change_key_case>`_
+ `array_multisort() <https://www.php.net/array_multisort>`_
+ `array_unique() <https://www.php.net/array_unique>`_
+ `count() <https://www.php.net/count>`_
+ dns_get_record()
+ `easter_days() <https://www.php.net/easter_days>`_
+ `extract() <https://www.php.net/extract>`_
+ `filter_input() <https://www.php.net/filter_input>`_
+ `filter_var() <https://www.php.net/filter_var>`_
+ `fseek() <https://www.php.net/fseek>`_
+ `get_html_translation_table() <https://www.php.net/get_html_translation_table>`_
+ `gmp_div_q() <https://www.php.net/gmp_div_q>`_
+ `gmp_div_qr() <https://www.php.net/gmp_div_qr>`_
+ `gmp_div_r() <https://www.php.net/gmp_div_r>`_
+ `html_entity_decode() <https://www.php.net/html_entity_decode>`_
+ `htmlspecialchars_decode() <https://www.php.net/htmlspecialchars_decode>`_
+ `http_build_query() <https://www.php.net/http_build_query>`_
+ `http_parse_cookie() <https://www.php.net/http_parse_cookie>`_
+ `http_parse_params() <https://www.php.net/http_parse_params>`_
+ `http_redirect() <https://www.php.net/http_redirect>`_
+ `http_support() <https://www.php.net/http_support>`_
+ `parse_ini_file() <https://www.php.net/parse_ini_file>`_
+ `parse_ini_string() <https://www.php.net/parse_ini_string>`_
+ `parse_url() <https://www.php.net/parse_url>`_
+ `pathinfo() <https://www.php.net/pathinfo>`_
+ `pg_select() <https://www.php.net/pg_select>`_
+ `posix_access() <https://www.php.net/posix_access>`_
+ `round() <https://www.php.net/round>`_
+ `scandir() <https://www.php.net/scandir>`_
+ `socket_read() <https://www.php.net/socket_read>`_
+ `str_pad() <https://www.php.net/str_pad>`_
+ `trigger_error() <https://www.php.net/trigger_error>`_

Here is the list of functions that use a combination of PHP native functions as argument.

+ `arsort() <https://www.php.net/arsort>`_
+ `asort() <https://www.php.net/asort>`_
+ `error_reporting() <https://www.php.net/error_reporting>`_
+ `filter_input() <https://www.php.net/filter_input>`_
+ `filter_var() <https://www.php.net/filter_var>`_
+ `get_html_translation_table() <https://www.php.net/get_html_translation_table>`_
+ `htmlentities() <https://www.php.net/htmlentities>`_
+ `htmlspecialchars() <https://www.php.net/htmlspecialchars>`_
+ `http_build_url() <https://www.php.net/http_build_url>`_
+ `jdtojewish() <https://www.php.net/jdtojewish>`_
+ `krsort() <https://www.php.net/krsort>`_
+ `ksort() <https://www.php.net/ksort>`_
+ `pg_result_status() <https://www.php.net/pg_result_status>`_
+ `phpcredits() <https://www.php.net/phpcredits>`_
+ `phpinfo() <https://www.php.net/phpinfo>`_
+ `preg_grep() <https://www.php.net/preg_grep>`_
+ `preg_match() <https://www.php.net/preg_match>`_
+ `preg_split() <https://www.php.net/preg_split>`_
+ `rsort() <https://www.php.net/rsort>`_
+ `runkit_import() <https://www.php.net/runkit_import>`_
+ `sort() <https://www.php.net/sort>`_
+ `stream_socket_client() <https://www.php.net/stream_socket_client>`_
+ `stream_socket_server() <https://www.php.net/stream_socket_server>`_



Suggestions
^^^^^^^^^^^

* Use PHP native constants, whenever possible, instead of meaningless literals.

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------------------------+
| Short name  | Functions/UseConstantAsArguments                                                                             |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                                  |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                        |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                          |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                        |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                              |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                         |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-tikiwiki-functions-useconstantasarguments`, :ref:`case-shopware-functions-useconstantasarguments` |
+-------------+--------------------------------------------------------------------------------------------------------------+


.. _used-functions:

Used Functions
++++++++++++++

 The functions below are used in the code.

A function is used in the code when it is called literally, or as a string callback. 

.. code-block:: php

   <?php
   
   function used() {}
   // The 'unused' function is defined but never called
   function unused() {}
   
   // The 'used' function is called at least once
   used();
   
   // The 'used' function is called as a callback
   array_filter($array, 'used');
   
   ?>

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Functions/UsedFunctions |
+-------------+-------------------------+
| Rulesets    | none                    |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Quick (30 mins)         |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _useless-argument:

Useless Argument
++++++++++++++++

 The argument is always used with the same value. This value could be hard coded in the method, and save one argument slot.

There is no indication that this argument will be used with other values. It may be a development artifact, that survived without cleaning.

.. code-block:: php

   <?php
   
   // All foo2 arguments are used with different values
   function foo2($a, $b) {}
   foo2(1, 2);
   foo2(2, 2);
   foo2(3, 3);
   
   // The second argument of foo is always used with 2
   function foo($a, $b) {}
   foo(1, 2);
   foo(2, 2);
   foo(3, 2);
   
   ?>


Methods with less than 3 calls are not considered here, to avoid reporting methods used once. Also, arguments with a default value are omitted. 

The chances of useless arguments decrease with the number of usage. The parameter `maxUsageCount` prevents highly called methods (more than the parameter value) to be processed.



Suggestions
^^^^^^^^^^^

* Remove the argument and hard code its value inside the method
* Add the value as default in the method signature, and drop it from the calls
* Add calls to the method, with more varied arguments

+---------------+---------+---------+---------------------------------------------------------------------------------------+
| Name          | Default | Type    | Description                                                                           |
+---------------+---------+---------+---------------------------------------------------------------------------------------+
| maxUsageCount | 30      | integer | Maximum count of function usage. Use this to limit the amount of processed arguments. |
+---------------+---------+---------+---------------------------------------------------------------------------------------+



Specs
^^^^^
+-------------+---------------------------+
| Short name  | Functions/UselessArgument |
+-------------+---------------------------+
| Rulesets    | none                      |
+-------------+---------------------------+
| Exakt since | 1.8.0                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _useless-default-argument:

Useless Default Argument
++++++++++++++++++++++++

 One of the argument has a default value, and this default value is never used. Every time the method is called, the argument is provided explicitly, rendering the default value actually useless.

.. code-block:: php

   <?php
   
   function goo($a, $b = 3) { 
       // do something here
   }
   
   // foo is called 3 times, and sometimes, $b is not provided. 
   goo(1,2);
   goo(1,2);
   goo(1);
   
   
   function foo($a, $b = 3) { 
       // do something here
   }
   
   // foo is called 3 times, and $b is always provided. 
   foo(1,2);
   foo(1,2);
   foo(1,2);
   ?>



Suggestions
^^^^^^^^^^^

* Remove the default value
* Remove the explicit argument in the function call, when it is equal to the default value

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Functions/UselessDefault |
+-------------+--------------------------+
| Rulesets    | :ref:`Suggestions`       |
+-------------+--------------------------+
| Exakt since | 1.7.9                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Quick (30 mins)          |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _useless-referenced-argument:

Useless Referenced Argument
+++++++++++++++++++++++++++

 The argument has a reference, but is only used for reading. 

This is probably a development artefact that was forgotten. It is better to remove it. 

This analysis also applies to `foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_ loops, that declare the blind variable as reference, then use the variable as an object, accessing properties and methods. When a variable contains an object, there is no need to declare a reference : it is a reference automatically.

.. code-block:: php

   <?php
   
   function foo($a, &$b, &$c) {
       // $c is passed by reference, but only read. The reference is useless.
       $b = $c + $a;
       // The reference is useful for $b
   }
   
   foreach ($array as &$element) {
       $element->method();
   }
   
   ?>


See also `Objects and references <https://www.php.net/manual/en/language.oop5.references.php>`_.


Suggestions
^^^^^^^^^^^

* Remove the useless & from the argument
* Make an actual use of the argument before the end of the method

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------------------------------+
| Short name  | Functions/UselessReferenceArgument                                                                                 |
+-------------+--------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                                     |
+-------------+--------------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.1.3                                                                                                              |
+-------------+--------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                                |
+-------------+--------------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                              |
+-------------+--------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                                      |
+-------------+--------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                               |
+-------------+--------------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-woocommerce-functions-uselessreferenceargument`, :ref:`case-magento-functions-uselessreferenceargument` |
+-------------+--------------------------------------------------------------------------------------------------------------------+


.. _useless-return:

Useless Return
++++++++++++++

 The spotted functions or methods have a return statement, but this statement is useless. This is the case for constructor and destructors, whose return value are ignored or inaccessible.

When return is void, and the last element in a function, it is also useless.

.. code-block:: php

   <?php
   
   class foo {
       function __construct() {
           // return is not used by PHP
           return 2;
       }
   }
   
   function bar(&$a) {
       $a++;
       // The last return, when empty, is useless
       return;
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Remove the return expression. Keep any other calculation.

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------+
| Short name  | Functions/UselessReturn                                                                   |
+-------------+-------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                            |
+-------------+-------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                     |
+-------------+-------------------------------------------------------------------------------------------+
| Php Version | All                                                                                       |
+-------------+-------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                     |
+-------------+-------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                          |
+-------------+-------------------------------------------------------------------------------------------+
| Precision   | Very high                                                                                 |
+-------------+-------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-thinkphp-functions-uselessreturn`, :ref:`case-vanilla-functions-uselessreturn` |
+-------------+-------------------------------------------------------------------------------------------+


.. _useless-type-check:

Useless Type Check
++++++++++++++++++

 With typehint, some checks on the arguments are now handled by the type system.

In particular, a type hinted argument can't be null, unless it is explicitly nullable, or has a ``null`` value as default.

.. code-block:: php

   <?php
   
   // The test on null is useless, it will never happen
   function foo(A $a) {
       if (is_null($a)) { 
           // do something
       }
   }
   
   // Either nullable ? is too much, either the default null is
   function barbar(?A $a = null) {
   }
   
   // The test on null is useful, the default value null allows it
   function bar(A $a = null) {
       if ($a === null) { 
           // do something
       }
   }
   
   
   ?>


See also `Type Declarations <https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration>`_.


Suggestions
^^^^^^^^^^^

* Remove the nullable typehint
* Remove the null default value
* Remove tests on null

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Functions/UselessTypeCheck   |
+-------------+------------------------------+
| Rulesets    | :ref:`Dead code <dead-code>` |
+-------------+------------------------------+
| Exakt since | 1.8.9                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Quick (30 mins)              |
+-------------+------------------------------+
| Precision   | Very high                    |
+-------------+------------------------------+


.. _uses-default-values:

Uses Default Values
+++++++++++++++++++

 Default values are provided to methods so as to make it convenient to use. However, with new versions, those values may change. For example, in PHP 5.4, `htmlentities() <https://www.php.net/htmlentities>`_ switched from ``Latin1`` to ``UTF-8`` default encoding.

.. code-block:: php

   <?php
   
   $string = Eu não sou o pão;
   
   echo htmlentities($string);
   
   // PHP 5.3 : Eu n&Atilde;&pound;o sou o p&Atilde;&pound;o
   // PHP 5.4 : Eu n&atilde;o sou o p&atilde;o
   
   // Stable across versions
   echo htmlentities($string, 'UTF8');
   
   ?>


As much as possible, it is recommended to use explicit values in those methods, so as to prevent from being surprise at a future PHP evolution. 

This analyzer tend to report a lot of false positives, including usage of `count() <https://www.php.net/count>`_. `Count() <https://www.php.net/count>`_ indeed has a second argument for recursive counts, and a default value. This may be ignored safely.

Suggestions
^^^^^^^^^^^

* Mention all arguments, as much as possible

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Functions/UsesDefaultArguments              |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.8.4                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _using-deprecated-method:

Using Deprecated Method
+++++++++++++++++++++++

 A call to a deprecated method has been spotted. A method is deprecated when it bears a ``@deprecated`` parameter in its typehint definition.

Deprecated methods which are not called are not reported.

.. code-block:: php

   <?php
   
   // not deprecated method
   not_deprecated();
   
   // deprecated methods
   deprecated();
   $object = new X();
   $object->deprecatedToo();
   
   /**
    * @deprecated since version 2.0.0
    */
   function deprecated() {}
   
   // PHP 8.0 attribute for deprecation
   class X {
       #[ Deprecated]
       function deprecatedToo() {}
   }
   
   function not_deprecated() {}
   
   ?>


See also `@deprecated <https://docs.phpdoc.org/latest/references/phpdoc/tags/deprecated.html>`_.


Suggestions
^^^^^^^^^^^

* Replace the deprecated call with a stable call
* Remove the deprecated attribute from the method definition
* Remove the deprecated call

Specs
^^^^^
+-------------+-----------------------------------+
| Short name  | Functions/UsingDeprecated         |
+-------------+-----------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Attributes` |
+-------------+-----------------------------------+
| Exakt since | 2.1.2                             |
+-------------+-----------------------------------+
| Php Version | All                               |
+-------------+-----------------------------------+
| Severity    | Minor                             |
+-------------+-----------------------------------+
| Time To Fix | Quick (30 mins)                   |
+-------------+-----------------------------------+
| Precision   | High                              |
+-------------+-----------------------------------+


.. _has-variable-arguments:

Has Variable Arguments
++++++++++++++++++++++

 Indicates if this function or method accept an arbitrary number of arguments, based on `func_get_args() <https://www.php.net/func_get_args>`_, `func_get_arg() <https://www.php.net/func_get_arg>`_ and `func_num_args() <https://www.php.net/func_num_args>`_ usage.

.. code-block:: php

   <?php
   
   // Fixed number of arguments
   function fixedNumberOfArguments($a, $b) {
       if (func_num_args() > 2) {
           $c = func_get_args();
           array_shift($c); // $a
           array_shift($c); // $b
       }
       // do something
   }
   
   // Fixed number of arguments
   function fixedNumberOfArguments($a, $b, $c = 1) {}
   
   ?>

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Functions/VariableArguments |
+-------------+-----------------------------+
| Rulesets    | :ref:`CE`                   |
+-------------+-----------------------------+
| Exakt since | 0.8.4                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Slow (1 hour)               |
+-------------+-----------------------------+
| Precision   | Very high                   |
+-------------+-----------------------------+


.. _methods-without-return:

Methods Without Return
++++++++++++++++++++++

 List of all the function, closures, methods that have no explicit return. 

Functions that hold the ``void`` return type are omitted.

.. code-block:: php

   <?php
   
   // With return null : Explicitly not returning
   function withExplicitReturn($a = 1) {
       $a++;
       return null;
   }
   
   // Without indication
   function withoutExplicitReturn($a = 1) {
       $a++;
   }
   
   // With return type void : Explicitly not returning
   function withExplicitReturnType($a = 1) : void {
       $a++;
   }
   
   ?>


See also `return <https://www.php.net/manual/en/function.return.php>`_.


Suggestions
^^^^^^^^^^^

* Add the returntype 'void' to make this explicit behavior

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Functions/WithoutReturn |
+-------------+-------------------------+
| Rulesets    | :ref:`Analyze`          |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Quick (30 mins)         |
+-------------+-------------------------+
| Precision   | Very high               |
+-------------+-------------------------+


.. _wrong-argument-type:

Wrong Argument Type
+++++++++++++++++++

 Checks that the type of the argument is consistent with the type of the called method.

.. code-block:: php

   <?php
   
   function foo(int $a) { }
   
   //valid call, with an integer
   foo(1);
   
   //invalid call, with a string
   foo('asd');
   
   ?>


This analysis is valid with PHP 8.0.



Suggestions
^^^^^^^^^^^

* Always use a valid type when calling methods.

Specs
^^^^^
+-------------+-----------------------------------+
| Short name  | Functions/WrongArgumentType       |
+-------------+-----------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Typechecks` |
+-------------+-----------------------------------+
| Exakt since | 2.1.3                             |
+-------------+-----------------------------------+
| Php Version | All                               |
+-------------+-----------------------------------+
| Severity    | Minor                             |
+-------------+-----------------------------------+
| Time To Fix | Quick (30 mins)                   |
+-------------+-----------------------------------+
| Precision   | High                              |
+-------------+-----------------------------------+


.. _wrong-function-name-case:

Wrong Function Name Case
++++++++++++++++++++++++

 The spotted functions are used with a different case than their definition. While PHP accepts this, it makes the code harder to read. 

It may also be a violation of coding conventions.

.. code-block:: php

   <?php
   
   // Definition of the class
   function foo () {}
   
   // Those calls have wrong case
   FOO();
   \Foo();
   
   // This is valid
   foo();
   
   ?>


See also `PHP class name constant case sensitivity and PSR-11 <https://gist.github.com/bcremer/9e8d6903ae38a25784fb1985967c6056>`_.


Suggestions
^^^^^^^^^^^

* Match the defined functioncall with the called name

Specs
^^^^^
+-------------+---------------------+
| Short name  | Functions/WrongCase |
+-------------+---------------------+
| Rulesets    | none                |
+-------------+---------------------+
| Exakt since | 0.8.4               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Instant (5 mins)    |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _wrong-number-of-arguments:

Wrong Number Of Arguments
+++++++++++++++++++++++++

 Those functioncalls are made with too many or too few arguments. 

When the number arguments is wrong for native functions, PHP emits a warning. 
When the number arguments is too small for custom functions, PHP raises an exception. 
When the number arguments is too high for custom functions, PHP ignores the arguments. Such arguments should be handled with the variadic operator, or with `func_get_args() <https://www.php.net/func_get_args>`_ family of functions.

.. code-block:: php

   <?php
   
   echo strtoupper('This function is', 'ignoring arguments');
   //Warning: strtoupper() expects exactly 1 parameter, 2 given in Command line code on line 1
   
   echo strtoupper();
   //Warning: strtoupper() expects exactly 1 parameter, 0 given in Command line code on line 1
   
   function foo($argument) {}
   echo foo();
   //Fatal error: Uncaught ArgumentCountError: Too few arguments to function foo(), 0 passed in /Users/famille/Desktop/analyzeG3/test.php on line 10 and exactly 1 expected in /Users/famille/Desktop/analyzeG3/test.php:3
   
   echo foo('This function is', 'ignoring arguments');
   
   ?>


It is recommended to check the signature of the methods, and fix the arguments. 

Suggestions
^^^^^^^^^^^

* Add more arguments to fill the list of compulsory arguments
* Remove arguments to fit the list of compulsory arguments
* Use another method or class

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------------------+
| Short name  | Functions/WrongNumberOfArguments                                                                            |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                                 |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                       |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                         |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                       |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                             |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                        |
+-------------+-------------------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-missing-argument.md <https://github.com/dseguy/clearPHP/tree/master/rules/no-missing-argument.md.md>`__ |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-xataface-functions-wrongnumberofarguments`                                                       |
+-------------+-------------------------------------------------------------------------------------------------------------+


.. _wrong-number-of-arguments-in-methods:

Wrong Number Of Arguments In Methods
++++++++++++++++++++++++++++++++++++

 Those methods are called with a wrong number of arguments : too many or too few. Check the signature.

.. code-block:: php

   <?php
   
   class Foo {
       private function Bar($a, $b) {
           return $a + $b;
       }
       
       public function foobar() {
           $this->Bar(1);
           
           // Good amount
           $this->Bar(1, 2);
           
           // Too Many
           $this->Bar(1, 2, 3);
       }
   }
   
   ?>


Methods with a variable number of argument, either using ellipsis or `func_get_args() <https://www.php.net/func_get_args>`_ are ignored. 

PHP emits an error at runtime, when arguments are not enough : ''. PHP doesn't emit an error when too many arguments are provided.



Suggestions
^^^^^^^^^^^

* Adapt the call to use one of the right number of arguments : this means dropping the extra ones, or adding the missing ones
* Adapt the signature of the method, and use a default value

Specs
^^^^^
+-------------+-----------------------------------------+
| Short name  | Functions/WrongNumberOfArgumentsMethods |
+-------------+-----------------------------------------+
| Rulesets    | none                                    |
+-------------+-----------------------------------------+
| Exakt since | 0.8.4                                   |
+-------------+-----------------------------------------+
| Php Version | All                                     |
+-------------+-----------------------------------------+
| Severity    | Major                                   |
+-------------+-----------------------------------------+
| Time To Fix | Quick (30 mins)                         |
+-------------+-----------------------------------------+
| Precision   | High                                    |
+-------------+-----------------------------------------+


.. _wrong-optional-parameter:

Wrong Optional Parameter
++++++++++++++++++++++++

 Wrong placement of optional parameters.

PHP parameters are optional when they defined with a default value, like this : 

.. code-block:: php

   <?php
       function x($arg = 1) {
           // PHP code here
       }
   ?>


When a function have both compulsory and optional parameters, the compulsory ones should appear first, and the optional should appear last : 

.. code-block:: php

   <?php
       function x($arg, $arg2 = 2) {
           // PHP code here
       }
   ?>


PHP solves this problem at runtime, assign values in the same other, but will miss some of the default values and emits warnings. 

It is better to put all the optional parameters at the end of the method's signature.

Optional parameter wrongly placed are now a Notice in PHP 8.0. The only previous case that is allowed in PHP 8.0 and also in this analysis, is when the ``null`` value is used as default for typed arguments.

See also `Function arguments <https://www.php.net/manual/en/functions.arguments.php>`_.


Suggestions
^^^^^^^^^^^

* Give default values to all but first parameters. Null is a good default value, as PHP will use it if not told otherwise. 
* Remove default values to all but last parameters. That is probably a weak solution.
* Change the order of the values, so default-valued parameters are at the end. This will probably have impact on the rest of the code, as the API is changing.

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------+
| Short name  | Functions/WrongOptionalParameter                                                                           |
+-------------+------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`CompatibilityPHP80`                                     |
+-------------+------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                        |
+-------------+------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                            |
+-------------+------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-fuelcms-functions-wrongoptionalparameter`, :ref:`case-vanilla-functions-wrongoptionalparameter` |
+-------------+------------------------------------------------------------------------------------------------------------+


.. _wrong-type-returned:

Wrong Type Returned
+++++++++++++++++++

 The returned value is not compatible with the specified return type.

.. code-block:: php

   <?php
   
   // classic error
   function bar() : int {
       return 'A';
   }
   
   // classic static error
   const B = 2;
   function bar() : string {
       return B;
   }
   
   // undecideable error
   function bar($c) : string {
       return $c;
   }
   
   // PHP lint this, but won't execute it
   function foo() : void {
       // No return at all 
   }
   
   ?>


See also `Returning values <https://www.php.net/manual/en/functions.returning-values.php>`_ and `Void Return Type <https://wiki.php.net/rfc/void_return_type>`_.


Suggestions
^^^^^^^^^^^

* Match the return type with the return value
* Remove the return expression altogether
* Add a typecast to the returning expression

Specs
^^^^^
+-------------+-----------------------------------------------------------------+
| Short name  | Functions/WrongReturnedType                                     |
+-------------+-----------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`ClassReview` |
+-------------+-----------------------------------------------------------------+
| Exakt since | 1.8.7                                                           |
+-------------+-----------------------------------------------------------------+
| Php Version | All                                                             |
+-------------+-----------------------------------------------------------------+
| Severity    | Minor                                                           |
+-------------+-----------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                 |
+-------------+-----------------------------------------------------------------+
| Precision   | High                                                            |
+-------------+-----------------------------------------------------------------+


.. _wrong-typehinted-name:

Wrong Typehinted Name
+++++++++++++++++++++

 The parameter name doesn't reflect the typehint used.

There are no restriction on parameter names, except its uniqueness in the signature. Yet, using a scalar typehint as the name for another typehinted value is just misleading. 

.. code-block:: php

   <?php
   
   function foo(string $array,
                int $int) {
       // doSomething()
   }
   
   function bar(array $strings) {
       // doSomething()
   }
   
   ?>


This analysis relies on exact names : calling an array a list of ``strings`` is OK with this analysis.

This analysis relies on a few variations of names : ``bool`` and ``boolean``, ``int`` and ``integer``. 



Suggestions
^^^^^^^^^^^

* Rename the parameter

Specs
^^^^^
+-------------+-------------------------------+
| Short name  | Functions/WrongTypehintedName |
+-------------+-------------------------------+
| Rulesets    | :ref:`Semantics`              |
+-------------+-------------------------------+
| Exakt since | 2.0.2                         |
+-------------+-------------------------------+
| Php Version | All                           |
+-------------+-------------------------------+
| Severity    | Minor                         |
+-------------+-------------------------------+
| Time To Fix | Quick (30 mins)               |
+-------------+-------------------------------+
| Precision   | High                          |
+-------------+-------------------------------+


.. _wrong-type-with-call:

Wrong Type With Call
++++++++++++++++++++

 This analysis checks that a call to a method uses the right literal values' types.

Currently, this analysis doesn't take into account ``strict_types = 1``. 

.. code-block:: php

   <?php
   
   function foo(string $a) {
   
   }
   
   // wrong type used
   foo(1);
   
   // wrong type used
   foo("1");
   
   ?>




Suggestions
^^^^^^^^^^^

* Use the right type with all literals

Specs
^^^^^
+-------------+----------------------------------------------------------------+
| Short name  | Functions/WrongTypeWithCall                                    |
+-------------+----------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Typechecks` |
+-------------+----------------------------------------------------------------+
| Exakt since | 1.9.9                                                          |
+-------------+----------------------------------------------------------------+
| Php Version | All                                                            |
+-------------+----------------------------------------------------------------+
| Severity    | Minor                                                          |
+-------------+----------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                |
+-------------+----------------------------------------------------------------+
| Precision   | Very high                                                      |
+-------------+----------------------------------------------------------------+


.. _already-parents-interface:

Already Parents Interface
+++++++++++++++++++++++++

 The same interface is implemented by a class and one of its children. 

That way, the child doesn't need to implement the interface, nor define its methods to be an instance of the interface. 

.. code-block:: php

   <?php
   
   interface i { 
       function i();
   }
   
   class A implements i {
       function i() {
           return __METHOD__;
       }
   }
   
   // This implements is useless. 
   class AB extends A implements i {
       // No definition for function i()
   }
   
   // Implements i is understated
   class AB extends A {
       // redefinition of the i method
       function i() {
           return __METHOD__.' ';
       }
   }
   
   $x = new AB;
   var_dump($x instanceof i);
   // true
   
   $x = new AC;
   var_dump($x instanceof i);
   // true
   
   ?>




Suggestions
^^^^^^^^^^^

* Keep the implements call in the class that do implements the methods. Remove it from the children classes.

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Short name  | Interfaces/AlreadyParentsInterface                                                                              |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Suggestions`                                                                              |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                             |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                                |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Precision   | Very high                                                                                                       |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-wordpress-interfaces-alreadyparentsinterface`, :ref:`case-thelia-interfaces-alreadyparentsinterface` |
+-------------+-----------------------------------------------------------------------------------------------------------------+


.. _avoid-self-in-interface:

Avoid Self In Interface
+++++++++++++++++++++++

 `Self <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ and `Parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ are tricky when used in an interface. 

``self`` refers to the current interface or its extended parents : as long as the constant is defined in the interface family, this is valid.  On the other hand, when ``self`` refers to the current class, the resolution of names will happen at execution time, leading to confusing results. 

``parent`` has the same behavior than ``self``, except that it doesn't accept to be used inside an interface, as it will yield an error. This is one of those error that lint but won't execute in certain conditions.

``Static`` can't be used in an interface, as it needs to be resolved at call time anyway.

.. code-block:: php

   <?php
   
   interface i extends ii {
       // This 'self' is valid : it refers to the interface i
       public const I = self::I2 + 2;
   
       // This 'self' is also valid, as it refers to interface ii, which is a part of interface i
       public const I2 = self::IP + 4; 
   
       // This makes interface i dependant on the host class
       public const I3 = parent::A;
   }
   
   ?>


See also `Scope Resolution Operator (\:\:) <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_.


Suggestions
^^^^^^^^^^^

* Use a fully qualified namespace instead of self
* Use a locally defined constant, so self is a valid reference

Specs
^^^^^
+-------------+---------------------------------+
| Short name  | Interfaces/AvoidSelfInInterface |
+-------------+---------------------------------+
| Rulesets    | :ref:`ClassReview`              |
+-------------+---------------------------------+
| Exakt since | 1.5.4                           |
+-------------+---------------------------------+
| Php Version | All                             |
+-------------+---------------------------------+
| Severity    | Critical                        |
+-------------+---------------------------------+
| Time To Fix | Slow (1 hour)                   |
+-------------+---------------------------------+
| Precision   | High                            |
+-------------+---------------------------------+


.. _cant-implement-traversable:

Cant Implement Traversable
++++++++++++++++++++++++++

 It is not possible to implement the ``Traversable``interface. The alternative is to implement ``Iterator`` or ``IteratorAggregate``.

``Traversable`` may be useful when used with ``instanceof``.

.. code-block:: php

   <?php
   
   // This lints, but doesn't run
   class x implements Traversable {
   
   }
   
   if( $argument instanceof Traversable ) {
       // doSomething
   }
   
   ?>


See also `Traversable <https://www.php.net/manual/en/class.traversable.php>`_, `Iterator <https://www.php.net/manual/en/class.iterator.php>`_ and `IteratorAggregate <https://www.php.net/manual/en/class.iteratoraggregate.php>`_..



Suggestions
^^^^^^^^^^^

* Implement Iterator or IteratorAggregate

Specs
^^^^^
+-------------+---------------------------------------------------------------------+
| Short name  | Interfaces/CantImplementTraversable                                 |
+-------------+---------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`LintButWontExec` |
+-------------+---------------------------------------------------------------------+
| Exakt since | 1.9.8                                                               |
+-------------+---------------------------------------------------------------------+
| Php Version | All                                                                 |
+-------------+---------------------------------------------------------------------+
| Severity    | Minor                                                               |
+-------------+---------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                     |
+-------------+---------------------------------------------------------------------+
| Precision   | High                                                                |
+-------------+---------------------------------------------------------------------+


.. _concrete-visibility:

Concrete Visibility
+++++++++++++++++++

 Methods that implements an interface in a class must be public. 

PHP does lint this, unless the interface and the class are in the same file. At execution, it stops immediately with a Fatal error : 'Access level to c\:\:iPrivate() must be public (as in class i) ';

.. code-block:: php

   <?php
   
   interface i {
       function iPrivate() ;
       function iProtected() ;
       function iPublic() ;
   }
   
   class c implements i {
       // Methods that implements an interface in a class must be public.  
       private function iPrivate() {}
       protected function iProtected() {}
       public function iPublic() {}
   }
   
   ?>


See also `Interfaces <https://www.php.net/manual/en/language.oop5.interfaces.php>`_.



Suggestions
^^^^^^^^^^^

* Always set interface methods to public.

Specs
^^^^^
+-------------+----------------------------------------+
| Short name  | Interfaces/ConcreteVisibility          |
+-------------+----------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`LintButWontExec` |
+-------------+----------------------------------------+
| Exakt since | 0.8.4                                  |
+-------------+----------------------------------------+
| Php Version | All                                    |
+-------------+----------------------------------------+
| Severity    | Major                                  |
+-------------+----------------------------------------+
| Time To Fix | Instant (5 mins)                       |
+-------------+----------------------------------------+
| Precision   | High                                   |
+-------------+----------------------------------------+


.. _forgotten-interface:

Forgotten Interface
+++++++++++++++++++

 The following classes have been found implementing an interface's methods, though it doesn't explicitly implements this interface. This may have been forgotten.

.. code-block:: php

   <?php
   
   interface i {
       function i(); 
   }
   
   // i is not implemented and declared
   class foo {
       function i() {}
       function j() {}
   }
   
   // i is implemented and declared
   class foo implements i {
       function i() {}
       function j() {}
   }
   
   ?>


See also :ref:`could-use-trait`. 

 

Suggestions
^^^^^^^^^^^

* Mention interfaces explicitly whenever possible

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Interfaces/CouldUseInterface |
+-------------+------------------------------+
| Rulesets    | :ref:`Analyze`               |
+-------------+------------------------------+
| Exakt since | 0.11.7                       |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Quick (30 mins)              |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _empty-interfaces:

Empty Interfaces
++++++++++++++++

 Empty interfaces are a code smell. Interfaces should contains at least a method or a constant, and not be totally empty.

.. code-block:: php

   <?php
   
   // an empty interface
   interface empty {}
   
   // an normal interface
   interface normal {
       public function i() ;
   }
   
   // a constants interface
   interface constantsOnly {
       const FOO = 1;
   }
   
   ?>


See also `Empty interfaces are bad practice <https://r.je/empty-interfaces-bad-practice.html>`_ and `Blog : Are empty interfaces code smell? <https://hackernoon.com/are-interfaces-code-smell-bd19abc266d3>`_.



Suggestions
^^^^^^^^^^^

* Remove the interface
* Add some methods or constants to the interface

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Interfaces/EmptyInterface |
+-------------+---------------------------+
| Rulesets    | :ref:`Analyze`            |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Instant (5 mins)          |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _interface-methods:

Interface Methods
+++++++++++++++++

 List the names of the methods in an interface.

.. code-block:: php

   <?php
   
   interface i {
       // This is an interface method name
       function foo() ;
   }
   
   ?>

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Interfaces/InterfaceMethod |
+-------------+----------------------------+
| Rulesets    | none                       |
+-------------+----------------------------+
| Exakt since | 0.8.4                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Slow (1 hour)              |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _interfaces-glossary:

Interfaces Glossary
+++++++++++++++++++

 List of all the defined interfaces in the code.

.. code-block:: php

   <?php
   
   // interfaceName is reported
   interface interfaceName {
       function interfaceMethod() ; 
   }
   ?>

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Interfaces/Interfacenames |
+-------------+---------------------------+
| Rulesets    | :ref:`CE`                 |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _interfaces-usage:

Interfaces Usage
++++++++++++++++

 List of used interfaces.

Interfaces are used when mentioned in a class or another interface, with implements keyword; they are used in `instanceof <https://www.php.net/manual/en/language.operators.type.php>`_ expression, in typehints and class constant.

.. code-block:: php

   <?php
   
   // interface definition
   interface i {
       const I = 2;
   }
   
   // interface extension 
   interface i2 extends i {}
   
   // interface implementation 
   class foo implements i {}
   
   $foo = new foo();
   
   var_dump($foo instanceof i);
   
   function bar( i $arg) { }
   bar($foo);
   
   // in class constant
   echo i::I;
   
   ?>

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Interfaces/InterfaceUsage |
+-------------+---------------------------+
| Rulesets    | none                      |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _is-an-extension-interface:

Is An Extension Interface
+++++++++++++++++++++++++

 This is an interface defined in a PHP C extension.

.. code-block:: php

   <?php
   
   // MyInterface is not recognized as an extension interface
   function foo ( MyInterface $a) {
       // \ArrayAccess is recognized as a native PHP extension
       if ($a instanceof \ArrayAccess) {
           // doSomething()
       }
   }
   
   ?>

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Interfaces/IsExtInterface |
+-------------+---------------------------+
| Rulesets    | :ref:`CE`                 |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _interfaces-is-not-implemented:

Interfaces Is Not Implemented
+++++++++++++++++++++++++++++

 Classes that implements interfaces, must implements each of the interface's methods. 

.. code-block:: php

   <?php
   
   class x implements i {
       // This method implements the foo method from the i interface
       function foo() {}
   
       // The method bar is missing, yet is requested by interface i
       function foo() {}
   }
   
   interface i {
       function foo();
       function bar(); 
   }
   
   ?>


This problem tends to occur in code that splits interfaces and classes by file. This means that PHP's linting will skip the definitions and not find the problem. At execution time, the definitions will be checked, and a Fatal error will occur.

This situation usually detects code that was forgotten during a refactorisation of the interface or the class and its sibblings.

See also `Interfaces <https://www.php.net/manual/en/language.oop5.interfaces.php>`_.


Suggestions
^^^^^^^^^^^

* Implements all the methods from the interfaces
* Remove the class
* Make the class abstract
* Make the missing methods abstract

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------+
| Short name  | Interfaces/IsNotImplemented                                                             |
+-------------+-----------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`ClassReview`, :ref:`LintButWontExec` |
+-------------+-----------------------------------------------------------------------------------------+
| Exakt since | 1.9.5                                                                                   |
+-------------+-----------------------------------------------------------------------------------------+
| Php Version | All                                                                                     |
+-------------+-----------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                   |
+-------------+-----------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                         |
+-------------+-----------------------------------------------------------------------------------------+
| Precision   | High                                                                                    |
+-------------+-----------------------------------------------------------------------------------------+


.. _interfaces-don't-ensure-properties:

Interfaces Don't Ensure Properties
++++++++++++++++++++++++++++++++++

 When using an interface as a typehint, properties are not enforced, nor available.

An interface is a template for a class, which specify the minimum amount of methods and constants. Properties are never defined in an interface, and should not be relied upon.

.. code-block:: php

   <?php
   
   interface i {
       function m () ;
   }
   
   class x implements i {
       public $p = 1;
       
       function m() {
           return $this->p;
       }
   }
   
   function foo(i $i, x $x) {
       // this is invalid, as $p is not defined in i, so it may be not available
       echo $i->p;
       
       // this is valid, as $p is defined in $x
       echo $x->p;
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Use classes for typehint when properties are accessed
* Only use methods and constants which are available in the interface

Specs
^^^^^
+-------------+------------------------------------------+
| Short name  | Interfaces/NoGaranteeForPropertyConstant |
+-------------+------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`ClassReview`       |
+-------------+------------------------------------------+
| Exakt since | 1.9.5                                    |
+-------------+------------------------------------------+
| Php Version | All                                      |
+-------------+------------------------------------------+
| Severity    | Minor                                    |
+-------------+------------------------------------------+
| Time To Fix | Quick (30 mins)                          |
+-------------+------------------------------------------+
| Precision   | High                                     |
+-------------+------------------------------------------+


.. _php-interfaces:

PHP Interfaces
++++++++++++++

 List of PHP interfaces being used in the code.

.. code-block:: php

   <?php
   
   // Countable is a PHP native interface
   class Enumeration extends Countable {
       function count() { return 1; }
   }
   
   ?>

Specs
^^^^^
+-------------+----------------+
| Short name  | Interfaces/Php |
+-------------+----------------+
| Rulesets    | none           |
+-------------+----------------+
| Exakt since | 0.8.4          |
+-------------+----------------+
| Php Version | All            |
+-------------+----------------+
| Severity    | Minor          |
+-------------+----------------+
| Time To Fix | Slow (1 hour)  |
+-------------+----------------+
| Precision   | High           |
+-------------+----------------+


.. _possible-interfaces:

Possible Interfaces
+++++++++++++++++++

 This analyzer lists classese that may be a base to create interfaces. 

Currently, only classes with more than 1 method are used, and interfaces are considered when at least 2 methods are common.

Signature and method options are not taken into account.

.. code-block:: php

   <?php
   
   class a {
       function m1 () {}
       function m2 () {}
       function m3 () {}
   }
   
   class b {
       function m1 () {}
       function m2 () {}
       function m4 () {}
   }
   
   // This class has not enough shared methods with other classes
   class c {
       function m1 () {}
       function m4 () {}
       function m5 () {}
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Add those interfaces, and use the `implements` keyword in the mentionned classes.

Specs
^^^^^
+-------------+-------------------------------+
| Short name  | Interfaces/PossibleInterfaces |
+-------------+-------------------------------+
| Rulesets    | none                          |
+-------------+-------------------------------+
| Exakt since | 2.0.6                         |
+-------------+-------------------------------+
| Php Version | All                           |
+-------------+-------------------------------+
| Severity    | Minor                         |
+-------------+-------------------------------+
| Time To Fix | Quick (30 mins)               |
+-------------+-------------------------------+
| Precision   | High                          |
+-------------+-------------------------------+


.. _repeated-interface:

Repeated Interface
++++++++++++++++++

 A class should implements only once an interface. An interface can only extends once another interface. In both cases, `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ classes or interfaces must be checked.

PHP accepts multiple times the same interface in the ``implements`` clause. In fact, it doesn't do anything beyond the first implement. 

.. code-block:: php

   <?php
   
   use i as j;
   
   interface i {}
   
   // Multiple ways to reference an interface
   class foo implements i, \i, j {}
   
   // This applies to interfaces too
   interface bar extends i, \i, j {}
   
   ?>


This code may compile, but won't execute.

See also `Object Interfaces <https://www.php.net/manual/en/language.oop5.interfaces.php>`_ and `The Basics <https://www.php.net/manual/en/language.oop5.basic.php>`_.


Suggestions
^^^^^^^^^^^

* Remove the interface usage at the lowest class or interface

Specs
^^^^^
+-------------+----------------------------------------+
| Short name  | Interfaces/RepeatedInterface           |
+-------------+----------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`LintButWontExec` |
+-------------+----------------------------------------+
| Exakt since | 1.4.9                                  |
+-------------+----------------------------------------+
| Php Version | All                                    |
+-------------+----------------------------------------+
| Severity    | Minor                                  |
+-------------+----------------------------------------+
| Time To Fix | Instant (5 mins)                       |
+-------------+----------------------------------------+
| Precision   | High                                   |
+-------------+----------------------------------------+


.. _undefined-interfaces:

Undefined Interfaces
++++++++++++++++++++

 Some typehints or ``instanceof`` that are relying on undefined interfaces or classes. They will always return false. Any condition based upon them are dead code.

.. code-block:: php

   <?php
   
   class var implements undefinedInterface {
       // If undefinedInterface is undefined, this code lints but doesn't run
   }
   
   if ($o instanceof undefinedInterface) {
       // This is silent dead code
   }
   
   function foo(undefinedInterface $a) {
       // This is dead code
       // it will probably be discovered at execution
   }
   
   ?>


See also `Object interfaces <https://www.php.net/manual/en/language.oop5.interfaces.php>`_, `Type declarations <https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration>`_, and `Instanceof <https://www.php.net/manual/en/language.operators.type.php>`_.


Suggestions
^^^^^^^^^^^

* Implement the missing interfaces
* Remove the code governed by the missing interface : the whole method if it is an typehint, the whole if/then if it is a condition.

Specs
^^^^^
+-------------+-----------------------------------------------------+
| Short name  | Interfaces/UndefinedInterfaces                      |
+-------------+-----------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`         |
+-------------+-----------------------------------------------------+
| Exakt since | 0.8.4                                               |
+-------------+-----------------------------------------------------+
| Php Version | All                                                 |
+-------------+-----------------------------------------------------+
| Severity    | Major                                               |
+-------------+-----------------------------------------------------+
| Time To Fix | Quick (30 mins)                                     |
+-------------+-----------------------------------------------------+
| Precision   | High                                                |
+-------------+-----------------------------------------------------+
| Examples    | :ref:`case-xataface-interfaces-undefinedinterfaces` |
+-------------+-----------------------------------------------------+


.. _unused-interfaces:

Unused Interfaces
+++++++++++++++++

 Those interfaces are defined and never used. They should be removed, as they are dead code.

Interfaces may be use as `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ for other interfaces, as typehint (argument, return and property), in instance of.

.. code-block:: php

   <?php
   
   interface used {}
   interface unused {}
   
   // Used by implementation
   class c implements used {}
   
   // Used by extension
   interface j implements used {}
   
   $x = new c;
   
   // Used in a instanceof
   var_dump($x instanceof used); 
   
   // Used in a typehint
   function foo(Used $x) {}
   
   ?>




Suggestions
^^^^^^^^^^^

* Remove the interface
* Actually use the interface

Specs
^^^^^
+-------------+--------------------------------------------------+
| Short name  | Interfaces/UnusedInterfaces                      |
+-------------+--------------------------------------------------+
| Rulesets    | :ref:`Dead code <dead-code>`, :ref:`Suggestions` |
+-------------+--------------------------------------------------+
| Exakt since | 0.8.4                                            |
+-------------+--------------------------------------------------+
| Php Version | All                                              |
+-------------+--------------------------------------------------+
| Severity    | Minor                                            |
+-------------+--------------------------------------------------+
| Time To Fix | Instant (5 mins)                                 |
+-------------+--------------------------------------------------+
| Precision   | High                                             |
+-------------+--------------------------------------------------+
| Examples    | :ref:`case-tine20-interfaces-unusedinterfaces`   |
+-------------+--------------------------------------------------+


.. _used-interfaces:

Used Interfaces
+++++++++++++++

 Interfaces used in the code. 

.. code-block:: php

   <?php
   
   interface used {}
   
   // Used by implementation
   class c implements used {}
   
   // Used by extension
   interface j implements used {}
   
   $x = new c;
   
   // Used in a instanceof
   var_dump($x instanceof used); 
   
   // Used in a typehint
   function foo(Used $x) {}
   
   ?>

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Interfaces/UsedInterfaces |
+-------------+---------------------------+
| Rulesets    | none                      |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _useless-interfaces:

Useless Interfaces
++++++++++++++++++

 The interfaces below are defined and are implemented by some classes. 

However, they are never used to enforce an object's class in the code, using `instanceof <https://www.php.net/manual/en/language.operators.type.php>`_ or in a typehint. 
As they are currently used, those interfaces may be removed without change in behavior.

.. code-block:: php

   <?php
       // only defined interface but never enforced
       interface i {};
       class c implements i {} 
   ?>


Interfaces should be used in Typehint or with the `instanceof <https://www.php.net/manual/en/language.operators.type.php>`_ operator. 

.. code-block:: php

   <?php
       interface i {};
       
       function foo(i $arg) { 
           // Now, $arg is always an 'i'
       }
       
       function bar($arg) { 
           if (!($arg instanceof i)) {
               // Now, $arg is always an 'i'
           }
       }
   ?>




Suggestions
^^^^^^^^^^^

* Use the interface with instanceof, or a typehint
* Drop the interface altogether : both definition and implements keyword

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------------+
| Short name  | Interfaces/UselessInterfaces                                                                              |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`ClassReview`, :ref:`Typechecks`                                                     |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                     |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                       |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                     |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                      |
+-------------+-----------------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-useless-interfaces <https://github.com/dseguy/clearPHP/tree/master/rules/no-useless-interfaces.md>`__ |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-woocommerce-interfaces-uselessinterfaces`                                                      |
+-------------+-----------------------------------------------------------------------------------------------------------+


.. _modules-incomingdata:

Modules/IncomingData
++++++++++++++++++++

 

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+----------------------+
| Short name  | Modules/IncomingData |
+-------------+----------------------+
| Rulesets    | none                 |
+-------------+----------------------+
| Exakt since | 1.8.6                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Quick (30 mins)      |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _modules-nativereplacement:

Modules/NativeReplacement
+++++++++++++++++++++++++

 

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Modules/NativeReplacement |
+-------------+---------------------------+
| Rulesets    | none                      |
+-------------+---------------------------+
| Exakt since | 1.8.6                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _aliases:

Aliases
+++++++

 List of all aliases used, to alias namespaces.

.. code-block:: php

   <?php
   
   // This is an alias
   use stdClass as aClass;
   
   // This is not an alias : it is not explicit
   use stdClass;
   
   trait t {
       // This is not an alias, it's a trait usage
       use otherTrait;
   }
   
   ?>


See also `Using namespaces: Aliasing/Importing <https://www.php.net/manual/en/language.namespaces.importing.php>`_.

Specs
^^^^^
+-------------+------------------+
| Short name  | Namespaces/Alias |
+-------------+------------------+
| Rulesets    | :ref:`CE`        |
+-------------+------------------+
| Exakt since | 0.8.4            |
+-------------+------------------+
| Php Version | All              |
+-------------+------------------+
| Severity    | Minor            |
+-------------+------------------+
| Time To Fix | Slow (1 hour)    |
+-------------+------------------+
| Precision   | High             |
+-------------+------------------+


.. _possible-alias-confusion:

Possible Alias Confusion
++++++++++++++++++++++++

 An alias is used for a class that doesn't belong to the current namespace, while there is such a class. This also applies to traits and interfaces.

When no alias is used, PHP will search for a class in the local space. Since classes, traits and interfaces are usually stored one per file, it is a valid syntax to create an alias, even if this alias name is the name of a class in the same namespace. 

Yet, with an alias refering to a remote class, while a local one is available, it is possible to generate confusion.

.. code-block:: php

   <?php
   
   // This should be in a separate file, but has been merged here, for display purposes.
   namespace A {
       //an alias from a namespace called C
       use C\A as C_A;
   
       //an alias from a namespace called C, which will superseed the local A\B class (see below)
       use C\D as B;
   }
   
   namespace A {
       // There is a class B in the A namespace
       class B {}
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Avoid using existing classes names for alias
* Use a coding convention to distinguish alias from names

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Namespaces/AliasConfusion |
+-------------+---------------------------+
| Rulesets    | :ref:`Suggestions`        |
+-------------+---------------------------+
| Exakt since | 2.1.2                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _fully-qualified-constants:

Fully Qualified Constants
+++++++++++++++++++++++++

 Constants defined with their namespace.

When defining constants with `define() <https://www.php.net/define>`_ function, it is possible to include the actual namespace : 

.. code-block:: php

   <?php
   
   define('a\b\c', 1); 
   
   ?>


However, the name should be fully qualified without the initial \. Here, \a\b\c constant will never be accessible as a namespace constant, though it will be accessible via the `constant() <https://www.php.net/constant>`_ function.

Also, the namespace will be absolute, and not a relative namespace of the current one. 

Suggestions
^^^^^^^^^^^

* Drop the initial \ when creating constants with define() : for example, use trim($x, '\'), which removes anti-slashes before and after.

Specs
^^^^^
+-------------+-----------------------------------+
| Short name  | Namespaces/ConstantFullyQualified |
+-------------+-----------------------------------+
| Rulesets    | :ref:`Analyze`                    |
+-------------+-----------------------------------+
| Exakt since | 0.8.4                             |
+-------------+-----------------------------------+
| Php Version | All                               |
+-------------+-----------------------------------+
| Severity    | Minor                             |
+-------------+-----------------------------------+
| Time To Fix | Slow (1 hour)                     |
+-------------+-----------------------------------+
| Precision   | High                              |
+-------------+-----------------------------------+


.. _could-use-alias:

Could Use Alias
+++++++++++++++

 This long name may be reduced by using an available alias.

This applies to classes (as full name or prefix), and to constants and functions.

.. code-block:: php

   <?php
   
   use a\b\c;
   use function a\b\c\foo;
   use const a\b\c\D;
   
   // This may be reduced with the above alias to c\d()
   new a\b\c\d();
   
   // This may be reduced to c\d\e\f 
   new a\b\c\d\e\f();
   
   // This may be reduced to c()
   new a\b\c();
   
   // This may be reduced to D
   echo a\b\c\D;
   
   // This may be reduced to D
   a\b\c\foo();
   
   // This can't be reduced : it is an absolute name
   \a\b\c\foo();
   
   // This can't be reduced : it is no an alias nor a prefix
   a\b\d\foo();
   
   ?>




Suggestions
^^^^^^^^^^^

* Use all your aliases so as to make the code shorter and more readable
* Add new aliases for missing path
* Make class names absolute and drop the aliases

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Namespaces/CouldUseAlias |
+-------------+--------------------------+
| Rulesets    | :ref:`Suggestions`       |
+-------------+--------------------------+
| Exakt since | 0.8.4                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Quick (30 mins)          |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _empty-namespace:

Empty Namespace
+++++++++++++++

 Declaring a namespace in the code and not using it for structure declarations or global instructions is useless.

Using simple style : 

.. code-block:: php

   <?php
   
   namespace Y;
   
   class foo {}
   
   
   namespace X;
   // This is useless
   
   ?>


Using bracket-style syntax : 

.. code-block:: php

   <?php
   
   namespace X {
       // This is useless
   }
   
   namespace Y {
   
       class foo {}
   
   }
   
   ?>





Suggestions
^^^^^^^^^^^

* Remove the namespace

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------+
| Short name  | Namespaces/EmptyNamespace                                                                           |
+-------------+-----------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Dead code <dead-code>`                           |
+-------------+-----------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                               |
+-------------+-----------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                 |
+-------------+-----------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                               |
+-------------+-----------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                    |
+-------------+-----------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                |
+-------------+-----------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-empty-namespace <https://github.com/dseguy/clearPHP/tree/master/rules/no-empty-namespace.md>`__ |
+-------------+-----------------------------------------------------------------------------------------------------+


.. _global-import:

Global Import
+++++++++++++

 Mark a Use statement that is importing a global class in the current file.

.. code-block:: php

   <?php
   
   namespace Foo {
       // This is a global import
       use Stdclass;
   }
   ?>

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Namespaces/GlobalImport |
+-------------+-------------------------+
| Rulesets    | none                    |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _hidden-use-expression:

Hidden Use Expression
+++++++++++++++++++++

 The use expression for namespaces should always be at the beginning of the namespace block. 

It is where everyone expect them, and it is less confusing than having them at various levels.

.. code-block:: php

   <?php
   
   // This is visible 
   use A;
   
   class B {}
   
   // This is hidden 
   use C as D;
   
   class E extends D {
       use traitT; // This is a use for a trait
   
       function foo() {
           // This is a use for a closure
           return function ($a) use ($b) {}
       }
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Group all uses together, at the beginning of the namespace or class

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------+
| Short name  | Namespaces/HiddenUse                                                                |
+-------------+-------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                         |
+-------------+-------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                               |
+-------------+-------------------------------------------------------------------------------------+
| Php Version | All                                                                                 |
+-------------+-------------------------------------------------------------------------------------+
| Severity    | Minor                                                                               |
+-------------+-------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                    |
+-------------+-------------------------------------------------------------------------------------+
| Precision   | High                                                                                |
+-------------+-------------------------------------------------------------------------------------+
| Examples    | :ref:`case-tikiwiki-namespaces-hiddenuse`, :ref:`case-openemr-namespaces-hiddenuse` |
+-------------+-------------------------------------------------------------------------------------+


.. _multiple-alias-definitions-per-file:

Multiple Alias Definitions Per File
+++++++++++++++++++++++++++++++++++

 Avoid aliasing the same name with different aliases. This leads to confusion.

.. code-block:: php

   <?php
   
   // first occurrence
   use name\space\ClasseName;
   
   // when this happens, several other uses are mentionned
   
   // name\space\ClasseName has now two names
   use name\space\ClasseName as anotherName;
   
   ?>


See also Namespaces/MultipleAliasDefinition.

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Namespaces/MultipleAliasDefinitionPerFile   |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.10.3                                      |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Slow (1 hour)                               |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _multiple-alias-definitions:

Multiple Alias Definitions
++++++++++++++++++++++++++

 Some aliases are representing different classes across the repository. This leads to potential confusion. 

Across an application, it is recommended to use the same namespace for one alias. Failing to do this lead to the same keyword to represent different values in different files, with different behavior. Those are hard to find bugs. 

.. code-block:: php

   <?php
   
   namespace A {
       use d\d; // aka D
   }
   
   // Those are usually in different files, rather than just different namespaces.
   
   namespace B {
       use b\c as D; // also D. This could be named something else
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Give more specific names to classes
* Use an alias 'use A\B ac BC' to give locally another name

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------------+
| Short name  | Namespaces/MultipleAliasDefinitions                                                                              |
+-------------+------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                            |
+-------------+------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                              |
+-------------+------------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                            |
+-------------+------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                                 |
+-------------+------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                             |
+-------------+------------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-churchcrm-namespaces-multiplealiasdefinitions`, :ref:`case-phinx-namespaces-multiplealiasdefinitions` |
+-------------+------------------------------------------------------------------------------------------------------------------+


.. _namespaces-glossary:

Namespaces Glossary
+++++++++++++++++++

 List of all the defined namespaces in the code, using the namespace keyword. 

.. code-block:: php

   <?php
   
   // One reported namespace
   namespace one\name\space {}
   
   // This global namespace is reported, as it is explicit
   namespace { }
   
   ?>


Global namespaces are mentioned when they are explicitly used.

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Namespaces/Namespacesnames |
+-------------+----------------------------+
| Rulesets    | :ref:`CE`                  |
+-------------+----------------------------+
| Exakt since | 0.8.4                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Slow (1 hour)              |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _namespaces:

Namespaces
++++++++++

 Inventory of all namespaces.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Namespaces/NamespaceUsage |
+-------------+---------------------------+
| Rulesets    | :ref:`CE`                 |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _should-make-alias:

Should Make Alias
+++++++++++++++++

 Long names should be aliased.

Aliased names are easy to read at the beginning of the script; they may be changed at one point, and update the whole code at the same time. 
Finally, short names makes the rest of the code readable. 

.. code-block:: php

   <?php
   
   namespace x\y\z;
   
   use a\b\c\d\e\f\g as Object;
   
   // long name, difficult to read, prone to change.
   new a\b\c\d\e\f\g();
   
   // long name, difficult to read, prone to silent dead code if namespace change.
   if ($o instanceof a\b\c\d\e\f\g) {
       
   }
   
   // short names Easy to update all at once.
   new Object();
   if ($o instanceof Object) {
       
   }
   
   ?>

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Namespaces/ShouldMakeAlias                  |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.8.4                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _unresolved-use:

Unresolved Use
++++++++++++++

 The following use instructions cannot be resolved to a known class, interface, trait, constant or function. They should be dropped or fixed.

A known class, interface, trait, constant or function is defined in PHP (standard), an extension, a stub or the current code.

.. code-block:: php

   <?php
   
   namespace A {
       // class B is defined
       class B {}
       // class C is not defined
   }
   
   namespace X/Y {
   
       use A/B;  // This use is valid
       use A/C;  // This use point to nothing.
   
       new B();
       new C();
   }
   
   ?>


Use expression are options for the current namespace. 

See also `Using namespaces: Aliasing/Importing <https://www.php.net/manual/en/language.namespaces.importing.php>`_.



Suggestions
^^^^^^^^^^^

* Remove the use expression
* Fix the use expression

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------+
| Short name  | Namespaces/UnresolvedUse                                                                          |
+-------------+---------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                    |
+-------------+---------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                             |
+-------------+---------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                               |
+-------------+---------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                             |
+-------------+---------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                     |
+-------------+---------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                              |
+-------------+---------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-unresolved-use <https://github.com/dseguy/clearPHP/tree/master/rules/no-unresolved-use.md>`__ |
+-------------+---------------------------------------------------------------------------------------------------+


.. _unused-use:

Unused Use
++++++++++

 Unused use statements. They may be removed, as they clutter the code and slows PHP by forcing it to search in this list for nothing.

.. code-block:: php

   <?php
   
   use A as B; // Used in a new call.
   use Unused; // Never used. May be removed
   
   $a = new B();
   
   ?>




Suggestions
^^^^^^^^^^^

* Remove the unused use

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------+
| Short name  | Namespaces/UnusedUse                                                                        |
+-------------+---------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Dead code <dead-code>`                                                                |
+-------------+---------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                       |
+-------------+---------------------------------------------------------------------------------------------+
| Php Version | All                                                                                         |
+-------------+---------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                       |
+-------------+---------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                            |
+-------------+---------------------------------------------------------------------------------------------+
| Precision   | Very high                                                                                   |
+-------------+---------------------------------------------------------------------------------------------+
| ClearPHP    | `no-useless-use <https://github.com/dseguy/clearPHP/tree/master/rules/no-useless-use.md>`__ |
+-------------+---------------------------------------------------------------------------------------------+


.. _used-use:

Used Use
++++++++

 List of use statements. Those use are made to import namespaces structures, not to include traits.

.. code-block:: php

   <?php
   
   namespace A {
       class b {}
   }
   
   namespace B {
       use A\B as B;
       
       new B();
   }
   
   ?>


See also `Using namespaces: Aliasing/Importing <https://www.php.net/manual/en/language.namespaces.importing.php>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Namespaces/UsedUse |
+-------------+--------------------+
| Rulesets    | none               |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _use-const-and-functions:

Use Const And Functions
+++++++++++++++++++++++

 Since PHP 5.6 it is possible to import specific functions or constants from other namespaces.

.. code-block:: php

   <?php
   
   namespace A {
       const X = 1;
       function foo() { echo __FUNCTION__; }
   }
   
   namespace My{
       use function A\foo;
       use constant A\X;
   
       echo foo(X);
   }
   
   ?>


See also `Using namespaces: Aliasing/Importing <https://www.php.net/manual/en/language.namespaces.importing.php>`_.

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------+
| Short name  | Namespaces/UseFunctionsConstants                                                |
+-------------+---------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55` |
+-------------+---------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                           |
+-------------+---------------------------------------------------------------------------------+
| Php Version | 5.6+                                                                            |
+-------------+---------------------------------------------------------------------------------+
| Severity    | Major                                                                           |
+-------------+---------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                   |
+-------------+---------------------------------------------------------------------------------+
| Precision   | Very high                                                                       |
+-------------+---------------------------------------------------------------------------------+


.. _use-with-fully-qualified-name:

Use With Fully Qualified Name
+++++++++++++++++++++++++++++

 Use statement doesn't require a fully qualified name.

PHP manual recommends not to use fully qualified name (starting with \) when using the 'use' statement : they are "the leading backslash is unnecessary and not recommended, as import names must be fully qualified, and are not processed relative to the current namespace".

.. code-block:: php

   <?php
   
   // Recommended way to write a use statement.
   use  A\B\C\D as E;
   
   // No need to use the initial \
   use \A\B\C\D as F;
   
   ?>




Suggestions
^^^^^^^^^^^

* Remove the initial \ in use expressions.

Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Namespaces/UseWithFullyQualifiedNS |
+-------------+------------------------------------+
| Rulesets    | :ref:`Analyze`                     |
+-------------+------------------------------------+
| Exakt since | 0.8.4                              |
+-------------+------------------------------------+
| Php Version | All                                |
+-------------+------------------------------------+
| Severity    | Minor                              |
+-------------+------------------------------------+
| Time To Fix | Slow (1 hour)                      |
+-------------+------------------------------------+
| Precision   | High                               |
+-------------+------------------------------------+


.. _wrong-case-namespaces:

Wrong Case Namespaces
+++++++++++++++++++++

 Namespaces are case-insentives.


.. code-block:: php

   <?php
   
   // Namespaces should share the same case
   namespace X {}
   
   namespace x {}
   
   ?>




Suggestions
^^^^^^^^^^^

* Synchronize all names

Specs
^^^^^
+-------------+----------------------+
| Short name  | Namespaces/WrongCase |
+-------------+----------------------+
| Rulesets    | none                 |
+-------------+----------------------+
| Exakt since | 1.9.9                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Quick (30 mins)      |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _abstract-away:

Abstract Away
+++++++++++++

 Avoid using PHP native functions that produce data direcly in the code. For example, `date() <https://www.php.net/date>`_ or `random_int() <https://www.php.net/random_int>`_. They should be abstracted away in a method, that will be replaced later for testing purposes, or even debugging.

To abstract such calls, place them in a method, and add an interface to this method. Then, create and use those objects.

.. code-block:: php

   <?php
   
   // abstracted away date 
   $today = new MyDate();
   echo 'Date : '.$today->date('r');
   
   // hard coded date of today : it changes all the time.
   echo 'Date : '.date('r');
   
   interface MyCalendar{
       function date($format) : string ;
   }
   
   class MyDate implements MyCalendar {
       function date($format) : string { return date('r'); }
   }
   
   // Valid implementation, reserved for testing purpose
   // This prevents from waiting 4 years for a test.
   class MyDateForTest implements MyCalendar {
       function date($format) : string { return date('r', strtotime('2016-02-29 12:00:00')); }
   }
   
   ?>


This analysis targets two API for abstraction : time and random values. Time and date related functions may be replaced by `Carbon <https://carbon.nesbot.com/docs/>`_, `Clock <https://github.com/lcobucci/clock>`_, `Chronos <https://github.com/cakephp/chronos>`_. Random values may be replaced with `RandomLib <https://github.com/ircmaxell/RandomLib/>`_ or a custome interface.

See also `Being in control of time in PHP <https://blog.frankdejonge.nl/being-in-control-of-time-in-php/>`_ and `How to test non-deterministic code <https://www.orbitale.io/2019/12/24/how-to-test-non-deterministic-code.html>`_.


Suggestions
^^^^^^^^^^^

* Abstract away the calls to native PHP functions, and upgrade the unit tests

+---------------------+---------+----------+----------------------------------------------------------------------+
| Name                | Default | Type     | Description                                                          |
+---------------------+---------+----------+----------------------------------------------------------------------+
| abstractableCalls   |         | ini_hash | Functions that shouldn't be called directly, unless in a method.     |
+---------------------+---------+----------+----------------------------------------------------------------------+
| abstractableClasses |         | ini_hash | Classes that shouldn't be instantiated directly, unless in a method. |
+---------------------+---------+----------+----------------------------------------------------------------------+



Specs
^^^^^
+-------------+-----------------------+
| Short name  | Patterns/AbstractAway |
+-------------+-----------------------+
| Rulesets    | :ref:`Suggestions`    |
+-------------+-----------------------+
| Exakt since | 2.1.5                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Quick (30 mins)       |
+-------------+-----------------------+
| Precision   | Medium                |
+-------------+-----------------------+


.. _courier-anti-pattern:

Courier Anti-Pattern
++++++++++++++++++++

 The courier anti-pattern is the storage of a dependency by a class, in order to create an instance that requires this dependency.

The class itself doesn't actually need this dependency, but has a dependency to a class that requires it. 

.. code-block:: php

   <?php
   
   // The foo class requires bar
   class Foo {
       public function __construct(Bar $b) {
       }
   }
   
   // Class A doesn't depends on Bar, but depends on Foo
   // Class A never uses Bar, but only uses Foo.
   class A {
       private $courier;
   
       public function __construct(Bar $courier) {
           $this->courier = $courier;       
       }
   
       public function Afoo() {
           $b = new Foo($this->courier);
       }
   
   }
   
   ?>


The alternative here is to inject Foo instead of Bar. 

See also `Courier Anti-pattern <https://r.je/oop-courier-anti-pattern.html>`_.

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Patterns/CourrierAntiPattern |
+-------------+------------------------------+
| Rulesets    | :ref:`CE`                    |
+-------------+------------------------------+
| Exakt since | 0.11.6                       |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Slow (1 hour)                |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _dependency-injection:

Dependency Injection
++++++++++++++++++++

 A dependency injection is a typehinted argument, that is stored in a property by the constructor. 

.. code-block:: php

   <?php
   
   // Classic dependency injection 
   class foo {
       private $bar;
   
       public function __construct(Bar $bar) {
           $this->bar = $bar;
       }
   
       public function doSomething($args) {
           return $this->bar->barbar($args);
       }
   }
   
   // Without typehint, this is not a dependency injection
   class foo {
       private $bar;
   
       public function __construct($bar) {
           $this->bar = $bar;
       }
   }
   
   ?>


See also `Understanding Dependency Injection <http://php-di.org/doc/understanding-di.html>`_.

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Patterns/DependencyInjection |
+-------------+------------------------------+
| Rulesets    | :ref:`CE`                    |
+-------------+------------------------------+
| Exakt since | 0.11.6                       |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Slow (1 hour)                |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _an-oop-factory:

An OOP Factory
++++++++++++++

 A method or function that implements a factory. A factory is a class that handles the creation of an object, based on parameters. The factory hides the logic that leads to the creation of the object. 

.. code-block:: php

   <?php
       class AutomobileFactory {
           public static function create($make, $model) {
               $className = \\Automaker\\Brand\\$make;
               return new $className($model);
           }
       }
       
       // The factory is able to build any car, based on their 
       $fuego = AutomobileFactory::create('Renault', 'Fuego');
       
       print_r($fuego->getMakeAndModel()); // outputs Renault Fuego
   ?>


See also `Factory (object-oriented programming) <https://en.wikipedia.org/wiki/Factory_(object-oriented_programming)>`_ and `Factory <https://phptherightway.com/pages/Design-Patterns.html#factory>`_.



Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+------------------+
| Short name  | Patterns/Factory |
+-------------+------------------+
| Rulesets    | :ref:`CE`        |
+-------------+------------------+
| Exakt since | 1.6.7            |
+-------------+------------------+
| Php Version | All              |
+-------------+------------------+
| Severity    | Minor            |
+-------------+------------------+
| Time To Fix | Quick (30 mins)  |
+-------------+------------------+
| Precision   | High             |
+-------------+------------------+


.. _array\_key\_exists()-speedup:

array_key_exists() Speedup
++++++++++++++++++++++++++

 `isset() <https://www.www.php.net/isset>`_ used to be the fastest, but `array_key_exists() <https://www.php.net/array_key_exists>`_ is. Since PHP 7.4, `array_key_exists() <https://www.php.net/array_key_exists>`_ has its own opcode, leading to better features and speed.

`isset() <https://www.www.php.net/isset>`_ is faster for all non-empty values, but is limited when the value is `NULL <https://www.php.net/manual/en/language.types.null.php>`_ or empty : then, `array_key_exists() <https://www.php.net/array_key_exists>`_ has the good features.

``This change makes `array_key_exists() <https://www.php.net/array_key_exists>`_ actually faster than `isset() <https://www.www.php.net/isset>`_ by ~25% (tested with GCC 8, -O3, march=native, mtune=native).``.

.. code-block:: php

   <?php
   
   $foo = [123 => 456];
   
   // This is sufficient and efficient since PHP 7.4
   if (array_search_key($foo[123])) {
       // do something
   }
   
   // taking advantages of performances for PHP 7.4 and older
   if (isset($foo[123]) || array_search_key($foo[123])) {
       // do something
   }
   
   ?>


See also `Implement ZEND_ARRAY_KEY_EXISTS opcode to speed up `array_key_exists() <https://www.php.net/array_key_exists>`_ <https://github.com/php/php-src/pull/3360>`_.


Suggestions
^^^^^^^^^^^

* Remove the logical test and the isset() call

Specs
^^^^^
+-------------+-----------------------------------------+
| Short name  | Performances/ArrayKeyExistsSpeedup      |
+-------------+-----------------------------------------+
| Rulesets    | :ref:`Performances`, :ref:`Suggestions` |
+-------------+-----------------------------------------+
| Exakt since | 1.6.1                                   |
+-------------+-----------------------------------------+
| Php Version | 7.4+                                    |
+-------------+-----------------------------------------+
| Severity    | Minor                                   |
+-------------+-----------------------------------------+
| Time To Fix | Quick (30 mins)                         |
+-------------+-----------------------------------------+
| Precision   | High                                    |
+-------------+-----------------------------------------+


.. _no-array\_merge()-in-loops:

No array_merge() In Loops
+++++++++++++++++++++++++

 `array_merge() <https://www.php.net/array_merge>`_ is memory intensive : every call will duplicate the arguments in memory, before merging them. 

To handle arrays that may be quite big, it is recommended to avoid using `array_merge() <https://www.php.net/array_merge>`_ in a loop. Instead, one should use `array_merge() <https://www.php.net/array_merge>`_ with as many arguments as possible, making the merge a on time call.

.. code-block:: php

   <?php
   
   // A large multidimensional array
   $source = ['a' => ['a', 'b', /*...*/],
              'b' => ['b', 'c', 'd', /*...*/],
              /*...*/
              ];
   
   // Faster way
   $b = array();
   foreach($source as $key => $values) {
       //Collect in an array
       $b[] = $values;
   }
   
   // One call to array_merge
   $b = call_user_func_array('array_merge', $b);
   // or with variadic
   $b = call_user_func('array_merge', ..$b);
   
   // Fastest way (with above example, without checking nor data pulling)
   $b = call_user_func_array('array_merge', array_values($source))
   // or
   $b = call_user_func('array_merge', ...array_values($source))
   
   // Slow way to merge it all
   $b = array();
   foreach($source as $key => $values) {
       $b = array_merge($b, $values);
   }
   
   ?>


Note that `array_merge_recursive() <https://www.php.net/array_merge_recursive>`_ and `file_put_contents() <https://www.php.net/file_put_contents>`_ are affected and reported the same way.



Suggestions
^^^^^^^^^^^

* Store all intermediate arrays in a temporary variable, and use array_merge() once, with ellipsis or call_user_func_array().

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------------------+
| Short name  | Performances/ArrayMergeInLoops                                                                              |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Performances`, :ref:`Top10`                              |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                       |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                         |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                       |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                             |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                        |
+-------------+-------------------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-array_merge-in-loop <https://github.com/dseguy/clearPHP/tree/master/rules/no-array_merge-in-loop.md>`__ |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-tine20-performances-arraymergeinloops`                                                           |
+-------------+-------------------------------------------------------------------------------------------------------------+


.. _autoappend:

Autoappend
++++++++++

 Appending a variable to itself leads to enormous usage of memory.

.. code-block:: php

   <?php
   
   // Always append a value to a distinct variable
   foreach($a as $b) {
       $c[] = $b;
   }
   
   // This copies the array to itself, and double the size each loop
   foreach($a as $b) {
       $c[] = $c;
   }
   ?>




Suggestions
^^^^^^^^^^^

* Change the variable in the append, on the left
* Change the variable in the append, on the right

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Performances/Autoappend |
+-------------+-------------------------+
| Rulesets    | :ref:`Performances`     |
+-------------+-------------------------+
| Exakt since | 1.8.3                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Quick (30 mins)         |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _avoid-array\_push():

Avoid array_push()
++++++++++++++++++

 `array_push() <https://www.php.net/array_push>`_ is slower than the [] operator.

This is also true if the [] operator is called several times, while `array_push() <https://www.php.net/array_push>`_ may be called only once. 
And using count after the push is also faster than collecting `array_push() <https://www.php.net/array_push>`_ return value. 

.. code-block:: php

   <?php
   
   $a = [1,2,3];
   // Fast version
   $a[] = 4;
   
   $a[] = 5;
   $a[] = 6;
   $a[] = 7;
   $count = count($a);
   
   // Slow version
   array_push($a, 4);
   $count = array_push($a, 5,6,7);
   
   // Multiple version : 
   $a[] = 1;
   $a[] = 2;
   $a[] = 3;
   array_push($a, 1, 2, 3);
   
   
   ?>


This is a micro-optimisation. 



Suggestions
^^^^^^^^^^^

* Use the [] operator

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Performances/AvoidArrayPush |
+-------------+-----------------------------+
| Rulesets    | :ref:`Performances`         |
+-------------+-----------------------------+
| Exakt since | 0.9.1                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Instant (5 mins)            |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _cache-variable-outside-loop:

Cache Variable Outside Loop
+++++++++++++++++++++++++++

 Avoid recalculating constant values inside the loop.

Do the calculation once, outside the loops, and then reuse the value each time. 

One of the classic example if doing ``count($array)`` in a ``for`` loop : since the source is constant during the loop, the result of `count() <https://www.php.net/count>`_ is always the same. 

.. code-block:: php

   <?php
   
   $path = '/some/path';
   $fullpath = realpath("$path/more/dirs/");
   foreach($files as $file) {
       // Only moving parts are used in the loop
       copy($file, $fullpath.$file);
   }
   
   $path = '/some/path';
   foreach($files as $file) {
       // $fullpath is calculated each loop
       $fullpath = realpath("$path/more/dirs/");
       copy($file, $fullpath.$file);
   }
   
   ?>


Depending on the load of the called method, this may increase the speed of the loop from little to enormously.



Suggestions
^^^^^^^^^^^

* Avoid using blind variables outside loops.
* Store blind variables in local variables or properties for later reuse.

Specs
^^^^^
+-------------+---------------------------------------+
| Short name  | Performances/CacheVariableOutsideLoop |
+-------------+---------------------------------------+
| Rulesets    | :ref:`Performances`                   |
+-------------+---------------------------------------+
| Exakt since | 1.2.8                                 |
+-------------+---------------------------------------+
| Php Version | All                                   |
+-------------+---------------------------------------+
| Severity    | Minor                                 |
+-------------+---------------------------------------+
| Time To Fix | Slow (1 hour)                         |
+-------------+---------------------------------------+
| Precision   | High                                  |
+-------------+---------------------------------------+


.. _fputcsv()-in-loops:

fputcsv() In Loops
++++++++++++++++++

 `fputcsv() <https://www.php.net/fputcsv>`_ is slow when called on each row. It actually flushes the data to the disk each time, and that results in a inefficient dump to the disk, each call.

To speed up this process, it is recommended to dump the csv to memory first, then dump the memory to the disk, in larger chunks. Since `fputcsv() <https://www.php.net/fputcsv>`_ works only on stream, it is necessary to use a memory stream.

.. code-block:: php

   <?php
   
   // Speedy yet memory intensive version
   $f = fopen('php://memory', 'w+');
   foreach($data_source as $row) {
       // You may configure fputcsv as usual
       fputcsv($f, $row);
   }
   rewind($f); // Important
   $fp = fopen('final.csv', 'w+');
   fputs($fp, stream_get_contents($f));
   fclose($fp);
   fclose($f);
   
   // Slower version
   $fp = fopen('final.csv', 'w+');
   foreach($data_source as $row) {
       // You may configure fputcsv as usual
       fputcsv($fp, $row);
   }
   fclose($fp);
   ?>


The speed improvement is significant on small rows, while it may be less significant on larger rows : with more data in the rows, the file buffer may fill up more efficiently. On small rows, the speed gain is up to 7 times. 



Suggestions
^^^^^^^^^^^

* Use fputcsv() on a memory stream, and flush it on the disk once

Specs
^^^^^
+-------------+-----------------------------------+
| Short name  | Performances/CsvInLoops           |
+-------------+-----------------------------------+
| Rulesets    | :ref:`Performances`, :ref:`Top10` |
+-------------+-----------------------------------+
| Exakt since | 1.5.5                             |
+-------------+-----------------------------------+
| Php Version | All                               |
+-------------+-----------------------------------+
| Severity    | Minor                             |
+-------------+-----------------------------------+
| Time To Fix | Quick (30 mins)                   |
+-------------+-----------------------------------+
| Precision   | High                              |
+-------------+-----------------------------------+


.. _do-in-base:

Do In Base
++++++++++

 Use SQL expression to compute aggregates. 

.. code-block:: php

   <?php
   
   // Efficient way
   $res = $db->query('SELECT sum(e) AS sumE FROM table WHERE condition');
   
   // The sum is already done
   $row = $res->fetchArray();
   $c += $row['sumE'];
   
   // Slow way
   $res = $db->query('SELECT e FROM table WHERE condition');
   
   // This aggregates the column e in a slow way
   while($row = $res->fetchArray()) { 
       $c += $row['e'];
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Rework the query to move the calculations in the database

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Performances/DoInBase |
+-------------+-----------------------+
| Rulesets    | :ref:`Performances`   |
+-------------+-----------------------+
| Exakt since | 1.2.8                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Major                 |
+-------------+-----------------------+
| Time To Fix | Quick (30 mins)       |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _double-array\_flip():

Double array_flip()
+++++++++++++++++++

 Avoid double `array_flip() <https://www.php.net/array_flip>`_ to gain speed. While `array_flip() <https://www.php.net/array_flip>`_ alone is usually useful, a double call to `array_flip() <https://www.php.net/array_flip>`_ is made to make values and keys unique. 

.. code-block:: php

   <?php
   
   // without array_flip
   function foo($array, $value) {
       $key = array_search($array, $value);
       
       if ($key !== false) {
           unset($array[$key]);
       }
       
       return $array;
   }
   
   // double array_flip
   // array_flip() usage means that $array's values are all unique
   function foo($array, $value) {
       $flipped = array_flip($value);
       unset($flipped[$value]);
       return array_flip($flipped);
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* use array_unique() or array_count_values
* use array_flip() once, and let PHP garbage collect it later
* Keep the original values in a separate variable

Specs
^^^^^
+-------------+----------------------------------------------------+
| Short name  | Performances/DoubleArrayFlip                       |
+-------------+----------------------------------------------------+
| Rulesets    | :ref:`Performances`                                |
+-------------+----------------------------------------------------+
| Exakt since | 1.1.4                                              |
+-------------+----------------------------------------------------+
| Php Version | All                                                |
+-------------+----------------------------------------------------+
| Severity    | Major                                              |
+-------------+----------------------------------------------------+
| Time To Fix | Quick (30 mins)                                    |
+-------------+----------------------------------------------------+
| Precision   | High                                               |
+-------------+----------------------------------------------------+
| Examples    | :ref:`case-nextcloud-performances-doublearrayflip` |
+-------------+----------------------------------------------------+


.. _fetch-one-row-format:

Fetch One Row Format
++++++++++++++++++++

 When reading results with ext/Sqlite3, it is recommended to explicitly request `SQLITE3_NUM <https://www.php.net/SQLITE3_NUM>`_ or `SQLITE3_ASSOC <https://www.php.net/SQLITE3_ASSOC>`_, while avoiding the default value and `SQLITE3_BOTH <https://www.php.net/SQLITE3_BOTH>`_.

.. code-block:: php

   <?php
   
   $res = $database->query($query);
   
   // Fastest version, but less readable
   $row = $res->fetchArray(\SQLITE3_NUM);
   // Almost the fastest version, and more readable
   $row = $res->fetchArray(\SQLITE3_ASSOC);
   
   // Default version. Quite slow
   $row = $res->fetchArray();
   
   // Worse case
   $row = $res->fetchArray(\SQLITE3_BOTH);
   
   ?>


This is a micro-optimisation. The difference may be visible with 200k rows fetches, and measurable with 10k.



Suggestions
^^^^^^^^^^^

* Specify the result format when reading rows from a Sqlite3 database

Specs
^^^^^
+-------------+--------------------------------+
| Short name  | Performances/FetchOneRowFormat |
+-------------+--------------------------------+
| Rulesets    | :ref:`Performances`            |
+-------------+--------------------------------+
| Exakt since | 0.9.6                          |
+-------------+--------------------------------+
| Php Version | All                            |
+-------------+--------------------------------+
| Severity    | Minor                          |
+-------------+--------------------------------+
| Time To Fix | Instant (5 mins)               |
+-------------+--------------------------------+
| Precision   | High                           |
+-------------+--------------------------------+


.. _isset()-on-the-whole-array:

Isset() On The Whole Array
++++++++++++++++++++++++++

 `Isset() <https://www.www.php.net/isset>`_ works quietly on a whole array. There is no need to test all previous index before testing for the target index.

.. code-block:: php

   <?php
   
   // Straight to the point
   if (isset($a[1]['source'])) {
       // Do something with $a[1]['source']
   }
   
   // Doing too much work
   if (isset($a) && isset($a[1]) && isset($a[1]['source'])) {
       // Do something with $a[1]['source']
   }
   
   ?>


There is a gain in readability, by avoiding long and hard to read logical expression, and reducing them in one simple `isset <https://www.www.php.net/isset>`_ call.

There is a gain in performances by using one call to `isset <https://www.www.php.net/isset>`_, instead of several, but it is a micro-optimization. 

See also `Isset <http://www.php.net/`isset <https://www.www.php.net/isset>`_>`_.



Suggestions
^^^^^^^^^^^

* Remove all unnecessary calls to isset()

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------+
| Short name  | Performances/IssetWholeArray                                                                               |
+-------------+------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Performances`, :ref:`Suggestions`                                                                    |
+-------------+------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.5.6                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                        |
+-------------+------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                           |
+-------------+------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-tine20-performances-issetwholearray`, :ref:`case-expressionengine-performances-issetwholearray` |
+-------------+------------------------------------------------------------------------------------------------------------+


.. _joining-file():

Joining file()
++++++++++++++

 Use `file() <https://www.php.net/file>`_ to read lines separately. 

Applying join('', ) or implode('', ) to the result of `file() <https://www.php.net/file>`_ provides the same results than using `file_get_contents() <https://www.php.net/file_get_contents>`_, but at a higher cost of memory and processing.

If the delimiter is not '', then `implode() <https://www.php.net/implode>`_ and `file() <https://www.php.net/file>`_ are a better solution than `file_get_contents() <https://www.php.net/file_get_contents>`_ and `str_replace() <https://www.php.net/str_replace>`_ or `nl2br() <https://www.php.net/nl2br>`_.

.. code-block:: php

   <?php
   
   // memory intensive
   $content = file_get_contents('path/to/file.txt');
   
   // memory and CPU intensive
   $content = join('', file('path/to/file.txt'));
   
   // Consider reading the data line by line and processing it along the way, 
   // to save memory 
   $fp = fopen('path/to/file.txt', 'r');
   while($line = fget($fp)) {
       // process a line
   }
   fclose($fp);
   
   ?>


Always use `file_get_contents() <https://www.php.net/file_get_contents>`_ to get the content of a file as a string. Consider using `readfile() <https://www.php.net/readfile>`_ to echo the content directly to the output.

See also `file_get_contents <https://www.php.net/file_get_contents>`_ and `file <https://www.php.net/file>`_.


Suggestions
^^^^^^^^^^^

* Use file_get_contents() instead of implode(file()) to read the whole file at once.
* Use readfile() to echo the content to stdout at once.
* Use fopen() to read the lines one by one, generator style.

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------+
| Short name  | Performances/JoinFile                                                               |
+-------------+-------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Performances`                                                                 |
+-------------+-------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                               |
+-------------+-------------------------------------------------------------------------------------+
| Php Version | All                                                                                 |
+-------------+-------------------------------------------------------------------------------------+
| Severity    | Minor                                                                               |
+-------------+-------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                     |
+-------------+-------------------------------------------------------------------------------------+
| Precision   | High                                                                                |
+-------------+-------------------------------------------------------------------------------------+
| Examples    | :ref:`case-wordpress-performances-joinfile`, :ref:`case-spip-performances-joinfile` |
+-------------+-------------------------------------------------------------------------------------+


.. _logical-to-in\_array:

Logical To in_array
+++++++++++++++++++

 Multiples exclusive comparisons may be replaced by `in_array() <https://www.php.net/in_array>`_.

`in_array() <https://www.php.net/in_array>`_ makes the alternatives more readable, especially when the number of alternatives is large. In fact, the list of alternative may even be set in a variable, and centralized for easier management.

Even two 'or' comparisons are slower than using a `in_array() <https://www.php.net/in_array>`_ call. More calls are even slower than just two. This is a micro-optimisation : speed gain is low, and marginal. Code centralisation is a more significant advantage.

.. code-block:: php

   <?php
   
   // Set the list of alternative in a variable, property or constant. 
   $valid_values = array(1, 2, 3, 4);
   if (in_array($a, $valid_values) ) {
       // doSomething()
   }
   
   if ($a == 1 || $a == 2 || $a == 3 || $a == 4) {
       // doSomething()
   }
   
   // in_array also works with strict comparisons
   if (in_array($a, $valid_values, true) ) {
       // doSomething()
   }
   
   if ($a === 1 || $a === 2 || $a === 3 || $a === 4) {
       // doSomething()
   }
   
   ?>


See also `in_array() <https://www.php.net/in_array>`_.


Suggestions
^^^^^^^^^^^

* Replace the list of comparisons with a in_array() call on an array filled with the various values
* Replace the list of comparisons with a isset() call on a hash whose keys are the various values

Specs
^^^^^
+-------------+---------------------------------------------------+
| Short name  | Performances/LogicalToInArray                     |
+-------------+---------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                    |
+-------------+---------------------------------------------------+
| Exakt since | 0.12.5                                            |
+-------------+---------------------------------------------------+
| Php Version | All                                               |
+-------------+---------------------------------------------------+
| Severity    | Minor                                             |
+-------------+---------------------------------------------------+
| Time To Fix | Quick (30 mins)                                   |
+-------------+---------------------------------------------------+
| Precision   | Very high                                         |
+-------------+---------------------------------------------------+
| Examples    | :ref:`case-zencart-performances-logicaltoinarray` |
+-------------+---------------------------------------------------+


.. _make-one-call-with-array:

Make One Call With Array
++++++++++++++++++++++++

 Avoid calling the same function several times by batching the calls with arrays.

Calling the same function to chain modifications tends to be slower than calling the same function with all the transformations at the same time. Some PHP functions accept scalars or arrays, and using the later is more efficient.

.. code-block:: php

   <?php
   
   $string = 'abcdef'; 
   
   //str_replace() accepts arrays as arguments
   $string = str_replace( ['a', 'b', 'c'],
                          ['A', 'B', 'C'],
                          $string);
   
   // Too many calls to str_replace
   $string = str_replace( 'a', 'A', $string);
   $string = str_replace( 'b', 'B', $string);
   $string = str_replace( 'c', 'C', $string);
   
   // Too many nested calls to str_replace
   $string = str_replace( 'a', 'A', str_replace( 'b', 'B', str_replace( 'c', 'C', $string)));
   
   ?>


Potential replacements : 

+--------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| Function                                                                 | Replacement                                                                         |
+--------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
| `str_replace() <https://www.php.net/str_replace>`_                       | `str_replace() <https://www.php.net/str_replace>`_                                  |
| `str_ireplace() <https://www.php.net/str_ireplace>`_                     | `str_replace() <https://www.php.net/str_replace>`_                                  |
| `substr_replace() <https://www.php.net/substr_replace>`_                 | `substr_replace() <https://www.php.net/substr_replace>`_                            |
| `preg_replace() <https://www.php.net/preg_replace>`_                     | `preg_replace() <https://www.php.net/preg_replace>`_                                |
| `preg_replace_callback() <https://www.php.net/preg_replace_callback>`_   | `preg_replace_callback_array() <https://www.php.net/preg_replace_callback_array>`_  |
+--------------------------------------------------------------------------+-------------------------------------------------------------------------------------+

.. code-block:: php

   <?php
   $subject = 'Aaaaaa Bbb';
   
   
   //preg_replace_callback_array() is better than multiple preg_replace_callback : 
   preg_replace_callback_array(
       [
           '~[a]+~i' => function ($match) {
               echo strlen($match[0]), ' matches for a found', PHP_EOL;
           },
           '~[b]+~i' => function ($match) {
               echo strlen($match[0]), ' matches for b found', PHP_EOL;
           }
       ],
       $subject
   );
   
   $result = preg_replace_callback('~[a]+~i', function ($match) {
               echo strlen($match[0]), ' matches for a found', PHP_EOL;
           }, $subject);
   
   $result = preg_replace_callback('~[b]+~i', function ($match) {
               echo strlen($match[0]), ' matches for b found', PHP_EOL;
           }, $subject);
   
   //str_replace() accepts arrays as arguments
   $string = str_replace( ['a', 'b', 'c'],
                          ['A', 'B', 'C'],
                          $string);
   
   // Too many calls to str_replace
   $string = str_replace( 'a', 'A');
   $string = str_replace( 'b', 'B');
   $string = str_replace( 'c', 'C');
   
   ?>


 

Suggestions
^^^^^^^^^^^

* use str_replace() with arrays as arguments.
* use preg_replace() with arrays as arguments.
* use preg_replace_callback() for merging multiple complex calls.

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------+
| Short name  | Performances/MakeOneCall                                                                    |
+-------------+---------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Performances`                                                                         |
+-------------+---------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                       |
+-------------+---------------------------------------------------------------------------------------------+
| Php Version | All                                                                                         |
+-------------+---------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                       |
+-------------+---------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                             |
+-------------+---------------------------------------------------------------------------------------------+
| Precision   | High                                                                                        |
+-------------+---------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-humo-gen-performances-makeonecall`, :ref:`case-edusoho-performances-makeonecall` |
+-------------+---------------------------------------------------------------------------------------------+


.. _no-mb\_substr-in-loop:

No mb_substr In Loop
++++++++++++++++++++

 Do not use loops on `mb_substr() <https://www.php.net/mb_substr>`_. 

`mb_substr() <https://www.php.net/mb_substr>`_ always starts at the beginning of the string ot search for the nth char, and recalculate everything. This means that the first iterations are as fast as `substr() <https://www.php.net/substr>`_ (for comparison), while the longer the string, the slower `mb_substr() <https://www.php.net/mb_substr>`_.

The recommendation is to use `preg_split() <https://www.php.net/preg_split>`_ with the `u` option, to split the string into an array. This save multiple recalculations.

.. code-block:: php

   <?php
   
   // Split the string by characters
   $array = preg_split('//u', $string, -1, PREG_SPLIT_NO_EMPTY);
   foreach($array as $c) {
       doSomething($c);
   }
   
   // Slow version
   $nb = mb_strlen($mb);
   for($i = 0; $i < $nb; ++$i) {
       // Fetch a character
       $c = mb_substr($string, $i, 1);
       doSomething($c);
   }
   
   ?>


See also `Optimization: How I made my PHP code run 100 times faster <https://mike42.me/blog/2018-06-how-i-made-my-php-code-run-100-times-faster>`_ and `How to iterate UTF-8 string in PHP? <https://stackoverflow.com/questions/3666306/how-to-iterate-utf-8-string-in-php>`_.


Suggestions
^^^^^^^^^^^

* Use preg_split() and loop on its results.

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Performances/MbStringInLoop |
+-------------+-----------------------------+
| Rulesets    | :ref:`Performances`         |
+-------------+-----------------------------+
| Exakt since | 1.9.6                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Quick (30 mins)             |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _memoize-magiccall:

Memoize MagicCall
+++++++++++++++++

 Cache calls to magic methods in local variable. Local cache is faster than calling again the magic method as soon as the second call, provided that the value hasn't changed.

``__get`` is slower, as it turns a simple member access into a full method call. 

.. code-block:: php

   <?php
   
   class x {
       private $values = array();
       
       function __get($name) {
           return $this->values[$name];
       }
       // more code to set values to this class
   }
   
   function foo(x $b) {
       $a = $b->a; 
       $c = $b->c;
       
       $d = $c;     // using local cache, no new access to $b->__get($name)
       $e = $b->a;  // Second access to $b->a, through __get
   }
   
   function bar(x $b) {
       $a = $b->a; 
       $c = $b->c;
       
       $b->bar2(); // this changes $b->a and $b->c, but we don't see it
       
       $d = $b->c; 
       $e = $b->a;  // Second access to $b->a, through __get
   }
   
   ?>


The caching is not possible if the processing of the object changes the value of the property. 

See also `__get performance questions with PHP <https://stackoverflow.com/questions/3330852/get-set-call-performance-questions-with-php>`_, :ref:`make-magic-concrete` and `Benchmarking magic <https://www.garfieldtech.com/blog/benchmarking-magic>`_.



Suggestions
^^^^^^^^^^^

* Cache the value in a local variable, and reuse that variable
* Make the property concrete in the class, so as to avoid __get() altogether

+--------------------+---------+---------+-------------------------------------------------------------------------------+
| Name               | Default | Type    | Description                                                                   |
+--------------------+---------+---------+-------------------------------------------------------------------------------+
| minMagicCallsToGet | 2       | integer | Minimal number of calls of a magic property to make it worth locally caching. |
+--------------------+---------+---------+-------------------------------------------------------------------------------+



Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Performances/MemoizeMagicCall      |
+-------------+------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`ClassReview` |
+-------------+------------------------------------+
| Exakt since | 1.8.3                              |
+-------------+------------------------------------+
| Php Version | All                                |
+-------------+------------------------------------+
| Severity    | Minor                              |
+-------------+------------------------------------+
| Time To Fix | Quick (30 mins)                    |
+-------------+------------------------------------+
| Precision   | High                               |
+-------------+------------------------------------+


.. _avoid-concat-in-loop:

Avoid Concat In Loop
++++++++++++++++++++

 Concatenations inside a loop generate a lot of temporary variables. They are accumulated and tend to raise the memory usage, leading to slower performances.

It is recommended to store the values in an array, and then use `implode() <https://www.php.net/implode>`_ on that array to make the concatenation at once. The effect is positive when the source array has at least 50 elements. 

.. code-block:: php

   <?php
   
   // Concatenation in one operation
   $tmp = array();
   foreach(data_source() as $data) {
       $tmp[] = $data;
   }
   $final = implode('', $tmp);
   
   // Concatenation in many operations
   foreach(data_source() as $data) {
       $final .= $data;
   }
   
   ?>


The same doesn't apply to addition and multiplication, with `array_sum() <https://www.php.net/array_sum>`_ and array_multiply(), as those operations work on the current memory allocation, and don't need to allocate new memory at each step. 

See also `PHP 7 performance improvements (3/5): Encapsed strings optimization <https://blog.blackfire.io/php-7-performance-improvements-encapsed-strings-optimization.html>`_.


Suggestions
^^^^^^^^^^^

* Collect all pieces in an array, then implode() the array in one call.

Specs
^^^^^
+-------------+----------------------------------------------------------------------------------------------------+
| Short name  | Performances/NoConcatInLoop                                                                        |
+-------------+----------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Performances`, :ref:`Top10`                                                                  |
+-------------+----------------------------------------------------------------------------------------------------+
| Exakt since | 0.12.4                                                                                             |
+-------------+----------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                |
+-------------+----------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                              |
+-------------+----------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                      |
+-------------+----------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                               |
+-------------+----------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-suitecrm-performances-noconcatinloop`, :ref:`case-thinkphp-performances-noconcatinloop` |
+-------------+----------------------------------------------------------------------------------------------------+


.. _avoid-glob()-usage:

Avoid glob() Usage
++++++++++++++++++

 `glob() <https://www.php.net/glob>`_ and `scandir() <https://www.php.net/scandir>`_ sorts results by default. When that kind of sorting is not needed, save some time by requesting ``NOSORT`` with those functions.

Besides, whenever possible, use `scandir() <https://www.php.net/scandir>`_ instead of `glob() <https://www.php.net/glob>`_. 

.. code-block:: php

   <?php
   
   // Scandir without sorting is the fastest. 
   scandir('docs/', SCANDIR_SORT_NONE);
   
   // Scandir sorts files by default. Same as above, but with sorting
   scandir('docs/');
   
   // glob sorts files by default. Same as below, but no sorting
   glob('docs/*', GLOB_NOSORT);
   
   // glob sorts files by default. This is the slowest version
   glob('docs/*');
   
   ?>


Using `opendir() <https://www.php.net/opendir>`_ and a while loop may be even faster. 

This analysis skips `scandir() <https://www.php.net/scandir>`_ and `glob() <https://www.php.net/glob>`_ if they are expliciely configured with flags (aka, sorting is explicitly needed).

`glob() <https://www.php.net/glob>`_ accepts wildchar, such as ``*``, that may not easily replaced with `scandir() <https://www.php.net/scandir>`_ or `opendir() <https://www.php.net/opendir>`_.

See also `Putting glob to the test <https://www.phparch.com/2010/04/putting-glob-to-the-test/>`_, `How to list files recursively in a directory with PHP iterators <https://dev.to/bdelespierre/how-to-list-files-recursively-in-a-directory-with-php-iterators-5c0m>`_ and `glob:// <https://www.php.net/manual/en/wrappers.glob.php>`_.



Suggestions
^^^^^^^^^^^

* Use FilesystemIterator, DirectoryIterator classes.
* Use ``RegexIterator`` to filter any unwanted results from ``FilesystemIterator``.
* Use ``glob`` protocol for files : $it = new DirectoryIterator('glob://path/to/examples/*.php');

Specs
^^^^^
+-------------+----------------------------------------------------------------------------------+
| Short name  | Performances/NoGlob                                                              |
+-------------+----------------------------------------------------------------------------------+
| Rulesets    | :ref:`Performances`                                                              |
+-------------+----------------------------------------------------------------------------------+
| Exakt since | 0.9.6                                                                            |
+-------------+----------------------------------------------------------------------------------+
| Php Version | All                                                                              |
+-------------+----------------------------------------------------------------------------------+
| Severity    | Major                                                                            |
+-------------+----------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                  |
+-------------+----------------------------------------------------------------------------------+
| Precision   | High                                                                             |
+-------------+----------------------------------------------------------------------------------+
| Examples    | :ref:`case-phinx-performances-noglob`, :ref:`case-nextcloud-performances-noglob` |
+-------------+----------------------------------------------------------------------------------+


.. _no-count-with-0:

No Count With 0
+++++++++++++++

 Comparing `count() <https://www.php.net/count>`_, `strlen() <https://www.php.net/strlen>`_ or `mb_strlen() <https://www.php.net/mb_strlen>`_ to 0 is a waste of resources. There are three distinct situations.

When comparing `count() <https://www.php.net/count>`_ with 0, with ===, ==, !==, !=, it is more efficient to use `empty() <https://www.php.net/empty>`_. `empty() <https://www.php.net/empty>`_ is a language construct that checks if a value is present, while `count() <https://www.php.net/count>`_ actually load the number of element.

.. code-block:: php

   <?php
   
   // Checking if an array is empty
   if (count($array) == 0) {
       // doSomething();
   }
   // This may be replaced with 
   if (empty($array)) {
       // doSomething();
   }
   
   ?>


When comparing `count() <https://www.php.net/count>`_ strictly with 0 and ``>``, it is more efficient to use ``!(empty(  ))``

.. code-block:: php

   <?php
   
   // Checking if an array is empty
   if (count($array) > 0) {
       // doSomething();
   }
   // This may be replaced with 
   if (!empty($array)) {
       // doSomething();
   }
   
   Of course comparing count() with negative values, or with >= is useless.
   
   <?php
   
   // Checking if an array is empty
   if (count($array) < 0) {
       // This never happens
       // doSomething();
   }
   
   ?>


Comparing `count() <https://www.php.net/count>`_, `strlen() <https://www.php.net/strlen>`_ or `mb_strlen() <https://www.php.net/mb_strlen>`_ with other values than 0 cannot be replaced with a comparison with `empty() <https://www.php.net/empty>`_.

Note that this is a micro-optimisation : since PHP keeps track of the number of elements in arrays (or number of chars in strings), the total computing time of both operations is often lower than a ms. However, both functions tends to be heavily used, and may even be used inside loops. 

See also `count <https://www.php.net/count>`_, `strlen <https://www.php.net/strlen>`_ and `mb_strlen <https://www.php.net/mb_strlen>`_.


Suggestions
^^^^^^^^^^^

* Use empty() on the data
* Compare the variable with a default value, such as an empty array

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------+
| Short name  | Performances/NotCountNull                                                                     |
+-------------+-----------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Performances`                                                                           |
+-------------+-----------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------+
| Php Version | All                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                              |
+-------------+-----------------------------------------------------------------------------------------------+
| Precision   | High                                                                                          |
+-------------+-----------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-contao-performances-notcountnull`, :ref:`case-wordpress-performances-notcountnull` |
+-------------+-----------------------------------------------------------------------------------------------+


.. _optimize-explode():

Optimize Explode()
++++++++++++++++++

 Limit `explode() <https://www.php.net/explode>`_ results at call time. `explode() <https://www.php.net/explode>`_ returns a string, after breaking it into smaller strings, with a delimiter. 

By default, `explode() <https://www.php.net/explode>`_ breaks the whole string into smaller strings, and returns the array. When not all the elements of the returned array are necessary, using the third argument of `explode() <https://www.php.net/explode>`_ speeds up the process, by removing unnecessary work.

.. code-block:: php

   <?php
   
   $string = '1,2,3,4,5,';
   
   // explode() returns 2 elements, which are then assigned to the list() call.
   list($a, $b) = explode(',', $string, 2);
   
   // explode() returns 6 elements, only two of which are then assigned to the list() call. The rest are discarded.
   list($a, $b) = explode(',', $string, 2);
   
   // it is not possible to skip the first elements, but it is possible to skip the last ones. 
   echo explode(',', $string, 2)[1];
   
   // This protects PHP, in case $string ends up with a lot of commas
   $string = foo(); // usually '1,2' but not known
   list($a, $b) = explode(',', $string, 2);
   ?>


Limiting `explode() <https://www.php.net/explode>`_ has no effect when the operation is already exact : it simply prevents `explode() <https://www.php.net/explode>`_ to cut more than needed if the argument is unexpectedly large. 

This optimisation applies to `split() <https://www.php.net/split>`_, `preg_split() <https://www.php.net/preg_split>`_ and `mb_split() <https://www.php.net/mb_split>`_, too.

This is a micro optimisation, unless the exploded string is large.

 

Suggestions
^^^^^^^^^^^

* Add a limit to explode() call

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Performances/OptimizeExplode |
+-------------+------------------------------+
| Rulesets    | :ref:`Performances`          |
+-------------+------------------------------+
| Exakt since | 2.1.9                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Quick (30 mins)              |
+-------------+------------------------------+
| Precision   | Very high                    |
+-------------+------------------------------+


.. _always-use-function-with-array\_key\_exists():

Always Use Function With array_key_exists()
+++++++++++++++++++++++++++++++++++++++++++

 `array_key_exists() <https://www.php.net/array_key_exists>`_ has been granted a special VM opcode, and is much faster. This applies to PHP 7.4 and more recent. 

It requires that `array_key_exists() <https://www.php.net/array_key_exists>`_ is statically resolved, either with an initial ``\``, or a ``use function`` expression. This doesn't affect the global namespace.

.. code-block:: php

   <?php
   
   namespace my/name/space;
   
   // do not forget the 'function' keyword, or it will apply to classes.
   use function array_key_exists as foo; // the alias is not necessary, and may be omitted.
   
   // array_key_exists is aliased to foo : 
   $c = foo($a, $b);
   
   // This call requires a fallback to global, and will be slow.
   $c = array_key_exists($a, $b);
   
   ?>


This analysis is related to Php/ShouldUseFunction, and is a special case, that only concerns `array_key_exists() <https://www.php.net/array_key_exists>`_.

See also `Add array_key_exists to the list of specialy compiled functions <https://bugs.php.net/bug.php?id=76148>`_.

Suggestions
^^^^^^^^^^^

* Use the `use` command for arrray_key_exists(), at the beginning of the script
* Use an initial \ before array_key_exists()
* Remove the namespace

Specs
^^^^^
+-------------+----------------------------------+
| Short name  | Performances/Php74ArrayKeyExists |
+-------------+----------------------------------+
| Rulesets    | :ref:`Performances`              |
+-------------+----------------------------------+
| Exakt since | 1.8.4                            |
+-------------+----------------------------------+
| Php Version | 7.4+                             |
+-------------+----------------------------------+
| Severity    | Minor                            |
+-------------+----------------------------------+
| Time To Fix | Quick (30 mins)                  |
+-------------+----------------------------------+
| Precision   | High                             |
+-------------+----------------------------------+


.. _use-php7-encapsed-strings:

Use PHP7 Encapsed Strings
+++++++++++++++++++++++++

 PHP 7 has optimized the handling of double-quoted strings. In particular, double-quoted strings are much less memory hungry than classic concatenations. 

PHP allocates memory at the end of the double-quoted string, making only one call to the allocator. On the other hand, concatenations are allocated each time they include dynamic content, leading to higher memory consumption. 

.. code-block:: php

   <?php
   
   $bar = 'bar';
    
   /* PHP 7 optimized this */
   $a = "foo and $bar";
    
   /* This is PHP 5 code (aka, don't use it) */
   $a = 'foo and ' . $bar;
   
   // Constants can't be used with double quotes
   $a = 'foo and ' . __DIR__;
   $a = foo and __DIR__; // __DIR__ is not interpolated
   
   ?>


Concatenations are still needed with constants, `static <https://www.php.net/manual/en/language.oop5.static.php>`_ constants, magic constants, functions, `static <https://www.php.net/manual/en/language.oop5.static.php>`_ properties or `static <https://www.php.net/manual/en/language.oop5.static.php>`_ methods. 

See also `PHP 7 performance improvements (3/5): Encapsed strings optimization <https://blog.blackfire.io/php-7-performance-improvements-encapsed-strings-optimization.html>`_.

Specs
^^^^^
+-------------+----------------------------------+
| Short name  | Performances/PHP7EncapsedStrings |
+-------------+----------------------------------+
| Rulesets    | :ref:`Performances`              |
+-------------+----------------------------------+
| Exakt since | 1.0.4                            |
+-------------+----------------------------------+
| Php Version | All                              |
+-------------+----------------------------------+
| Severity    | Minor                            |
+-------------+----------------------------------+
| Time To Fix | Slow (1 hour)                    |
+-------------+----------------------------------+
| Precision   | High                             |
+-------------+----------------------------------+


.. _pre-increment:

Pre-increment
+++++++++++++

 When possible, use the pre-increment operator (``++$i`` or ``--$i``) instead of the post-increment operator (``$i++`` or ``$i--``).

The latter needs an extra memory allocation that costs about 10% of performances. 

.. code-block:: php

   <?php
   
   // ++$i should be preferred over $i++, as current value is not important
   for($i = 0; $i <10; ++$i) {
       // do Something
   }
   
   // ++$b and $b++ have different impact here, since $a will collect $b + 1 or $b, respectively.
   $a = $b++;
   
   ?>


This is a micro-optimisation. However, its usage is so widespread, including within loops, that it may eventually have an significant impact on execution time. As such, it is recommended to adopt this rule, and only consider changing legacy code as they are refactored for other reasons.



Suggestions
^^^^^^^^^^^

* Use the pre increment when the new value is not reused.

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------+
| Short name  | Performances/PrePostIncrement                                                                              |
+-------------+------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Performances`                                           |
+-------------+------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                        |
+-------------+------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                            |
+-------------+------------------------------------------------------------------------------------------------------------+
| Precision   | Very high                                                                                                  |
+-------------+------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-expressionengine-performances-prepostincrement`, :ref:`case-traq-performances-prepostincrement` |
+-------------+------------------------------------------------------------------------------------------------------------+


.. _regex-on-arrays:

Regex On Arrays
+++++++++++++++

 Avoid using a loop with arrays of regex or values. There are several PHP function which work directly on arrays, and much faster.

`preg_grep() <https://www.php.net/preg_grep>`_ is able to extract all matching strings from an array, or non-matching strings. This usually saves a loop over the strings.

`preg_filter() <https://www.php.net/preg_filter>`_ is able to extract all strings from an array, matching at least one regex in an array. This usually saves a double loop over the strings and the regex. The trick here is to provide '\$0' as replacement, leading `preg_filter() <https://www.php.net/preg_filter>`_ to replace the found string by itself.

Finally, `preg_replace_callback() <https://www.php.net/preg_replace_callback>`_ an `preg_replace_callback_array() <https://www.php.net/preg_replace_callback_array>`_ are also able to apply an array of regex to an array of strings, and then, apply callbacks to the found values. 

.. code-block:: php

   <?php
   
   $regexs = ['/ab+c/', '/abd+/', '/abe+/'];
   $strings = ['/abbbbc/', '/abd/', '/abeee/'];
   
   // Directly extract all strings that match one regex
   foreach($regexs as $regex) {
       $results[] = preg_grep($regex, $strings);
   }
   
   // extract all matching regex, by string
   foreach($strings as $string) {
       $results[] = preg_filter($regexs, array_fill(0, count($regexs), '\$0'), $string);
   }
   
   // very slow way to get all the strings that match a regex
   foreach($regexs as $regex) {
       foreach($strings as $string) {
           if (preg_match($regex, $string)) {
               $results[] = $string;
           }
       }
   }
   
   ?>


See also `preg_filter <https://php.net/preg_filter>`_. 

Suggestions
^^^^^^^^^^^

* Apply preg_match() to an array of string or regex, via preg_filter() or preg_grep().
* Apply preg_match() to an array of string or regex, via preg_replace_callback() or preg_replace_callback_array().

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Performances/RegexOnArrays |
+-------------+----------------------------+
| Rulesets    | :ref:`Performances`        |
+-------------+----------------------------+
| Exakt since | 1.8.4                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Quick (30 mins)            |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _processing-collector:

Processing Collector
++++++++++++++++++++

 When accumulating data in a variable, within a loop, it is slow to apply repeatedly a function to the variable.

The example below illustrate the problem : ``$collector`` is build with element from ``$array``. ``$collector`` actually gets larger and larger, slowing the `in_array() <https://www.php.net/in_array>`_ call each time. 

It is better to apply the `preg_replace() <https://www.php.net/preg_replace>`_ to ``$a``, a short variable, and then, add ``$a`` to the collector.

.. code-block:: php

   <?php
   
   // Fast way
   $collector = '';
   foreach($array as $a){
       $a = preg_replace('/__(.*?)__/', '<b>\$1</b>', $a);
       $collector .= $a;
   }
   
   // Slow way
   $collector = '';
   foreach($array as $a){
       $collector .= $a;
       $collector = preg_replace('/__(.*?)__/', '<b>\$1</b>', $collector);
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Avoid applying the checks on the whole data, rather on the diff only.

Specs
^^^^^
+-------------+-------------------------------+
| Short name  | Performances/RegexOnCollector |
+-------------+-------------------------------+
| Rulesets    | :ref:`Performances`           |
+-------------+-------------------------------+
| Exakt since | 1.2.4                         |
+-------------+-------------------------------+
| Php Version | All                           |
+-------------+-------------------------------+
| Severity    | Minor                         |
+-------------+-------------------------------+
| Time To Fix | Slow (1 hour)                 |
+-------------+-------------------------------+
| Precision   | High                          |
+-------------+-------------------------------+


.. _simple-switch:

Simple Switch
+++++++++++++

 Switches are faster when relying only on integers or strings.

Since PHP 7.2, simple switches that use only strings or integers are optimized. The gain is as great as the switch is big. 

.. code-block:: php

   <?php
   
   // Optimized switch. 
   switch($b) {
       case "a":
           break;
       case "b":
           break;
       case "c":
           break;
       case "d":
           break;
       default :
           break;
   }
   
   // Unoptimized switch. 
   // Try moving the foo() call in the default, to keep the rest of the switch optimized.
   switch($c) {
       case "a":
           break;
       case foo($b):
           break;
       case "c":
           break;
       case "d":
           break;
       default :
           break;
   }
   
   ?>


See also `PHP 7.2's "switch" optimisations <https://derickrethans.nl/php7.2-switch.html>`_.


Suggestions
^^^^^^^^^^^

* Split the switch between literal and dynamic cases
* Remove the dynamic cases from the switch

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Performances/SimpleSwitch |
+-------------+---------------------------+
| Rulesets    | :ref:`Performances`       |
+-------------+---------------------------+
| Exakt since | 1.0.1                     |
+-------------+---------------------------+
| Php Version | 7.2+                      |
+-------------+---------------------------+
| Severity    | Major                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _slow-functions:

Slow Functions
++++++++++++++

 Avoid using those slow native PHP functions, and replace them with alternatives.

.. code-block:: php

   <?php
   
   $array = source();
   
   // Slow extraction of distinct values
   $array = array_unique($array);
   
   // Much faster extraction of distinct values
   $array = array_keys(array_count_values($array));
   
   ?>


+---------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------+
| Slow Function                                                 |  Faster                                                                                                                    | 
+---------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------+
| `array_diff() <https://www.php.net/array_diff>`_              |  `foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_                                               | 
| `array_intersect() <https://www.php.net/array_intersect>`_    |  `foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_                                               | 
| `array_key_exists() <https://www.php.net/array_key_exists>`_  |  `isset() <https://www.www.php.net/isset>`_ and `array_key_exists() <https://www.php.net/array_key_exists>`_               | 
| `array_map() <https://www.php.net/array_map>`_                |  `foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_                                               | 
| `array_search() <https://www.php.net/array_search>`_          |  `array_flip() <https://www.php.net/array_flip>`_ and `isset() <https://www.www.php.net/isset>`_                           | 
| `array_udiff() <https://www.php.net/array_udiff>`_            |  Use another way                                                                                                           | 
| `array_uintersect() <https://www.php.net/array_uintersect>`_  |  Use another way                                                                                                           | 
| `array_unshift() <https://www.php.net/array_unshift>`_        |  Use another way                                                                                                           | 
| `array_walk() <https://www.php.net/array_walk>`_              |  `foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_                                               | 
| `in_array() <https://www.php.net/in_array>`_                  |  `isset() <https://www.www.php.net/isset>`_                                                                                | 
| `preg_replace() <https://www.php.net/preg_replace>`_          |  `strpos() <https://www.php.net/strpos>`_                                                                                  | 
| `strstr() <https://www.php.net/strstr>`_                      |  `strpos() <https://www.php.net/strpos>`_                                                                                  | 
| `uasort() <https://www.php.net/uasort>`_                      |  Use another way                                                                                                           | 
| `uksort() <https://www.php.net/uksort>`_                      |  Use another way                                                                                                           | 
| `usort() <https://www.php.net/usort>`_                        |  Use another way                                                                                                           | 
| `array_unique() <https://www.php.net/array_unique>`_          |  `array_keys() <https://www.php.net/array_keys>`_ and `array_count_values() <https://www.php.net/array_count_values>`_     | 
+---------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------+

`array_unique() <https://www.php.net/array_unique>`_ has been accelerated in PHP 7.2 and may be used directly from this version on : `Optimize `array_unique() <https://www.php.net/array_unique>`_ <https://github.com/php/php-src/commit/6c2c7a023da4223e41fea0225c51a417fc8eb10d>`_.

`array_key_exists() <https://www.php.net/array_key_exists>`_ has been accelerated in PHP 7.4 and may be used directly from this version on : `Implement ZEND_ARRAY_KEY_EXISTS opcode to speed up `array_key_exists() <https://www.php.net/array_key_exists>`_ <https://github.com/php/php-src/pull/3360>`_.



Suggestions
^^^^^^^^^^^

* Replace the slow function with a faster version
* Remove the usage of the slow function

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------------------+
| Short name  | Performances/SlowFunctions                                                                                          |
+-------------+---------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Performances`                                                                                                 |
+-------------+---------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                               |
+-------------+---------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                                 |
+-------------+---------------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                               |
+-------------+---------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                     |
+-------------+---------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                |
+-------------+---------------------------------------------------------------------------------------------------------------------+
| ClearPHP    | `avoid-those-slow-functions <https://github.com/dseguy/clearPHP/tree/master/rules/avoid-those-slow-functions.md>`__ |
+-------------+---------------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-churchcrm-performances-slowfunctions`, :ref:`case-suitecrm-performances-slowfunctions`                   |
+-------------+---------------------------------------------------------------------------------------------------------------------+


.. _strpos()-too-much:

strpos() Too Much
+++++++++++++++++

 `strpos() <https://www.php.net/strpos>`_ covers the whole string before reporting 0. If the expected string is expected be at the beginning, or a fixed place, it is more stable to use `substr() <https://www.php.net/substr>`_ for comparison.

The longer the haystack (the searched string), the more efficient is that trick. The string has to be 10k or more to have impact, unless it is in a loop. 

.. code-block:: php

   <?php
   
   // This always reads the same amount of string
   if (substr($html, 0, 6) === '<html>') {
   
   }
   
   // When searching for a single character, checking with a known position ($string[$position]) is even faster
   if ($html[0] === '<') {
   
   }
   
   // With strpos(), the best way is to search for something that exist, and use absence as worst case scenario 
   if (strpos($html, '<html>') > 0) {
   
   } else {
       // 
   }
   
   // When the search fails, the whole string has been read
   if (strpos($html, '<html>') === 0) {
   
   }
   
   ?>


This applies to `stripos() <https://www.php.net/stripos>`_ too.



Suggestions
^^^^^^^^^^^

* Check for presence, and not for absence
* use substr() and compare the extracted string
* For single chars, try using the position in the string

Specs
^^^^^
+-------------+--------------------------------------------------+
| Short name  | Performances/StrposTooMuch                       |
+-------------+--------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`      |
+-------------+--------------------------------------------------+
| Exakt since | 1.2.8                                            |
+-------------+--------------------------------------------------+
| Php Version | All                                              |
+-------------+--------------------------------------------------+
| Severity    | Minor                                            |
+-------------+--------------------------------------------------+
| Time To Fix | Instant (5 mins)                                 |
+-------------+--------------------------------------------------+
| Precision   | High                                             |
+-------------+--------------------------------------------------+
| Examples    | :ref:`case-wordpress-performances-strpostoomuch` |
+-------------+--------------------------------------------------+


.. _substring-first:

Substring First
+++++++++++++++

 Always start by reducing a string before applying some transformation on it. The shorter string will be processed faster. 

.. code-block:: php

   <?php
   
   // fast version
   $result = strtolower(substr($string, $offset, $length));
   
   // slower version
   $result = substr(strtolower($string), $offset, $length);
   ?>


The gain produced here is greater with longer strings, or greater reductions. They may also be used in loops. This is a micro-optimisation when used on short strings and single string reductions.

This works with any reduction function instead of `substr() <https://www.php.net/substr>`_, like `trim() <https://www.php.net/trim>`_, `iconv() <https://www.php.net/iconv>`_, etc. 



Suggestions
^^^^^^^^^^^

* Always reduce the string first, then apply some transformation

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------+
| Short name  | Performances/SubstrFirst                                                                   |
+-------------+--------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Performances`, :ref:`Suggestions`, :ref:`Top10`                                      |
+-------------+--------------------------------------------------------------------------------------------+
| Exakt since | 1.0.1                                                                                      |
+-------------+--------------------------------------------------------------------------------------------+
| Php Version | All                                                                                        |
+-------------+--------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                      |
+-------------+--------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                           |
+-------------+--------------------------------------------------------------------------------------------+
| Precision   | High                                                                                       |
+-------------+--------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-spip-performances-substrfirst`, :ref:`case-prestashop-performances-substrfirst` |
+-------------+--------------------------------------------------------------------------------------------+


.. _time()-vs-strtotime():

time() Vs strtotime()
+++++++++++++++++++++

 `time() <https://www.php.net/time>`_ is actually faster than `strtotime() <https://www.php.net/strtotime>`_ with 'now' key string.

.. code-block:: php

   <?php
   
   // Faster version
   $a = time();
   
   // Slower version
   $b = strtotime('now');
   
   ?>


This is a micro-optimisation. Relative gain is real, but small unless the function is used many times.



Suggestions
^^^^^^^^^^^

* Replace strtotime() with time(). Do not change strtotime() with other value than 'now'.

Specs
^^^^^
+-------------+------------------------------------------------------+
| Short name  | Performances/timeVsstrtotime                         |
+-------------+------------------------------------------------------+
| Rulesets    | :ref:`Performances`                                  |
+-------------+------------------------------------------------------+
| Exakt since | 0.8.7                                                |
+-------------+------------------------------------------------------+
| Php Version | All                                                  |
+-------------+------------------------------------------------------+
| Severity    | Minor                                                |
+-------------+------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                     |
+-------------+------------------------------------------------------+
| Precision   | High                                                 |
+-------------+------------------------------------------------------+
| Examples    | :ref:`case-woocommerce-performances-timevsstrtotime` |
+-------------+------------------------------------------------------+


.. _use-array\_slice():

Use array_slice()
+++++++++++++++++

 Array_slice is de equivalent of `substr() <https://www.php.net/substr>`_ for arrays.

`array_splice() <https://www.php.net/array_splice>`_ is also possible, to remove a portion of array inside the array, not at the ends. This has no equivalent for strings.

.. code-block:: php

   <?php
   
   $array = range(0, 9);
   
   // Extract the 5 first elements
   print_r(array_slice($array, 0, 5));
   
   // Extract the 4 last elements
   print_r(array_slice($array, -4));
   
   // Extract the 2 central elements : 4 and 5
   print_r(array_splice($array, 4, 2));
   
   // slow way to remove the last elementst of an array
   for($i = 0; $i < 4) {
       array_pop($array);
   }
   
   ?>


See also `array_slice <http://www.php.net/array_slice>`_ and `array_splice <http://www.php.net/array_splice>`_.
         


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Performances/UseArraySlice                  |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 1.9.5                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _use-the-blind-var:

Use The Blind Var
+++++++++++++++++

 When in a loop, it is faster to rely on the blind var, rather than the original source.

When the key is referenced in the foreach loop, it is faster to use the available container to access a value for reading.

Note that it is also faster to use the value with a reference to handle the writings.

.. code-block:: php

   <?php
   
   // Reaching $source[$key] via $value is faster
   foreach($source as $key => $value) {
       $coordinates = array('x' => $value[0],
                            'y' => $value[1]);
   }
   
   // Reaching $source[$key] via $source is slow
   foreach($source as $key => $value) {
       $coordinates = array('x' => $source[$key][0],
                            'y' => $source[$key][1]);
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Use the blind var

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Performances/UseBlindVar |
+-------------+--------------------------+
| Rulesets    | :ref:`Performances`      |
+-------------+--------------------------+
| Exakt since | 1.2.9                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Instant (5 mins)         |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _php-alternative-syntax:

PHP Alternative Syntax
++++++++++++++++++++++

 Identify the usage of alternative syntax in the code, for If then, Switch, While, For and Foreach.

.. code-block:: php

   <?php
   
   // Normal syntax
   if ($a == 1) { 
       print $a;
   }
   
   // Alternative syntax : identical to the previous one.
   if ($a == 1) : 
       print $a;
   endif;
   
   ?>


See also `Alternative syntax <https://www.php.net/manual/en/control-structures.alternative-syntax.php>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Php/AlternativeSyntax |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | Very high             |
+-------------+-----------------------+


.. _argon2-usage:

Argon2 Usage
++++++++++++

 Argon2 is an optionally compiled password hashing API. 

Argon2 has been added to the password hashing API in PHP 7.2. 

It is not available in older version. It also requires PHP to be compiled with the --with-password-argon2 option. 

.. code-block:: php

   <?php
   
   // Hashing a password with argon2
   $hash = password_hash('password', PASSWORD_ARGON2I, ['memory_cost' => 1<<17, 
                                                        'time_cost'   => PASSWORD_ARGON2_DEFAULT_TIME_COST, 
                                                        'threads'     => PASSWORD_ARGON2_DEFAULT_THREADS]);
   
   ?>


See also `Argon2 Password Hash <https://wiki.php.net/rfc/argon2_password_hash>`_.

Specs
^^^^^
+-------------+-----------------+
| Short name  | Php/Argon2Usage |
+-------------+-----------------+
| Rulesets    | :ref:`CE`       |
+-------------+-----------------+
| Exakt since | 1.0.4           |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Slow (1 hour)   |
+-------------+-----------------+
| Precision   | High            |
+-------------+-----------------+


.. _array\_key\_exists()-works-on-arrays:

array_key_exists() Works On Arrays
++++++++++++++++++++++++++++++++++

 `array_key_exists() <https://www.php.net/array_key_exists>`_ requires arrays as second argument. Until PHP 7.4, objects were also allowed, yet it is now deprecated.

.. code-block:: php

   <?php
   
   // Valid way to check for key
   $array = ['a' => 1];
   var_dump(array_key_exists('a', $array))
   
   
   // Deprecated since PHP 7.4
   $object = new Stdclass();
   $object->a = 1;
   var_dump(array_key_exists('a', $object))
   
   ?>


See also `array_key_exists() with objects <https://wiki.php.net/rfc/deprecations_php_7_4#array_key_exists_with_objects>`_, and
         `array_key_exists <https://php.net/array-key-exists>`_, and.

Suggestions
^^^^^^^^^^^

* Use the (array) cast to turn the object into an array
* Use the native PHP function proprety_exists() or isset() on the property to check them.

Specs
^^^^^
+-------------+------------------------------------------------------+
| Short name  | Php/ArrayKeyExistsWithObjects                        |
+-------------+------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CompatibilityPHP74` |
+-------------+------------------------------------------------------+
| Exakt since | 1.9.0                                                |
+-------------+------------------------------------------------------+
| Php Version | All                                                  |
+-------------+------------------------------------------------------+
| Severity    | Minor                                                |
+-------------+------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                      |
+-------------+------------------------------------------------------+
| Precision   | High                                                 |
+-------------+------------------------------------------------------+


.. _assert-function-is-reserved:

Assert Function Is Reserved
+++++++++++++++++++++++++++

 Avoid defining an ``assert`` function in namespaces. 

While they work fine when the assertions are active (``zend.assertions=1``), calls to unqualified ``assert`` are optimized away when assertions are not active. 

Since PHP 7.3, a fatal error is emitted : ``Defining a custom `assert() <https://www.php.net/assert>`_ function is deprecated, as the function has special semantics``.

.. code-block:: php

   <?php
   //      Run this with zend.assertions=1 and 
   // Then run this with zend.assertions=0
   
   namespace Test {
       function assert() {
           global $foo;
   
           $foo = true;
       }
   }
   
   namespace Test {
       assert();
   
       var_dump(isset($foo));
   }
   
   ?>


See also `assert <https://www.php.net/assert>`_ and `User-defined assert function is optimized away with zend.assertions=-1 <https://bugs.php.net/bug.php?id=75445>`_.

Suggestions
^^^^^^^^^^^

* Rename the custom function with another name

Specs
^^^^^
+-------------+-------------------------------------------+
| Short name  | Php/AssertFunctionIsReserved              |
+-------------+-------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CompatibilityPHP73` |
+-------------+-------------------------------------------+
| Exakt since | 1.3.9                                     |
+-------------+-------------------------------------------+
| Php Version | All                                       |
+-------------+-------------------------------------------+
| Severity    | Critical                                  |
+-------------+-------------------------------------------+
| Time To Fix | Slow (1 hour)                             |
+-------------+-------------------------------------------+
| Precision   | High                                      |
+-------------+-------------------------------------------+


.. _assertions:

Assertions
++++++++++

 Usage of assertions, to add checks within PHP code.

Assertions should be used as a debugging feature only. You may use them for sanity-checks that test for conditions that should always be TRUE and that indicate some programming errors if not or to check for the presence of certain features like extension functions or certain system limits and features.

.. code-block:: php

   <?php
   
   function foo($string) {
       assert(!empty($string), 'An empty string was provided!');
       
       echo '['.$string.']';
   }
   
   ?>


See also `assert <https://www.php.net/assert>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Php/AssertionUsage |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _assign-with-and-precedence:

Assign With And Precedence
++++++++++++++++++++++++++

 The lettered logical operators yield to assignation. It may collect less information than expected.

It is recommended to use the &&, ^ and || operators, instead of and, or and xor, to prevent confusion.

.. code-block:: php

   <?php
   
   // The expected behavior is 
   // The following are equivalent
    $a =  $b  && $c;
    $a = ($b && $c);
   
   // The unexpected behavior is 
   // The following are equivalent
    $a = $b  and $c;
   ($a = $b) and $c;
   
   ?>


See also `Operator Precedence <https://www.php.net/manual/en/language.operators.precedence.php>`_.



Suggestions
^^^^^^^^^^^

* Always use symbol && rather than letter and
* To be safe, add parenthesis to enforce priorities

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Php/AssignAnd                               |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.12.4                                      |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Critical                                    |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | Very high                                   |
+-------------+---------------------------------------------+
| Examples    | :ref:`case-xataface-php-assignand`          |
+-------------+---------------------------------------------+


.. _assumptions:

Assumptions
+++++++++++

 Assumptions in the code, that leads to possible bugs. 

Some conditions may be very weak, and lead to errors. For example, the code below checks that the variable `$a` is not null, then uses it as an array. There is no relationship between 'not null' and 'being an array', so this is an assumption. 

.. code-block:: php

   <?php
   
   // Assumption : if $a is not null, then it is an array. This is not always the case. 
   function foo($a) {
       if ($a !== null) {
           echo $a['name'];
       }
   }
   
   // Assumption : if $a is not null, then it is an array. Here, the typehint will ensure that it is the case. 
   // Although, a more readable test is is_array()
   function foo(?array $a) {
       if ($a !== null) {
           echo $a['name'];
       }
   }
   
   ?>


See also `From assumptions to assertions <https://rskuipers.com/entry/from-assumptions-to-assertions>`_.


Suggestions
^^^^^^^^^^^

* Make the context of the code more explicit

Specs
^^^^^
+-------------+-----------------+
| Short name  | Php/Assumptions |
+-------------+-----------------+
| Rulesets    | :ref:`Analyze`  |
+-------------+-----------------+
| Exakt since | 2.1.9           |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Quick (30 mins) |
+-------------+-----------------+
| Precision   | High            |
+-------------+-----------------+


.. _autoloading:

Autoloading
+++++++++++

 Usage of the autoloading feature of PHP. 

.. code-block:: php

   <?php
   
   spl_autoload_register('my_autoloader');
   
   // Old way to autoload. Deprecated in PHP 7.2
   function __autoload($class ) {}
   
   ?>


Defining the __autoload() function is obsolete since PHP 7.2.

See also `__autoload <https://www.php.net/autoload>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Php/AutoloadUsage |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _avoid-get\_object\_vars():

Avoid get_object_vars()
+++++++++++++++++++++++

 `get_object_vars() <https://www.php.net/get_object_vars>`_ changes behavior between PHP 7.3 and 7.4. It also behaves different within and outside a class. 

.. code-block:: php

   <?php
   
   // Code from Doug Bierer
   $obj = new ArrayObject(['A' => 1,'B' => 2,'C' => 3]);
   var_dump($obj->getArrayCopy());
   var_dump(get_object_vars($obj));
   
   ?>


See also `get_object_vars script on 3V4L <https://3v4l.org/ELVGY>`_ and `The Strange Case of `ArrayObject <https://www.php.net/manual/en/class.arrayobject.php>`_ <https://phptraining.net/articles/strange_case_of_array_object>`_.


Suggestions
^^^^^^^^^^^

* Use ArrayObject and getArrayCopy() method

Specs
^^^^^
+-------------+------------------------------------------------------+
| Short name  | Php/AvoidGetobjectVars                               |
+-------------+------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP74`, :ref:`CompatibilityPHP80` |
+-------------+------------------------------------------------------+
| Exakt since | 2.2.1                                                |
+-------------+------------------------------------------------------+
| Php Version | All                                                  |
+-------------+------------------------------------------------------+
| Severity    | Minor                                                |
+-------------+------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                      |
+-------------+------------------------------------------------------+
| Precision   | High                                                 |
+-------------+------------------------------------------------------+


.. _avoid-mb\_dectect\_encoding():

Avoid mb_dectect_encoding()
+++++++++++++++++++++++++++

 mb_dectect_encoding() is bad at guessing encoding. 

For example, UTF-8 and ISO-8859-1 share some common characters : when a string is build with them it is impossible to differentiate the actual encoding.

.. code-block:: php

   <?php
   
   $encoding = mb_encoding_detect($_GET['name']);
   
   ?>


See also `mb_encoding_detect <https://php.net/mb-encoding-detect>`_, `PHP vs. The Developer: Encoding Character Sets <https://www.daganhenderson.com/blog/2013/07/php-encoding-character-sets>`_, `DPC2019: Of representation and interpretation: A unified theory - Arnout Boks <https://youtu.be/K2zS6vbBb9A?t=1375>`_.


Suggestions
^^^^^^^^^^^

* Store and transmit the data format

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Php/AvoidMbDectectEncoding |
+-------------+----------------------------+
| Rulesets    | :ref:`Analyze`             |
+-------------+----------------------------+
| Exakt since | 1.8.9                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Quick (30 mins)            |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _avoid-real:

Avoid Real
++++++++++

 PHP has two float data type : real and double. ``real`` is rarely used, and might be deprecated in PHP 7.4.

To prepare code, avoid using `is_real() <https://www.php.net/is_real>`_ and the ``(real)`` typecast.

.. code-block:: php

   <?php
   
   // safe way to check for float
   if (!is_float($a)) {
       $a = (float) $a;
   }
   
   // Avoid doing that
   if (!is_real($a)) {
       $a = (real) $a;
   }
   
   ?>


See also `PHP RFC: Deprecations for PHP 7.4 <https://wiki.php.net/rfc/deprecations_php_7_4>`_.



Suggestions
^^^^^^^^^^^

* Replace is_real() by is_float()
* Replace (real) by (float)

Specs
^^^^^
+-------------+----------------------------------+
| Short name  | Php/AvoidReal                    |
+-------------+----------------------------------+
| Rulesets    | :ref:`Suggestions`, :ref:`Top10` |
+-------------+----------------------------------+
| Exakt since | 1.3.9                            |
+-------------+----------------------------------+
| Php Version | 8.0-                             |
+-------------+----------------------------------+
| Severity    | Minor                            |
+-------------+----------------------------------+
| Time To Fix | Quick (30 mins)                  |
+-------------+----------------------------------+
| Precision   | High                             |
+-------------+----------------------------------+


.. _avoid-set\_error\_handler-$context-argument:

Avoid set_error_handler $context Argument
+++++++++++++++++++++++++++++++++++++++++

 Avoid configuring `set_error_handler() <https://www.php.net/set_error_handler>`_ with a method that accepts 5 arguments. The last argument, ``$errcontext``, is deprecated since PHP 7.2, and will be removed later.

.. code-block:: php

   <?php
   
   // setting error_handler with an incorrect closure
   set_error_handler(function($errno, $errstr, $errfile, $errline) {});
   
   // setting error_handler with an incorrect closure
   set_error_handler(function($errno, $errstr, $errfile, $errline, $errcontext) {});
   
   ?>


See also `set_error_handler() <https://www.php.net/set_error_handler>`_;


Suggestions
^^^^^^^^^^^

* Remove the 6th argument of registered handlers.

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Short name  | Php/AvoidSetErrorHandlerContextArg                                                                              |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP72`                                                                                       |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.0.4                                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                             |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                                   |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                            |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-shopware-php-avoidseterrorhandlercontextarg`, :ref:`case-vanilla-php-avoidseterrorhandlercontextarg` |
+-------------+-----------------------------------------------------------------------------------------------------------------+


.. _use-random\_int():

Use random_int()
++++++++++++++++

 `rand() <https://www.php.net/rand>`_ and `mt_rand() <https://www.php.net/mt_rand>`_ should be replaced with `random_int() <https://www.php.net/random_int>`_.

At worse, `rand() <https://www.php.net/rand>`_ should be replaced with `mt_rand() <https://www.php.net/mt_rand>`_, which is a drop-in replacement and `srand() <https://www.php.net/srand>`_ by `mt_srand() <https://www.php.net/mt_srand>`_. 

`random_int() <https://www.php.net/random_int>`_ replaces `rand() <https://www.php.net/rand>`_, and has no seeding function like `srand() <https://www.php.net/srand>`_.

Other sources of entropy that should be replaced by `random_int() <https://www.php.net/random_int>`_ : `microtime() <https://www.php.net/microtime>`_, `uniqid() <https://www.php.net/uniqid>`_, `time() <https://www.php.net/time>`_. Those a often combined with hashing functions and mixed with other sources of entropy, such as a salt.

.. code-block:: php

   <?php
   
   // Avoid using this
   $random = rand(0, 10);
   
   // Drop-in replacement
   $random = mt_rand(0, 10);
   
   // Even better but different : 
   // valid with PHP 7.0+
   try {
       $random = random_int(0, 10);
   } catch (\Exception $e) {
       // process case of not enoug random values
   }
   
   // This is also a source of entropy, based on srand()
   // random_int() is a drop-in replacement here
   $a = sha256(uniqid());
   
   ?>


Since PHP 7, `random_int() <https://www.php.net/random_int>`_ along with `random_bytes() <https://www.php.net/random_bytes>`_, provides cryptographically secure pseudo-random bytes, which are good to be used
when security is involved. `openssl_random_pseudo_bytes() <https://www.php.net/openssl_random_pseudo_bytes>`_ may be used when the ``OpenSSL`` extension is available.

See also `CSPRNG <https://www.php.net/manual/en/book.csprng.php>`_ and `OpenSSL <https://www.php.net/manual/en/book.openssl.php>`_.


Suggestions
^^^^^^^^^^^

* Use random_bytes() and randon_int(). At least, use them as a base for random data, and then add extra prefix and suffix, and a hash call on top.

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------+
| Short name  | Php/BetterRand                                                                          |
+-------------+-----------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`CompatibilityPHP71`, :ref:`Security` |
+-------------+-----------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                   |
+-------------+-----------------------------------------------------------------------------------------+
| Php Version | All                                                                                     |
+-------------+-----------------------------------------------------------------------------------------+
| Severity    | Major                                                                                   |
+-------------+-----------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                        |
+-------------+-----------------------------------------------------------------------------------------+
| Precision   | Very high                                                                               |
+-------------+-----------------------------------------------------------------------------------------+
| Examples    | :ref:`case-thelia-php-betterrand`, :ref:`case-fuelcms-php-betterrand`                   |
+-------------+-----------------------------------------------------------------------------------------+


.. _cant-use-return-value-in-write-context:

Cant Use Return Value In Write Context
++++++++++++++++++++++++++++++++++++++

 `empty() <https://www.php.net/empty>`_ used to work only on data containers, such as variables. Until PHP 5.5, it was not possible to use directly expressions, such as functioncalls, inside an `empty() <https://www.php.net/empty>`_ function call : they were met with a 'Can't use function return value in write context' fatal error. 

.. code-block:: php

   <?php
   
   function foo($boolean) {
       return $boolean;
   }
   
   // Valid since PHP 5.5
   echo empty(foo(true)) : 'true' : 'false';
   
   ?>


This also applies to methodcalls, `static <https://www.php.net/manual/en/language.oop5.static.php>`_ or not.

See also `Cant Use Return Value In Write Context <https://stackoverflow.com/questions/1075534/cant-use-method-return-value-in-write-context>`_.

Specs
^^^^^
+-------------+------------------------------------------------------+
| Short name  | Php/CantUseReturnValueInWriteContext                 |
+-------------+------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54` |
+-------------+------------------------------------------------------+
| Exakt since | 0.8.4                                                |
+-------------+------------------------------------------------------+
| Php Version | 5.5+                                                 |
+-------------+------------------------------------------------------+
| Severity    | Major                                                |
+-------------+------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                      |
+-------------+------------------------------------------------------+
| Precision   | High                                                 |
+-------------+------------------------------------------------------+


.. _use-lower-case-for-parent,-static-and-self:

Use Lower Case For Parent, Static And Self
++++++++++++++++++++++++++++++++++++++++++

 The special `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_, `static <https://www.php.net/manual/en/language.oop5.static.php>`_ and `self <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ keywords needed to be lowercase to be usable. This was fixed in PHP 5.5; otherwise, they would yield a 'PHP Fatal error:  Class '`PARENT <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_' not found'.

`parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_, `static <https://www.php.net/manual/en/language.oop5.static.php>`_ and `self <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ are traditionally written in lowercase only. Mixed case and Upper case are both valid, though.

.. code-block:: php

   <?php
   
   class foo {
       const aConstante = 233;
       
       function method() {
           // Wrong case, error with PHP 5.4.* and older
           echo SELF::aConstante;
           
           // Always right. 
           echo self::aConstante;
       }
   }
   
   ?>


Until PHP 5.5, non-lowercase version of those keywords are generating a bug. 


Suggestions
^^^^^^^^^^^

* Upgrade to PHP 5.6 or more recent

Specs
^^^^^
+-------------+------------------------------------------------------+
| Short name  | Php/CaseForPSS                                       |
+-------------+------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54` |
+-------------+------------------------------------------------------+
| Exakt since | 0.8.4                                                |
+-------------+------------------------------------------------------+
| Php Version | 5.5-                                                 |
+-------------+------------------------------------------------------+
| Severity    | Minor                                                |
+-------------+------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                     |
+-------------+------------------------------------------------------+
| Precision   | High                                                 |
+-------------+------------------------------------------------------+


.. _cast-usage:

Cast Usage
++++++++++

 List of all cast usage.

PHP does not require (or support) explicit type definition in variable declaration; a variable's type is determined by the context in which the variable is used. 

.. code-block:: php

   <?php
   
   if (is_int($_GET['x'])) {
       $number = (int) $_GET['x'];
   } else {
       error_display('a wrong value was provided for "x"');
   }
   
   ?>


Until PHP 7.2, a ``(unset)`` operator was available. It had the same role as ``unset()`` as a function.

See also `Type Juggling <https://www.php.net/manual/en/language.types.type-juggling.php>`_ and `unset <https://www.php.net/unset>`_.

Specs
^^^^^
+-------------+------------------+
| Short name  | Php/CastingUsage |
+-------------+------------------+
| Rulesets    | :ref:`CE`        |
+-------------+------------------+
| Exakt since | 0.8.4            |
+-------------+------------------+
| Php Version | All              |
+-------------+------------------+
| Severity    | Minor            |
+-------------+------------------+
| Time To Fix | Slow (1 hour)    |
+-------------+------------------+
| Precision   | High             |
+-------------+------------------+


.. _cast-unset-usage:

Cast Unset Usage
++++++++++++++++

 Usage of the `(unset)` cast operator. It is removed in PHP 8.0, and was deprecated since PHP 7.2.0.

.. code-block:: php

   <?php
   
   $a = 1;
   (unset) $a;
   
   // functioncall is OK
   unset($a);
   
   ?>


See also `Unset casting <https://www.php.net/manual/en/language.types.null.php#language.types.null.casting>`_.


Suggestions
^^^^^^^^^^^

* Replace `(unset)` with a call to unset().
* Remove the unset call altogether.

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Php/CastUnsetUsage                   |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP80` |
+-------------+--------------------------------------+
| Exakt since | 2.1.8                                |
+-------------+--------------------------------------+
| Php Version | 8.0-                                 |
+-------------+--------------------------------------+
| Severity    | Minor                                |
+-------------+--------------------------------------+
| Time To Fix | Quick (30 mins)                      |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _class-const-with-array:

Class Const With Array
++++++++++++++++++++++

 Constant defined with const keyword may be arrays but only stating with PHP 5.6. Define never accept arrays : it only accepts scalar values.

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------+
| Short name  | Php/ClassConstWithArray                                                         |
+-------------+---------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55` |
+-------------+---------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                           |
+-------------+---------------------------------------------------------------------------------+
| Php Version | 5.5+                                                                            |
+-------------+---------------------------------------------------------------------------------+
| Severity    | Critical                                                                        |
+-------------+---------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                   |
+-------------+---------------------------------------------------------------------------------+
| Precision   | High                                                                            |
+-------------+---------------------------------------------------------------------------------+


.. _class-function-confusion:

Class Function Confusion
++++++++++++++++++++++++

 Avoid classes and functions bearing the same name. 

When functions and classes bear the same name, calling them may be confusing. This may also lead to forgotten 'new' keyword.

.. code-block:: php

   <?php
   
   class foo {}
   
   function foo() {}
   
   // Forgetting the 'new' operator is easy
   $object = new foo();
   $object = foo();
   
   ?>




Suggestions
^^^^^^^^^^^

* Use a naming convention to distinguish functions and classes
* Rename the class or the function (or both)
* Use an alias with a `use` expression

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Php/ClassFunctionConfusion |
+-------------+----------------------------+
| Rulesets    | :ref:`Semantics`           |
+-------------+----------------------------+
| Exakt since | 0.10.2                     |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Slow (1 hour)              |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _close-tags:

Close Tags
++++++++++

 PHP manual recommends that script should be left open, without the final closing ?>. This way, one will avoid the infamous bug 'Header already sent', associated with left-over spaces, that are lying after this closing tag.

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------------------+
| Short name  | Php/CloseTags                                                                                               |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Rulesets    | none                                                                                                        |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                       |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                         |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                       |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                            |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                        |
+-------------+-------------------------------------------------------------------------------------------------------------+
| ClearPHP    | `leave-last-closing-out <https://github.com/dseguy/clearPHP/tree/master/rules/leave-last-closing-out.md>`__ |
+-------------+-------------------------------------------------------------------------------------------------------------+


.. _close-tags-consistency:

Close Tags Consistency
++++++++++++++++++++++

 PHP scripts may omit the final closing tag. 

This is a convention, used to avoid the infamous 'headers already sent' error message, that appears when a script with extra invisible spaces is included before actually emitting the headers.

The PHP manual recommends : If a file is pure PHP code, it is preferable to omit the PHP closing tag at the end of the file.. (See `PHP Tags <https://www.php.net/manual/en/language.basic-syntax.phptags.php>`_)::

   
   .. code-block:: php
   
      <?php
      
      class foo {
      
      }

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Php/CloseTagsConsistency |
+-------------+--------------------------+
| Rulesets    | none                     |
+-------------+--------------------------+
| Exakt since | 0.9.3                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Slow (1 hour)            |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _closure-may-use-$this:

Closure May Use $this
+++++++++++++++++++++

 `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ is automatically accessible to closures.

When closures were introduced in PHP, they couldn't use the `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ variable, making is cumbersome to access local properties when the closure was created within an object. 

.. code-block:: php

   <?php
   
   // Invalid code in PHP 5.4 and less
   class Test
   {
       public function testing()
       {
           return function() {
               var_dump($this);
           };
       }
   }
   
   $object = new Test;
   $function = $object->testing();
   $function();
       
   ?>


This is not the case anymore since PHP 5.4.

See also `Anonymous functions <https://www.php.net/manual/en/functions.anonymous.php>`_.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Php/ClosureThisSupport    |
+-------------+---------------------------+
| Rulesets    | :ref:`CompatibilityPHP53` |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | 5.4-                      |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _coalesce:

Coalesce
++++++++

 Usage of coalesce operator, in PHP since PHP 5.3.

Note that the coalesce operator is a special case of the ternary operator.

.. code-block:: php

   <?php
   
   // Coalesce operator, since PHP 5.3
   $a = $b ?: 'default value';
   
   // Equivalent to $a = $b ? $b : 'default value';
   
   ?>


See also `Ternary Operator <https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary>`_.

Specs
^^^^^
+-------------+---------------+
| Short name  | Php/Coalesce  |
+-------------+---------------+
| Rulesets    | :ref:`CE`     |
+-------------+---------------+
| Exakt since | 0.8.4         |
+-------------+---------------+
| Php Version | 7.0+          |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _coalesce-equal:

Coalesce Equal
++++++++++++++

 Usage of coalesce assignement operator. The operator is available in PHP since PHP 7.4.

.. code-block:: php

   <?php
   
   // Coalesce operator, since PHP 5.3
   $a ??= 'default value';
   
   // Equivalent to the line above
   $a = $a ?? 'default value';
   
   ?>


See also `Ternary Operator <https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary>`_.


Suggestions
^^^^^^^^^^^

* Use the short assignement syntax

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/CoalesceEqual                                                                                                                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70`, :ref:`CompatibilityPHP71`, :ref:`CompatibilityPHP72`, :ref:`CompatibilityPHP73` |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 2.0.4                                                                                                                                                                                                                  |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | 7.4+                                                                                                                                                                                                                   |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                                                                                                                                  |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                                                                                                                                          |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | Very high                                                                                                                                                                                                              |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. _compact-inexistant-variable:

Compact Inexistant Variable
+++++++++++++++++++++++++++

 `Compact() <https://www.php.net/compact>`_ doesn't warn when it tries to work on an inexistant variable. It just ignores the variable.

This behavior changed in PHP 7.3, and `compact() <https://www.php.net/compact>`_ now emits a warning when the compacted variable doesn't exist.

.. code-block:: php

   <?php
   
   function foo($b = 2) {
       $a = 1;
       // $c doesn't exists, and is not compacted.
       return compact('a', 'b', 'c');
   }
   ?>


For performances reasons, this analysis only works inside methods and functions.

See also `compact <http://www.php.net/compact>`_ and `PHP RFC: Make compact function reports undefined passed variables <https://wiki.php.net/rfc/compact>`_.


Suggestions
^^^^^^^^^^^

* Fix the name of variable in the compact() argument list
* Remove the name of variable in the compact() argument list

Specs
^^^^^
+-------------+-----------------------------------------------+
| Short name  | Php/CompactInexistant                         |
+-------------+-----------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP73`, :ref:`Suggestions` |
+-------------+-----------------------------------------------+
| Exakt since | 1.2.9                                         |
+-------------+-----------------------------------------------+
| Php Version | All                                           |
+-------------+-----------------------------------------------+
| Severity    | Major                                         |
+-------------+-----------------------------------------------+
| Time To Fix | Quick (30 mins)                               |
+-------------+-----------------------------------------------+
| Precision   | High                                          |
+-------------+-----------------------------------------------+


.. _concat-and-addition:

Concat And Addition
+++++++++++++++++++

 Precedence between addition and concatenation has changed. In PHP 7.4, addition has precedence, and before, addition and concatenation had the same precedence.

From the RFC : ``Currently the precedence of '.', '+' and '-' operators are equal. Any combination of these operators are simply evaluated left-to-right``.

This is counter-intuitive though: you rarely want to add or subtract concatenated strings which in general are not numbers. However, given PHP's capability of seamlessly converting an integer to a string, concatenation of these values is desired.``

.. code-block:: php

   <?php
   // Extracted from the RFC
   echo sum: . $a + $b;
    
   // current behavior: evaluated left-to-right
   echo (sum: . $a) + $b;
    
   // desired behavior: addition and subtraction have a higher precendence
   echo sum : . ($a + $b);
   
   ?>


This analysis reports any addition and concatenation that are mixed, without parenthesis. Addition also means substraction here, aka using `+` or `-`.

The same applies to bitshift operations, ``<<`` and ``>>``. There is no RFC for this change.

See also `Change the precedence of the concatenation operator <https://wiki.php.net/rfc/concatenation_precedence>`_.


Suggestions
^^^^^^^^^^^

* Add parenthesis around the addition to ensure its expected priority
* Move the addition outside the concatenation

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/ConcatAndAddition                                                                                                                                                                                                                                                                                                                   |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70`, :ref:`CompatibilityPHP71`, :ref:`CompatibilityPHP72`, :ref:`CompatibilityPHP73`, :ref:`CompatibilityPHP74`, :ref:`CompatibilityPHP80`, :ref:`Top10` |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.8.0                                                                                                                                                                                                                                                                                                                                   |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                                                                                                                                                                                                                                                     |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                                                                                                                                                                                                                                                   |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                                                                                                                                                                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                                                                                                                                                                                                                    |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. _const-with-array:

Const With Array
++++++++++++++++

 The const keyword supports array. This feature was added in PHP 5.6. 

The array must be filled with other constants. It may also be build using the '+' operator. 

.. code-block:: php

   <?php
   
   const PRIMES = [2, 3, 5, 7];
   
   class X {
       const TWENTY_THREE = 23;
       const MORE_PRIMES = PRIMES + [11, 13, 17, 19];
       const EVEN_MORE_PRIMES = self::MORE_PRIMES + [self::TWENTY_THREE];
   }
   
   ?>


See also `Class Constants <https://www.php.net/manual/en/language.oop5.constants.php>`_ and `Constants Syntax <https://www.php.net/manual/en/language.constants.syntax.php>`_.

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------+
| Short name  | Php/ConstWithArray                                                              |
+-------------+---------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55` |
+-------------+---------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                           |
+-------------+---------------------------------------------------------------------------------+
| Php Version | 5.5+                                                                            |
+-------------+---------------------------------------------------------------------------------+
| Severity    | Major                                                                           |
+-------------+---------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                   |
+-------------+---------------------------------------------------------------------------------+
| Precision   | High                                                                            |
+-------------+---------------------------------------------------------------------------------+


.. _cookies-variables:

Cookies Variables
+++++++++++++++++

 Cookies names, used across the application. 

.. code-block:: php

   <?php
   
   if (isset($_COOKIE['myCookie'])) {
       // Usual method for reading and setting cookies
       $_COOKIE['myCookie']++;
   }
   
   // Usual method for writing cookies
   setcookie('myCookie', $value);
   
   ?>


See also `setcookie <http://www.php.net/setcookie>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Php/CookiesVariables |
+-------------+----------------------+
| Rulesets    | none                 |
+-------------+----------------------+
| Exakt since | 0.12.16              |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _use-is\_countable:

Use is_countable
++++++++++++++++

 is_countable() checks if a variables holds a value that can be counted. It is recommended to use it before calling `count() <https://www.php.net/count>`_.

is_countable() accepts arrays and object whose class implements \countable.

.. code-block:: php

   <?php
   
   function foo($arg) {
       if (!is_countable($arg)) {
           // $arg cannot be passed to count()
           return 0
       }
       return count($arg);
   }
   
   function bar($arg) {
       if (!is_array($arg) and !$x instanceof \Countable) {
           // $arg cannot be passed to count()
           return 0
       }
   
       return count($arg);
   }
   
   ?>


See also `PHP RFC: is_countable <https://wiki.php.net/rfc/is-countable>`_.


Suggestions
^^^^^^^^^^^

* Use is_countable()
* Create a compatibility function that replaces is_countable() until the code is ready for PHP 7.3

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Php/CouldUseIsCountable |
+-------------+-------------------------+
| Rulesets    | :ref:`Suggestions`      |
+-------------+-------------------------+
| Exakt since | 1.3.8                   |
+-------------+-------------------------+
| Php Version | 7.3+                    |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _could-use-promoted-properties:

Could Use Promoted Properties
+++++++++++++++++++++++++++++

 Promoted properties reduce PHP code at `__construct() <https://www.php.net/manual/en/language.oop5.decon.php>`_ time. This feature is available in PHP 8.0.

.. code-block:: php

   <?php
   
   class x {
       function __construct($a, $b) {
           // $a argument may be promoted to property $c
           $this->c = $a;
           
           // $b argument cannot be upgraded to property, as it is updated. 
           // Move the addition to the new call, or keep the syntax below
           $this->d = $b + 2;
       }
   }
   
   ?>


See also `PHP 8: Constructor property promotion <https://stitcher.io/blog/constructor-promotion-in-php-8>`_ and `PHP RFC: Constructor Property Promotion <https://wiki.php.net/rfc/constructor_promotion>`_.


Suggestions
^^^^^^^^^^^

* Update the constructor syntax, and remove the property specification.

Specs
^^^^^
+-------------+--------------------------------+
| Short name  | Php/CouldUsePromotedProperties |
+-------------+--------------------------------+
| Rulesets    | :ref:`Suggestions`             |
+-------------+--------------------------------+
| Exakt since | 2.1.9                          |
+-------------+--------------------------------+
| Php Version | 8.0+                           |
+-------------+--------------------------------+
| Severity    | Minor                          |
+-------------+--------------------------------+
| Time To Fix | Quick (30 mins)                |
+-------------+--------------------------------+
| Precision   | High                           |
+-------------+--------------------------------+


.. _crc32()-might-be-negative:

Crc32() Might Be Negative
+++++++++++++++++++++++++

 crc32`() <https://www.php.net/>`_ may return a negative number, on 32 bits platforms.

According to the manual : Because PHP\'s integer type is signed many ``CRC32`` checksums will result in negative integers on 32 bits platforms. On 64 bits installations, all crc32`() <https://www.php.net/>`_ results will be positive integers though.

.. code-block:: php

   <?php
   
   // display the checksum with %u, to make it unsigned
   echo sprintf('%u', crc32($str));
   
   // turn the checksum into an unsigned hexadecimal
   echo dechex(crc32($str));
   
   // avoid concatenating crc32 to a string, as it may be negative on 32bits platforms 
   echo 'prefix'.crc32($str);
   
   ?>


See also `crc32`() <https://www.php.net/>`_ <https://www.php.net/crc32>`_.

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Php/Crc32MightBeNegative |
+-------------+--------------------------+
| Rulesets    | :ref:`Analyze`           |
+-------------+--------------------------+
| Exakt since | 0.11.0                   |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Major                    |
+-------------+--------------------------+
| Time To Fix | Slow (1 hour)            |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _crypto-usage:

Crypto Usage
++++++++++++

 Usage of cryptography and hashes functions. 

The functions listed are the native PHP functions, and do not belong to a specific extension, like ``OpenSSL``, ``mcrypt`` or ``mhash``.

Cryptography and hashes are mainly used for storing sensitive data, such as passwords, or to verify authenticity of data. They may also be used for name-randomization with cache.

.. code-block:: php

   <?php
   
   if (md5($_POST['password']) === $row['password_hash']) {
       user_login($user);
   } else {
       error('Wrong password');
   }
   ?>


See also `Cryptography Extensions <https://www.php.net/manual/en/refs.crypto.php>`_.

Specs
^^^^^
+-------------+-----------------+
| Short name  | Php/CryptoUsage |
+-------------+-----------------+
| Rulesets    | :ref:`CE`       |
+-------------+-----------------+
| Exakt since | 1.0.4           |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Slow (1 hour)   |
+-------------+-----------------+
| Precision   | High            |
+-------------+-----------------+


.. _date-formats:

Date Formats
++++++++++++

 Inventory of date formats used in the code. 

Date format are detected with 

.. code-block:: php

   <?php
   
   $time = time();
   // This is a formated date
   echo date('r', $time);
   
   ?>


See also `Date and Time <https://www.php.net/manual/en/book.datetime.php>`_.


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-----------------+
| Short name  | Php/DateFormats |
+-------------+-----------------+
| Rulesets    | none            |
+-------------+-----------------+
| Exakt since | 0.12.16         |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Slow (1 hour)   |
+-------------+-----------------+
| Precision   | High            |
+-------------+-----------------+


.. _\_\_debuginfo()-usage:

__debugInfo() Usage
+++++++++++++++++++

 The magic method `__debugInfo() <https://www.php.net/manual/en/language.oop5.magic.php>`_ provides a custom way to dump an object. 

It has been introduced in PHP 5.6. In the previous versions of PHP, this method is ignored and won't be called when debugging.

.. code-block:: php

   <?php
   
   // PHP 5.6 or later
   class foo {
       private $bar = 1;
       private $reallyHidden = 2;
       
       function __debugInfo() {
           return ['bar' => $this->bar,
                   'reallyHidden' => 'Secret'];
       }
   }
   
   $f = new Foo();
   var_dump($f);
   
   /* Displays : 
   object(foo)#1 (2) {
     [bar]=>
     int(1)
     [reallyHidden]=>
     string(6) Secret
   }
   */
   
   ?>


See also `Magic methods <https://www.php.net/manual/en/language.oop5.magic.php>`_.

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------+
| Short name  | Php/debugInfoUsage                                                              |
+-------------+---------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55` |
+-------------+---------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                           |
+-------------+---------------------------------------------------------------------------------+
| Php Version | 5.6+                                                                            |
+-------------+---------------------------------------------------------------------------------+
| Severity    | Minor                                                                           |
+-------------+---------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                   |
+-------------+---------------------------------------------------------------------------------+
| Precision   | High                                                                            |
+-------------+---------------------------------------------------------------------------------+
| Examples    | :ref:`case-dolibarr-php-debuginfousage`                                         |
+-------------+---------------------------------------------------------------------------------+


.. _encoding-usage:

Encoding Usage
++++++++++++++

 Usage of declare(encoding = );.

.. code-block:: php

   <?php
   
   // Setting encoding for the file;
       declare(encoding = 'UTF-8');
   
   ?>


See also `declare <https://www.php.net/manual/en/control-structures.declare.php>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Php/DeclareEncoding |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.12.1              |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _strict\_types-preference:

strict_types Preference
+++++++++++++++++++++++

 ``strict_types`` is a PHP mode where typehint are enforced strictly or weakly. By default, it is weak typing, allowing backward compatibility with previous versions. 

This analysis reports if ``strict_types`` are used systematically or not. ``strict_types`` affects the calling file, not the definition file. 

.. code-block:: php

   <?php
   
   // define strict_types
   declare(strict_types = 1);
   
   foo(1);
   
   ?>


See also `Strict typing <https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration.strict>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Php/DeclareStrict |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.12.2            |
+-------------+-------------------+
| Php Version | 7.0+              |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _declare-strict\_types-usage:

Declare strict_types Usage
++++++++++++++++++++++++++

 Usage of ``strict_types``. By default, PHP attempts to change the original type to match the type specified by the type-declaration. With an explicit ``strict_types`` declaration, PHP ensures that the incoming argument has the exact type. 

``strict_types`` were introduced in PHP 7.0.

.. code-block:: php

   <?php
   
   // Setting strict_types;
       declare(strict_types = 1);
   
       function foo(int $i) {
           echo $i;
       }
   
       // Always valid : displays 1
       foo(1);
       // with strict types, this emits an error
       // without strict types, this displays 1
       foo(1.7);
   
   ?>


See also `declare <https://www.php.net/manual/en/control-structures.declare.php>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Php/DeclareStrictType |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 0.12.1                |
+-------------+-----------------------+
| Php Version | 7.0+                  |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _ticks-usage:

Ticks Usage
+++++++++++

 Usage of declare(ticks = );.

.. code-block:: php

   <?php
   
   // Setting ticks value
       declare(ticks = 'UTF-8');
   
   ?>


See also `declare <https://www.php.net/manual/en/control-structures.declare.php>`_.

Specs
^^^^^
+-------------+------------------+
| Short name  | Php/DeclareTicks |
+-------------+------------------+
| Rulesets    | :ref:`CE`        |
+-------------+------------------+
| Exakt since | 0.12.1           |
+-------------+------------------+
| Php Version | All              |
+-------------+------------------+
| Severity    | Minor            |
+-------------+------------------+
| Time To Fix | Slow (1 hour)    |
+-------------+------------------+
| Precision   | Very high        |
+-------------+------------------+


.. _define-with-array:

Define With Array
+++++++++++++++++

 PHP 7.0 has the ability to define an array as a constant, using the `define() <https://www.php.net/define>`_ native call. This was not possible until that version, only with the const keyword.

.. code-block:: php

   <?php
   
   //Defining an array as a constant
   define('MY_PRIMES', [2, 3, 5, 7, 11]);
   
   ?>

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------+
| Short name  | Php/DefineWithArray                                                                                        |
+-------------+------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56` |
+-------------+------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Php Version | 7.0+                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+
| Severity    | Critical                                                                                                   |
+-------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                              |
+-------------+------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+


.. _deprecated-php-functions:

Deprecated PHP Functions
++++++++++++++++++++++++

 The following functions are deprecated. It is recommended to stop using them now and replace them with a durable equivalent. 

Note that these functions may be still usable : they generate warning that help tracking their usage in the log. To eradicate their usage, watch the logs, and update any deprecated warning. This way, the code won't be stuck when the function is actually removed from PHP.

.. code-block:: php

   <?php
   
   // This is the current function
   list($day, $month, $year) = explode('/', '08/06/1995');
   
   // This is deprecated
   list($day, $month, $year) = split('/', '08/06/1995');
   
   ?>




Suggestions
^^^^^^^^^^^

* Replace those deprecated with modern syntax
* Stop using deprecated syntax

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------+
| Short name  | Php/Deprecated                                                                            |
+-------------+-------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                               |
+-------------+-------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                     |
+-------------+-------------------------------------------------------------------------------------------+
| Php Version | All                                                                                       |
+-------------+-------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                     |
+-------------+-------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                           |
+-------------+-------------------------------------------------------------------------------------------+
| Precision   | High                                                                                      |
+-------------+-------------------------------------------------------------------------------------------+
| ClearPHP    | `no-deprecated <https://github.com/dseguy/clearPHP/tree/master/rules/no-deprecated.md>`__ |
+-------------+-------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-dolphin-php-deprecated`                                                        |
+-------------+-------------------------------------------------------------------------------------------+


.. _detect-current-class:

Detect Current Class
++++++++++++++++++++

 Detecting the current class should be done with `self\:\:class` or `static\:\:class` operator.

`__CLASS__ <https://www.php.net/manual/en/language.constants.predefined.php>`_ may be replaced by ``self\:\:class``. 
`get_called_class() <https://www.php.net/get_called_class>`_ may be replaced by ``static\:\:class``. 

`__CLASS__ <https://www.php.net/manual/en/language.constants.predefined.php>`_ and `get_called_class() <https://www.php.net/get_called_class>`_ are set to be deprecated in PHP 7.4. 

.. code-block:: php

   <?php
   
   class X {
       function foo() {
           echo __CLASS__.\n;          // X
           echo self::class.\n;        // X
           
           echo get_called_class().\n;  // Y
           echo static::class.\n;       // Y
       }
   }
   
   class Y extends X {}
   
   $y = new Y();
   $y->foo();
   
   ?>


See also `PHP RFC: Deprecations for PHP 7.4 <https://wiki.php.net/rfc/deprecations_php_7_4>`_.


Suggestions
^^^^^^^^^^^

* Use the self\:\:class operator to detect the current class name, instead of __CLASS__ and get_class().
* Use the static\:\:class operator to detect the current called class name, instead of get_called_class().

Specs
^^^^^
+-------------+----------------------------------------------------------+
| Short name  | Php/DetectCurrentClass                                   |
+-------------+----------------------------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP74`, :ref:`Suggestions` |
+-------------+----------------------------------------------------------+
| Exakt since | 1.3.8                                                    |
+-------------+----------------------------------------------------------+
| Php Version | 8.0-                                                     |
+-------------+----------------------------------------------------------+
| Severity    | Minor                                                    |
+-------------+----------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                            |
+-------------+----------------------------------------------------------+
| Precision   | Very high                                                |
+-------------+----------------------------------------------------------+


.. _direct-call-to-\_\_clone():

Direct Call To __clone()
++++++++++++++++++++++++

 Direct call to magic method `__clone() <https://www.php.net/manual/en/language.oop5.magic.php>`_ was forbidden. It is allowed since PHP 7.0. 

From the RFC : ``Doing calls like $obj->`__clone( <https://www.php.net/manual/en/language.oop5.magic.php>`_ ) is now allowed. This was the only magic method that had a compile-time check preventing some calls to it, which doesn't make sense. If we allow all other magic methods to be called, there's no reason to forbid this one``.

.. code-block:: php

   <?php
   
       class Foo {
           function __clone() {}
       }
       
       $a = new Foo;
       $a->__clone();
   ?>


See also `Directly calling `__clone <https://www.php.net/manual/en/language.oop5.magic.php>`_ is allowed <https://wiki.php.net/rfc/abstract_syntax_tree#directly_calling_clone_is_allowed>`_.


Suggestions
^^^^^^^^^^^

* Use the clone operator to call the __clone magic method

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------+
| Short name  | Php/DirectCallToClone                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56` |
+-------------+------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.4.8                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Php Version | 7.0+                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+
| Severity    | Critical                                                                                                   |
+-------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                              |
+-------------+------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+


.. _unknown-directive-name:

Unknown Directive Name
++++++++++++++++++++++

 Unknown directives names used in the code. 

The following list has directive mentioned in the code, that are not known from PHP or any extension. If this is due to a mistake, the directive must be fixed to be actually useful.

.. code-block:: php

   <?php
   
   // non-existing directive
   $reporting_error = ini_get('reporting_error');
   $error_reporting = ini_get('error_reproting'); // Note the inversion
   if (ini_set('dump_globals')) {
       // doSomething()
   }
   
   // Correct directives
   $error_reporting = ini_get('reporting_error');
   if (ini_set('xdebug.dump_globals')) {
       // doSomething()
   }
   
   ?>

Specs
^^^^^
+-------------+-------------------+
| Short name  | Php/DirectiveName |
+-------------+-------------------+
| Rulesets    | none              |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Quick (30 mins)   |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _directives-usage:

Directives Usage
++++++++++++++++

 List of the directives mentioned in the code.

.. code-block:: php

   <?php
   
   //accessing the configuration to change it
   ini_set('timelimit', -1);
   
   //accessing the configuration to check it
   ini_get('safe_mode');
   
   ?>

Specs
^^^^^
+-------------+---------------------+
| Short name  | Php/DirectivesUsage |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.8.4               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _dl()-usage:

Dl() Usage
++++++++++

 Dynamically load PHP extensions with `dl() <https://www.php.net/dl>`_.

.. code-block:: php

   <?php
   
       // dynamically loading ext/vips
   	dl('vips.' . PHP_SHLIB_SUFFIX);
   
   ?>


See also `dl <http://www.php.net/dl>`_.

Specs
^^^^^
+-------------+---------------+
| Short name  | Php/DlUsage   |
+-------------+---------------+
| Rulesets    | :ref:`CE`     |
+-------------+---------------+
| Exakt since | 1.0.4         |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _don't-pollute-global-space:

Don't Pollute Global Space
++++++++++++++++++++++++++

 Avoid creating definitions in the global name space.

The global namespace is the default namespace, where all functions, classes, constants, traits and interfaces live. The `global namespace <https://www.php.net/manual/en/language.namespaces.global.php>`_ is also known as the root namespace.

In particular, PHP native classes usually live in that namespace. By creating functions in that namespace, the code may encounter naming conflict, when the PHP group decides to use a name that the code also uses. This already happened in PHP version 5.1.1, where a ``Date`` native class was introduced, and had to be `disabled in the following minor version <https://www.php.net/ChangeLog-5.php#5.1.1>`_. 

Nowadays, conflicts appear between components, which claim the same name. 

See also `Using namespaces: fallback to global function/constant <https://www.php.net/manual/en/language.namespaces.fallback.php>`_.


Suggestions
^^^^^^^^^^^

* Create a namespace for your code, and store your definition there.

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Php/DontPolluteGlobalSpace |
+-------------+----------------------------+
| Rulesets    | :ref:`Analyze`             |
+-------------+----------------------------+
| Exakt since | 2.1.7                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Quick (30 mins)            |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _I?=-usage:

<?= Usage
+++++++++

 Usage of the <?= tag, that echo's directly the following content.

<?= $variable; 
?>

Specs
^^^^^
+-------------+------------------+
| Short name  | Php/EchoTagUsage |
+-------------+------------------+
| Rulesets    | :ref:`CE`        |
+-------------+------------------+
| Exakt since | 0.8.4            |
+-------------+------------------+
| Php Version | All              |
+-------------+------------------+
| Severity    | Minor            |
+-------------+------------------+
| Time To Fix | Instant (5 mins) |
+-------------+------------------+
| Precision   | High             |
+-------------+------------------+


.. _ellipsis-usage:

Ellipsis Usage
++++++++++++++

 Usage of the ellipsis keyword. The keyword is three dots : `... <https://www.php.net/manual/en/functions.arguments.php#functions.variable-arg-list>`_ . It is also named variadic or splat operator.

It may be in function definitions, either in functioncalls.

`... <https://www.php.net/manual/en/functions.arguments.php#functions.variable-arg-list>`_ allows for packing or unpacking arguments into an array.

.. code-block:: php

   <?php
   
   $args = [1, 2, 3];
   foo(...$args); 
   // Identical to foo(1,2,3);
   
   function bar(...$a) {
       // Identical to : $a = func_get_args();
   }
   ?>


See also `PHP RFC: Syntax for variadic functions <https://wiki.php.net/rfc/variadics>`_, `PHP 5.6 and the Splat Operator <https://lornajane.net/posts/2014/php-5-6-and-the-splat-operator>`_, and `Variable-length argument lists <https://www.php.net/manual/en/functions.arguments.php#functions.variable-arg-list>`_.

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------+
| Short name  | Php/EllipsisUsage                                                                          |
+-------------+--------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55` |
+-------------+--------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                      |
+-------------+--------------------------------------------------------------------------------------------+
| Php Version | 5.6+                                                                                       |
+-------------+--------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                      |
+-------------+--------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                              |
+-------------+--------------------------------------------------------------------------------------------+
| Precision   | High                                                                                       |
+-------------+--------------------------------------------------------------------------------------------+


.. _empty-list:

Empty List
++++++++++

 Empty `list() <https://www.php.net/list>`_ are not allowed anymore in PHP 7. There must be at least one variable in the list call.

.. code-block:: php

   <?php
   
   //Not accepted since PHP 7.0
   list() = array(1,2,3);
   
   //Still valid PHP code
   list(,$x) = array(1,2,3);
   
   ?>




Suggestions
^^^^^^^^^^^

* Remove empty list() calls

Specs
^^^^^
+-------------+-------------------------------------------+
| Short name  | Php/EmptyList                             |
+-------------+-------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CompatibilityPHP70` |
+-------------+-------------------------------------------+
| Exakt since | 0.8.4                                     |
+-------------+-------------------------------------------+
| Php Version | 7.0-                                      |
+-------------+-------------------------------------------+
| Severity    | Major                                     |
+-------------+-------------------------------------------+
| Time To Fix | Quick (30 mins)                           |
+-------------+-------------------------------------------+
| Precision   | High                                      |
+-------------+-------------------------------------------+


.. _error\_log()-usage:

Error_Log() Usage
+++++++++++++++++

 Usage of `error_log() <https://www.php.net/error_log>`_ function. This leads to checking the configuration of ``error_log`` in the PHP configuration directives.

.. code-block:: php

   <?php
   
   error_log(logging message\n);
   
   ?>

Specs
^^^^^
+-------------+-------------------+
| Short name  | Php/ErrorLogUsage |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.10.0            |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _exponent-usage:

Exponent Usage
++++++++++++++

 Usage of the `** <https://www.php.net/manual/en/language.operators.arithmetic.php>`_ operator or \*\*\=, to make exponents.

.. code-block:: php

   <?php
   
   $eight = 2 ** 3;
   
   $sixteen = 4;
   $sixteen \*\*\= 2;
   
   ?>


See also `Arithmetic Operators <https://www.php.net/manual/en/language.operators.arithmetic.php>`_.



Suggestions
^^^^^^^^^^^

* Use the operator when no literal negative number is in the expression

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------+
| Short name  | Php/ExponentUsage                                                               |
+-------------+---------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55` |
+-------------+---------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                           |
+-------------+---------------------------------------------------------------------------------+
| Php Version | 5.6+                                                                            |
+-------------+---------------------------------------------------------------------------------+
| Severity    | Major                                                                           |
+-------------+---------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                |
+-------------+---------------------------------------------------------------------------------+
| Precision   | Very high                                                                       |
+-------------+---------------------------------------------------------------------------------+


.. _php-failinganalysis:

Php/FailingAnalysis
+++++++++++++++++++

Specs
^^^^^
+-------------+---------------------+
| Short name  | Php/FailingAnalysis |
+-------------+---------------------+
| Rulesets    | none                |
+-------------+---------------------+
| Exakt since | 1.2.8               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _filter-to-add\_slashes():

Filter To add_slashes()
+++++++++++++++++++++++

 ``FILTER_SANITIZE_MAGIC_QUOTES`` is deprecated. In PHP 7.4, it should be replaced with `addslashes() <https://www.php.net/addslashes>`_

According to the migration RDFC : 'Magic quotes were deprecated all the way back in PHP 5.3 and later removed in PHP 5.4. The filter extension implements a sanitization filter that mimics this behavior of magic_quotes by calling `addslashes() <https://www.php.net/addslashes>`_ on the input in question.'

.. code-block:: php

   <?php
   
   // Deprecated way to filter input
   $var = filter_input($input, FILTER_SANITIZE_MAGIC_QUOTES);
   
   // Alternative way to filter input
   $var = addslashes($input);
   
   ?>


`addslashes() <https://www.php.net/addslashes>`_ used to filter data while building SQL queries, to prevent injections. Nowadays, prepared queries are a better option.

See also `Deprecations for PHP 7.4 <https://wiki.php.net/rfc/deprecations_php_7_4>`_.

Suggestions
^^^^^^^^^^^

* Replace ``FILTER_SANITIZE_MAGIC_QUOTES`` with addslashes()
* Replace ``FILTER_SANITIZE_MAGIC_QUOTES`` with an adapted escaping system

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Php/FilterToAddSlashes               |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP74` |
+-------------+--------------------------------------+
| Exakt since | 1.9.9                                |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Minor                                |
+-------------+--------------------------------------+
| Time To Fix | Quick (30 mins)                      |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _flexible-heredoc:

Flexible Heredoc
++++++++++++++++

 Flexible syntax for Heredoc. 

The new flexible syntax for heredoc and nowdoc enable the closing marker to be indented, and remove the new line requirement after the closing marker.

It was introduced in PHP 7.3.

.. code-block:: php

   <?php
   
   // PHP 7.3 and newer
   foo($a = <<<END
       
       flexible syntax
       with extra indentation
       
       END);
       
   // All PHP versions
   $a = <<<END
       
       Normal syntax
       
   END;
       
       
   ?>


This syntax is backward incompatible : once adopted in the code, previous versions won't compile it.

See also `Heredoc <https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc>`_ and `Flexible Heredoc and Nowdoc Syntaxes <https://wiki.php.net/rfc/flexible_heredoc_nowdoc_syntaxes>`_.

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/FlexibleHeredoc                                                                                                                                                                         |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70`, :ref:`CompatibilityPHP71`, :ref:`CompatibilityPHP72` |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.2.9                                                                                                                                                                                       |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | 7.3+                                                                                                                                                                                        |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Critical                                                                                                                                                                                    |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                                                                                                            |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                                                                        |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. _wrong-fopen()-mode:

Wrong fopen() Mode
++++++++++++++++++

 Wrong file opening for `fopen() <https://www.php.net/fopen>`_.

`fopen() <https://www.php.net/fopen>`_ has a few modes, as described in the documentation : 'r', 'r+', for reading;  'w', 'w+' for writing; 'a', 'a+' for appending; 'x', 'x+' for modifying; 'c', 'c+' for writing and locking, 't' for text files and windows only.
An optional 'b' may be used to make the `fopen() <https://www.php.net/fopen>`_ call more portable and binary safe. Another optional 't' may be used to make the `fopen() <https://www.php.net/fopen>`_ call process automatically text input : this one should be avoided. 

.. code-block:: php

   <?php
   
   // open the file for reading, in binary mode
   $fp = fopen('/tmp/php.txt', 'rb');
   
   // New option e in PHP 7.0.16 and 7.1.2 (beware of compatibility)
   $fp = fopen('/tmp/php.txt', 'rbe');
   
   // Unknown option x
   $fp = fopen('/tmp/php.txt', 'rbx');
   
   ?>


Any other values are not understood by PHP. 

Suggestions
^^^^^^^^^^^

* Check the docs, choose the right opening mode.

Specs
^^^^^
+-------------+------------------------------------------------------------------------+
| Short name  | Php/FopenMode                                                          |
+-------------+------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                            |
+-------------+------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                  |
+-------------+------------------------------------------------------------------------+
| Php Version | All                                                                    |
+-------------+------------------------------------------------------------------------+
| Severity    | Major                                                                  |
+-------------+------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                        |
+-------------+------------------------------------------------------------------------+
| Precision   | High                                                                   |
+-------------+------------------------------------------------------------------------+
| Examples    | :ref:`case-tikiwiki-php-fopenmode`, :ref:`case-humo-gen-php-fopenmode` |
+-------------+------------------------------------------------------------------------+


.. _foreach-don't-change-pointer:

Foreach Don't Change Pointer
++++++++++++++++++++++++++++

 `foreach <https://www.php.net/manual/en/control-structures.foreach.php>`_ loops use their own internal cursor.

A foreach loop won't change the internal pointer of the array, as it works on a copy of the source. Hence, applying array pointer's functions such as `current() <https://www.php.net/current>`_ or `next() <https://www.php.net/next>`_ to the source array won't have the same behavior in PHP 5 than PHP 7.

This only applies when a `foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_ by reference is used.

.. code-block:: php

   <?php
   
   $numbers = range(1, 10);
   next($numbers);
   foreach($numbers as &$number){
       print $number;
       print current($numbers).\n; // Always 
   }
   
   ?>


See also `foreach no longer changes the internal array pointer <https://www.php.net/manual/en/migration70.incompatible.php#migration70.incompatible.foreach.array-pointer>`_ and `foreach <https://www.php.net/manual/en/control-structures.foreach.php>`_.


Suggestions
^^^^^^^^^^^

* Do not change the pointer on the source array while in the loop

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Php/ForeachDontChangePointer |
+-------------+------------------------------+
| Rulesets    | :ref:`CompatibilityPHP70`    |
+-------------+------------------------------+
| Exakt since | 0.8.4                        |
+-------------+------------------------------+
| Php Version | 7.0-                         |
+-------------+------------------------------+
| Severity    | Major                        |
+-------------+------------------------------+
| Time To Fix | Slow (1 hour)                |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _foreach-on-object:

Foreach On Object
+++++++++++++++++

 Foreach on object looks like a typo. This is particularly true when both object and member are variables.

Foreach on an object member is a legit PHP syntax, though it is very rare : blind variables rarely have to be securing in an object to be processed.

.. code-block:: php

   <?php
   
   // Looks suspicious
   foreach($array as $o -> $b) { 
       doSomething();
   }
   
   // This is the real thing
   foreach($array as $o => $b) { 
       doSomething();
   }
   
   ?>

Specs
^^^^^
+-------------+-------------------+
| Short name  | Php/ForeachObject |
+-------------+-------------------+
| Rulesets    | :ref:`Analyze`    |
+-------------+-------------------+
| Exakt since | 1.1.6             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Major             |
+-------------+-------------------+
| Time To Fix | Instant (5 mins)  |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _$globals-or-global:

$GLOBALS Or global
++++++++++++++++++

 Usually, PHP projects make a choice between the global keyword, and the $GLOBALS variable. Sometimes, the project has no recommendations. 

When your project use a vast majority of one of the convention, then the analyzer will report all remaining inconsistently cased constant. 

.. code-block:: php

   <?php
   
   global $a, $b, $c, $d, $e, $f, $g, $h, $i, $j, $k, $l, $m;
   
   // This access is inconsistent with the previous usage
   $GLOBALS['a'] = 2;
   
   ?>

Specs
^^^^^
+-------------+---------------------+
| Short name  | Php/GlobalsVsGlobal |
+-------------+---------------------+
| Rulesets    | none                |
+-------------+---------------------+
| Exakt since | 0.9.2               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Quick (30 mins)     |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _simple-global-variable:

Simple Global Variable
++++++++++++++++++++++

 The global keyword should only be used with simple variables. Since PHP 7, it cannot be used with complex or dynamic structures.

.. code-block:: php

   <?php
   
   // Forbidden in PHP 7
   global $normalGlobal;
   
   // Forbidden in PHP 7
   global $$variable->global ;
   
   // Tolerated in PHP 7
   global ${$variable->global};
   
   ?>



Suggestions
^^^^^^^^^^^

* Add curly braces so the syntax is compatibles PHP 5 and PHP 7
* Remove this syntax, and access the variable through another way : argument, array, property.

Specs
^^^^^
+-------------+---------------------------------+
| Short name  | Php/GlobalWithoutSimpleVariable |
+-------------+---------------------------------+
| Rulesets    | :ref:`CompatibilityPHP70`       |
+-------------+---------------------------------+
| Exakt since | 0.8.4                           |
+-------------+---------------------------------+
| Php Version | 7.0-                            |
+-------------+---------------------------------+
| Severity    | Critical                        |
+-------------+---------------------------------+
| Time To Fix | Slow (1 hour)                   |
+-------------+---------------------------------+
| Precision   | Very high                       |
+-------------+---------------------------------+


.. _goto-names:

Goto Names
++++++++++

 List of all goto labels used in the code. 

.. code-block:: php

   <?php
   
   GOTO_NAME_1: 
   
   // reports the usage of GOTO_NAME_1
   goto GOTO_NAME_1;
   
   UNUSED_GOTO_NAME_1: 
   
   ?>

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------+
| Short name  | Php/Gotonames                                                                 |
+-------------+-------------------------------------------------------------------------------+
| Rulesets    | :ref:`CE`                                                                     |
+-------------+-------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                         |
+-------------+-------------------------------------------------------------------------------+
| Php Version | All                                                                           |
+-------------+-------------------------------------------------------------------------------+
| Severity    | Minor                                                                         |
+-------------+-------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                 |
+-------------+-------------------------------------------------------------------------------+
| Precision   | Very high                                                                     |
+-------------+-------------------------------------------------------------------------------+
| ClearPHP    | `no-goto <https://github.com/dseguy/clearPHP/tree/master/rules/no-goto.md>`__ |
+-------------+-------------------------------------------------------------------------------+


.. _group-use-declaration:

Group Use Declaration
+++++++++++++++++++++

 The group use declaration is used in the code.

.. code-block:: php

   <?php
   
   // Adapted from the RFC documentation 
   // Pre PHP 7 code
   use some\name_space\ClassA;
   use some\name_space\ClassB;
   use some\name_space\ClassC as C;
   
   use function some\name_space\fn_a;
   use function some\name_space\fn_b;
   use function some\name_space\fn_c;
   
   use const some\name_space\ConstA;
   use const some\name_space\ConstB;
   use const some\name_space\ConstC;
   
   // PHP 7+ code
   use some\name_space\{ClassA, ClassB, ClassC as C};
   use function some\name_space\{fn_a, fn_b, fn_c};
   use const some\name_space\{ConstA, ConstB, ConstC};
   
   ?>


See also `Group Use Declaration RFC <https://wiki.php.net/rfc/group_use_declarations>`_ and `Using namespaces: Aliasing/Importing <https://www.php.net/manual/en/language.namespaces.importing.php>`_.

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/GroupUseDeclaration                                                                                               |
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56` |
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.10.7                                                                                                                |
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                                   |
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                                 |
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                                      |
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                  |
+-------------+-----------------------------------------------------------------------------------------------------------------------+


.. _group-use-trailing-comma:

Group Use Trailing Comma
++++++++++++++++++++++++

 The usage of a final empty slot in `array() <https://www.php.net/array>`_ was allowed with use statements. This works in PHP 7.2 and more recent.

Although this empty instruction is ignored at execution, this allows for clean presentation of code, and short diff when committing in a VCS.

.. code-block:: php

   <?php
   
   // Valid in PHP 7.2 and more recent.
   use a\b\{c, 
            d, 
            e, 
            f,
           };
   
   // This won't compile in 7.1 and older.
   
   ?>


See also `Trailing Commas In List Syntax <https://wiki.php.net/rfc/list-syntax-trailing-commas>`_ and `Revisit trailing commas in function arguments <https://www.mail-archive.com/internals@lists.php.net/msg81138.html>`_.

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/GroupUseTrailingComma                                                                                                                                        |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70`, :ref:`CompatibilityPHP71` |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.12.3                                                                                                                                                           |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | 7.2+                                                                                                                                                             |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                                                                            |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                                                                                 |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                                             |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. _\_\_halt\_compiler:

__halt_compiler
+++++++++++++++

 __halt_compiler() usage.

.. code-block:: php

   <?php
   
   // open this file
   $fp = fopen(__FILE__, 'r');
   
   // seek file pointer to data
   fseek($fp, __COMPILER_HALT_OFFSET__);
   
   // and output it
   var_dump(stream_get_contents($fp));
   
   // the end of the script execution
   __halt_compiler(); the installation data (eg. tar, gz, PHP, etc.)
   
   ?>

Specs
^^^^^
+-------------+------------------+
| Short name  | Php/Haltcompiler |
+-------------+------------------+
| Rulesets    | :ref:`CE`        |
+-------------+------------------+
| Exakt since | 0.8.4            |
+-------------+------------------+
| Php Version | All              |
+-------------+------------------+
| Severity    | Minor            |
+-------------+------------------+
| Time To Fix | Slow (1 hour)    |
+-------------+------------------+
| Precision   | High             |
+-------------+------------------+


.. _hash-algorithms:

Hash Algorithms
+++++++++++++++

 There is a long but limited list of hashing algorithm available to PHP. The one found doesn't seem to be existing.

.. code-block:: php

   <?php
   
   // This hash has existed in PHP. Check with hash_algos() if it is available on your system. 
   echo hash('ripmed160', 'The quick brown fox jumped over the lazy dog.');
   
   // This hash doesn't exist
   echo hash('ripemd160', 'The quick brown fox jumped over the lazy dog.');
   
   ?>


See also `hash_algos <https://www.php.net/hash_algos>`_.



Suggestions
^^^^^^^^^^^

* Use a hash algorithm that is available on several PHP versions
* Fix the name of the hash algorithm

Specs
^^^^^
+-------------+----------------+
| Short name  | Php/HashAlgos  |
+-------------+----------------+
| Rulesets    | :ref:`Analyze` |
+-------------+----------------+
| Exakt since | 0.8.4          |
+-------------+----------------+
| Php Version | All            |
+-------------+----------------+
| Severity    | Major          |
+-------------+----------------+
| Time To Fix | Slow (1 hour)  |
+-------------+----------------+
| Precision   | High           |
+-------------+----------------+


.. _hash-algorithms-incompatible-with-php-5.3:

Hash Algorithms Incompatible With PHP 5.3
+++++++++++++++++++++++++++++++++++++++++

 List of hash algorithms incompatible with PHP 5.3.

.. code-block:: php

   <?php
   
   // Compatible only with 5.3 and more recent
   echo hash('md2', 'The quick brown fox jumped over the lazy dog.');
   
   // Always compatible
   echo hash('ripemd320', 'The quick brown fox jumped over the lazy dog.');
   
   ?>


See also `hash_algos <https://www.php.net/hash_algos>`_.

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/HashAlgos53                                                                                                                                                                             |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70`, :ref:`CompatibilityPHP71`, :ref:`CompatibilityPHP72` |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                                                                                                       |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                                                                                                         |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                                                                                                       |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                                                                                                               |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                                                                        |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. _hash-algorithms-incompatible-with-php-5.4-5.5:

Hash Algorithms Incompatible With PHP 5.4/5.5
+++++++++++++++++++++++++++++++++++++++++++++

 List of hash algorithms incompatible with PHP 5.4 and 5.5.

.. code-block:: php

   <?php
   
   // Compatible only with 5.4 and more recent
   echo hash('fnv132', 'The quick brown fox jumped over the lazy dog.');
   
   // Always compatible
   echo hash('ripemd320', 'The quick brown fox jumped over the lazy dog.');
   
   ?>


See also `hash_algos <https://www.php.net/hash_algos>`_.

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/HashAlgos54                                                                                                                                                  |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70`, :ref:`CompatibilityPHP71`, :ref:`CompatibilityPHP72` |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                                                                            |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | 5.4-                                                                                                                                                             |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                                                                            |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                                                                                    |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                                             |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. _hash-algorithms-incompatible-with-php-7.1-:

Hash Algorithms Incompatible With PHP 7.1-
++++++++++++++++++++++++++++++++++++++++++

 List of hash algorithms incompatible with PHP 7.1 and more recent. At the moment of writing, this is compatible up to 7.3. 

The hash algorithms were introduced in PHP 7.1. 

.. code-block:: php

   <?php
   
   // Compatible only with 7.1 and more recent
   echo hash('sha512/224', 'The quick brown fox jumped over the lazy dog.');
   
   // Always compatible
   echo hash('ripemd320', 'The quick brown fox jumped over the lazy dog.');
   
   ?>


See also `hash_algos <https://www.php.net/hash_algos>`_.

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/HashAlgos71                                                                                                                       |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70` |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.3.4                                                                                                                                 |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | 7.1-                                                                                                                                  |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                                                 |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                                                         |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                  |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+


.. _hash-algorithms-incompatible-with-php-7.4-:

Hash Algorithms Incompatible With PHP 7.4-
++++++++++++++++++++++++++++++++++++++++++

 List of hash algorithms incompatible with PHP 7.3 and older recent. At the moment of writing, this is compatible up to 7.4s. 

The hash algorithms were introduced in PHP 7.4s. 

.. code-block:: php

   <?php
   
   // Compatible only with 7.1 and more recent
   echo hash('crc32cs', 'The quick brown fox jumped over the lazy dog.');
   
   // Always compatible
   echo hash('ripemd320', 'The quick brown fox jumped over the lazy dog.');
   
   ?>


See also `hash_algos <https://www.php.net/hash_algos>`_.

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Php/HashAlgos74                      |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP74` |
+-------------+--------------------------------------+
| Exakt since | 1.3.4                                |
+-------------+--------------------------------------+
| Php Version | 7.4-                                 |
+-------------+--------------------------------------+
| Severity    | Major                                |
+-------------+--------------------------------------+
| Time To Fix | Slow (1 hour)                        |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _hash-will-use-objects:

Hash Will Use Objects
+++++++++++++++++++++

 The `ext/hash extension <http://www.php.net/manual/en/book.hash.php>`_ used resources, and is being upgraded to use resources. 

.. code-block:: php

   <?php
   
   // Post 7.2 code 
       $hash = hash_init('sha256');
       if (!is_object($hash)) {
           trigger_error('error');
       }
       hash_update($hash, $message);
   
   // Pre-7.2 code
       $hash = hash_init('md5');
       if (!is_resource($hash)) {
           trigger_error('error');
       }
       hash_update($hash, $message);
   
   ?>


See also `Move ext/hash from resources to objects <https://www.php.net/manual/en/migration72.incompatible.php#migration72.incompatible.hash-ext-to-objects>`_.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Php/HashUsesObjects       |
+-------------+---------------------------+
| Rulesets    | :ref:`CompatibilityPHP72` |
+-------------+---------------------------+
| Exakt since | 1.0.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Major                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _idn\_to\_ascii()-new-default:

idn_to_ascii() New Default
++++++++++++++++++++++++++

 The default parameter value of `idn_to_ascii() <https://www.php.net/idn_to_ascii>`_ and idn_to_utf8`() <https://www.php.net/>`_ is now `INTL_IDNA_VARIANT_UTS46 <https://www.php.net/INTL_IDNA_VARIANT_UTS46>`_ instead of the deprecated `INTL_IDNA_VARIANT_2003 <https://www.php.net/INTL_IDNA_VARIANT_2003>`_.

.. code-block:: php

   <?php
   
   echo idn_to_ascii('täst.de'); 
   
   ?>


See also `idn_to_ascii <https://www.php.net/manual/en/function.idn-to-ascii.php>`_, `idn_to_utf8 <https://www.php.net/manual/en/function.idn-to-utf8.php>`_ and `Unicode IDNA Compatibility Processing <http://unicode.org/reports/tr46/>`_.


Suggestions
^^^^^^^^^^^

* Explicitely add the second parameter to the idn_to_ascii() and idn_to_utf8() functions.

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Php/IdnUts46                         |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP74` |
+-------------+--------------------------------------+
| Exakt since | 1.5.0                                |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Minor                                |
+-------------+--------------------------------------+
| Time To Fix | Slow (1 hour)                        |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _implode-one-arg:

Implode One Arg
+++++++++++++++

 `implode() <https://www.php.net/implode>`_ may be called with one arg. It is recommended to avoid it. 

Using two arguments makes it less surprising to new comers, and consistent with `explode() <https://www.php.net/explode>`_ syntax. 

.. code-block:: php

   <?php
   
   $array = range('a', 'c');
   
   // empty string is the glue
   print implode('', $array);
   
   // only the array : PHP uses the empty string as glue. 
   // Avoid this
   print implode($array);
   
   ?>


See also `implode <https://www.php.net/implode>`_.


Suggestions
^^^^^^^^^^^

* Add an empty string as first argument

Specs
^^^^^
+-------------+-------------------------------------------+
| Short name  | Php/ImplodeOneArg                         |
+-------------+-------------------------------------------+
| Rulesets    | :ref:`Suggestions`, :ref:`php-cs-fixable` |
+-------------+-------------------------------------------+
| Exakt since | 1.7.7                                     |
+-------------+-------------------------------------------+
| Php Version | All                                       |
+-------------+-------------------------------------------+
| Severity    | Minor                                     |
+-------------+-------------------------------------------+
| Time To Fix | Quick (30 mins)                           |
+-------------+-------------------------------------------+
| Precision   | Very high                                 |
+-------------+-------------------------------------------+


.. _incoming-values:

Incoming Values
+++++++++++++++

 The names of the variables that are passed via the superglobals.

.. code-block:: php

   <?php
   
   $x = $_GET['y']; // y is the incoming variable
   
   ?>

Specs
^^^^^
+-------------+--------------------+
| Short name  | Php/IncomingValues |
+-------------+--------------------+
| Rulesets    | none               |
+-------------+--------------------+
| Exakt since | 1.7.7              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Quick (30 mins)    |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _incoming-variables:

Incoming Variables
++++++++++++++++++

 Incoming names, used across the application. 

Incoming variables are first-level index in ``$_POST``, ``$_GET``, ``$_COOKIE``, ``$_REQUEST`` and ``$_FILE``;

``$_SESSION`` and ``$_ENV`` are not reported as incoming data, as they are not supposed to be manipulated by normal user. 

Dynamic names are not reported too.

.. code-block:: php

   <?php
   
   $name = $_GET['name'];
   $cookie = $_COOKIE['cookie'];
   
   // 'archive' is the incoming variable, not 'file_name'
   $file_name = $_FILE['archive']['file_name'];
   
   // This is not reported, because it is from $_ENV.
   $db_pass = $_ENV['DB_PASS'];
   
   // This is not reported, because it is dynamic
   $x = 'userId';
   $userId = $_GET[$x];
   
   ?>

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Php/IncomingVariables |
+-------------+-----------------------+
| Rulesets    | none                  |
+-------------+-----------------------+
| Exakt since | 0.12.16               |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _incompilable-files:

Incompilable Files
++++++++++++++++++

 Files that cannot be compiled, and, as such, be run by PHP. Scripts are linted against various versions of PHP. 

This is usually undesirable, as all code must compile before being executed. It may be that such files are not compilable because they are not yet ready for an upcoming PHP version.

.. code-block:: php

   <?php
   
   // Can't compile this : Print only accepts one argument
   print $a, $b, $c;
   
   ?>


Code that is not compilable with older PHP versions means that the code is breaking backward compatibility : good or bad is project decision.

When the code is used as a template for PHP code generation, for example at installation time, it is recommended to use a distinct file extension, so as to distinguish them from actual PHP code.



Suggestions
^^^^^^^^^^^

* If this file is a template for PHP code, change the extension to something else than .php
* Fix the syntax so it works with various versions of PHP

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------+
| Short name  | Php/Incompilable                                                                              |
+-------------+-----------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`                                                                     |
+-------------+-----------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------+
| Php Version | All                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------+
| Severity    | Critical                                                                                      |
+-------------+-----------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                 |
+-------------+-----------------------------------------------------------------------------------------------+
| Precision   | High                                                                                          |
+-------------+-----------------------------------------------------------------------------------------------+
| ClearPHP    | `no-incompilable <https://github.com/dseguy/clearPHP/tree/master/rules/no-incompilable.md>`__ |
+-------------+-----------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-xataface-php-incompilable`                                                         |
+-------------+-----------------------------------------------------------------------------------------------+


.. _numeric-literal-separator:

Numeric Literal Separator
+++++++++++++++++++++++++

 Integer and floats may be written with internal underscores. This way, it is possible to separate large number into smaller groups, and make them more readable.

Numeric Literal Separators were introduced in PHP 7.4 and are not backward compatible.

.. code-block:: php

   <?php
   $a = 1_000_000_000;   // A billion
   $a = 1000000000;      // A billion too...
   
   $b = 107_925_284.88;‬ // 6 light minute to kilometers = 107925284.88 kilometers
   $b = 107925284.88;‬   // Same as above
   ?>


See also `PHP RFC: Numeric Literal Separator <https://wiki.php.net/rfc/numeric_literal_separator>`_.
 

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Php/IntegerSeparatorUsage            |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP73` |
+-------------+--------------------------------------+
| Exakt since | 1.9.0                                |
+-------------+--------------------------------------+
| Php Version | 7.4+                                 |
+-------------+--------------------------------------+
| Severity    | Minor                                |
+-------------+--------------------------------------+
| Time To Fix | Quick (30 mins)                      |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _wrong-parameter-type:

Wrong Parameter Type
++++++++++++++++++++

 The expected parameter is not of the correct type. Check PHP documentation to know which is the right format to be used.

.. code-block:: php

   <?php
   
   // substr() shouldn't work on integers.
   // the first argument is first converted to string, and it is 123456.
   echo substr(123456, 0, 4); // display 1234
   
   // substr() shouldn't work on boolean
   // the first argument is first converted to string, and it is 1, and not t
   echo substr(true, 0, 1); // displays 1
   
   // substr() works correctly on strings.
   echo substr(123456, 0, 4);
   
   ?>

Specs
^^^^^
+-------------+-----------------------------------------------+
| Short name  | Php/InternalParameterType                     |
+-------------+-----------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`   |
+-------------+-----------------------------------------------+
| Exakt since | 0.8.4                                         |
+-------------+-----------------------------------------------+
| Php Version | All                                           |
+-------------+-----------------------------------------------+
| Severity    | Major                                         |
+-------------+-----------------------------------------------+
| Time To Fix | Quick (30 mins)                               |
+-------------+-----------------------------------------------+
| Precision   | High                                          |
+-------------+-----------------------------------------------+
| Examples    | :ref:`case-zencart-php-internalparametertype` |
+-------------+-----------------------------------------------+


.. _is\_a()-with-string:

Is_A() With String
++++++++++++++++++

 When using `is_a() <https://www.php.net/is_a>`_ with a string as first argument, the third argument is compulsory.

.. code-block:: php

   <?php
   
   // is_a() works with string as first argument, when the third argument is 'true'
   if (is_s('A', 'B', true)) {}
   
   // is_a() works with object as first argument
   if (is_s(new A, 'A')) {}
   ?>


See also `is_a() <https://www.php.net/is_a>`_.


Suggestions
^^^^^^^^^^^

* Add the third argument, and set it to true
* Use an object as a first argument

Specs
^^^^^
+-------------+------------------------------------------------------------+
| Short name  | Php/IsAWithString                                          |
+-------------+------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Rector` |
+-------------+------------------------------------------------------------+
| Exakt since | 1.9.9                                                      |
+-------------+------------------------------------------------------------+
| Php Version | All                                                        |
+-------------+------------------------------------------------------------+
| Severity    | Minor                                                      |
+-------------+------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                            |
+-------------+------------------------------------------------------------+
| Precision   | High                                                       |
+-------------+------------------------------------------------------------+


.. _manipulates-inf:

Manipulates INF
+++++++++++++++

 This code handles `INF <https://www.php.net/INF>`_ situations. `INF <https://www.php.net/INF>`_ represents the infinity, when used in a float context. It happens when a calculation returns a number that is much larger than the maximum allowed float (not integer), or a number that is not a Division by 0. 

.. code-block:: php

   <?php
   
   // pow returns INF, as it is equivalent to 1 / 0 ^ 2
   $a = pow(0,-2); // 
   
   // exp returns an actual value, but won't be able to represent it as a float
   $a = exp(PHP_INT_MAX); 
   
   // 0 ^ -1 is like 1 / 0 but returns INF.
   $a = pow(0, -1); 
   
   var_dump(is_infinite($a));
   
   // This yields a Division by zero exception
   $a = 1 / 0; 
   
   ?>


See also `Math predefined constants <https://www.php.net/manual/en/math.constants.php>`_.

Specs
^^^^^
+-------------+-----------------+
| Short name  | Php/IsINF       |
+-------------+-----------------+
| Rulesets    | :ref:`CE`       |
+-------------+-----------------+
| Exakt since | 0.10.6          |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Quick (30 mins) |
+-------------+-----------------+
| Precision   | High            |
+-------------+-----------------+


.. _manipulates-nan:

Manipulates NaN
+++++++++++++++

 This code handles ``Not-a-Number`` situations. ``Not-a-Number``, also called ``NaN``, happens when a calculation can't return an actual float. 

.. code-block:: php

   <?php
   
   // acos returns a float, unless it is not possible.
   $a = acos(8);
   
   var_dump(is_nan($a));
   
   ?>


See also `Floats <https://www.php.net/manual/en/language.types.float.php>`_.

Specs
^^^^^
+-------------+-----------------+
| Short name  | Php/IsNAN       |
+-------------+-----------------+
| Rulesets    | :ref:`CE`       |
+-------------+-----------------+
| Exakt since | 0.10.6          |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Quick (30 mins) |
+-------------+-----------------+
| Precision   | High            |
+-------------+-----------------+


.. _use-===-null:

Use === null
++++++++++++

 It is faster to use === null instead of `is_null() <https://www.php.net/is_null>`_.

.. code-block:: php

   <?php
   
   // Operator === is fast
   if ($a === null) {
   
   }
   
   // Function call is slow 
   if (is_null($a)) {
   
   }
   
   
   ?>




Suggestions
^^^^^^^^^^^

* Use === comparison

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/IsnullVsEqualNull                                                                                               |
+-------------+---------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`php-cs-fixable`                                                  |
+-------------+---------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                               |
+-------------+---------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                                 |
+-------------+---------------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                               |
+-------------+---------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                     |
+-------------+---------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                |
+-------------+---------------------------------------------------------------------------------------------------------------------+
| ClearPHP    | `avoid-those-slow-functions <https://github.com/dseguy/clearPHP/tree/master/rules/avoid-those-slow-functions.md>`__ |
+-------------+---------------------------------------------------------------------------------------------------------------------+


.. _isset-multiple-arguments:

Isset Multiple Arguments
++++++++++++++++++++++++

 `isset() <https://www.www.php.net/isset>`_ may be used with multiple arguments and acts as a AND.

.. code-block:: php

   <?php
   
   // isset without and 
   if (isset($a, $b, $c)) {
       // doSomething()
   }
   
   // isset with and 
   if (isset($a) && isset($b) && isset($c)) {
       // doSomething()
   }
   
   ?>


See also `Isset <http://www.php.net/`isset <https://www.www.php.net/isset>`_>`_.


Suggestions
^^^^^^^^^^^

* Merge all isset() calls into one

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------+
| Short name  | Php/IssetMultipleArgs                                                                   |
+-------------+-----------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Suggestions`, :ref:`php-cs-fixable`                                               |
+-------------+-----------------------------------------------------------------------------------------+
| Exakt since | 0.12.4                                                                                  |
+-------------+-----------------------------------------------------------------------------------------+
| Php Version | All                                                                                     |
+-------------+-----------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                   |
+-------------+-----------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                        |
+-------------+-----------------------------------------------------------------------------------------+
| Precision   | High                                                                                    |
+-------------+-----------------------------------------------------------------------------------------+
| Examples    | :ref:`case-thinkphp-php-issetmultipleargs`, :ref:`case-livezilla-php-issetmultipleargs` |
+-------------+-----------------------------------------------------------------------------------------+


.. _labels:

Labels
++++++

 List of all labels used in the code. 

.. code-block:: php

   <?php
   
   // A is label. 
   goto A:
   
   A:
   
   // A label may be used by several gotos.
   goto A:
   
   ?>

Specs
^^^^^
+-------------+----------------+
| Short name  | Php/Labelnames |
+-------------+----------------+
| Rulesets    | :ref:`CE`      |
+-------------+----------------+
| Exakt since | 0.8.4          |
+-------------+----------------+
| Php Version | All            |
+-------------+----------------+
| Severity    | Minor          |
+-------------+----------------+
| Time To Fix | Slow (1 hour)  |
+-------------+----------------+
| Precision   | High           |
+-------------+----------------+


.. _logical-operators-favorite:

Logical Operators Favorite
++++++++++++++++++++++++++

 PHP has two sets of logical operators : letters (and, or, xor) and chars (&&, ||, ^). 

The analyzed code has less than 10% of one of the two sets : for consistency reasons, it is recommended to make them all the same. 

Warning : the two sets of operators have different precedence levels. Using and or && is not exactly the same, especially and not only, when assigning the results to a variable. 

.. code-block:: php

   <?php 
   
   $a1 = $b and $c;
   $a1 = $b and $c;
   $a1 = $b and $c;
   $a1 = $b or $c;
   $a1 = $b OR $c;
   $a1 = $b and $c;
   $a1 = $b and $c;
   $a1 = $b and $c;
   $a1 = $b or $c;
   $a1 = $b OR $c;
   $a1 = $b ^ $c;
   
   ?>


Using and or && are also the target of other analysis.

See also `Logical Operators <https://www.php.net/manual/en/language.operators.logical.php>`_ and `Operators Precedence <https://www.php.net/manual/en/language.operators.precedence.php>`_.


Suggestions
^^^^^^^^^^^

* Pick a favorite, and enforce it

Specs
^^^^^
+-------------+--------------------------------+
| Short name  | Php/LetterCharsLogicalFavorite |
+-------------+--------------------------------+
| Rulesets    | :ref:`Top10`                   |
+-------------+--------------------------------+
| Exakt since | 0.12.4                         |
+-------------+--------------------------------+
| Php Version | All                            |
+-------------+--------------------------------+
| Severity    | Minor                          |
+-------------+--------------------------------+
| Time To Fix | Slow (1 hour)                  |
+-------------+--------------------------------+
| Precision   | High                           |
+-------------+--------------------------------+


.. _list-short-syntax:

List Short Syntax
+++++++++++++++++

 Usage of short syntax version of `list() <https://www.php.net/list>`_.

.. code-block:: php

   <?php
   
   // PHP 7.1 short list syntax
   // PHP 7.1 may also use key => value structures with list
   [$a, $b, $c] = ['2', 3, '4'];
   
   // PHP 7.0 list syntax
   list($a, $b, $c) = ['2', 3, '4'];
   
   ?>

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/ListShortSyntax                                                                                                                              |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70` |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                                                            |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | 7.1+                                                                                                                                             |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                                                            |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                                                  |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                             |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+


.. _list-with-appends:

List With Appends
+++++++++++++++++

 `List() <https://www.php.net/list>`_ behavior has changed in PHP 7.0 and it has impact on the indexing when list is used with the [] operator. 

.. code-block:: php

   <?php
   
   $x = array();
   list($x[], $x[], $x[]) = [1, 2, 3];
   
   print_r($x);
   
   ?>


In PHP 7.0, results are :::

   
   Array
   (
       [0] => 1
       [1] => 2
       [2] => 3
   )
   


In PHP 5.6, results are :::

   
   Array
   (
       [0] => 3
       [1] => 2
       [2] => 1
   )
   




Suggestions
^^^^^^^^^^^

* Refactor code to avoid using append in a list() call

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Php/ListWithAppends       |
+-------------+---------------------------+
| Rulesets    | :ref:`CompatibilityPHP70` |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _list-with-keys:

List With Keys
++++++++++++++

 Setting keys when using `list() <https://www.php.net/list>`_ is a PHP 7.1 feature.

.. code-block:: php

   <?php
   
   // PHP 7.1 and later only
   list('a' => $a, 'b' => $b) = ['b' => 1, 'c' => 2, 'a' => 3];
   
   ?>

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/ListWithKeys                                                                                                                                 |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70` |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                                                            |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | 7.1+                                                                                                                                             |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                                                            |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                                                  |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                             |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+


.. _list-with-reference:

List With Reference
+++++++++++++++++++

 Support for references in list calls is not backward compatible with older versions of PHP. The support was introduced in PHP 7.3.

.. code-block:: php

   <?php
   
   $array = [1,2,3];
   
   [$c, &$d, $e] = $a;
   
   $d++; 
   $c++;
   print_r($array);
   /*
   displays
   Array
   (
       [0] => 1  // Not a reference to $c, unchanged
       [1] => 3  // Reference from $d
       [2] => 3
   )
   */
   ?>


See also `list() Reference Assignment <https://wiki.php.net/rfc/list_reference_assignment>`_.



Suggestions
^^^^^^^^^^^

* Avoid using references in list for backward compatibility

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/ListWithReference                                                                                                                                                                       |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70`, :ref:`CompatibilityPHP71`, :ref:`CompatibilityPHP72` |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.1.6                                                                                                                                                                                       |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | 7.3+                                                                                                                                                                                        |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                                                                                                       |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                                                                                                               |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                                                                        |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. _logical-should-use-symbolic-operators:

Logical Should Use Symbolic Operators
+++++++++++++++++++++++++++++++++++++

 Logical operators come in two flavors :  and / &&, || / or, ^ / xor. However, they are not exchangeable, as && and and have different precedence. 

.. code-block:: php

   <?php
   
   // Avoid lettered operator, as they have lower priority than expected
   $a = $b and $c;
   // $a === 3 because equivalent to ($a = $b) and $c;
   
   // safe way to write the above : 
   $a = ($b and $c);
   
   $a = $b && $c;
   // $a === 1
   
   ?>


It is recommended to use the symbol operators, rather than the letter ones.

See also `Logical Operators <https://www.php.net/manual/en/language.operators.logical.php>`_.



Suggestions
^^^^^^^^^^^

* Change the letter operators to the symbol one : and => &&, or => ||, xor => ^. Review the new expressions as processing order may have changed.
* Add parenthesis to make sure that the order is the expected one

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------+
| Short name  | Php/LogicalInLetters                                                                                 |
+-------------+------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Suggestions`, :ref:`Top10`, :ref:`php-cs-fixable` |
+-------------+------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                |
+-------------+------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                  |
+-------------+------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                |
+-------------+------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                     |
+-------------+------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                 |
+-------------+------------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-letter-logical <https://github.com/dseguy/clearPHP/tree/master/rules/no-letter-logical.md>`__    |
+-------------+------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-cleverstyle-php-logicalinletters`, :ref:`case-openconf-php-logicalinletters`              |
+-------------+------------------------------------------------------------------------------------------------------+


.. _methodcall-on-new:

Methodcall On New
+++++++++++++++++

 It is possible to call a method right at object instantiation. 

This syntax was added in PHP 5.4+. Before, this was not possible : the object had to be stored in a variable first.

.. code-block:: php

   <?php
   
   // Data is collected
   $data = data_source();
   
   // Data is saved, but won't be reused from this databaseRow object. It may be ignored.
   $result = (new databaseRow($data))->save();
   
   // The actual result of the save() is collected and tested.
   if ($result !== true) {
       processSaveError($data);
   }
   
   ?>


This syntax is interesting when the object is not reused, and may be discarded

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Php/MethodCallOnNew       |
+-------------+---------------------------+
| Rulesets    | :ref:`CompatibilityPHP53` |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | 5.4+                      |
+-------------+---------------------------+
| Severity    | Major                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _php-bugfixes:

PHP Bugfixes
++++++++++++

 This is the list of features, used in the code, that also received a bug fix in recent PHP versions.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Php/MiddleVersion |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _missing-\_\_isset()-method:

Missing __isset() Method
++++++++++++++++++++++++

 When using `empty() <https://www.php.net/empty>`_ on magic properties, the magic method `__isset() <https://www.php.net/manual/en/language.oop5.magic.php>`_ must be implemented.

.. code-block:: php

   <?php
   
   class foo {
       function __get($name) { return 'foo'; }
       // No __isset method
   }
   
   // Return TRUE, until __isset() exists
   var_dump(
      empty((new foo)->bar);
   );
   
   ?>


See also `When empty is not empty <https://freek.dev/1057-when-empty-is-not-empty>`_.



Suggestions
^^^^^^^^^^^

* Implement __isset() method when using empty on magic properties

Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Php/MissingMagicIsset              |
+-------------+------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`ClassReview` |
+-------------+------------------------------------+
| Exakt since | 2.2.0                              |
+-------------+------------------------------------+
| Php Version | All                                |
+-------------+------------------------------------+
| Severity    | Minor                              |
+-------------+------------------------------------+
| Time To Fix | Quick (30 mins)                    |
+-------------+------------------------------------+
| Precision   | Medium                             |
+-------------+------------------------------------+


.. _possible-missing-subpattern:

Possible Missing Subpattern
+++++++++++++++++++++++++++

 When capturing subpatterns are the last ones in a regex, PHP doesn't fill their spot in the resulting array. This leads to a possible missing index in the result array.

.. code-block:: php

   <?php
   
   // displays a partial array, from 0 to 1
   preg_match('/(a)(b)?/', 'adc', $r);
   print_r($r);
   /*
   Array
   (
       [0] => a
       [1] => a
   )
   */
   
   // displays a full array, from 0 to 2
   preg_match('/(a)(b)?/', 'abc', $r);
   print_r($r);
   
   /*
   Array
   (
       [0] => ab
       [1] => a
       [2] => b
   )
   */
   
   // double 'b' when it is found
   print preg_replace(',^a(b)?,', './\$1\$1', 'abc'); // prints ./abbc
   print preg_replace(',^a(b)?,', './\$1\$1', 'adc'); // prints ./dc
   
   ?>

?>

The same applies to `preg_replace() <https://www.php.net/preg_replace>`_ : the pattern may match the string, but no value is available is the corresponding sub-pattern.

In PHP 7.4, a new option was added : `PREG_UNMATCHED_AS_NULL <https://www.php.net/PREG_UNMATCHED_AS_NULL>`_, which always provides a value for the subpatterns.

See also `Bug #50887 preg_match , last optional sub-patterns ignored when empty <https://bugs.php.net/bug.php?id=50887>`_ and `Bug #73948 Preg_match_all should return NULLs on trailing optional capture groups. <https://bugs.php.net/bug.php?id=73948>`_.


Suggestions
^^^^^^^^^^^

* Add an always capturing subpatterns after the last ?
* Move the ? inside the parenthesis, so the parenthesis is always on, but the content may be empty
* Add a test on the last index of the resulting array, to ensure it is available when needed
* Use the PREG_UNMATCHED_AS_NULL option (PHP 7.4+)

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------+
| Short name  | Php/MissingSubpattern                                                                |
+-------------+--------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Top10`                            |
+-------------+--------------------------------------------------------------------------------------+
| Exakt since | 1.6.1                                                                                |
+-------------+--------------------------------------------------------------------------------------+
| Php Version | All                                                                                  |
+-------------+--------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                |
+-------------+--------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                      |
+-------------+--------------------------------------------------------------------------------------+
| Precision   | High                                                                                 |
+-------------+--------------------------------------------------------------------------------------+
| Examples    | :ref:`case-phpmyadmin-php-missingsubpattern`, :ref:`case-spip-php-missingsubpattern` |
+-------------+--------------------------------------------------------------------------------------+


.. _multiple-declaration-of-strict\_types:

Multiple Declaration Of Strict_types
++++++++++++++++++++++++++++++++++++

 At least two declare() commands are declaring `strict_types` in one file. Only one is sufficient, and should be the first expression in the file.

Indeed, any `strict_types` set to 1 will have the final word. Setting `strict_types` to 0 will not revert the configuration, wherever is this call made.

.. code-block:: php

   <?php 
   declare(strict_types=1);
   declare(strict_types=1);
   
   // rest of the code 
   
   ?>


See also `Declare <https://www.php.net/manual/en/control-structures.declare.php>`_.


Suggestions
^^^^^^^^^^^

* Just remove all but one of them.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Php/MultipleDeclareStrict |
+-------------+---------------------------+
| Rulesets    | :ref:`Analyze`            |
+-------------+---------------------------+
| Exakt since | 2.1.8                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | Very high                 |
+-------------+---------------------------+


.. _must-call-parent-constructor:

Must Call Parent Constructor
++++++++++++++++++++++++++++

 Some PHP native classes require a call to `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_\:\:`__construct() <https://www.php.net/manual/en/language.oop5.decon.php>`_ to be stable. 

As of PHP 7.3, two classes currently need that call : `SplTempFileObject <https://www.php.net/SplTempFileObject>`_ and `SplFileObject <https://www.php.net/SplFileObject>`_.

The error is only emitted if the class is instantiated, and a `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ class is called. 

.. code-block:: php

   <?php
   
   class mySplFileObject extends \SplFileObject {
       public function __construct()    { 
           // Forgottent call to parent::__construct()
       }
   }
   
   (new mySplFileObject())->passthru();
   ?>


See also `Why, php? WHY??? <https://gist.github.com/everzet/4215537>`_.



Suggestions
^^^^^^^^^^^

* Add a call to the parent's constructor
* Remove the extension of the parent class

Specs
^^^^^
+-------------+-------------------------------+
| Short name  | Php/MustCallParentConstructor |
+-------------+-------------------------------+
| Rulesets    | :ref:`Analyze`                |
+-------------+-------------------------------+
| Exakt since | 1.4.1                         |
+-------------+-------------------------------+
| Php Version | All                           |
+-------------+-------------------------------+
| Severity    | Major                         |
+-------------+-------------------------------+
| Time To Fix | Quick (30 mins)               |
+-------------+-------------------------------+
| Precision   | High                          |
+-------------+-------------------------------+


.. _nested-ternary-without-parenthesis:

Nested Ternary Without Parenthesis
++++++++++++++++++++++++++++++++++

 It is not allowed to nest ternary operator within itself, without parenthesis. This has been implemented in PHP 7.4.

The reason behind this feature is to keep the code expressive. See the Warning message for more explanations

.. code-block:: php

   <?php
   
   $a ? 1 : ($b ? 2 : 3);
   
   // Still valid, as not ambiguous 
   $a ? $b ? 1 : 2 : 3;
   
   // Produces a warning
   //Unparenthesized `a ? b : c ? d : e` is deprecated. Use either `(a ? b : c) ? d : e` or `a ? b : (c ? d : e)`
   $a ? 1 : $b ? 2 : 3;
   
   ?>


See also `PHP RFC: Deprecate left-associative ternary operator <https://wiki.php.net/rfc/ternary_associativity>`_.



Suggestions
^^^^^^^^^^^

* Add parenthesis to nested ternary calls

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Php/NestedTernaryWithoutParenthesis  |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP74` |
+-------------+--------------------------------------+
| Exakt since | 1.9.4                                |
+-------------+--------------------------------------+
| Php Version | 7.4-                                 |
+-------------+--------------------------------------+
| Severity    | Minor                                |
+-------------+--------------------------------------+
| Time To Fix | Quick (30 mins)                      |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _**-for-exponent:

** For Exponent
+++++++++++++++

 The operator ``**`` calculates exponents, also known as power. 

Use it instead of the slower function `pow() <https://www.php.net/pow>`_. This operator was introduced in PHP 5.6.

.. code-block:: php

   <?php
       $cube = pow(2, 3); // 8
   
       $cubeInPHP56 = 2 ** 3; // 8
   ?>


Be aware the the '-' operator has lower priority than the `** <https://www.php.net/manual/en/language.operators.arithmetic.php>`_ operator : this leads to the following confusing result.

.. code-block:: php

   <?php
       echo -3 ** 2;
       // displays -9, instead of 9
   ?>


This is due to the parser that processes separately ``-`` and the following number. Since ``**`` has priority, the power operation happens first.

Being an operator, ``**`` is faster than `pow() <https://www.php.net/pow>`_. This is a microoptimisation. 

See also `Arithmetic Operators <https://www.php.net/manual/en/language.operators.arithmetic.php>`_.


Suggestions
^^^^^^^^^^^

* Use the ``**`` operator
* For powers of 2, use the bitshift operators
* For literal powers of 2, consider using the ``0xFFFFFFFFF`` syntax.

Specs
^^^^^
+-------------+------------------------------------------------------------------------+
| Short name  | Php/NewExponent                                                        |
+-------------+------------------------------------------------------------------------+
| Rulesets    | :ref:`Suggestions`, :ref:`php-cs-fixable`                              |
+-------------+------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                  |
+-------------+------------------------------------------------------------------------+
| Php Version | 5.6+                                                                   |
+-------------+------------------------------------------------------------------------+
| Severity    | Minor                                                                  |
+-------------+------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                        |
+-------------+------------------------------------------------------------------------+
| Precision   | Very high                                                              |
+-------------+------------------------------------------------------------------------+
| Examples    | :ref:`case-traq-php-newexponent`, :ref:`case-teampass-php-newexponent` |
+-------------+------------------------------------------------------------------------+


.. _no-class-in-global:

No Class In Global
++++++++++++++++++

 Avoid defining structures in Global namespace. Always prefer using a namespace. This will come handy later, either when publishing the code, or when importing a library, or even if PHP reclaims that name. 

.. code-block:: php

   <?php
   
   // Code prepared for later
   namespace Foo {
       class Bar {}
   }
   
   // Code that may conflict with other names.
   namespace {
       class Bar {}
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Use a specific namespace for your classes

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Php/NoClassInGlobal                         |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.10.9                                      |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Slow (1 hour)                               |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+
| Examples    | :ref:`case-dolphin-php-noclassinglobal`     |
+-------------+---------------------------------------------+


.. _no-list-with-string:

No List With String
+++++++++++++++++++

 `list() <https://www.php.net/list>`_ can't be used anymore to access particular offset in a string. This should be done with `substr() <https://www.php.net/substr>`_ or $string[$offset] syntax.

.. code-block:: php

   <?php
   
   $x = 'abc';
   list($a, $b, $c) = $x;
   
   //list($a, $b, $c) = 'abc'; Never works
   
   print $c;
   // PHP 5.6- displays 'c'
   // PHP 7.0+ displays nothing
   
   ?>


See also `PHP 7.0 Backward incompatible changes <https://www.php.net/manual/en/migration70.incompatible.php>`_ : `list() <https://www.php.net/list>`_ can no longer unpack string variables .



Suggestions
^^^^^^^^^^^

* Use str_split() to break a string into bytes
* Use substr() or $string[$offset] syntax to access specific bytes in the string

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------+
| Short name  | Php/NoListWithString                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56` |
+-------------+------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Php Version | 7.0-                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                           |
+-------------+------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+


.. _no-more-curly-arrays:

No More Curly Arrays
++++++++++++++++++++

 Only use square brackets to access array elements. The usage of curly brackets for array access is deprecated since PHP 7.4.

.. code-block:: php

   <?php
   
   $array = [1,2,3];
   
   // always valid
   echo $array[1];
   
   // deprecated in PHP 7.4
   echo $array{1};
   
   ?>


See also `Deprecate curly brace syntax <https://derickrethans.nl/phpinternalsnews-19.html>`_ and `Deprecate curly brace syntax for accessing array elements and string offsets <https://wiki.php.net/rfc/deprecate_curly_braces_array_access>`_.


Suggestions
^^^^^^^^^^^

* Always use square brackets to access particular index in an array

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Php/NoMoreCurlyArrays                |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP74` |
+-------------+--------------------------------------+
| Exakt since | 1.9.2                                |
+-------------+--------------------------------------+
| Php Version | 8.0-                                 |
+-------------+--------------------------------------+
| Severity    | Minor                                |
+-------------+--------------------------------------+
| Time To Fix | Quick (30 mins)                      |
+-------------+--------------------------------------+
| Precision   | Very high                            |
+-------------+--------------------------------------+


.. _no-reference-for-static-property:

No Reference For Static Property
++++++++++++++++++++++++++++++++

 `Static <https://www.php.net/manual/en/language.oop5.static.php>`_ properties used to behave independently when set to a reference value. This was fixed in PHP 7.3. 

According to the PHP 7.3 changelog : ``In PHP, `static <https://www.php.net/manual/en/language.oop5.static.php>`_ properties are shared between inheriting classes, unless the `static <https://www.php.net/manual/en/language.oop5.static.php>`_ property is explicitly overridden in a child class. However, due to an implementation artifact it was possible to separate the `static <https://www.php.net/manual/en/language.oop5.static.php>`_ properties by assigning a reference. This loophole has been fixed.``.

.. code-block:: php

   <?php
   
           class Test {
               public static $x = 0;
           }
           class Test2 extends Test { }
   
           Test2::$x = &$x;
           $x = 1;
   
           var_dump(Test::$x, Test2::$x);
           // Previously: int(0), int(1)
           // Now: int(1), int(1)
   
   ?>


See also `PHP 7.3 UPGRADE NOTES <https://github.com/php/php-src/blob/3b6e1ee4ee05678b5d717cd926a35ffdc1335929/UPGRADING#L66-L81>`_.

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/NoReferenceForStaticProperty                                                                                                                                                            |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70`, :ref:`CompatibilityPHP71`, :ref:`CompatibilityPHP72` |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.4.9                                                                                                                                                                                       |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | 7.3-                                                                                                                                                                                        |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                                                                                                       |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                                                                                                               |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                                                                        |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. _no-reference-for-ternary:

No Reference For Ternary
++++++++++++++++++++++++

 The ternary operator and the null coalescing operator are both expressions that only return values, and not a variable. 

This means that any provided reference will be turned into its value. While this is usually invisible, it will raise a warning when a reference is expected. This is the case with methods returning a reference. 

A PHP notice is generated when using a ternary operator or the null coalesce operator : ``Only variable references should be returned by reference``. The notice is also emitted when returning objects. 

This applies to methods, functions and closures. 

.. code-block:: php

   <?php
   
   // This works
   function &foo($a, $b) { 
       if ($a === 1) {
           return $b; 
       } else {
           return $a; 
       }
   }
   
   // This raises a warning, as the operator returns a value
   function &foo($a, $b) { return $a === 1 ? $b : $a; }
   
   ?>


See also `Null Coalescing Operator <https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.coalesce>`_, `Ternary Operator <https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary>`_.


Suggestions
^^^^^^^^^^^

* Drop the reference at assignation time
* Drop the reference in the argument definition
* Drop the reference in the function return definition

Specs
^^^^^
+-------------+-------------------------------------------------+
| Short name  | Php/NoReferenceForTernary                       |
+-------------+-------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`     |
+-------------+-------------------------------------------------+
| Exakt since | 1.0.8                                           |
+-------------+-------------------------------------------------+
| Php Version | All                                             |
+-------------+-------------------------------------------------+
| Severity    | Major                                           |
+-------------+-------------------------------------------------+
| Time To Fix | Slow (1 hour)                                   |
+-------------+-------------------------------------------------+
| Precision   | High                                            |
+-------------+-------------------------------------------------+
| Examples    | :ref:`case-phpadsnew-php-noreferenceforternary` |
+-------------+-------------------------------------------------+


.. _no-return-for-generator:

No Return For Generator
+++++++++++++++++++++++

 Return is not allowed in generator. In PHP versions older than 5.6 and older, they yield a fatal Error.

.. code-block:: php

   <?php
   
   function generatorWithReturn() {
       yield 1;
       return 2;
   }
   
   ?>


See also `Generators overview <https://www.php.net/manual/en/language.generators.overview.php>`_.

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------+
| Short name  | Php/NoReturnForGenerator                                                                                   |
+-------------+------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56` |
+-------------+------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.4.9                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Php Version | 7.0+                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+
| Severity    | Critical                                                                                                   |
+-------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                            |
+-------------+------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+


.. _no-string-with-append:

No String With Append
+++++++++++++++++++++

 PHP 7 doesn't allow the usage of [] with strings. [] is an array-only operator.

.. code-block:: php

   <?php
   
   $string = 'abc';
   
   // Not possible in PHP 7
   $string[] = 'd';
   
   ?>


This was possible in PHP 5, but is now forbidden in PHP 7.



Suggestions
^^^^^^^^^^^

* Use the concatenation operator ``.`` to append strings.
* Use the concatenation short assignement ``.=`` to append strings.

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------+
| Short name  | Php/NoStringWithAppend                                                                                     |
+-------------+------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56` |
+-------------+------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Php Version | 7.0+                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                            |
+-------------+------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+


.. _no-substr-minus-one:

No Substr Minus One
+++++++++++++++++++

 Negative index were introduced in PHP 7.1. This syntax is not compatible with PHP 7.0 and older.

.. code-block:: php

   <?php
   $string = 'abc';
   
   echo $string[-1]; // c
   
   echo $string[1]; // a
   
   ?>


See also `Generalize support of negative string offsets <https://wiki.php.net/rfc/negative-string-offsets>`_.


Suggestions
^^^^^^^^^^^

* Use the -1 index in a string, instead of a call to substr()

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/NoSubstrMinusOne                                                                                                                  |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70` |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.12.5                                                                                                                                |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | 7.1+                                                                                                                                  |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                                                 |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                                       |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                  |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+


.. _not-a-scalar-type:

Not A Scalar Type
+++++++++++++++++

 ``int`` is the actual PHP scalar type, not ``integer``. 

PHP 7 introduced several scalar types, in particular ``int``, ``bool`` and ``float``. Those three types are easily mistaken with ``integer``, ``boolean``, ``real`` and ``double``. 

Unless those classes actually exists, PHP emits some strange error messages.

.. code-block:: php

   <?php
   
   // This expects a scalar of type 'integer'
   function foo(int $i) {}
   
   // This expects a object of class 'integer'
   function abr(integer $i) {}
   
   ?>


Thanks to ``Benoit Viguier`` for the `original idea <https://twitter.com/b_viguier/status/940173951908700161>`__ for this analysis.

See also `Type declarations <https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration>`_.


Suggestions
^^^^^^^^^^^

* Do not use ``int`` as a class name, an interface name or a trait name.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Php/NotScalarType |
+-------------+-------------------+
| Rulesets    | :ref:`Typechecks` |
+-------------+-------------------+
| Exakt since | 1.0.7             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Major             |
+-------------+-------------------+
| Time To Fix | Instant (5 mins)  |
+-------------+-------------------+
| Precision   | Very high         |
+-------------+-------------------+


.. _old-style-\_\_autoload():

Old Style __autoload()
++++++++++++++++++++++

 Avoid __autoload(), only use spl_register_autoload().

__autoload() is deprecated since PHP 7.2 and possibly removed in later versions. spl_register_autoload() was introduced in PHP 5.1.0.

__autoload() may only be declared once, and cannot be modified later. This creates potential conflicts between libraries that try to set up their own autoloading schema. 

On the other hand, spl_register_autoload() allows registering and de-registering multiple autoloading functions or methods. 

.. code-block:: php

   <?php
   
   // Modern autoloading.
   function myAutoload($class){}
   spl_register_autoload('myAutoload');
   
   // Old style autoloading.
   function __autoload($class){}
   
   ?>


Do not use the old __autoload() function, but rather the new spl_register_autoload() function. 

See also `Autoloading Classe <https://www.php.net/manual/en/language.oop5.autoload.php>`_.


Suggestions
^^^^^^^^^^^

* Move to spl_register_autoload()
* Remove usage of the old __autoload() function
* Modernize usage of old libraries

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------+
| Short name  | Php/oldAutoloadUsage                                                                                |
+-------------+-----------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                      |
+-------------+-----------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                               |
+-------------+-----------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                 |
+-------------+-----------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                               |
+-------------+-----------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                    |
+-------------+-----------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                |
+-------------+-----------------------------------------------------------------------------------------------------+
| ClearPHP    | `use-smart-autoload <https://github.com/dseguy/clearPHP/tree/master/rules/use-smart-autoload.md>`__ |
+-------------+-----------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-piwigo-php-oldautoloadusage`                                                             |
+-------------+-----------------------------------------------------------------------------------------------------+


.. _only-container-for-reference:

Only Container For Reference
++++++++++++++++++++++++++++

 When a PHP function requires an argument to be a reference, it cannot be called with a literal value.

The call must be made with a variable, or any assimilated data container : array, property or `static <https://www.php.net/manual/en/language.oop5.static.php>`_ property. 

.. code-block:: php

   <?php
   
   // This is not possible
   preg_match('/a/', $string, []);
   
   // This is working
   preg_match('/a/', $string, $r);
   
   ?>


See also `Passing arguments by reference <https://www.php.net/manual/en/functions.arguments.php#functions.arguments.by-reference>`_.


Suggestions
^^^^^^^^^^^

* Put the literal value in a variable before calling the function.
* Omit the arguments, when it won't be used.

Specs
^^^^^
+-------------+----------------------------------------+
| Short name  | Php/OnlyVariableForReference           |
+-------------+----------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`LintButWontExec` |
+-------------+----------------------------------------+
| Exakt since | 2.2.0                                  |
+-------------+----------------------------------------+
| Php Version | All                                    |
+-------------+----------------------------------------+
| Severity    | Critical                               |
+-------------+----------------------------------------+
| Time To Fix | Quick (30 mins)                        |
+-------------+----------------------------------------+
| Precision   | Medium                                 |
+-------------+----------------------------------------+


.. _php-overridden-function:

PHP Overridden Function
+++++++++++++++++++++++

 It is possible to declare and use PHP native function in a namespace. 

Within the declaration namespace, it is easy to confuse the local version and the global version, unless the function has been prefixed with ``\``.

.. code-block:: php

   <?php
   
   namespace A {
       use function A\dirname as split;
       
       function dirname($a, $b) { return __FUNCTION__; }
       
       echo dirname('/a/b/c');
       echo split('a', 'b');
       
       echo \dirname('/a/b/c');
   }
   
   ?>


When a piece of code use overridden function, any newcomer may be confused by the usage of classic PHP native function in surprising situations. 

It is recommended to avoid redeclare PHP native function in namespaces.



Suggestions
^^^^^^^^^^^

* Change the name of the function, in its declaration and usage.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Php/OveriddenFunction |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 1.7.6                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Quick (30 mins)       |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _parenthesis-as-parameter:

Parenthesis As Parameter
++++++++++++++++++++++++

 Using parenthesis around parameters used to silent some internal check. This is not the case anymore in PHP 7, and should be fixed by removing the parenthesis and making the value a real reference.

.. code-block:: php

   <?php
   
   // PHP 7 sees through parenthesis
   $d = foo(1, 2, $c);
   
   // Avoid parenthesis in arguments
   $d = foo(1, 2, ($c));
   
   ?>



Suggestions
^^^^^^^^^^^

* Remove the parenthesis when they are only encapsulating an argument

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------+
| Short name  | Php/ParenthesisAsParameter                                                                                 |
+-------------+------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56` |
+-------------+------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                        |
+-------------+------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                            |
+-------------+------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+


.. _use-password\_hash():

Use password_hash()
+++++++++++++++++++

 `password_hash() <https://www.php.net/password_hash>`_ and password_check() are a better choice to replace the use of `crypt() <https://www.php.net/crypt>`_ to check password.

PHP 5.5 introduced these functions.

.. code-block:: php

   <?php
   
   $password = 'rasmuslerdorf';
   $hash = '\$2y\$10$YCFsG6elYca568hBi2pZ0.3LDL5wjgxct1N8w/oLR/jfHsiQwCqTS';
   
   // The cost parameter can change over time as hardware improves
   $options = array('cost' => 11);
   
   // Verify stored hash against plain-text password
   if (password_verify($password, $hash)) {
       // Check if a newer hashing algorithm is available
       // or the cost has changed
       if (password_needs_rehash($hash, PASSWORD_DEFAULT, $options)) {
           // If so, create a new hash, and replace the old one
           $newHash = password_hash($password, PASSWORD_DEFAULT, $options);
       }
   
       // Log user in
   }
   ?>


See also `Password hashing <https://www.php.net/manual/en/book.password.php>`_.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Php/Password55            |
+-------------+---------------------------+
| Rulesets    | :ref:`CompatibilityPHP55` |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | 5.5+                      |
+-------------+---------------------------+
| Severity    | Major                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _pathinfo()-returns-may-vary:

Pathinfo() Returns May Vary
+++++++++++++++++++++++++++

 `pathinfo() <https://www.php.net/pathinfo>`_ function returns an array whose content may vary. It is recommended to collect the values after check, rather than directly.

.. code-block:: php

   <?php
   
   $file = '/a/b/.c';
   //$extension may be missing, leading to empty $filename and filename in $extension
   list( $dirname, $basename, $extension, $filename ) = array_values( pathinfo($file) );
   
   //Use PHP 7.1 list() syntax to assign correctly the values, and skip array_values()
   //This emits a warning in case of missing index
   ['dirname'   => $dirname, 
    'basename'  => $basename, 
    'extension' => $extension, 
    'filename'  => $filename ] = pathinfo($file);
    
   //This works without warning
   $details = pathinfo($file);
   $dirname   = $details['dirname'] ?? getpwd();
   $basename  = $details['basename'] ?? '';
   $extension = $details['extension'] ?? '';
   $filename  = $details['filename'] ?? '';
   
   ?>


The same applies to `parse_url() <https://www.php.net/parse_url>`_, which returns an array with various index. 



Suggestions
^^^^^^^^^^^

* Add a check on the return value of pathinfo() before using it.

Specs
^^^^^
+-------------+-------------------------------------------+
| Short name  | Php/PathinfoReturns                       |
+-------------+-------------------------------------------+
| Rulesets    | :ref:`Analyze`                            |
+-------------+-------------------------------------------+
| Exakt since | 0.12.11                                   |
+-------------+-------------------------------------------+
| Php Version | All                                       |
+-------------+-------------------------------------------+
| Severity    | Minor                                     |
+-------------+-------------------------------------------+
| Time To Fix | Quick (30 mins)                           |
+-------------+-------------------------------------------+
| Precision   | High                                      |
+-------------+-------------------------------------------+
| Examples    | :ref:`case-nextcloud-php-pathinforeturns` |
+-------------+-------------------------------------------+


.. _pear-usage:

Pear Usage
++++++++++

 Pear Usage : list of Pear packages in use. 

.. code-block:: php

   <?php
       require_once('MDB2.php');
       $dsn = 'mysql://user:pass@host';
       $mdb2 = &MDB2::factory($dsn);
       $mdb2->setFetchMode(MDB2_FETCHMODE_ASSOC);
   ?>


See also `PEAR <http://pear.php.net/>`_.

Specs
^^^^^
+-------------+---------------+
| Short name  | Php/PearUsage |
+-------------+---------------+
| Rulesets    | :ref:`CE`     |
+-------------+---------------+
| Exakt since | 0.8.4         |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _new-functions-in-php-5.4:

New Functions In PHP 5.4
++++++++++++++++++++++++

 PHP introduced new functions in PHP 5.4. If there are defined functions with such names, there will be a conflict when upgrading. It is advised to change those functions' name.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Php/Php54NewFunctions     |
+-------------+---------------------------+
| Rulesets    | :ref:`CompatibilityPHP53` |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Major                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _functions-removed-in-php-5.4:

Functions Removed In PHP 5.4
++++++++++++++++++++++++++++

 Those functions were removed in PHP 5.4.

.. code-block:: php

   <?php
   
   // Deprecated as of PHP 5.4.0
   $link = mysql_connect('localhost', 'mysql_user', 'mysql_password');
   $db_list = mysql_list_dbs($link);
   
   while ($row = mysql_fetch_object($db_list)) {
        echo $row->Database . "\n";
   }
   
   ?>


See also `Deprecated features in PHP 5.4.x <https://www.php.net/manual/en/migration54.deprecated.php>`_.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Php/Php54RemovedFunctions |
+-------------+---------------------------+
| Rulesets    | :ref:`CompatibilityPHP54` |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Major                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _new-functions-in-php-5.5:

New Functions In PHP 5.5
++++++++++++++++++++++++

 PHP introduced new functions in PHP 5.5. If you have already defined functions with such names, you will get a conflict when trying to upgrade. It is advised to change those functions' name.

Specs
^^^^^
+-------------+------------------------------------------------------+
| Short name  | Php/Php55NewFunctions                                |
+-------------+------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54` |
+-------------+------------------------------------------------------+
| Exakt since | 0.8.4                                                |
+-------------+------------------------------------------------------+
| Php Version | All                                                  |
+-------------+------------------------------------------------------+
| Severity    | Major                                                |
+-------------+------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                        |
+-------------+------------------------------------------------------+
| Precision   | High                                                 |
+-------------+------------------------------------------------------+


.. _functions-removed-in-php-5.5:

Functions Removed In PHP 5.5
++++++++++++++++++++++++++++

 Those functions were removed in PHP 5.5.

+ `php_logo_guid() <https://www.php.net/php_logo_guid>`_
+ `php_egg_logo_guid() <https://www.php.net/php_egg_logo_guid>`_
+ `php_real_logo_guid() <https://www.php.net/php_real_logo_guid>`_
+ `zend_logo_guid() <https://www.php.net/zend_logo_guid>`_
+ `mcrypt_cbc() <https://www.php.net/mcrypt_cbc>`_
+ `mcrypt_cfb() <https://www.php.net/mcrypt_cfb>`_
+ `mcrypt_ecb() <https://www.php.net/mcrypt_ecb>`_
+ `mcrypt_ofb() <https://www.php.net/mcrypt_ofb>`_

.. code-block:: php

   <?php
   
   echo '<img src="' . $_SERVER['PHP_SELF'] .
        '?=' . php_logo_guid() . '" alt="PHP Logo !" />';
   
   ?>


See also `Deprecated features in PHP 5.5.x <https://www.php.net/manual/en/migration55.deprecated.php>`_.



Suggestions
^^^^^^^^^^^

* Stop using those functions

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Php/Php55RemovedFunctions |
+-------------+---------------------------+
| Rulesets    | :ref:`CompatibilityPHP55` |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Major                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _new-functions-in-php-5.6:

New Functions In PHP 5.6
++++++++++++++++++++++++

 PHP introduced new functions in PHP 5.6. If you have already defined functions with such names, you will get a conflict when trying to upgrade. It is advised to change those functions' name.

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------+
| Short name  | Php/Php56NewFunctions                                                           |
+-------------+---------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55` |
+-------------+---------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                           |
+-------------+---------------------------------------------------------------------------------+
| Php Version | All                                                                             |
+-------------+---------------------------------------------------------------------------------+
| Severity    | Major                                                                           |
+-------------+---------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                   |
+-------------+---------------------------------------------------------------------------------+
| Precision   | High                                                                            |
+-------------+---------------------------------------------------------------------------------+


.. _php-7.0-new-classes:

PHP 7.0 New Classes
+++++++++++++++++++

 Those classes are now declared natively in PHP 7.0 and should not be declared in custom code. 

There are 8 new classes : 

* ``Error``
* ``ParseError``
* ``TypeError``
* ``ArithmeticError``
* ``DivisionByZeroError``
* ``ClosedGeneratorException``
* ``ReflectionGenerator``
* ``ReflectionType``
* ``AssertionError``

.. code-block:: php

   <?php
   
   namespace {
       // Global namespace
       class Error {
           // Move to a namespace
           // or, remove this class
       }
   }
   
   namespace B {
       class Error {
           // This is OK : in a namespace
       }
   }
   
   ?>


See also `New Classes and Interfaces <https://www.php.net/manual/en/migration70.classes.php>`_.

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------+
| Short name  | Php/Php70NewClasses                                                                                        |
+-------------+------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56` |
+-------------+------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                        |
+-------------+------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                              |
+-------------+------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+


.. _new-functions-in-php-7.0:

New Functions In PHP 7.0
++++++++++++++++++++++++

 The following functions are now native functions in PHP 7.0. It is advised to change them before moving to this new version.

* get_resources()
* `gc_mem_caches() <https://www.php.net/gc_mem_caches>`_
* `preg_replace_callback_array() <https://www.php.net/preg_replace_callback_array>`_
* posix_setrlimit()
* `random_bytes() <https://www.php.net/random_bytes>`_
* `random_int() <https://www.php.net/random_int>`_
* `intdiv() <https://www.php.net/intdiv>`_
* `error_clear_last() <https://www.php.net/error_clear_last>`_

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------+
| Short name  | Php/Php70NewFunctions                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56` |
+-------------+------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                        |
+-------------+------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                              |
+-------------+------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+


.. _php-7.0-new-interfaces:

PHP 7.0 New Interfaces
++++++++++++++++++++++

 The following interfaces are introduced in PHP 7.0. They shouldn't be defined in custom code.

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------+
| Short name  | Php/Php70NewInterfaces                                                                                     |
+-------------+------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56` |
+-------------+------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                        |
+-------------+------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                              |
+-------------+------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+


.. _php-7.0-removed-directives:

PHP 7.0 Removed Directives
++++++++++++++++++++++++++

 List of directives that are removed in PHP 7.0.

Specs
^^^^^
+-------------+------------------------------------------------------+
| Short name  | Php/Php70RemovedDirective                            |
+-------------+------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP70`, :ref:`CompatibilityPHP71` |
+-------------+------------------------------------------------------+
| Exakt since | 0.8.4                                                |
+-------------+------------------------------------------------------+
| Php Version | All                                                  |
+-------------+------------------------------------------------------+
| Severity    | Major                                                |
+-------------+------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                        |
+-------------+------------------------------------------------------+
| Precision   | High                                                 |
+-------------+------------------------------------------------------+


.. _php-7.0-removed-functions:

PHP 7.0 Removed Functions
+++++++++++++++++++++++++

 The following PHP native functions were removed in PHP 7.0.

* `ereg() <https://www.php.net/ereg>`_
* `ereg_replace() <https://www.php.net/ereg_replace>`_
* `eregi() <https://www.php.net/eregi>`_
* `eregi_replace() <https://www.php.net/eregi_replace>`_
* `split() <https://www.php.net/split>`_
* `spliti() <https://www.php.net/spliti>`_
* `sql_regcase() <https://www.php.net/sql_regcase>`_
* `magic_quotes_runtime() <https://www.php.net/magic_quotes_runtime>`_
* `set_magic_quotes_runtime() <https://www.php.net/set_magic_quotes_runtime>`_
* `call_user_method() <https://www.php.net/call_user_method>`_
* `call_user_method_array() <https://www.php.net/call_user_method_array>`_
* `set_socket_blocking() <https://www.php.net/set_socket_blocking>`_
* `mcrypt_ecb() <https://www.php.net/mcrypt_ecb>`_
* `mcrypt_cbc() <https://www.php.net/mcrypt_cbc>`_
* `mcrypt_cfb() <https://www.php.net/mcrypt_cfb>`_
* `mcrypt_ofb() <https://www.php.net/mcrypt_ofb>`_
* datefmt_set_timezone_id()
* `imagepsbbox() <https://www.php.net/imagepsbbox>`_
* `imagepsencodefont() <https://www.php.net/imagepsencodefont>`_
* `imagepsextendfont() <https://www.php.net/imagepsextendfont>`_
* `imagepsfreefont() <https://www.php.net/imagepsfreefont>`_
* `imagepsloadfont() <https://www.php.net/imagepsloadfont>`_
* `imagepsslantfont() <https://www.php.net/imagepsslantfont>`_
* `imagepstext() <https://www.php.net/imagepstext>`_

This analysis skips redefined PHP functions : when a replacement for a removed PHP function was created, with condition on the PHP version, then its usage is considered valid.

See also `PHP 7.0 Removed Functions <https://www.php.net/manual/en/migration70.incompatible.php#migration70.incompatible.removed-functions>`_.

 

Suggestions
^^^^^^^^^^^

* Replace the old functions with modern functions
* Remove the usage of the old functions
* Create an alternative function by wiring the old name to a new feature

Specs
^^^^^
+-------------+------------------------------------------------------+
| Short name  | Php/Php70RemovedFunctions                            |
+-------------+------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP70`, :ref:`CompatibilityPHP71` |
+-------------+------------------------------------------------------+
| Exakt since | 0.8.4                                                |
+-------------+------------------------------------------------------+
| Php Version | All                                                  |
+-------------+------------------------------------------------------+
| Severity    | Major                                                |
+-------------+------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                        |
+-------------+------------------------------------------------------+
| Precision   | High                                                 |
+-------------+------------------------------------------------------+


.. _php-7.0-scalar-typehints:

PHP 7.0 Scalar Typehints
++++++++++++++++++++++++

 New scalar typehints were introduced : ``bool``, ``int``, ``float``, ``string``.

They cannot be used before PHP 7.0, and will be confused with classes or interfaces.

.. code-block:: php

   <?php
   
   function foo(string $name) {
       print Hello $name;
   }
   
   foo(Damien); 
   // display 'Hello Damien'
   
   foo(33); 
   // displays an error
   
   ?>


See also `Scalar type declarations <https://www.php.net/manual/en/migration70.new-features.php#migration70.new-features.scalar-type-declarations>`_, and `PHP 7 SCALAR TYPE DECLARATIONS <https://tutorials.kode-blog.com/php-7-scalar-type-declarations>`_.

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------+
| Short name  | Php/PHP70scalartypehints                                                                                   |
+-------------+------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56` |
+-------------+------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.3.5                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Php Version | 7.0+                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+
| Severity    | Critical                                                                                                   |
+-------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                            |
+-------------+------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+


.. _php-7.1-microseconds:

PHP 7.1 Microseconds
++++++++++++++++++++

 PHP supports microseconds in ``DateTime`` class and `date_create() <https://www.php.net/date_create>`_ function. This was introduced in PHP 7.1.

In previous PHP versions, those dates only used seconds, leading to lazy comparisons : 

.. code-block:: php

   <?php
   
   $now = date_create();
   usleep(10);              // wait for 0.001 ms
   var_dump($now == date_create());
   
   ?>


This code displays true in PHP 7.0 and older, (unless the code was run too close from the next second). In PHP 7.1, this is always false.

This is also true with ``DateTime`` : 

.. code-block:: php

   <?php
   
   $now = new DateTime();
   usleep(10);              // wait for 0.001 ms
   var_dump((new DateTime())->format('u') == $now->format('u'));
   
   ?>


This evolution impacts mostly exact comparisons (== and ===). Non-equality (!= and !==) will probably be always true, and should be reviewed.

See also `Backward incompatible changes <https://www.php.net/manual/en/migration71.incompatible.php>`_.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Php/Php71microseconds     |
+-------------+---------------------------+
| Rulesets    | :ref:`CompatibilityPHP71` |
+-------------+---------------------------+
| Exakt since | 0.8.9                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Major                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _php-7.1-new-class:

Php 7.1 New Class
+++++++++++++++++

 New classes, introduced in PHP 7.1. If classes where created with the same name, in current code, they have to be moved in a namespace, or removed from code to migrate safely to PHP 7.1.

The new class is : ReflectionClassConstant. The other class is 'Void' : this is forbidden as a class name, as Void is used for return type hint.

.. code-block:: php

   <?php
   
   class ReflectionClassConstant {
       // Move to a namespace, do not leave in global
       // or, remove this class
   }
   
   ?>

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/Php71NewClasses                                                                                                                   |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70` |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                                                 |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                                                   |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                                                 |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                                                         |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                  |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+


.. _new-functions-in-php-7.1:

New Functions In PHP 7.1
++++++++++++++++++++++++

 The following functions are now native functions in PHP 7.1. It is advised to change them before moving to this new version.

* `curl_share_strerror() <https://www.php.net/curl_share_strerror>`_
* `curl_multi_errno() <https://www.php.net/curl_multi_errno>`_
* `curl_share_errno() <https://www.php.net/curl_share_errno>`_
* `mb_ord() <https://www.php.net/mb_ord>`_
* `mb_chr() <https://www.php.net/mb_chr>`_
* `mb_scrub() <https://www.php.net/mb_scrub>`_
* `is_iterable() <https://www.php.net/is_iterable>`_

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Php/Php71NewFunctions     |
+-------------+---------------------------+
| Rulesets    | :ref:`CompatibilityPHP71` |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Major                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _php-7.1-removed-directives:

PHP 7.1 Removed Directives
++++++++++++++++++++++++++

 List of directives that are removed in PHP 7.1.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Php/Php71RemovedDirective |
+-------------+---------------------------+
| Rulesets    | :ref:`CompatibilityPHP71` |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | 7.1+                      |
+-------------+---------------------------+
| Severity    | Major                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _php-7.1-scalar-typehints:

PHP 7.1 Scalar Typehints
++++++++++++++++++++++++

 A new scalar typehint was introduced : iterable. 

It can't be used before PHP 7.1, and will be confused with classes or interfaces.

.. code-block:: php

   <?php
   
   function foo(iterable $iterable) {
       foreach ($iterable as $value) {
           echo $value.PHP_EOL;
       }
   }
   
   foo(range(1,20)); 
   // works with array
   
   foo(new ArrayIterator([1, 2, 3])); 
   // works with an iterator
   
   foo((function () { yield 1; })() ); 
   // works with a generator 
   
   ?>


See also `iterable pseudo-type <https://www.php.net/manual/en/migration71.new-features.php#migration71.new-features.iterable-pseudo-type>`_, and `The iterable Pseudo-Type <https://knpuniversity.com/screencast/php7/iterable-type>`_.

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/PHP71scalartypehints                                                                                                              |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70` |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.3.5                                                                                                                                 |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | 7.1+                                                                                                                                  |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Critical                                                                                                                              |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                                       |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                  |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+


.. _php-7.2-deprecations:

PHP 7.2 Deprecations
++++++++++++++++++++

 Several functions are deprecated in PHP 7.2. 

* `parse_str() <https://www.php.net/parse_str>`_ with no second argument
* `assert() <https://www.php.net/assert>`_ on strings
* Usage of `gmp_random() <https://www.php.net/gmp_random>`_, `create_function() <https://www.php.net/create_function>`_, `each() <https://www.php.net/each>`_
* Usage of (unset)
* Usage of ``$php_errormsg``
* directive ``mbstring.func_overload`` (not supported yet)

Deprecated functions and extensions are reported in a separate analysis.

See also `Deprecations for PHP 7.2 <https://wiki.php.net/rfc/deprecations_php_7_2>`_.



Suggestions
^^^^^^^^^^^

* Remove the deprecated functions, and replace them with a new feature 
* Use a replacement function to emulate this old behavior

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Php/Php72Deprecation      |
+-------------+---------------------------+
| Rulesets    | :ref:`CompatibilityPHP72` |
+-------------+---------------------------+
| Exakt since | 0.9.9                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Major                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _php-7.2-new-class:

Php 7.2 New Class
+++++++++++++++++

 New classes, introduced in PHP 7.2. If classes where created with the same name, in current code, they have to be moved in a namespace, or removed from code to migrate safely to PHP 7.2.

The new class is : HashContext.

.. code-block:: php

   <?php
   
   namespace {
       // Global namespace
       class HashContext {
           // Move to a namespace
           // or, remove this class
       }
   }
   
   namespace B {
       class HashContext {
           // This is OK : in a namespace
       }
   }
   
   ?>

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/Php72NewClasses                                                                                                                                                                         |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70`, :ref:`CompatibilityPHP71`, :ref:`CompatibilityPHP72` |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.0.4                                                                                                                                                                                       |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                                                                                                         |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                                                                                                       |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                                                                                                               |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                                                                        |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. _new-constants-in-php-7.2:

New Constants In PHP 7.2
++++++++++++++++++++++++

 The following constants are now native in PHP 7.2. It is advised to avoid using such names for constant before moving to this new version.

* ``PHP_OS_FAMILY``
* ``PHP_FLOAT_DIG``
* ``PHP_FLOAT_EPSILON``
* ``PHP_FLOAT_MAX``
* ``PHP_FLOAT_MIN``
* ``SQLITE3_DETERMINISTIC``
* ``CURLSSLOPT_NO_REVOKE``
* ``CURLOPT_DEFAULT_PROTOCOL``
* ``CURLOPT_STREAM_WEIGHT``
* ``CURLMOPT_PUSHFUNCTION``
* ``CURL_PUSH_OK``
* ``CURL_PUSH_DENY``
* ``CURL_HTTP_VERSION_2TLS``
* ``CURLOPT_TFTP_NO_OPTIONS``
* ``CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE``
* ``CURLOPT_CONNECT_TO``
* ``CURLOPT_TCP_FASTOPEN``
* ``DNS_CAA``

See also `New global constants in 7.2 <https://www.php.net/manual/en/migration72.constants.php>`_.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Php/Php72NewConstants     |
+-------------+---------------------------+
| Rulesets    | :ref:`CompatibilityPHP72` |
+-------------+---------------------------+
| Exakt since | 0.10.7                    |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Major                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _new-functions-in-php-7.2:

New Functions In PHP 7.2
++++++++++++++++++++++++

 The following functions are now native functions in PHP 7.2. It is advised to change custom functions that are currently created, and using those names, before moving to this new version.

* `mb_ord() <https://www.php.net/mb_ord>`_
* `mb_chr() <https://www.php.net/mb_chr>`_
* `mb_scrub() <https://www.php.net/mb_scrub>`_
* `stream_isatty() <https://www.php.net/stream_isatty>`_
* `proc_nice() <https://www.php.net/proc_nice>`_ (Windows only)



Suggestions
^^^^^^^^^^^

* Move custom functions with the same name to a new namespace
* Change the name of any custom functions with the same name
* Add a condition to the functions definition to avoid conflict

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Php/Php72NewFunctions     |
+-------------+---------------------------+
| Rulesets    | :ref:`CompatibilityPHP72` |
+-------------+---------------------------+
| Exakt since | 0.10.7                    |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Major                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _php-7.2-object-keyword:

PHP 7.2 Object Keyword
++++++++++++++++++++++

 'object' is a PHP keyword. It can't be used for class, interface or trait name. 

This is the case since PHP 7.2. 

.. code-block:: php

   <?php
   
   // Valid until PHP 7.2
   class object {}
   
   // Altough it is really weird anyway...
   
   ?>


See also `List of Keywords <https://www.php.net/manual/en/reserved.keywords.php>`_.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Php/Php72ObjectKeyword    |
+-------------+---------------------------+
| Rulesets    | :ref:`CompatibilityPHP72` |
+-------------+---------------------------+
| Exakt since | 0.12.4                    |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Major                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _php-7.2-removed-functions:

PHP 7.2 Removed Functions
+++++++++++++++++++++++++

 The following PHP native functions were removed in PHP 7.2.

* `png2wbmp() <https://www.php.net/png2wbmp>`_
* `jpeg2wbmp() <https://www.php.net/jpeg2wbmp>`_
* `create_function() <https://www.php.net/create_function>`_
* `gmp_random() <https://www.php.net/gmp_random>`_
* `each() <https://www.php.net/each>`_

This analysis skips redefined PHP functions : when a replacement for a removed PHP function was created, with condition on the PHP version, then its usage is considered valid.

See also `Deprecated features in PHP 7.2.x <https://www.php.net/manual/en/migration72.deprecated.php>`_.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Php/Php72RemovedFunctions |
+-------------+---------------------------+
| Rulesets    | :ref:`CompatibilityPHP72` |
+-------------+---------------------------+
| Exakt since | 0.9.9                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Major                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _php-7.2-scalar-typehints:

PHP 7.2 Scalar Typehints
++++++++++++++++++++++++

 A new scalar typehint was introduced : object. 

It can't be used before PHP 7.2, and will be confused with classes or interfaces.

.. code-block:: php

   <?php
   
   function test(object $obj) : object
   {
       return new SplQueue();
   }
   
   test(new StdClass());
   
   ?>


See also `New object type <https://www.php.net/manual/en/migration72.new-features.php#migration72.new-features.iterable-pseudo-type>`_, and `PHP 7.2 and Object Typehint <http://blog.tekmi.nl/php-7-2-and-object-typehint/>`_.

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/PHP72scalartypehints                                                                                                                                         |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70`, :ref:`CompatibilityPHP71` |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.3.5                                                                                                                                                            |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | 7.2+                                                                                                                                                             |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Critical                                                                                                                                                         |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                                                                  |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                                             |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. _php-7.3-last-empty-argument:

PHP 7.3 Last Empty Argument
+++++++++++++++++++++++++++

 PHP allows the last element of any functioncall to be empty. The argument is then not send.

This was introduced in PHP 7.3, and is not backward compatible.

The last empty line is easier on the VCS, allowing clearer text diffs. 

.. code-block:: php

   <?php
   
   function foo($a, $b) {
       print_r(func_get_args());
   }
   
   
   foo(1, 
       2, 
       );
   
   foo(1);
   
   
   ?>


See also `Allow a trailing comma in function calls <https://wiki.php.net/rfc/trailing-comma-function-calls>`_ and `Trailing commas <https://www.puppetcookbook.com/posts/trailing-commas.html>`_.

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/PHP73LastEmptyArgument                                                                                                                                                                  |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70`, :ref:`CompatibilityPHP71`, :ref:`CompatibilityPHP72` |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.1.7                                                                                                                                                                                       |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | 7.3+                                                                                                                                                                                        |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Critical                                                                                                                                                                                    |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                                                                                             |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                                                                        |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. _new-functions-in-php-7.3:

New Functions In PHP 7.3
++++++++++++++++++++++++

 New functions are added to new PHP version.

The following functions are now native functions in PHP 7.3. It is compulsory to rename any custom function that was created in older versions. One alternative is to move the function to a custom namespace, and update the ``use`` list at the beginning of the script. 

* `net_get_interfaces <https://www.php.net/net_get_interfaces>`_
* `gmp_binomial <https://www.php.net/gmp_binomial>`_
* `gmp_lcm <https://www.php.net/gmp_lcm>`_
* `gmp_perfect_power <https://www.php.net/gmp_perfect_power>`_
* `gmp_kronecker <https://www.php.net/gmp_kronecker>`_
* `openssl_pkey_derive <https://www.php.net/openssl_pkey_derive>`_
* `is_countable <https://www.php.net/is_countable>`_
* `ldap_exop_refresh <https://www.php.net/ldap_exop_refresh>`_

Note : At the moment of writing, all links to the manual are not working.

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/Php73NewFunctions                                                                                                                                                                                                  |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70`, :ref:`CompatibilityPHP71`, :ref:`CompatibilityPHP72`, :ref:`CompatibilityPHP73` |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.10.7                                                                                                                                                                                                                 |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                                                                                                                                    |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                                                                                                                                  |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                                                                                                                        |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                                                                                                   |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. _php-7.3-removed-functions:

PHP 7.3 Removed Functions
+++++++++++++++++++++++++

 The following PHP native functions were removed in PHP 7.3.

* `image2wbmp() <https://www.php.net/image2wbmp>`_

This analysis skips redefined PHP functions : when a replacement for a removed PHP function was created, with condition on the PHP version, then its usage is considered valid.

See also `PHP 7.3 Removed Functions <https://www.php.net/manual/en/migration73.incompatible.php#migration70.incompatible.removed-functions>`_.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Php/Php73RemovedFunctions |
+-------------+---------------------------+
| Rulesets    | :ref:`CompatibilityPHP73` |
+-------------+---------------------------+
| Exakt since | 1.4.0                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Critical                  |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _php-7.4-constant-deprecation:

PHP 7.4 Constant Deprecation
++++++++++++++++++++++++++++

 One constant is deprecated in PHP 7.4. 

* `CURLPIPE_HTTP1 <https://www.php.net/CURLPIPE_HTTP1>`_

See also `Deprecations for PHP 7.2 <https://wiki.php.net/rfc/deprecations_php_7_2>`_.



Suggestions
^^^^^^^^^^^

* Use CURLPIPE_MULTIPLEX or CURLPIPE_NOTHING

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Php/Php74Deprecation                 |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP74` |
+-------------+--------------------------------------+
| Exakt since | 1.9.3                                |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Major                                |
+-------------+--------------------------------------+
| Time To Fix | Slow (1 hour)                        |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _mb\_strrpos()-third-argument:

mb_strrpos() Third Argument
+++++++++++++++++++++++++++

 Passing the encoding as 3rd parameter to `mb_strrpos() <https://www.php.net/mb_strrpos>`_ is deprecated. Instead pass a 0 offset, and encoding as 4th parameter.

.. code-block:: php

   <?php
   
   // Finds the position of the last occurrence of of a string in a string, starting at position 10
   $extract = mb_strrpos($haystack, $needle, 10, 'utf8');
   
   // This is the old behavior. Here, the offset will be 0, by default
   $extract = mb_strrpos($haystack, $needle, 'utf8');
   ?>


See also `mb_strrpos() <https://www.php.net/mb_strrpos>`_.


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Php/Php74mbstrrpos3rdArg             |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP74` |
+-------------+--------------------------------------+
| Exakt since | 1.8.9                                |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Minor                                |
+-------------+--------------------------------------+
| Time To Fix | Quick (30 mins)                      |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _php-7.4-new-class:

Php 7.4 New Class
+++++++++++++++++

 New classes, introduced in PHP 7.4. If classes where created with the same name, in current code, they have to be moved in a namespace, or removed from code to migrate safely to PHP 7.4.

The new classes are : 

+ ``ReflectionReference``
+ ``WeakReference``

.. code-block:: php

   <?php
   
   namespace {
       // Global namespace
       class WeakReference {
           // Move to a namespace
           // or, remove this class
       }
   }
   
   namespace B {
       class WeakReference {
           // This is OK : in a namespace
       }
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Move the current classes with the same names into a distinct domain name

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Php/Php74NewClasses                  |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP74` |
+-------------+--------------------------------------+
| Exakt since | 1.0.4                                |
+-------------+--------------------------------------+
| Php Version | 7.4-                                 |
+-------------+--------------------------------------+
| Severity    | Major                                |
+-------------+--------------------------------------+
| Time To Fix | Slow (1 hour)                        |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _new-constants-in-php-7.4:

New Constants In PHP 7.4
++++++++++++++++++++++++

 The following constants are now native in PHP 7.4. It is advised to avoid using such names for constant before moving to this new version.

* ``MB_ONIGURUMA_VERSION``
* ``SO_LABEL``
* ``SO_PEERLABEL``
* ``SO_LISTENQLIMIT``
* ``SO_LISTENQLEN``
* ``SO_USER_COOKIE``
* ``PHP_WINDOWS_EVENT_CTRL_C``
* ``PHP_WINDOWS_EVENT_CTRL_BREAK``
* ``TIDY_TAG_ARTICLE``
* ``TIDY_TAG_ASIDE``
* ``TIDY_TAG_AUDIO``
* ``TIDY_TAG_BDI``
* ``TIDY_TAG_CANVAS``
* ``TIDY_TAG_COMMAND``
* ``TIDY_TAG_DATALIST``
* ``TIDY_TAG_DETAILS``
* ``TIDY_TAG_DIALOG``
* ``TIDY_TAG_FIGCAPTION``
* ``TIDY_TAG_FIGURE``
* ``TIDY_TAG_FOOTER``
* ``TIDY_TAG_HEADER``
* ``TIDY_TAG_HGROUP``
* ``TIDY_TAG_MAIN``
* ``TIDY_TAG_MARK``
* ``TIDY_TAG_MENUITEM``
* ``TIDY_TAG_METER``
* ``TIDY_TAG_NAV``
* ``TIDY_TAG_OUTPUT``
* ``TIDY_TAG_PROGRESS``
* ``TIDY_TAG_SECTION``
* ``TIDY_TAG_SOURCE``
* ``TIDY_TAG_SUMMARY``
* ``TIDY_TAG_TEMPLATE``
* ``TIDY_TAG_TIME``
* ``TIDY_TAG_TRACK``
* ``TIDY_TAG_VIDEO``
* ``STREAM_CRYPTO_METHOD_TLSv1_3_CLIENT``
* ``STREAM_CRYPTO_METHOD_TLSv1_3_SERVER``
* ``STREAM_CRYPTO_PROTO_TLSv1_3``
* ``T_COALESCE_EQUAL``
* ``T_FN``

See also `New global constants in 7.4 <https://www.php.net/manual/en/migration74.constants.php>`_.



Suggestions
^^^^^^^^^^^

* Move the constants to a new namespace
* Remove the old constants
* Rename the old constants

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Php/Php74NewConstants                |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP74` |
+-------------+--------------------------------------+
| Exakt since | 1.8.4                                |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Major                                |
+-------------+--------------------------------------+
| Time To Fix | Slow (1 hour)                        |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _php-74-new-directives:

PHP 74 New Directives
+++++++++++++++++++++

 List of directives that are new in PHP 7.4.

+ ``zend.exception_ignore_args`` : From the php.ini : ``Allows to include or exclude arguments from stack traces generated for exceptions. Default: Off``
+ ``opcache.preload_user``


See `RFC Preload <https://wiki.php.net/rfc/preload>`_.


Suggestions
^^^^^^^^^^^

* Do not use those directives with PHP before version 7.4

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Php/Php74NewDirective     |
+-------------+---------------------------+
| Rulesets    | :ref:`CompatibilityPHP73` |
+-------------+---------------------------+
| Exakt since | 1.9.4                     |
+-------------+---------------------------+
| Php Version | 7.4-                      |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _new-functions-in-php-7.4:

New Functions In PHP 7.4
++++++++++++++++++++++++

 New functions are added to new PHP version.

The following functions are now native functions in PHP 7.3. It is compulsory to rename any custom function that was created in older versions. One alternative is to move the function to a custom namespace, and update the ``use`` list at the beginning of the script. 

* `mb_str_split <https://www.php.net/mb_str_split>`_
* `password_algos <https://www.php.net/password_algos>`_

Note : At the moment of writing, all links to the manual are not working.

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Php/Php74NewFunctions                |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP74` |
+-------------+--------------------------------------+
| Exakt since | 1.8.0                                |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Major                                |
+-------------+--------------------------------------+
| Time To Fix | Quick (30 mins)                      |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _php-7.4-removed-directives:

PHP 7.4 Removed Directives
++++++++++++++++++++++++++

 List of directives that are removed in PHP 7.4.

+ allow_url_include

See `Deprecation allow_url_include <https://wiki.php.net/rfc/deprecations_php_7_4#allow_url_include>`_.


Suggestions
^^^^^^^^^^^

* Stop using this directive

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------+
| Short name  | Php/Php74RemovedDirective                                                                  |
+-------------+--------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP74`, :ref:`CompatibilityPHP80`, :ref:`CompatibilityPHP81` |
+-------------+--------------------------------------------------------------------------------------------+
| Exakt since | 1.9.3                                                                                      |
+-------------+--------------------------------------------------------------------------------------------+
| Php Version | 7.4+                                                                                       |
+-------------+--------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                      |
+-------------+--------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                            |
+-------------+--------------------------------------------------------------------------------------------+
| Precision   | High                                                                                       |
+-------------+--------------------------------------------------------------------------------------------+


.. _php-7.4-removed-functions:

PHP 7.4 Removed Functions
+++++++++++++++++++++++++

 The following PHP native functions were deprecated in PHP 7.4.

* `hebrevc() <https://www.php.net/hebrevc>`_
* `convert_cyr_string() <https://www.php.net/convert_cyr_string>`_
* `ezmlm_hash() <https://www.php.net/ezmlm_hash>`_
* `money_format() <https://www.php.net/money_format>`_
* `restore_include_path() <https://www.php.net/restore_include_path>`_
* `get_magic_quotes_gpc() <https://www.php.net/get_magic_quotes_gpc>`_
* `get_magic_quotes_runtime() <https://www.php.net/get_magic_quotes_runtime>`_

This analysis skips redefined PHP functions : when a replacement for a removed PHP function was created, with condition on the PHP version, then its usage is considered valid.

See also `PHP 7.4 Removed Functions <https://www.php.net/manual/en/migration74.incompatible.php#migration70.incompatible.removed-functions>`_ and `PHP 7.4 Deprecations : Introduction <https://wiki.php.net/rfc/deprecations_php_7_4#introduction>`_.



Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Php/Php74RemovedFunctions            |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP74` |
+-------------+--------------------------------------+
| Exakt since | 1.9.0                                |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Critical                             |
+-------------+--------------------------------------+
| Time To Fix | Slow (1 hour)                        |
+-------------+--------------------------------------+
| Precision   | Very high                            |
+-------------+--------------------------------------+


.. _php-7.4-reserved-keyword:

PHP 7.4 Reserved Keyword
++++++++++++++++++++++++

 ``fn`` is a new PHP keyword. In PHP 7.4, it is used to build the arrow functions. When used at an illegal position, ``fn`` generates a Fatal error at compile time.

As a key word, ``fn`` is not allowed as constant name, function name, class name or inside namespaces. 

.. code-block:: php

   <?php
   
   // PHP 7.4 usage of fn
   function array_values_from_keys($arr, $keys) {
       return array_map(fn($x) => $arr[$x], $keys);
   }
   
   // PHP 7.3 usage of fn
   const fn = 1;
   
   function fn() {}
   
   class x {
       // This is valid in PHP 7.3 and 7.4
       function fn() {}
   }
   
   ?>


``fn`` is fine for method names. It may also be used for constants with `define() <https://www.php.net/define>`_, and `constant() <https://www.php.net/constant>`_ but it is not recommended.

See also `PHP RFC: Arrow Functions <https://wiki.php.net/rfc/arrow_functions>`_.



Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Php/Php74ReservedKeyword             |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP74` |
+-------------+--------------------------------------+
| Exakt since | 1.9.2                                |
+-------------+--------------------------------------+
| Php Version | 7.4-                                 |
+-------------+--------------------------------------+
| Severity    | Minor                                |
+-------------+--------------------------------------+
| Time To Fix | Quick (30 mins)                      |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _php7-relaxed-keyword:

Php7 Relaxed Keyword
++++++++++++++++++++

 Most of the traditional PHP keywords may be used inside classes, trait or interfaces.

.. code-block:: php

   <?php
   
   // Compatible with PHP 7.0 + 
   class foo {
       // as is a PHP 5 keyword
       public function as() {
       
       }
   }
   
   ?>


This was not the case in PHP 5, and will yield parse errors.

See also `Loosening Reserved Word Restrictions <https://www.php.net/manual/en/migration70.other-changes.php#migration70.other-changes.loosening-reserved-words>`_.

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/Php7RelaxedKeyword                                                                                                |
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56` |
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                                 |
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Php Version | 7.0+                                                                                                                  |
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                                 |
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                  |
+-------------+-----------------------------------------------------------------------------------------------------------------------+


.. _php-80-named-parameter-variadic:

PHP 80 Named Parameter Variadic
+++++++++++++++++++++++++++++++

 Named parameter with variadic have been renamed from 0 to 'parameter name' in PHP 8.0

.. code-block:: php

   <?php
   
   function foo($a, ...$b) {
       print_r($b);
   }
   
   foo(3, 4);
   foo(3, b: 4);              // PHP 8 only 
   foo(...[2, b=> [3, 4]]); // PHP 8 only 
   
   ?>


In PHP 7.0, with positional argument only, the content of $b is in an array, index 0. This is also true with PHP 8.0.

In PHP 8.0, with named arguments, the content of $b is in an array, index 'b';

Since the behavior of the variadic depends on the calling syntax (with or without named parameter), the receiving must ensure the correct reception, and handle both cases.


Suggestions
^^^^^^^^^^^

* Apply array_values() to the variadic arguments.

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Php/Php80NamedParameterVariadic      |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP80` |
+-------------+--------------------------------------+
| Exakt since | 2.2.0                                |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Minor                                |
+-------------+--------------------------------------+
| Time To Fix | Quick (30 mins)                      |
+-------------+--------------------------------------+
| Precision   | Medium                               |
+-------------+--------------------------------------+


.. _new-functions-in-php-8.0:

New Functions In PHP 8.0
++++++++++++++++++++++++

 New functions are added to new PHP version.

The following functions are now native functions in PHP 7.3. It is compulsory to rename any custom function that was created in older versions. One alternative is to move the function to a custom namespace, and update the ``use`` list at the beginning of the script. 

* `str_contains <https://www.php.net/str_contains>`_
* `fdiv <https://www.php.net/fdiv>`_
* `preg_last_error_msg <https://www.php.net/preg_last_error_msg>`_

Note : At the moment of writing, all links to the manual are not working.

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Php/Php80NewFunctions                |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP74` |
+-------------+--------------------------------------+
| Exakt since | 2.0.8                                |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Major                                |
+-------------+--------------------------------------+
| Time To Fix | Quick (30 mins)                      |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _php-8.0-only-typehints:

Php 8.0 Only TypeHints
++++++++++++++++++++++

 Two scalar typehints are introduced in version 8. They are ``false`` and ``null``. In PHP 7.0, both those values could not be used as a class or interface name, to avoid confusion with the actual booleans, nor ``null`` value.

``false`` represents a false boolean, and nothing else. It is more restrictive than a boolean, which accepts true too. 
``null`` is an alternative syntax to ``?`` : it allows the type to be ``null``. 

Both the above typehints are to be used in cunjunction with other types : they can't be used alone.

.. code-block:: php

   <?php
   
   // function accepts an A object, or null. 
   function foo(A|null $x) {}
   
   // same as above
   function foo2(A|null $x) {}
   
   // returns an object of class B, or false
   function bar($x) : false|B {}
   
   ?>


See also `PHP RFC: Union Types 2.0 <https://wiki.php.net/rfc/union_types_v2>`_.


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/Php80OnlyTypeHints                                                                                                                                                      |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70`, :ref:`CompatibilityPHP71`, :ref:`CompatibilityPHP72`, :ref:`CompatibilityPHP73`, :ref:`CompatibilityPHP74` |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 2.0.9                                                                                                                                                                       |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                                                                                       |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                                                                             |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | Very high                                                                                                                                                                   |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. _php-8.0-removed-constants:

PHP 8.0 Removed Constants
+++++++++++++++++++++++++

 The following PHP native constants were removed in PHP 8.0.

* `INTL_IDNA_VARIANT_2003 <https://www.php.net/INTL_IDNA_VARIANT_2003>`_ (See `Deprecate and remove `INTL_IDNA_VARIANT_2003 <https://www.php.net/INTL_IDNA_VARIANT_2003>`_ <https://wiki.php.net/rfc/deprecate-and-remove-intl_idna_variant_2003>`_)
* `MB_OVERLOAD_MAIL <https://www.php.net/MB_OVERLOAD_MAIL>`_
* `MB_OVERLOAD_STRING <https://www.php.net/MB_OVERLOAD_STRING>`_
* `MB_OVERLOAD_REGEX <https://www.php.net/MB_OVERLOAD_REGEX>`_



Suggestions
^^^^^^^^^^^

* Remove usage of those constants

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Php/Php80RemovedConstant             |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP80` |
+-------------+--------------------------------------+
| Exakt since | 1.6.8                                |
+-------------+--------------------------------------+
| Php Version | 8.0-                                 |
+-------------+--------------------------------------+
| Severity    | Critical                             |
+-------------+--------------------------------------+
| Time To Fix | Quick (30 mins)                      |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _php-8.0-removed-directives:

PHP 8.0 Removed Directives
++++++++++++++++++++++++++

 List of directives that are removed in PHP 8.0.

In PHP 8.0, `track_errors` was removed. 

You can detect valid directives with `ini_get() <https://www.php.net/ini_get>`_. This native function will return false, when the directive doesn't exist, while actual directive values will be returned as a string. 

See `Deprecation `track_errors <https://www.php.net/manual/en/errorfunc.configuration.php#ini.track-errors>`_ <https://www.php.net/manual/en/migration80.incompatible.php`_.



Suggestions
^^^^^^^^^^^

* Remove usage of `track_errors`.

Specs
^^^^^
+-------------+-----------------------------------------------------------------+
| Short name  | Php/Php80RemovedDirective                                       |
+-------------+-----------------------------------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP80`, :ref:`CompatibilityPHP81` |
+-------------+-----------------------------------------------------------------+
| Exakt since | 2.1.9                                                           |
+-------------+-----------------------------------------------------------------+
| Php Version | All                                                             |
+-------------+-----------------------------------------------------------------+
| Severity    | Minor                                                           |
+-------------+-----------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                 |
+-------------+-----------------------------------------------------------------+
| Precision   | High                                                            |
+-------------+-----------------------------------------------------------------+


.. _php-8.0-removed-functions:

PHP 8.0 Removed Functions
+++++++++++++++++++++++++

 The following PHP native functions were removed in PHP 8.0.

* `image2wbmp() <https://www.php.net/image2wbmp>`_
* `png2wbmp() <https://www.php.net/png2wbmp>`_
* `jpeg2wbmp() <https://www.php.net/jpeg2wbmp>`_
* `ldap_sort() <https://www.php.net/ldap_sort>`_
* `hebrevc() <https://www.php.net/hebrevc>`_
* `convert_cyr_string() <https://www.php.net/convert_cyr_string>`_
* `ezmlm_hash() <https://www.php.net/ezmlm_hash>`_
* `money_format() <https://www.php.net/money_format>`_
* `get_magic_quotes_gpc() <https://www.php.net/get_magic_quotes_gpc>`_
* `get_magic_quotes_gpc_runtime() <https://www.php.net/get_magic_quotes_gpc_runtime>`_
* `create_function() <https://www.php.net/create_function>`_
* `each() <https://www.php.net/each>`_
* `read_exif_data() <https://www.php.net/read_exif_data>`_
* `gmp_random() <https://www.php.net/gmp_random>`_
* `fgetss() <https://www.php.net/fgetss>`_
* `restore_include_path() <https://www.php.net/restore_include_path>`_
* `gzgetss() <https://www.php.net/gzgetss>`_

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Php/Php80RemovedFunctions            |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP80` |
+-------------+--------------------------------------+
| Exakt since | 1.6.8                                |
+-------------+--------------------------------------+
| Php Version | 8.0-                                 |
+-------------+--------------------------------------+
| Severity    | Major                                |
+-------------+--------------------------------------+
| Time To Fix | Slow (1 hour)                        |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _php-resources-turned-into-objects:

PHP Resources Turned Into Objects
+++++++++++++++++++++++++++++++++

 Multiple PHP native functions now return objects, not resources. Any check on those values with `is_resource() <https://www.php.net/is_resource>`_ is now going to fail.

The affected functions are the following : 

+ `curl_init() <https://www.php.net/curl_init>`_
+ `curl_multi_init() <https://www.php.net/curl_multi_init>`_
+ `curl_share_init() <https://www.php.net/curl_share_init>`_
+ deflate_init()
+ `enchant_broker_init() <https://www.php.net/enchant_broker_init>`_
+ `enchant_broker_request_dict() <https://www.php.net/enchant_broker_request_dict>`_
+ `enchant_broker_request_pwl_dict() <https://www.php.net/enchant_broker_request_pwl_dict>`_
+ inflate_init()
+ `msg_get_queue() <https://www.php.net/msg_get_queue>`_
+ `openssl_csr_new() <https://www.php.net/openssl_csr_new>`_
+ `openssl_csr_sign() <https://www.php.net/openssl_csr_sign>`_
+ `openssl_pkey_new() <https://www.php.net/openssl_pkey_new>`_
+ `openssl_x509_read() <https://www.php.net/openssl_x509_read>`_
+ `sem_get() <https://www.php.net/sem_get>`_
+ `shm_attach() <https://www.php.net/shm_attach>`_
+ `shmop_open() <https://www.php.net/shmop_open>`_
+ `socket_accept() <https://www.php.net/socket_accept>`_
+ `socket_addrinfo_bind() <https://www.php.net/socket_addrinfo_bind>`_
+ `socket_addrinfo_connect() <https://www.php.net/socket_addrinfo_connect>`_
+ `socket_create_listen() <https://www.php.net/socket_create_listen>`_
+ `socket_create() <https://www.php.net/socket_create>`_
+ `socket_import_stream() <https://www.php.net/socket_import_stream>`_
+ `socket_wsaprotocol_info_import() <https://www.php.net/socket_wsaprotocol_info_import>`_
+ `xml_parser_create_ns() <https://www.php.net/xml_parser_create_ns>`_
+ `xml_parser_create() <https://www.php.net/xml_parser_create>`_

See also `UPGRADING PHP 8.0 <https://github.com/php/php-src/blob/master/UPGRADING>`_.

 

Suggestions
^^^^^^^^^^^

* Change the condition from is_resource() to instanceof

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Php/Php80RemovesResources            |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP80` |
+-------------+--------------------------------------+
| Exakt since | 2.2.0                                |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Major                                |
+-------------+--------------------------------------+
| Time To Fix | Quick (30 mins)                      |
+-------------+--------------------------------------+
| Precision   | Medium                               |
+-------------+--------------------------------------+


.. _union-typehint:

Union Typehint
++++++++++++++

 Union typehints allows the specification of several typehint for the same argument or return value. This is a PHP 8.0 new feature.

Several typehints are specified at the same place as a single one. The different values are separated by a pipe character ``|``, like for exceptions 

.. code-block:: php

   <?php
   
   // Example from the RFC https://wiki.php.net/rfc/union_types_v2
   class Number {
       private int|float $number;
    
       public function setNumber(int|float $number): void {
           $this->number = $number;
       }
    
       public function getNumber(): int|float {
           return $this->number;
       }
   }
   ?>


Union types are not compatible with PHP 7 and older.

See also `PHP RFC: Union Types 2.0 <https://wiki.php.net/rfc/union_types_v2>`_.


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/Php80UnionTypehint                                                                                                                           |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP70`, :ref:`CompatibilityPHP71`, :ref:`CompatibilityPHP72`, :ref:`CompatibilityPHP73`, :ref:`CompatibilityPHP74` |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 2.0.9                                                                                                                                            |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | 8.0+                                                                                                                                             |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                                                            |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                                                  |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                             |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+


.. _php-8.0-variable-syntax-tweaks:

Php 8.0 Variable Syntax Tweaks
++++++++++++++++++++++++++++++

 Several variable syntaxes are added in version 8.0. They extends the PHP 7.0 syntax updates, and fix a number of edges cases.

In particular, ``new``and ``instanceof`` now support a way to inline the expression, rather than use a temporary variable.

Magic constants are now accessible with array notation, just like another constant. It is also possible to use method calls : although this is Syntacticly correct for PHP, this won't be executed, as the left operand is a string, and not an object.

.. code-block:: php

   <?php
   
    // array name is dynamically build
    echo foo$bar[0];
    // static method
    foo$bar::baz();
    // static property 
    foo$bar::$baz;
    
    // Syntactly correct, but not executable
    foo$bar->baz();
    
    // expressions with instanceof and new
       $object = new (class_.$name);
       $x instanceof (class_$name);
   
       // PHP 7.0 style
       $className = class_.$name;
       $object = new $className;
   
   ?>


See also `PHP RFC: Variable Syntax Tweaks <https://wiki.php.net/rfc/variable_syntax_tweaks>`_ and `scalar_objects in PHP <https://github.com/nikic/scalar_objects>`_.

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Php/Php80VariableSyntax              |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP74` |
+-------------+--------------------------------------+
| Exakt since | 2.0.8                                |
+-------------+--------------------------------------+
| Php Version | 8.0+                                 |
+-------------+--------------------------------------+
| Severity    | Major                                |
+-------------+--------------------------------------+
| Time To Fix | Quick (30 mins)                      |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _$php\_errormsg-usage:

$php_errormsg Usage
+++++++++++++++++++

 $php_errormsg is removed since PHP 8.0. $php_errormsg tracks the last error message, with the directive `track_errors`. All was removed in PHP 8.0, and shall be replaced with `error_get_last() <https://www.php.net/error_get_last>`_.

.. code-block:: php

   <?php
   
   function foo() {
       global $php_errormsg;
       
       echo 'Last error: '.$php_errormsg;
       
       echo 'Also, last error: '.error_get_last();
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Use error_get_last() instead.

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Php/PhpErrorMsgUsage                 |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP80` |
+-------------+--------------------------------------+
| Exakt since | 2.1.8                                |
+-------------+--------------------------------------+
| Php Version | 8.0-                                 |
+-------------+--------------------------------------+
| Severity    | Minor                                |
+-------------+--------------------------------------+
| Time To Fix | Quick (30 mins)                      |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _preg\_match\_all()-flag:

preg_match_all() Flag
+++++++++++++++++++++

 `preg_match_all() <https://www.php.net/preg_match_all>`_ has an option to configure the structure of the results : it is either by capturing parenthesis (by default), or by result sets. 

The second option is the most interesting when the following `foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_ loop has to manipulate several captured strings at the same time. No need to use an index in the first array and use it in the other arrays.

.. code-block:: php

   <?php
   $string = 'ababab';
   
   // default behavior
   preg_match_all('/(a)(b)/', $string, $r);
   $found = '';
   foreach($r[1] as $id => $s) {
       $found .= $s.$r[2][$id];
   }
   
   // better behavior
   preg_match_all('/(a)(b)/', $string, $r, PREG_SET_ORDER);
   $found = '';
   foreach($r as $s) {
       $found .= $s[1].$s[2];
   }
   
   ?>


The second syntax is easier to read and may be marginally faster to execute (`preg_match_all() <https://www.php.net/preg_match_all>`_ and `foreach()) <https://www.php.net/manual/en/control-structures.foreach.php>`_.


Suggestions
^^^^^^^^^^^

* Use flags to adapt the results of preg_match_all() to your code, not the contrary.

Specs
^^^^^
+-------------+------------------------------------------+
| Short name  | Php/PregMatchAllFlag                     |
+-------------+------------------------------------------+
| Rulesets    | :ref:`Suggestions`                       |
+-------------+------------------------------------------+
| Exakt since | 0.8.4                                    |
+-------------+------------------------------------------+
| Php Version | All                                      |
+-------------+------------------------------------------+
| Severity    | Minor                                    |
+-------------+------------------------------------------+
| Time To Fix | Quick (30 mins)                          |
+-------------+------------------------------------------+
| Precision   | High                                     |
+-------------+------------------------------------------+
| Examples    | :ref:`case-fuelcms-php-pregmatchallflag` |
+-------------+------------------------------------------+


.. _displays-text:

Displays Text
+++++++++++++

 Function calls that displays something to the output. 

.. code-block:: php

   <?php
   
   // Displays de the content of $a
   print $a;
   
   // Displays de the content of $b
   print_r($b);
   
   // Returns de the content of $b, no display.
   $c = var_export($b, true);
   
   ?>

Specs
^^^^^
+-------------+---------------+
| Short name  | Php/Prints    |
+-------------+---------------+
| Rulesets    | none          |
+-------------+---------------+
| Exakt since | 0.10.9        |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _$http\_raw\_post\_data-usage:

$HTTP_RAW_POST_DATA Usage
+++++++++++++++++++++++++

 ``$HTTP_RAW_POST_DATA`` is deprecated, and should be replaced by ``php://input``. 

``$HTTP_RAW_POST_DATA`` is deprecated since PHP 5.6.

It is possible to prepare code to this lack of feature by setting ``always_populate_raw_post_data`` to -1.

.. code-block:: php

   <?php
   
   // PHP 5.5 and older
   $postdata = $HTTP_RAW_POST_DATA;
   
   // PHP 5.6 and more recent
   $postdata = file_get_contents(php://input);
   
   ?>


See also `$HTTP_RAW_POST_DATA variable <https://www.php.net/manual/en/reserved.variables.httprawpostdata.php>`_.



Suggestions
^^^^^^^^^^^

* Use php://input with fopen() instead.

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Php/RawPostDataUsage                 |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP56` |
+-------------+--------------------------------------+
| Exakt since | 0.8.4                                |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Major                                |
+-------------+--------------------------------------+
| Time To Fix | Slow (1 hour)                        |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _reflection-export()-is-deprecated:

Reflection Export() Is Deprecated
+++++++++++++++++++++++++++++++++

 export() method in `Reflection <https://www.php.net/Reflection>`_ classes is now deprecated. It is obsolete since PHP 7.4 and will disappear in PHP 8.0.

The `Reflector <https://www.php.net/Reflector>`_ interface, which is implemented by all reflection classes, specifies two methods: `__toString() <https://www.php.net/manual/en/language.oop5.magic.php>`_ and export(). 

.. code-block:: php

   <?php
   
   ReflectionFunction::export('foo');
   // same as
   echo new ReflectionFunction('foo'), \n;
    
   $str = ReflectionFunction::export('foo', true);
   // same as
   $str = (string) new ReflectionFunction('foo');
   
   ?>


See also `Reflection export() methods <https://wiki.php.net/rfc/deprecations_php_7_4#reflection_export_methods>`_ and `Reflection <https://www.php.net/manual/en/book.reflection.php>`_.



Suggestions
^^^^^^^^^^^

* Cast the object to string
* Remove the call to export()

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Php/ReflectionExportIsDeprecated     |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP74` |
+-------------+--------------------------------------+
| Exakt since | 1.9.0                                |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Minor                                |
+-------------+--------------------------------------+
| Time To Fix | Quick (30 mins)                      |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _reserved-keywords-in-php-7:

Reserved Keywords In PHP 7
++++++++++++++++++++++++++

 PHP reserved names for class/trait/interface. They won't be available anymore in user space starting with PHP 7.

For example, string, float, false, true, null, resource,`... <https://www.php.net/manual/en/functions.arguments.php#functions.variable-arg-list>`_ are not acceptable as class name. 

.. code-block:: php

   <?php
   
   // This doesn't compile in PHP 7.0 and more recent
   class null { }
   
   ?>


See also `List of other reserved words <https://www.php.net/manual/en/reserved.other-reserved-words.php>`_.


Suggestions
^^^^^^^^^^^

* Avoid using PHP reserved keywords

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Php/ReservedKeywords7     |
+-------------+---------------------------+
| Rulesets    | :ref:`CompatibilityPHP70` |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | 7.0-                      |
+-------------+---------------------------+
| Severity    | Major                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _reserved-match-keyword:

Reserved Match Keyword
++++++++++++++++++++++

 Match is a new instruction in PHP 8.0. For that, it becomes a reserved keyword, and cannot be used in various situations.

.. code-block:: php

   <?php
   
   // Match as a standalone keyword
   use X as Match;
   
   // No more use as a typehint
   function foo(match $a ) : match {}
   $a instanceof match; 
   
   // No use as method name or function name
   matCH(a, 4) ;
   $method->MAtch();
   $static::MATch();
   
   // Match in a Fully qualified name is OK
   b\match ;
   
   // Match a property name or a class constant is OK
   $match->maTCH;
   C::MATCH;
   
   ?>


See also `Match expression V2 <https://wiki.php.net/rfc/match_expression_v2>`_.


Suggestions
^^^^^^^^^^^

* Change the name from Match to something else.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Php/ReservedMatchKeyword  |
+-------------+---------------------------+
| Rulesets    | :ref:`CompatibilityPHP80` |
+-------------+---------------------------+
| Exakt since | 2.2.1                     |
+-------------+---------------------------+
| Php Version | 8.0-                      |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | Unknown                   |
+-------------+---------------------------+


.. _php-keywords-as-names:

PHP Keywords As Names
+++++++++++++++++++++

 PHP has a set of reserved keywords. It is recommended not to use those keywords for names structures. 

PHP does check that a number of structures, such as classes, methods, interfaces... can't be named or called using one of the keywords. However, in a few other situations, no check are enforced. Using keywords in such situation is confusing. 

.. code-block:: php

   <?php
   
   // This keyword is reserved since PHP 7.2
   class object {
       // _POST is used by PHP for the $_POST variable
       // This methods name is probably confusing, 
       // and may attract more than its share of attention
       function _POST() {
       
       }
   }
   
   ?>


See also `List of Keywords <https://www.php.net/manual/en/reserved.keywords.php>`_, `Predefined Classes <https://www.php.net/manual/en/reserved.classes.php>`_, `Predefined Constants <https://www.php.net/manual/en/reserved.constants.php>`_, `List of other reserved words <https://www.php.net/manual/en/reserved.other-reserved-words.php>`_ and `Predefined Variables <https://www.php.net/manual/en/reserved.variables.php>`_.



Suggestions
^^^^^^^^^^^

* Rename the structure
* Choose another naming convention to avoid conflict and rename the current structures

+---------------+---------+--------+------------------------------------------------------------------------------------+
| Name          | Default | Type   | Description                                                                        |
+---------------+---------+--------+------------------------------------------------------------------------------------+
| reservedNames |         | string | Other reserved names : all in a string, comma separated.                           |
+---------------+---------+--------+------------------------------------------------------------------------------------+
| allowedNames  |         | string | PHP reserved names that can be used in the code. All in a string, comma separated. |
+---------------+---------+--------+------------------------------------------------------------------------------------+



Specs
^^^^^
+-------------+---------------------------------------------------------------------------------+
| Short name  | Php/ReservedNames                                                               |
+-------------+---------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                  |
+-------------+---------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                           |
+-------------+---------------------------------------------------------------------------------+
| Php Version | All                                                                             |
+-------------+---------------------------------------------------------------------------------+
| Severity    | Major                                                                           |
+-------------+---------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                 |
+-------------+---------------------------------------------------------------------------------+
| Precision   | High                                                                            |
+-------------+---------------------------------------------------------------------------------+
| Examples    | :ref:`case-churchcrm-php-reservednames`, :ref:`case-xataface-php-reservednames` |
+-------------+---------------------------------------------------------------------------------+


.. _return-typehint-usage:

Return Typehint Usage
+++++++++++++++++++++

 Spot usage of return typehint. It is a PHP 7.0 feature.

Return typehint were introduced in PHP 7.0, and are backward incompatible with PHP 5.x.

.. code-block:: php

   <?php
   
   function foo($a) : stdClass {
       return new \stdClass();
   }
   
   ?>


See also `RFC: Return Type Declarations <https://wiki.php.net/rfc/return_types>`_ and `Return Type Declarations <https://www.php.net/manual/en/functions.returning-values.php#functions.returning-values.type-declaration>`_.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Php/ReturnTypehintUsage |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | 7.0+                    |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _return-with-parenthesis:

Return With Parenthesis
+++++++++++++++++++++++

 return statement doesn't need parenthesis. PHP tolerates them with return statement, but it is recommended not to use them. 

From the PHP Manual : 'Note: Note that since return is a language construct and not a function, the parentheses surrounding its argument are not required and their use is discouraged.'.

.. code-block:: php

   <?php
   
   function foo() {
       $a = rand(0, 10);
   
       // No need for parenthesis
       return $a;
   
       // Parenthesis are useless here
       return ($a);
   
       // Parenthesis are useful here: they are needed by the multplication.
       return ($a + 1) * 3;
   }
   
   ?>


See also `PHP return(value); vs return value; <https://stackoverflow.com/questions/2921843/php-returnvalue-vs-return-value>`_ and `return <https://www.php.net/manual/en/function.return.php>`_.


Suggestions
^^^^^^^^^^^

* Remove the parenthesis

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Php/ReturnWithParenthesis |
+-------------+---------------------------+
| Rulesets    | :ref:`Suggestions`        |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Instant (5 mins)          |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _safe-phpvariables:

Safe Phpvariables
+++++++++++++++++

 Mark the safe PHP variables. 

PHP superglobales are usually filled with external data that should be filtered. However, some values may be considered safe, as they are under the control of the developer.

``$_GET``, ``$_POST``, ``$_FILES``, ``$_REQUEST``, ``$_COOKIES`` are all considered unsafe. Their level of validation is checked in other analysis. 

``$_SERVER`` is partially safe. It is valid for the following values : ``DOCUMENT_ROOT``, ``REQUEST_TIME``, ``REQUEST_TIME_FLOAT``, ``SCRIPT_NAME``, ``SERVER_ADMIN``, ``_``.

.. code-block:: php

   <?php
   
   // DOCUMENT_ROOT is a safe variable
   echo $_SERVER['DOCUMENT_ROOT'];
   
   // $_SERVER's PHP_SELF MUST be validated before usage
   echo $_SERVER['PHP_SELF'];
   
   // $_GET MUST be validated before usage
   echo $_GET['_'];
   
   ?>


See also `Predefined Variables <https://www.php.net/manual/en/reserved.variables.php>`_.

Specs
^^^^^
+-------------+-----------------+
| Short name  | Php/SafePhpvars |
+-------------+-----------------+
| Rulesets    | none            |
+-------------+-----------------+
| Exakt since | 2.1.2           |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Quick (30 mins) |
+-------------+-----------------+
| Precision   | High            |
+-------------+-----------------+


.. _scalar-are-not-arrays:

Scalar Are Not Arrays
+++++++++++++++++++++

 It is wrong to use a scalar as an array, a Warning is emitted. PHP 7.4 emits a Warning in such situations.

.. code-block:: php

   <?php
   
   // Here, $x may be null, and in that case, the echo will fail.
   function foo(?A $x) { 
       echo $x[2]; 
   }
   
   ?>


Typehinted argument with a scalar are reported by this analysis. Also, nullable arguments, both with typehint and return type hint.

See also `E_WARNING for invalid container read array-access <https://wiki.php.net/rfc/notice-for-non-valid-array-container>`_.


Suggestions
^^^^^^^^^^^

* Update type hints to avoid scalar values
* Remove the array syntax in the code using the results
* Cast to string type, so the array notation is accessible

Specs
^^^^^
+-------------+------------------------------------------------------------------------+
| Short name  | Php/ScalarAreNotArrays                                                 |
+-------------+------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`CompatibilityPHP74` |
+-------------+------------------------------------------------------------------------+
| Exakt since | 1.9.0                                                                  |
+-------------+------------------------------------------------------------------------+
| Php Version | All                                                                    |
+-------------+------------------------------------------------------------------------+
| Severity    | Minor                                                                  |
+-------------+------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                        |
+-------------+------------------------------------------------------------------------+
| Precision   | High                                                                   |
+-------------+------------------------------------------------------------------------+


.. _scalar-typehint-usage:

Scalar Typehint Usage
+++++++++++++++++++++

 Spot usage of scalar type hint : ``int``, ``float``, ``boolean`` and ``string``.

Scalar typehint are PHP 7.0 and more recent. Some, like ``object``, is 7.2.

Scalar typehint were not supported in PHP 5 and older. Then, the typehint is treated as a class name. 

.. code-block:: php

   <?php
   
   function withScalarTypehint(string $x) {}
   
   function withoutScalarTypehint(someClass $x) {}
   
   ?>


See also `PHP RFC: Scalar Type Hints <https://wiki.php.net/rfc/scalar_type_hints>`_ and `Type declarations <https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration>`_.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Php/ScalarTypehintUsage |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | 7.0+                    |
+-------------+-------------------------+
| Severity    | Major                   |
+-------------+-------------------------+
| Time To Fix | Quick (30 mins)         |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _serialize-magic-method:

Serialize Magic Method
++++++++++++++++++++++

 Classes that defines __serialize() and __unserialize() are using Serialize Magic.

Serialize magic methods were introduced in PHP 7.4, and are not effective before.

.. code-block:: php

   <?php
   
   class x {
       function __serialize() {}
       function __unserialize() {}
   }
   
   ?>


See also `New custom object serialization mechanism <https://wiki.php.net/rfc/custom_object_serialization>`_.



Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+--------------------+
| Short name  | Php/SerializeMagic |
+-------------+--------------------+
| Rulesets    | none               |
+-------------+--------------------+
| Exakt since | 1.9.0              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Quick (30 mins)    |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _session-variables:

Session Variables
+++++++++++++++++

 Sessions names, used across the application. 

.. code-block:: php

   <?php
   
   if (isset($_SESSION['mySessionVariable'])) {
       $_SESSION['mySessionVariable']['counter']++;
   } else {
       $_SESSION['mySessionVariable'] = array('counter'  => 1, 
                                              'creation' => time());
   }
   
   ?>


See also `Sessions <https://www.php.net/manual/en/book.session.php>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Php/SessionVariables |
+-------------+----------------------+
| Rulesets    | none                 |
+-------------+----------------------+
| Exakt since | 0.12.16              |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _set\_exception\_handler()-warning:

set_exception_handler() Warning
+++++++++++++++++++++++++++++++

 The `set_exception_handler() <https://www.php.net/set_exception_handler>`_ callable function has to be adapted to PHP 7 : ``Exception`` is not the right typehint, it is now ``Throwable``. 

When in doubt about backward compatibility, just drop the typehint. Otherwise, use ``Throwable``.

.. code-block:: php

   <?php
   
   // PHP 5.6- typehint 
   class foo { function bar(\Exception $e) {} }
   
   // PHP 7+ typehint 
   class foo { function bar(Throwable $e) {} }
   
   // PHP 5 and PHP 7 compatible typehint (note : there is none)
   class foo { function bar($e) {} }
   
   set_exception_handler(foo);
   
   ?>

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Php/SetExceptionHandlerPHP7 |
+-------------+-----------------------------+
| Rulesets    | :ref:`CompatibilityPHP70`   |
+-------------+-----------------------------+
| Exakt since | 0.8.4                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Major                       |
+-------------+-----------------------------+
| Time To Fix | Slow (1 hour)               |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _php-handlers-usage:

PHP Handlers Usage
++++++++++++++++++

 PHP has a number of handlers that may be replaced by customized code : session, shutdown, error, exception. They are noted here.

The example is adapted from the PHP documentation of `set_error_handler() <https://www.php.net/set_error_handler>`_.

.. code-block:: php

   <?php
   // error handler function
   function myErrorHandler($errno, $errstr, $errfile, $errline)
   {
       if (!(error_reporting() & $errno)) {
           // This error code is not included in error_reporting, so let it fall
           // through to the standard PHP error handler
           return false;
       }
   
       switch ($errno) {
       case E_USER_ERROR:
           echo '<b>My ERROR</b> [$errno] $errstr<br />'.PHP_EOL;
           echo '  Fatal error on line '.$errline.' in file .'$errfile;
           echo ', PHP ' . PHP_VERSION . ' (' . PHP_OS . ')<br />'.PHP_EOL;
           echo 'Aborting...<br />'.PHP_EOL;
           exit(1);
           break;
   
       case E_USER_WARNING:
           echo '<b>My WARNING</b> ['.$errno.'] '.$errstr.'<br />'.PHP_EOL;
           break;
   
       case E_USER_NOTICE:
           echo '<b>My NOTICE</b> ['.$errno.'] '.$errstr.'<br />'.PHP_EOL;
           break;
   
       default:
           echo 'Unknown error type: ['.$errno.'] $errstr<br />'.PHP_EOL;
           break;
       }
   
       /* Don't execute PHP internal error handler */
       return true;
   }
   
   
   // set to the user defined error handler
   $old_error_handler = set_error_handler(myErrorHandler);
   
   ?>


See also `set_error_handler <http://www.php.net/set_error_handler>`_.

Specs
^^^^^
+-------------+-----------------+
| Short name  | Php/SetHandlers |
+-------------+-----------------+
| Rulesets    | none            |
+-------------+-----------------+
| Exakt since | 0.8.4           |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Slow (1 hour)   |
+-------------+-----------------+
| Precision   | High            |
+-------------+-----------------+


.. _shell-favorite:

Shell Favorite
++++++++++++++

 PHP has several syntax to make system calls. `shell_exec() <https://www.php.net/shell_exec>`_, `exec() <https://www.php.net/exec>`_ and back-ticks, &#96; are the common ones.

It was found that one of those three is actually being used over 90% of the time. The remaining cases should be uniformed, so has to make this code consistent.

.. code-block:: php

   <?php
   
   // back-ticks &#96; are only used once.
   &#96;back-tick&#96;;
   
   shell_exec('exec1');
   shell_exec('exec2');
   shell_exec('exec3');
   shell_exec('exec4');
   shell_exec('exec5');
   shell_exec('exec6');
   shell_exec('exec7');
   shell_exec('exec8');
   shell_exec('exec9');
   shell_exec('exec10');
   shell_exec('exec11');
   shell_exec('exec12');
   
   ?>


See also `Execution Operators <https://www.php.net/manual/en/language.operators.execution.php>`_ and `shell_exec() <https://www.php.net/shell_exec>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Php/ShellFavorite |
+-------------+-------------------+
| Rulesets    | none              |
+-------------+-------------------+
| Exakt since | 0.12.9            |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _short-open-tags:

Short Open Tags
+++++++++++++++

 Usage of short open tags is discouraged. The following files were found to be impacted by the short open tag directive at compilation time. They must be reviewed to ensure no &lt;? tags are found in the code.

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Php/ShortOpenTagRequired |
+-------------+--------------------------+
| Rulesets    | :ref:`Analyze`           |
+-------------+--------------------------+
| Exakt since | 0.8.4                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Major                    |
+-------------+--------------------------+
| Time To Fix | Quick (30 mins)          |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _should-preprocess-chr():

Should Preprocess Chr()
+++++++++++++++++++++++

 Replace literal `chr() <https://www.php.net/chr>`_ calls with their escape sequence.

`chr() <https://www.php.net/chr>`_ is a functioncall, that cannot be cached. It is only resolved at execution time. 
On the other hand, literal values are preprocessed by PHP and may be cached.

.. code-block:: php

   <?php
   
   // This is easier on PHP
   $a = "\120\110\120\040 is great!";
   
   // This is slow
   $a = chr(80), chr(72), chr(80), chr(32), ' is great!';
   
   // This would be the best with this example, but it is not always possible
   $a = 'PHP is great!';
   
   ?>


This is a micro-optimisation.

See also `Escape sequences <https://www.php.net/manual/en/regexp.reference.escape.php>`_.



Suggestions
^^^^^^^^^^^

* Use PHP string sequences, and skip chr() at execution time

Specs
^^^^^
+-------------+--------------------------------------------+
| Short name  | Php/ShouldPreprocess                       |
+-------------+--------------------------------------------+
| Rulesets    | :ref:`Suggestions`                         |
+-------------+--------------------------------------------+
| Exakt since | 1.1.9                                      |
+-------------+--------------------------------------------+
| Php Version | All                                        |
+-------------+--------------------------------------------+
| Severity    | Minor                                      |
+-------------+--------------------------------------------+
| Time To Fix | Slow (1 hour)                              |
+-------------+--------------------------------------------+
| Precision   | High                                       |
+-------------+--------------------------------------------+
| Examples    | :ref:`case-phpadsnew-php-shouldpreprocess` |
+-------------+--------------------------------------------+


.. _should-use-array\_column():

Should Use array_column()
+++++++++++++++++++++++++

 Avoid writing a whole slow loop, and use the native `array_column() <https://www.php.net/array_column>`_.

`array_column() <https://www.php.net/array_column>`_ is a native PHP function, that extract a property or a index from a array of object, or a multidimensional array. This prevents the usage of foreach to collect those values.

.. code-block:: php

   <?php
   
   $a = array(array('b' => 1), 
              array('b' => 2, 'c' => 3), 
              array(          'c' => 4)); // b doesn't always exists
   
   $bColumn = array_column($a, 'b');
   
   // Slow and cumbersome code
   $bColumn = array();
   foreach($a as $k => $v) {
       if (isset($v['b'])) {
           $bColumn[] = $v['b'];
       }
   }
   
   ?>


`array_column() <https://www.php.net/array_column>`_ is faster than `foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_ (with or without the `isset() <https://www.www.php.net/isset>`_ test) with 3 elements or more, and it is significantly faster beyond 5 elements. Memory consumption is the same.

See also `[blog] `array_column() <https://www.php.net/array_column>`_ <https://benramsey.com/projects/array-column/>`_.



Suggestions
^^^^^^^^^^^

* Use array_column(), instead of a foreach()

Specs
^^^^^
+-------------+-----------------------------------------+
| Short name  | Php/ShouldUseArrayColumn                |
+-------------+-----------------------------------------+
| Rulesets    | :ref:`Performances`, :ref:`Suggestions` |
+-------------+-----------------------------------------+
| Exakt since | 0.10.2                                  |
+-------------+-----------------------------------------+
| Php Version | All                                     |
+-------------+-----------------------------------------+
| Severity    | Minor                                   |
+-------------+-----------------------------------------+
| Time To Fix | Quick (30 mins)                         |
+-------------+-----------------------------------------+
| Precision   | High                                    |
+-------------+-----------------------------------------+


.. _should-use-array\_filter():

Should Use array_filter()
+++++++++++++++++++++++++

 Should use `array_filter() <https://www.php.net/array_filter>`_.

`array_filter() <https://www.php.net/array_filter>`_ is a native PHP function, that extract elements from an array, based on a closure or a function. Using `array_filter() <https://www.php.net/array_filter>`_ shortens your code, and allows for reusing the filtering logic across the application, instead of hard coding it every time.

.. code-block:: php

   <?php
   
   $a = range(0, 10); // integers from 0 to 10
   
   // Extracts odd numbers
   $odds = array_filter($a, function($x) { return $x % 2; });
   $odds = array_filter($a, 'odd');
   
   // Slow and cumbersome code for extracting odd numbers
   $odds = array();
   foreach($a as $v) {
       if ($a % 2) { // same filter than the closure above, or the odd function below
           $bColumn[] = $v;
       }
   }
   
   function foo($x) {
       return $x % 2; 
   }
   
   ?>


`array_filter() <https://www.php.net/array_filter>`_ is faster than `foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_ (with or without the `isset() <https://www.www.php.net/isset>`_ test) with 3 elements or more, and it is significantly faster beyond 5 elements. Memory consumption is the same.

See also `array_filter <https://php.net/array_filter>`_.



Suggestions
^^^^^^^^^^^

* Use array_filter()

Specs
^^^^^
+-------------+----------------------------------------------------------------------------------------------+
| Short name  | Php/ShouldUseArrayFilter                                                                     |
+-------------+----------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Suggestions`                                                                           |
+-------------+----------------------------------------------------------------------------------------------+
| Exakt since | 1.0.7                                                                                        |
+-------------+----------------------------------------------------------------------------------------------+
| Php Version | All                                                                                          |
+-------------+----------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                        |
+-------------+----------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                |
+-------------+----------------------------------------------------------------------------------------------+
| Precision   | High                                                                                         |
+-------------+----------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-xataface-php-shouldusearrayfilter`, :ref:`case-shopware-php-shouldusearrayfilter` |
+-------------+----------------------------------------------------------------------------------------------+


.. _should-use-coalesce:

Should Use Coalesce
+++++++++++++++++++

 PHP 7 introduced the ``??`` operator, that replaces longer structures to set default values when a variable is not set.

.. code-block:: php

   <?php
   
   // Fetches the request parameter user and results in 'nobody' if it doesn't exist
   $username = $_GET['user'] ?? 'nobody';
   // equivalent to: $username = isset($_GET['user']) ? $_GET['user'] : 'nobody';
    
   // Calls a hypothetical model-getting function, and uses the provided default if it fails
   $model = Model::get($id) ?? $default_model;
   // equivalent to: if (($model = Model::get($id)) === NULL) { $model = $default_model; }
   
   ?>


Sample extracted from PHP docs `Isset Ternary <https://wiki.php.net/rfc/isset_ternary>`_.

See also `New in PHP 7: null coalesce operator <https://lornajane.net/posts/2015/new-in-php-7-null-coalesce-operator>`_.


Suggestions
^^^^^^^^^^^

* Replace the long syntax with the short one

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------+
| Short name  | Php/ShouldUseCoalesce                                                                      |
+-------------+--------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Suggestions`                            |
+-------------+--------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                      |
+-------------+--------------------------------------------------------------------------------------------+
| Php Version | 7.0+                                                                                       |
+-------------+--------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                      |
+-------------+--------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                            |
+-------------+--------------------------------------------------------------------------------------------+
| Precision   | High                                                                                       |
+-------------+--------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-churchcrm-php-shouldusecoalesce`, :ref:`case-cleverstyle-php-shouldusecoalesce` |
+-------------+--------------------------------------------------------------------------------------------+


.. _should-use-function:

Should Use Function
+++++++++++++++++++

 Functioncalls that fall back to global scope should be using 'use function' or be fully namespaced. 

PHP searches for functions in the local namespaces, and in case it fails, makes the same search in the global scope. Anytime a native function is referenced this way, the search (and fail) happens. This slows down the scripts.

The speed bump range from 2 to 8 %, depending on the availability of functions in the local scope. The overall bump is about 1 µs per functioncall, which makes it a micro optimisation until a lot of function calls are made.

Based on one of `Marco Pivetta tweet <https://twitter.com/Ocramius/status/811504929357660160>`_.

.. code-block:: php

   <?php
   
   namespace X {
       use function strtolower as strtolower_aliased;
       
       // PHP searches for strtolower in X, fails, then falls back to global scope, succeeds.
       $a = strtolower($b);
   
       // PHP searches for strtolower in global scope, succeeds.
       $a = \strtolower($b);
   
       // PHP searches for strtolower_aliased in global scope, succeeds.
       $a = \strtolower_aliased($b);
   }
   
   ?>


This analysis is a related to Performances/Php74ArrayKeyExists, and is a more general version. 

See also `blog post <http://veewee.github.io/blog/optimizing-php-performance-by-fq-function-calls/>`_.


Suggestions
^^^^^^^^^^^

* Use the `use` command for arrray_key_exists(), at the beginning of the script
* Use an initial \ before array_key_exists()
* Remove the namespace

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Php/ShouldUseFunction |
+-------------+-----------------------+
| Rulesets    | :ref:`Performances`   |
+-------------+-----------------------+
| Exakt since | 0.9.5                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _signature-trailing-comma:

Signature Trailing Comma
++++++++++++++++++++++++

 Trailing comma in method signature. This feature was added in PHP 8.0. 

Allowing the trailing comma makes it possible to reduce the size of VCS's diff, when adding , removing a parameter.

.. code-block:: php

   <?php
   
   // Example from the RFC
   class Uri {
       private function __construct(
           ?string $scheme,
           ?string $user,
           ?string $pass,
           ?string $host,
           ?int $port,
           string $path,
           ?string $query,
           ?string $fragment // <-- ARGH!
       ) {
           ...
       }
   }
   ?>


See also `PHP RFC: Allow trailing comma in parameter list <https://wiki.php.net/rfc/trailing_comma_in_parameter_list>`_.


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/SignatureTrailingComma                                                                                            |
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP71`, :ref:`CompatibilityPHP72`, :ref:`CompatibilityPHP73`, :ref:`CompatibilityPHP74` |
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Exakt since | 2.1.0                                                                                                                 |
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Php Version | 8.0+                                                                                                                  |
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                                 |
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                       |
+-------------+-----------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                  |
+-------------+-----------------------------------------------------------------------------------------------------------------------+


.. _spread-operator-for-array:

Spread Operator For Array
+++++++++++++++++++++++++

 The variadic operator may be used with arrays. This has been introduced in PHP 7.4. 

`list() <https://www.php.net/list>`_ is not allowed to use this operator, as `list() <https://www.php.net/list>`_ expected variables, not values.

.. code-block:: php

   <?php
   
   $array = [1, 2, 3];
   $extended_array = [...$array, 4, 5, 6];
   
   // invalid syntax
   [...$a] = [1,2,3];
   
   ?>


See also `Spread Operator in Array Expression <https://wiki.php.net/rfc/spread_operator_for_array>`_.


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Php/SpreadOperatorForArray |
+-------------+----------------------------+
| Rulesets    | :ref:`CE`                  |
+-------------+----------------------------+
| Exakt since | 1.9.4                      |
+-------------+----------------------------+
| Php Version | 7.4+                       |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Quick (30 mins)            |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _class:

\:\:class
+++++++++

 PHP has a special class constant to hold the name of the class : ``class`` keyword. It represents the class name that is used in the left part of the operator.

Using ``\:\:class`` is safer than relying on a string. It does adapt if the class's name or its namespace is changed'. It is also faster, though it is a micro-optimisation. 

It is introduced in PHP 5.5.

.. code-block:: php

   <?php
   
   use A\B\C as UsedName;
   
   class foo {
       public function bar( ) {
           echo ClassName::class; 
           echo UsedName::class; 
       }
   }
   
   $f = new Foo( );
   $f->bar( );
   // displays ClassName 
   // displays A\B\C 
   
   ?>


Be aware that ``\:\:class`` is a replacement for `__CLASS__ <https://www.php.net/manual/en/language.constants.predefined.php>`_ magic constant. 

See also `Class Constant <https://www.php.net/manual/en/language.oop5.constants.php>`_.


Suggestions
^^^^^^^^^^^

* Use \:\:class whenever possible. That exclude any dynamic call.

Specs
^^^^^
+-------------+------------------------------------------------------+
| Short name  | Php/StaticclassUsage                                 |
+-------------+------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54` |
+-------------+------------------------------------------------------+
| Exakt since | 0.8.4                                                |
+-------------+------------------------------------------------------+
| Php Version | 5.5+                                                 |
+-------------+------------------------------------------------------+
| Severity    | Major                                                |
+-------------+------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                        |
+-------------+------------------------------------------------------+
| Precision   | Very high                                            |
+-------------+------------------------------------------------------+


.. _strtr-arguments:

Strtr Arguments
+++++++++++++++

 `Strtr() <https://www.php.net/strtr>`_ replaces characters by others in a string. When using strings, `strtr() <https://www.php.net/strtr>`_ replaces characters as long as they have a replacement. All others are ignored.

In particular, `strtr() <https://www.php.net/strtr>`_ works on strings of the same size, and cannot be used to remove chars.

.. code-block:: php

   <?php
   
   $string = 'abcde';
   echo strtr($string, 'abc', 'AB');
   echo strtr($string, 'ab', 'ABC');
   // displays ABcde 
   // c is ignored each time
   
   // strtr can't remove a char
   echo strtr($string, 'a', '');
   // displays a
   
   ?>


See also `strtr <http://www.php.net/strtr>`_.



Suggestions
^^^^^^^^^^^

* Check the call to strtr() and make sure the arguments are of the same size
* Replace strtr() with str_replace(), which works with strings and array, not chars
* Replace strtr() with preg_match(), which works with patterns and not chars

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Php/StrtrArguments                          |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 1.2.3                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Major                                       |
+-------------+---------------------------------------------+
| Time To Fix | Instant (5 mins)                            |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+
| Examples    | :ref:`case-suitecrm-php-strtrarguments`     |
+-------------+---------------------------------------------+


.. _super-global-usage:

Super Global Usage
++++++++++++++++++

 Spot usage of Super global variables, such as `$_GET <https://www.php.net/manual/en/reserved.variables.get.php>`_, `$_POST <https://www.php.net/manual/en/reserved.variables.post.php>`_ or `$_REQUEST <https://www.php.net/manual/en/reserved.variables.request.php>`_.

.. code-block:: php

   <?php
   
   echo htmlspecialchars($_GET['name'], UTF-8);
   
   ?>


See also `Superglobals <https://www.php.net/manual/en/language.variables.superglobals.php>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Php/SuperGlobalUsage |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _throw:

Throw
+++++

 List of thrown exceptions.

.. code-block:: php

   <?php
   if ($divisor === 0) {
       // Throw native exception
       throw new DivisionByZeroError("Shouldn't divide by one");
   }
   
   if ($divisor === 1) {
       // Throw custom exception
       throw new DontDivideByOneException("Shouldn't divide by one");
   }
   ?>


See also `Exceptions <https://www.php.net/manual/en/language.exceptions.php>`_.

Specs
^^^^^
+-------------+----------------+
| Short name  | Php/ThrowUsage |
+-------------+----------------+
| Rulesets    | :ref:`CE`      |
+-------------+----------------+
| Exakt since | 0.8.4          |
+-------------+----------------+
| Php Version | All            |
+-------------+----------------+
| Severity    | Minor          |
+-------------+----------------+
| Time To Fix | Slow (1 hour)  |
+-------------+----------------+
| Precision   | High           |
+-------------+----------------+


.. _throw-was-an-expression:

Throw Was An Expression
+++++++++++++++++++++++

 Throw used to be an expression. In PHP 7.0, there were some location where one couldn't use a throw : this was the case for arrow functions, which expect one expression as function's body. 

Using throw as an instruction makes the code incompatible with PHP 7 version and older. 

.. code-block:: php

   <?php
   
   // Valid in PHP 8.0 and more recent
   $fn = fn($a) => throw new Exception($a);
   
   ?>


See also `Throw Expression <https://wiki.php.net/rfc/throw_expression>`_ and `Exceptions <https://www.php.net/manual/en/language.exceptions.php>`_.


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------+
| Short name  | Php/ThrowWasAnExpression                                                                   |
+-------------+--------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP72`, :ref:`CompatibilityPHP73`, :ref:`CompatibilityPHP74` |
+-------------+--------------------------------------------------------------------------------------------+
| Exakt since | 2.1.1                                                                                      |
+-------------+--------------------------------------------------------------------------------------------+
| Php Version | 8.0+                                                                                       |
+-------------+--------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                      |
+-------------+--------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                            |
+-------------+--------------------------------------------------------------------------------------------+
| Precision   | High                                                                                       |
+-------------+--------------------------------------------------------------------------------------------+


.. _too-many-native-calls:

Too Many Native Calls
+++++++++++++++++++++

 Avoid stuffing too many PHP native call inside another functioncall. 

For readability reasons, or, more often, for edge case handling, it is recommended to avoid nesting too many PHP native calls. 

This analysis reports any situation where more than 3 PHP native calls are nested.

.. code-block:: php

   <?php
   
   // Too many nested functions 
   $cleanArray = array_unique(array_keys(array_count_values(array_column($source, 'x'))));
   
   // Avoid warning when source is empty
   $extract = array_column($source, 'x');
   if (empty($extract)) {
       $cleanArray = array();
   } else {
       $cleanArray = array_unique(array_keys(array_count_values($extract)));
   }
   
   // This is not readable, although it is short. 
   // It may easily get out of hand.
   echo chr(80), chr(72), chr(80), chr(32), ' is great!';
   
   ?>

+------------------+---------+---------+---------------------------------------------------+
| Name             | Default | Type    | Description                                       |
+------------------+---------+---------+---------------------------------------------------+
| nativeCallCounts | 3       | integer | Number of native calls found inside another call. |
+------------------+---------+---------+---------------------------------------------------+



Specs
^^^^^
+-------------+-----------------------------------------+
| Short name  | Php/TooManyNativeCalls                  |
+-------------+-----------------------------------------+
| Rulesets    | :ref:`Analyze`                          |
+-------------+-----------------------------------------+
| Exakt since | 1.1.10                                  |
+-------------+-----------------------------------------+
| Php Version | All                                     |
+-------------+-----------------------------------------+
| Severity    | Minor                                   |
+-------------+-----------------------------------------+
| Time To Fix | Quick (30 mins)                         |
+-------------+-----------------------------------------+
| Precision   | High                                    |
+-------------+-----------------------------------------+
| Examples    | :ref:`case-spip-php-toomanynativecalls` |
+-------------+-----------------------------------------+


.. _trailing-comma-in-calls:

Trailing Comma In Calls
+++++++++++++++++++++++

 The last argument may be left empty. 

This feature was introduced in PHP 7.3. 

.. code-block:: php

   <?php
     
   // VCS friendly call
   // PHP 7.3 and more recent
   foo(1,
       2,
       3,
      );
   
   // backward compatible call
   // All PHP versions
   foo(1,
       2,
       3
      );
     
   ?>


See also `PHP RFC: Allow a trailing comma in function calls <https://wiki.php.net/rfc/trailing-comma-function-calls>`_.

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/TrailingComma                                                                                                                                                                                      |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70`, :ref:`CompatibilityPHP71`, :ref:`CompatibilityPHP72` |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.4.0                                                                                                                                                                                                  |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                                                                                                                    |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                                                                                                                  |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                                                                                                        |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                                                                                   |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. _trigger-errors:

Trigger Errors
++++++++++++++

 List of situations where user errors are triggered.

PHP errors are triggered with `trigger_error() <https://www.php.net/trigger_error>`_.

.. code-block:: php

   <?php
   if ($divisor == 0) {
       trigger_error('Cannot divide by zero', E_USER_ERROR);
   }
   ?>


See also `trigger_error <https://www.php.net/trigger_error>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Php/TriggerErrorUsage |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _caught-expressions:

Caught Expressions
++++++++++++++++++

 List of caught exceptions.

.. code-block:: php

   <?php
   
   // This analyzer reports MyException and Exception
   try {
       doSomething();
   } catch (MyException $e) {
       fixIt();
   } catch (\Exception $e) {
       fixIt();
   }
   
   ?>

Specs
^^^^^
+-------------+-------------------+
| Short name  | Php/TryCatchUsage |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _try-with-multiple-catch:

Try With Multiple Catch
+++++++++++++++++++++++

 Try may be used with multiple catch clauses. 

.. code-block:: php

   <?php
   
   try { 
       OneCatch(); 
   } catch (FirstException $e) {
   
   }
   
   try { 
       TwoCatches(); 
   } catch (FirstException $e) {
   } catch (SecondException $e) {
   }
   
   ?>


See also `Exceptions <https://www.php.net/manual/en/language.exceptions.php>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Php/TryMultipleCatch |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.11.3               |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _typed-property-usage:

Typed Property Usage
++++++++++++++++++++

 PHP properties may be typed. Since PHP 7.4, it is possible to type properties, just like arguments and return values.

.. code-block:: php

   <?php
   
   class User {
       public int $id;
       public string $name;
    
       public function __construct(int $id, string $name) {
           $this->id = $id;
           $this->name = $name;
       }
   }
   ?>


See also `Typed Properties 2.0 <https://wiki.php.net/rfc/typed_properties_v2>`_.

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/TypedPropertyUsage                                                                                                                                                                                                            |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70`, :ref:`CompatibilityPHP71`, :ref:`CompatibilityPHP72`, :ref:`CompatibilityPHP73` |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.6.2                                                                                                                                                                                                                             |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | 7.4+                                                                                                                                                                                                                              |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                                                                                                                                             |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                                                                                                                                   |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                                                                                                              |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. _unicode-escape-partial:

Unicode Escape Partial
++++++++++++++++++++++

 PHP 7 introduces a new escape sequence for strings : \u{hex}. It is backward incompatible with previous PHP versions for two reasons : 

PHP 7 will recognize en replace those sequences, while PHP 5 keep them intact.
PHP 7 will halt on partial Unicode Sequences, as it tries to understand them, but may fail. 

.. code-block:: php

   <?php
   
   echo \u{1F418}\n; 
   // PHP 5 displays the same string
   // PHP 7 displays : an elephant
   
   echo \u{NOT A UNICODE CODEPOINT}\n; 
   // PHP 5 displays the same string
   // PHP 7 emits a fatal error
   
   ?>


Is is recommended to check all those strings, and make sure they will behave correctly in PHP 7.

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------+
| Short name  | Php/UnicodeEscapePartial                                                                                   |
+-------------+------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56` |
+-------------+------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Php Version | 7.0-                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                            |
+-------------+------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+


.. _unicode-escape-syntax:

Unicode Escape Syntax
+++++++++++++++++++++

 Usage of the Unicode Escape syntax, with the ``\u{xxxxx}`` format, available since PHP 7.0.

.. code-block:: php

   <?php
   
   // Produce an elephant icon in PHP 7.0+
   echo \u{1F418};
   
   // Produce the raw sequence in PHP 5.0
   echo \u{1F418};
   
   ?>


See also `PHP RFC: Unicode Codepoint Escape Syntax <https://wiki.php.net/rfc/unicode_escape>`_, `Code point <https://en.wikipedia.org/wiki/Code_point>`_ and `Unicode <https://en.wikipedia.org/wiki/Unicode>`_.

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------+
| Short name  | Php/UnicodeEscapeSyntax                                                                                    |
+-------------+------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56` |
+-------------+------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Php Version | 7.0+                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                              |
+-------------+------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+


.. _unknown-pcre2-option:

Unknown Pcre2 Option
++++++++++++++++++++

 ``PCRE2`` supports different options, compared to ``PCRE1``. ``PCRE2`` was adopted with PHP 7.3. 

The ``S`` modifier : it used to tell PCRE to spend more time studying the regex, so as to be faster at execution. This is now the default behavior, and may be dropped from the regex.

The ``X`` modifier : ``X`` is still existing with ``PCRE2``, though it is now the default for ``PCRE2``, and not for PHP as time of writing. In particular, ``Any backslash in a pattern that is followed by a letter that has no special meaning causes an error, thus reserving these combinations for future expansion. ``. It is recommended to avoid using useless sequence \s in regex to get ready for that change. All the following letters ``gijkmoqyFIJMOTY`` . Note that ``clLpPuU`` are valid ``PRCE`` sequences, and are probably failing for other reasons. 

.. code-block:: php

   <?php
   
   // \y has no meaning. With X option, this leads to a regex compilation error, and a failed test.
   preg_match('/ye\y/', $string);
   preg_match('/ye\y/X', $string);
   
   ?>


See also `Pattern Modifiers <https://www.php.net/manual/en/reference.pcre.pattern.modifiers.php>`_ and `PHP RFC: PCRE2 migration <https://wiki.php.net/rfc/pcre2-migration>`_.

Specs
^^^^^
+-------------+-------------------------------------------+
| Short name  | Php/UnknownPcre2Option                    |
+-------------+-------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CompatibilityPHP73` |
+-------------+-------------------------------------------+
| Exakt since | 1.0.4                                     |
+-------------+-------------------------------------------+
| Php Version | All                                       |
+-------------+-------------------------------------------+
| Severity    | Minor                                     |
+-------------+-------------------------------------------+
| Time To Fix | Instant (5 mins)                          |
+-------------+-------------------------------------------+
| Precision   | High                                      |
+-------------+-------------------------------------------+


.. _unpacking-inside-arrays:

Unpacking Inside Arrays
+++++++++++++++++++++++

 The variadic operator is now available inside arrays. Until PHP 7.4, it is not possible to use the variadic operator, or ``...`` inside arrays. 

The workaround is to use `array_merge() <https://www.php.net/array_merge>`_, after checking that arrays are not empty.

.. code-block:: php

   <?php
   
   $a = ['a', 'b', 'c'];
   $b = ['d', 'e', 'f'];
   
   // PHP 7.4 
   $c = [...$a, ...$b];
   
   // PHP 7.3 and older
   $c = array_merge($a, $b);
   
   ?>


See also `Spread Operator in Array Expression  <https://wiki.php.net/rfc/spread_operator_for_array>`_ and 
         `PHP 5.6 and the Splat Operator <https://lornajane.net/posts/2014/php-5-6-and-the-splat-operator>`_ .


Suggestions
^^^^^^^^^^^

* Replace array_merge() with ``...``.

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/UnpackingInsideArrays                                                                                                                                                                                              |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70`, :ref:`CompatibilityPHP71`, :ref:`CompatibilityPHP72`, :ref:`CompatibilityPHP73` |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.8.0                                                                                                                                                                                                                  |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | 7.4+                                                                                                                                                                                                                   |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                                                                                                                                  |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                                                                                                                        |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                                                                                                   |
+-------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. _unset()-or-(unset):

Unset() Or (unset)
++++++++++++++++++

 `Unset() <https://www.php.net/unset>`_ and (unset) have the same functional use. 

The analyzed code has less than 10% of one of them : for consistency reasons, it is recommended to make them all the same. 

It happens that `unset() <https://www.php.net/unset>`_ or (unset) are used depending on coding style and files. One file may be consistently using `unset() <https://www.php.net/unset>`_, while the others are all using (unset). 

.. code-block:: php

   <?php
   
   // be consistent
   (unset) $a1;
   (unset) $a2;
   (unset) $a3;
   (unset) $a4;
   (unset) $a5;
   (unset) $a6;
   (unset) $a7;
   (unset) $a8;
   (unset) $a9;
   (unset) $a10;
   (unset) $a11;
   (unset) $a12;
   
   unset($b);
   ?>

Specs
^^^^^
+-------------+-----------------+
| Short name  | Php/UnsetOrCast |
+-------------+-----------------+
| Rulesets    | none            |
+-------------+-----------------+
| Exakt since | 0.9.3           |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Slow (1 hour)   |
+-------------+-----------------+
| Precision   | High            |
+-------------+-----------------+


.. _unusual-case-for-php-functions:

Unusual Case For PHP Functions
++++++++++++++++++++++++++++++

 Usually, PHP functions are written all in lower case.

.. code-block:: php

   <?php
   
   // All uppercases PHP functions
   ECHO STRTOLOWER('This String');
   
   ?>

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Php/UpperCaseFunction |
+-------------+-----------------------+
| Rulesets    | none                  |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Instant (5 mins)      |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _non-lowercase-keywords:

Non-lowercase Keywords
++++++++++++++++++++++

 The usual convention is to write PHP keywords (like ``as``, ``foreach``, ``switch``, ``case``, ``break``, etc.) all in lowercase. 

.. code-block:: php

   <?php
   
   // usual PHP convention
   foreach($array as $element) {
       echo $element;
   }
   
   // unusual PHP conventions
   Foreach($array AS $element) {
       eCHo $element;
   }
   
   ?>


PHP understands them in lowercase, UPPERCASE or WilD Case, so there is nothing compulsory here. Although, it will look strange to many. 

Some keywords are missing from this analysis : ``extends``, ``implements``, ``as``. This is due to the internal engine, which doesn't keep track of them in its AST representation.


Suggestions
^^^^^^^^^^^

* Use lowercase only PHP keywords, except for constants such as __CLASS__.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Php/UpperCaseKeyword |
+-------------+----------------------+
| Rulesets    | none                 |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Instant (5 mins)     |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _use-php-attributes:

Use PHP Attributes
++++++++++++++++++

 PHP 8.0 attributes. WIP.

.. code-block:: php

   <?php
   
   @@foo(4)
   class x {
   
   }
   
   ?>


See also `PHP RFC: Shorter Attribute Syntax <https://wiki.php.net/rfc/shorter_attribute_syntax>`_, `Attributes Amendements <https://wiki.php.net/rfc/attribute_amendments>`_ and `Shorter Attribute Syntax Change <https://wiki.php.net/rfc/shorter_attribute_syntax_change>`_.
         .

Specs
^^^^^
+-------------+-------------------+
| Short name  | Php/UseAttributes |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 2.1.6             |
+-------------+-------------------+
| Php Version | 8.0+              |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Quick (30 mins)   |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _use-browscap:

Use Browscap
++++++++++++

 Browscap is a browser database, accessible via `get_browser() <https://www.php.net/get_browser>`_. 

Browscap is the 'Browser Capabilities Project'.

.. code-block:: php

   <?php
   echo $_SERVER['HTTP_USER_AGENT'] . \n\n;
   
   $browser = get_browser(null, true);
   print_r($browser);
   ?>


See also `browscap <http://browscap.org/>`_.

Specs
^^^^^
+-------------+-----------------+
| Short name  | Php/UseBrowscap |
+-------------+-----------------+
| Rulesets    | :ref:`CE`       |
+-------------+-----------------+
| Exakt since | 0.11.4          |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Slow (1 hour)   |
+-------------+-----------------+
| Precision   | High            |
+-------------+-----------------+


.. _use-cli:

Use Cli
+++++++

 Signal the usage of code in CLI mode, through the usage of `$argv` and `$argc` variables.

.. code-block:: php

   <?php
   
   // Characteristics of CLI usage 
   getopt(abcd);
   
   ?>

Specs
^^^^^
+-------------+---------------+
| Short name  | Php/UseCli    |
+-------------+---------------+
| Rulesets    | :ref:`CE`     |
+-------------+---------------+
| Exakt since | 0.8.4         |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _use-contravariance:

Use Contravariance
++++++++++++++++++

 Contravariance is compatible argument typehint. A child class may accept an object of a `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ class of the argument type of its `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_'s method.

Since a children class may accept a `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ class of the argynebt type, the evolution is in opposite order. 

Contravariance is a PHP 7.4 feature. Contravariance is distinct from return type covariance.

.. code-block:: php

   <?php
   class X {
     function m(Y $z): X {}
   }
   
   // m is overwriting the parent's method. 
   // The return type is different.
   // The return type is compatible, as Y is also a sub-class of X.
   class Y extends X {
     function m(X $z): Y {}
   }
   
   ?>


See also `Covariant Returns and Contravariant Parameters <https://wiki.php.net/rfc/covariant-returns-and-contravariant-parameters>`_ and 
         `Php/UseCovariance`.


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Php/UseContravariance |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 1.9.3                 |
+-------------+-----------------------+
| Php Version | 7.4+                  |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Quick (30 mins)       |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _use-cookies:

Use Cookies
+++++++++++

 This code source uses cookies. 

Cookie usage is spotted with the usage of `setcookie() <https://www.php.net/setcookie>`_, setawcookie() and `header() <https://www.php.net/header>`_ with the 'Set-Cookie' header. 

.. code-block:: php

   <?php
   
        header('Set-Cookie: '.$name.'='.$value.'; EXPIRES'.$date.';');
   
       // From the PHP Manual : 
       setcookie('TestCookie3', $value, time()+3600, '/~rasmus/', 'example.com', 1);
   
   ?>


See also : `Cookies <https://www.php.net/manual/en/features.cookies.php>`_.

Specs
^^^^^
+-------------+----------------+
| Short name  | Php/UseCookies |
+-------------+----------------+
| Rulesets    | :ref:`CE`      |
+-------------+----------------+
| Exakt since | 0.10.6         |
+-------------+----------------+
| Php Version | All            |
+-------------+----------------+
| Severity    | Minor          |
+-------------+----------------+
| Time To Fix | Slow (1 hour)  |
+-------------+----------------+
| Precision   | High           |
+-------------+----------------+


.. _use-covariance:

Use Covariance
++++++++++++++

 Covariance is compatible return typehint. A child class may return an object of a child class of the return type of its `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_'s method.

Since a children class may return a children class of the return type, the evolution is in the same order.

Covariance is a PHP 7.4 feature. Covariance is distinct from argument contravariance.

.. code-block:: php

   <?php
   class X {
     function m(Y $z): X {}
   }
   
   // m is overwriting the parent's method. 
   // The return type is different.
   // The return type is compatible, as Y is also a sub-class of X.
   class Y extends X {
     function m(X $z): Y {}
   }
   
   ?>


See also `Covariant Returns and Contravariant Parameters <https://wiki.php.net/rfc/covariant-returns-and-contravariant-parameters>`_ and 
         `Php/UseContravariance`.


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-------------------+
| Short name  | Php/UseCovariance |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 1.9.3             |
+-------------+-------------------+
| Php Version | 7.4+              |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Quick (30 mins)   |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _use-datetimeimmutable-class:

Use DateTimeImmutable Class
+++++++++++++++++++++++++++

 The `DateTimeImmutable <https://www.php.net/`DateTimeImmutable <https://www.php.net/DateTimeImmutable>`_>`_ class is the immutable version of the `Datetime <https://www.php.net/manual/en/class.datetime.php>`_ class. 

While `DateTime <https://www.php.net/`DateTime <https://www.php.net/DateTime>`_>`_ may be modified 'in situ', ``DateTimeImmutable`` cannot be modified. Any modification to such an object will return a new and distinct object. This avoid interferences that are hard to track.

.. code-block:: php

   <?php
   // Example extracted from Derick Rethans' article (link below)
   
   function formatNextMondayFromNow( DateTime $dt )
   {
           return $dt->modify( 'next monday' )->format( 'Y-m-d' );
   }
   
   $d = new DateTime();                          //2014-02-17
   echo formatNextMondayFromNow( $d ), \n;
   echo $d->format( 'Y-m-d' ), \n;             //2014-02-17
   ?>


See also `What's all this 'immutable date' stuff, anyway? <https://medium.com/@codebyjeff/whats-all-this-immutable-date-stuff-anyway-72d4130af8ce>`_, `DateTimeImmutable <https://derickrethans.nl/immutable-datetime.html>`_, `The `DateTime <https://www.php.net/`DateTime <https://www.php.net/DateTime>`_>`_ class <https://www.php.net/manual/en/class.datetime.php>`_ and `The `DateTimeImmutable <https://www.php.net/`DateTimeImmutable <https://www.php.net/DateTimeImmutable>`_>`_ class <https://www.php.net/manual/en/class.datetimeimmutable.php>`_.


Suggestions
^^^^^^^^^^^

* Always use DateTimeImmutable when manipulating dates.

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Php/UseDateTimeImmutable |
+-------------+--------------------------+
| Rulesets    | :ref:`Suggestions`       |
+-------------+--------------------------+
| Exakt since | 1.8.7                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Quick (30 mins)          |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _use-get\_debug\_type():

Use get_debug_type()
++++++++++++++++++++

 get_debug_type() returns the given type of a variable. It was introduced in PHP 8.0.

.. code-block:: php

   <?php
     // From the RFC 
     throw new TypeError('Expected ' . Foo::class . ' got ' . (is_object($bar) ? get_class($bar) : gettype($bar)));
   
     // Becomes
     throw new TypeError('Expected ' . Foo::class . ' got ' . get_debug_type($bar));
   
   ?>


See also `PHP RFC: get_debug_type <https://wiki.php.net/rfc/get_debug_type>`_.


Suggestions
^^^^^^^^^^^

* Replace the ternary with a call to get_debug_type()

Specs
^^^^^
+-------------+---------------------+
| Short name  | Php/UseGetDebugType |
+-------------+---------------------+
| Rulesets    | :ref:`Suggestions`  |
+-------------+---------------------+
| Exakt since | 2.1.9               |
+-------------+---------------------+
| Php Version | 8.0+                |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Quick (30 mins)     |
+-------------+---------------------+
| Precision   | Medium              |
+-------------+---------------------+


.. _uses-php-8-match():

Uses PHP 8 Match()
++++++++++++++++++

 Use the `match() <https://www.php.net/manual/en/control-structures.match.php>`_ syntax. 

.. code-block:: php

   <?php
   
   
   $A = match($a) {
       'a' => 'A',
       'b' => 'B',
       default => 'd',
   };
   
   ?>


See also `match <https://www.php.net/manual/en/control-structures.match.php>`_ `Match expression <https://php.watch/versions/8.0/match-expression>`_.

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Php/UseMatch                         |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP74` |
+-------------+--------------------------------------+
| Exakt since | 2.1.4                                |
+-------------+--------------------------------------+
| Php Version | 8.0+                                 |
+-------------+--------------------------------------+
| Severity    | Minor                                |
+-------------+--------------------------------------+
| Time To Fix | Quick (30 mins)                      |
+-------------+--------------------------------------+
| Precision   | Very high                            |
+-------------+--------------------------------------+


.. _use-nullable-type:

Use Nullable Type
+++++++++++++++++

 The code uses nullable type, available since PHP 7.1.

Nullable Types are an option to type hint : they allow the passing value to be null, or another type. 

According to the authors of the feature : 'It is common in many programming languages including PHP to allow a variable to be of some type or null. This null often indicates an error or lack of something to return.'

.. code-block:: php

   <?php
   
   function foo(?string $a = 'abc') : ?string {
       return $a.b;
   }
   
   ?>


See also `Type declarations <https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration>`_ and `PHP RFC: Nullable Types <https://wiki.php.net/rfc/nullable_types>`_.

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Php/UseNullableType                                                                                                                              |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70` |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                                                            |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | 7.1+                                                                                                                                             |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                                                            |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                                                  |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                             |
+-------------+--------------------------------------------------------------------------------------------------------------------------------------------------+


.. _use-nullsafe-operator:

Use NullSafe Operator
+++++++++++++++++++++

 The nullsafe operator ``?->`` is an alternative to the object operator ``->``. It silently fails the whole expression if a null is used for object. 

.. code-block:: php

   <?php
   
   $o = null;
   
   // PHP 8.0 Failsafe : $r = null;
   $r = $o->method();
   
   // PHP 7.4- : Call to a member function method() on null
   $r = $o->method();
   
   ?>


See also `PHP RFC: Nullsafe operator <https://wiki.php.net/rfc/nullsafe_operator>`_.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Php/UseNullSafeOperator |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 2.1.6                   |
+-------------+-------------------------+
| Php Version | 8.0+                    |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Quick (30 mins)         |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _use-php-object-api:

Use PHP Object API
++++++++++++++++++

 OOP API is the modern version of the PHP API.

When PHP offers the alternative between procedural and OOP api for the same features, it is recommended to use the OOP API. 

Often, this least to more compact code, as methods are shorter, and there is no need to bring the resource around. Lots of new extensions are directly written in OOP form too.

OOP / procedural alternatives are available for `mysqli <https://www.php.net/manual/en/book.`mysqli <https://www.php.net/mysqli>`_.php>`_, `tidy <https://www.php.net/manual/en/book.`tidy <https://www.php.net/tidy>`_.php>`_, `cairo <https://www.php.net/manual/en/book.cairo.php>`_, `finfo <https://www.php.net/manual/en/book.fileinfo.php>`_, and some others.

.. code-block:: php

   <?php
   /// OOP version
   $mysqli = new mysqli(localhost, my_user, my_password, world);
   
   /* check connection */
   if ($mysqli->connect_errno) {
       printf(Connect failed: %s\n, $mysqli->connect_error);
       exit();
   }
   
   /* Create table doesn't return a resultset */
   if ($mysqli->query(CREATE TEMPORARY TABLE myCity LIKE City) === TRUE) {
       printf(Table myCity successfully created.\n);
   }
   
   /* Select queries return a resultset */
   if ($result = $mysqli->query(SELECT Name FROM City LIMIT 10)) {
       printf(Select returned %d rows.\n, $result->num_rows);
   
       /* free result set */
       $result->close();
   }
   ?>


.. code-block:: php

   <?php
   /// Procedural version
   $link = mysqli_connect(localhost, my_user, my_password, world);
   
   /* check connection */
   if (mysqli_connect_errno()) {
       printf(Connect failed: %s\n, mysqli_connect_error());
       exit();
   }
   
   /* Create table doesn't return a resultset */
   if (mysqli_query($link, CREATE TEMPORARY TABLE myCity LIKE City) === TRUE) {
       printf(Table myCity successfully created.\n);
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Use the object API

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------+
| Short name  | Php/UseObjectApi                                                                            |
+-------------+---------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                 |
+-------------+---------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                       |
+-------------+---------------------------------------------------------------------------------------------+
| Php Version | All                                                                                         |
+-------------+---------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                       |
+-------------+---------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                               |
+-------------+---------------------------------------------------------------------------------------------+
| Precision   | High                                                                                        |
+-------------+---------------------------------------------------------------------------------------------+
| ClearPHP    | `use-object-api <https://github.com/dseguy/clearPHP/tree/master/rules/use-object-api.md>`__ |
+-------------+---------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-wordpress-php-useobjectapi`, :ref:`case-prestashop-php-useobjectapi`             |
+-------------+---------------------------------------------------------------------------------------------+


.. _use-pathinfo:

Use Pathinfo
++++++++++++

 Use `pathinfo() <https://www.php.net/pathinfo>`_ function instead of string manipulations.

`pathinfo() <https://www.php.net/pathinfo>`_ is more efficient and readable and string functions.

.. code-block:: php

   <?php
   
   $filename = '/path/to/file.php';
   
   // With pathinfo();
   $details = pathinfo($filename);
   print $details['extension'];  // also capture php
   
   // With string functions (other solutions possible)
   $ext = substr($filename, - strpos(strreverse($filename), '.')); // Capture php
   
   ?>


When the path contains UTF-8 characters, `pathinfo() <https://www.php.net/pathinfo>`_ may strip them. There, string functions are necessary.


Suggestions
^^^^^^^^^^^

* Use pathinfo() and its second argument

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Php/UsePathinfo                             |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.8.4                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+
| Examples    | :ref:`case-suitecrm-php-usepathinfo`        |
+-------------+---------------------------------------------+


.. _use-pathinfo()-arguments:

Use pathinfo() Arguments
++++++++++++++++++++++++

 `pathinfo() <https://www.php.net/pathinfo>`_ has a second argument to select only useful data. 

It is twice faster to get only one element from `pathinfo() <https://www.php.net/pathinfo>`_ than get the four of them, and use only one.

This analysis reports `pathinfo() <https://www.php.net/pathinfo>`_ usage, without second argument, where only one or two indices are used, after the call.

.. code-block:: php

   <?php
   
   // This could use only PATHINFO_BASENAME
   function foo_db() {
       $a = pathinfo($file2);
       return $a['basename'];
   }
   
   // This could be 2 calls, with PATHINFO_BASENAME and PATHINFO_DIRNAME.
   function foo_de() {
       $a = pathinfo($file3);
       return $a['dirname'].'/'.$a['basename'];
   }
   
   // This is OK : 3 calls to pathinfo() is slower than array access.
   function foo_deb() {
       $a = pathinfo($file4);
       return  $a['dirname'].'/'.$a['filename'].'.'.$a['extension'];
   }
   
   ?>


Depending on the situation, the functions `dirname() <https://www.php.net/dirname>`_ and `basename() <https://www.php.net/basename>`_ may also be used. They are even faster, when only fetching those data.

See also `list <https://www.php.net/manual/en/function.list.php>`_.


Suggestions
^^^^^^^^^^^

* Use PHP native function pathinfo() and its arguments

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------+
| Short name  | Php/UsePathinfoArgs                                                                   |
+-------------+---------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Performances`                                                                   |
+-------------+---------------------------------------------------------------------------------------+
| Exakt since | 0.12.12                                                                               |
+-------------+---------------------------------------------------------------------------------------+
| Php Version | All                                                                                   |
+-------------+---------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                 |
+-------------+---------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                       |
+-------------+---------------------------------------------------------------------------------------+
| Precision   | High                                                                                  |
+-------------+---------------------------------------------------------------------------------------+
| Examples    | :ref:`case-zend-config-php-usepathinfoargs`, :ref:`case-thinkphp-php-usepathinfoargs` |
+-------------+---------------------------------------------------------------------------------------+


.. _uses-environment:

Uses Environment
++++++++++++++++

 Spot usage of `$_ENV <https://www.php.net/manual/en/reserved.variables.env.php>`_ and `getenv() <https://www.php.net/getenv>`_ `putenv() <https://www.php.net/putenv>`_ functions that will fetch data from the environment.

.. code-block:: php

   <?php
   
   // Take some configuration from the environment
   $secret_key = getenv('secret_key');
   
   ?>

Specs
^^^^^
+-------------+---------------+
| Short name  | Php/UsesEnv   |
+-------------+---------------+
| Rulesets    | :ref:`CE`     |
+-------------+---------------+
| Exakt since | 0.8.4         |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _use-session\_start()-options:

Use session_start() Options
+++++++++++++++++++++++++++

 It is possible to set the session's option at `session_start() <https://www.php.net/session_start>`_ call, skipping the usage of session_option().

This way, session's options are set in one call, saving several hits.

This is available since PHP 7.0. It is recommended to set those values in the ``php.ini`` file, whenever possible. 

.. code-block:: php

   <?php
   
   // PHP 7.0
   session_start(['session.name' => 'mySession',
                  'session.cookie_httponly' => 1,
                  'session.gc_maxlifetime' => 60 * 60);
   
   // PHP 5.6- old way 
   ini_set ('session.name', 'mySession');
   ini_set(session.cookie_httponly, 1); 
   ini_set('session.gc_maxlifetime', 60 * 60);
   session_start();
   
   ?>




Suggestions
^^^^^^^^^^^

* Use session_start() with array arguments

Specs
^^^^^
+-------------+--------------------------------------------------+
| Short name  | Php/UseSessionStartOptions                       |
+-------------+--------------------------------------------------+
| Rulesets    | :ref:`Suggestions`                               |
+-------------+--------------------------------------------------+
| Exakt since | 0.11.8                                           |
+-------------+--------------------------------------------------+
| Php Version | 7.0+                                             |
+-------------+--------------------------------------------------+
| Severity    | Minor                                            |
+-------------+--------------------------------------------------+
| Time To Fix | Slow (1 hour)                                    |
+-------------+--------------------------------------------------+
| Precision   | High                                             |
+-------------+--------------------------------------------------+
| Examples    | :ref:`case-wordpress-php-usesessionstartoptions` |
+-------------+--------------------------------------------------+


.. _should-use-setcookie():

Should Use SetCookie()
++++++++++++++++++++++

 Use `setcookie() <https://www.php.net/setcookie>`_ or `setrawcookie() <https://www.php.net/setrawcookie>`_. Avoid using `header() <https://www.php.net/header>`_ to do so, as the PHP native functions are more convenient and easier to spot during a refactoring.

`setcookie() <https://www.php.net/setcookie>`_ applies some encoding internally, for the value of the cookie and the date of expiration. Rarely, this encoding has to be skipped : then, use setrawencoding().

Both functions help by giving a checklist of important attributes to be used with the cookie. 

.. code-block:: php

   <?php
   
   // same as below
   setcookie(myCookie, 'chocolate', time()+3600, /, , true, true);
   
   // same as above. Slots for path and domain are omitted, but should be used whenever possible
   header('Set-Cookie: myCookie=chocolate; Expires='.date('r', (time()+3600)).'; Secure; HttpOnly');
   
   ?>


See also `Set-Cookie <https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie>`_, `setcookie <http://www.php.net/setcookie>`_.


Suggestions
^^^^^^^^^^^

* Use setcookie() function, instead of header()
* Use setcookie() function, instead of header()

Specs
^^^^^
+-------------+------------------+
| Short name  | Php/UseSetCookie |
+-------------+------------------+
| Rulesets    | :ref:`Analyze`   |
+-------------+------------------+
| Exakt since | 0.10.6           |
+-------------+------------------+
| Php Version | All              |
+-------------+------------------+
| Severity    | Major            |
+-------------+------------------+
| Time To Fix | Instant (5 mins) |
+-------------+------------------+
| Precision   | High             |
+-------------+------------------+


.. _avoid-using-stdclass:

Avoid Using stdClass
++++++++++++++++++++

 ``stdClass`` is the default class for PHP. It is instantiated when PHP needs to return a object, but no class is specifically available.

It is recommended to avoid instantiating this class, nor use it is any way.

.. code-block:: php

   <?php
   
   $json = '{a:1,b:2,c:3}';
   $object = json_decode($json);
   // $object is a stdClass, as returned by json_decode
   
   // Fast building of $o
   $a = [];
   $a['a'] = 1;
   $a['b'] = 2;
   $a['c'] = 3;
   json_encode( (object) $a);
   
   // Slow building of $o
   $o = new stdClass();
   $o->a = 1;
   $o->b = 2;
   $o->c = 3;
   json_encode($o);
   
   ?>


If you need a ``stdClass`` object, it is faster to build it as an array, then cast it, than instantiate ``stdClass``. This is a micro-optimisation.



Suggestions
^^^^^^^^^^^

* Create a custom class to handle the properties

Specs
^^^^^
+-------------+-----------------+
| Short name  | Php/UseStdclass |
+-------------+-----------------+
| Rulesets    | :ref:`Analyze`  |
+-------------+-----------------+
| Exakt since | 0.9.1           |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Slow (1 hour)   |
+-------------+-----------------+
| Precision   | High            |
+-------------+-----------------+


.. _use-str\_contains():

Use str_contains()
++++++++++++++++++

 str_contains() checks if a string is within another one. It replaces a call to `strpos() <https://www.php.net/strpos>`_ with a comparison. 

.. code-block:: php

   <?php
    
   if (str_contains(abc, a)) { doSomething(); }
   
   // strpos is used only for detection.
   if (strpos(abc, a) !== false) { doSomething(); }
   
   // strpos returns a position, 
   $pos = strpos(abca, a, 3);
   if ($pos > 3) { doSomething();
   
   ?>


Note that this function is case sensitive : it cannot replace `stripos() <https://www.php.net/stripos>`_.

Note that this function is single-byte only : it cannot replace `mb_strpos() <https://www.php.net/mb_strpos>`_.

This analysis omits calls to `strpos() <https://www.php.net/strpos>`_ that are saved to a variable. `strpos() <https://www.php.net/strpos>`_ is actually returning the position of the found string in the haystack, which may be reused later. 

See also `PHP RFC: str_contains <https://wiki.php.net/rfc/str_contains>`_.


Suggestions
^^^^^^^^^^^

* Switch to str_contains()

Specs
^^^^^
+-------------+--------------------+
| Short name  | Php/UseStrContains |
+-------------+--------------------+
| Rulesets    | :ref:`Suggestions` |
+-------------+--------------------+
| Exakt since | 2.2.0              |
+-------------+--------------------+
| Php Version | 8.0+               |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Quick (30 mins)    |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _use-closure-trailing-comma:

Use Closure Trailing Comma
++++++++++++++++++++++++++

 Use a trailing comma in the closure's use list. This feature was added in PHP 8.0.

.. code-block:: php

   <?php
   
   // PHP 8.0 valid syntax
   $f = function foo() use ($a, ) { };
   
   // always valid syntax for closure
   $f = function foo() use ($a ) { };
   
   ?>


See also `Trailing Comma In `Closure <https://www.php.net/manual/en/class.closure.php>`_ Use List <https://wiki.php.net/rfc/trailing_comma_in_closure_use_list>`_.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Php/UseTrailingUseComma |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 2.1.6                   |
+-------------+-------------------------+
| Php Version | 8.0+                    |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Quick (30 mins)         |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _use-web:

Use Web
+++++++

 The code is used in web environment.

The web usage is identified through the usage of the superglobals. 

.. code-block:: php

   <?php
   
   // Accessing $_GET is possible when PHP is used in a web server.
   $x = filter_validate($_GET['x'], FILTER_EMAIL);
   
   ?>

Specs
^^^^^
+-------------+---------------+
| Short name  | Php/UseWeb    |
+-------------+---------------+
| Rulesets    | :ref:`CE`     |
+-------------+---------------+
| Exakt since | 0.8.4         |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _usort-sorting-in-php-7.0:

Usort Sorting In PHP 7.0
++++++++++++++++++++++++

 `Usort() <https://www.php.net/usort>`_, `uksort() <https://www.php.net/uksort>`_ and `uasort() <https://www.php.net/uasort>`_ behavior has changed in PHP 7. Values that are equals (based on the user-provided method) may be sorted differently than in PHP 5. 

If this sorting is important, it is advised to add extra comparison in the user-function and avoid returning 0 (thus, depending on default implementation). 

.. code-block:: php

   <?php
   
   $a = [ 2, 4, 3, 6];
   
   function noSort($a) { return $a > 5; }
   
   usort($a, 'noSort');
   print_r($a);
   
   ?>


In PHP 5, the results is :::

   
   Array
   (
       [0] => 3
       [1] => 4
       [2] => 2
       [3] => 6
   )
   


in PHP 7, the result is :::

   
   Array
   (
       [0] => 2
       [1] => 4
       [2] => 3
       [3] => 6
   )
   




Suggestions
^^^^^^^^^^^

* Make sure the sorting function doesn't generate any ex-aequos.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Php/UsortSorting          |
+-------------+---------------------------+
| Rulesets    | :ref:`CompatibilityPHP70` |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Major                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | Medium                    |
+-------------+---------------------------+


.. _wrong-attribute-configuration:

Wrong Attribute Configuration
+++++++++++++++++++++++++++++

 A class is attributed to the wrong PHP structure. 

.. code-block:: php

   <?php
   #[Attribute(Attribute::TARGET_CLASS)]
   class ClassAttribute { }
   
   // Wrong
   #[ClassAttribute]
   function foo () {}
   
   // OK
   #[ClassAttribute]
   class y  {}
   
   ?>



Suggestions
^^^^^^^^^^^

* Remove the attribute from the wrongly attributed structure
* Extend the configuration of the attribute with Attribute\:\:TARGET_*

Specs
^^^^^
+-------------+---------------------------------+
| Short name  | Php/WrongAttributeConfiguration |
+-------------+---------------------------------+
| Rulesets    | :ref:`Analyze`                  |
+-------------+---------------------------------+
| Exakt since | 2.2.0                           |
+-------------+---------------------------------+
| Php Version | 8.0+                            |
+-------------+---------------------------------+
| Severity    | Minor                           |
+-------------+---------------------------------+
| Time To Fix | Quick (30 mins)                 |
+-------------+---------------------------------+
| Precision   | High                            |
+-------------+---------------------------------+


.. _wrong-type-for-native-php-function:

Wrong Type For Native PHP Function
++++++++++++++++++++++++++++++++++

 This analysis reports calls to a PHP native function with a wrongly typed value.

.. code-block:: php

   <?php
   
   // valid calls
   echo exp(1);
   echo exp(2.5);
   
   // invalid calls
   echo exp(1);
   echo exp(array(2.5));
   
   // valid call, but invalid math
   // -1 is not a valid value for log(), but -1 is a valid type (int) : it is not reported by this analysis.
   echo log(-1);
   ?>




Suggestions
^^^^^^^^^^^

* Set the code to the valid type, when calling a PHP native function

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Php/WrongTypeForNativeFunction              |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 2.1.5                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _yield-from-usage:

Yield From Usage
++++++++++++++++

 Usage of generator delegation, with ``yield from`` keyword.

In PHP 7, generator delegation allows you to yield values from another ``Generator``, ``Traversable`` object, or array by using the ``yield from``. 

``Yield from`` was introduced in PHP 7.1, and is backward incompatible.

.. code-block:: php

   <?php
   
   // Yield delegation
   function foo() {
       yield from bar();
   }
   
   function bar() {
       yield 1;
   }
   
   ?>


See also `Generator Syntax <https://www.php.net/manual/en/language.generators.syntax.php>`_ and `Understanding PHP Generators <https://scotch.io/tutorials/understanding-php-generators>`_.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Php/YieldFromUsage |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | 7.0+               |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _yield-usage:

Yield Usage
+++++++++++

 Usage of generators, with yield keyword.

Yield was introduced in PHP 5.5, and is backward incompatible.

.. code-block:: php

   <?php
   
   function prime() {
       $primes = [2, 3, 5, 7, 11, 13, 17, 19];
       foreach($primes as $prime) {
           yield $prime;
       }
   }
   
   ?>


See also `Generator Syntax <https://www.php.net/manual/en/language.generators.syntax.php>`_, `Deal with Memory Gently using Yield in PHP <https://medium.com/tech-tajawal/use-memory-gently-with-yield-in-php-7e62e2480b8d>`_ and `Understanding PHP Generators <https://scotch.io/tutorials/understanding-php-generators>`_.

Specs
^^^^^
+-------------+----------------+
| Short name  | Php/YieldUsage |
+-------------+----------------+
| Rulesets    | :ref:`CE`      |
+-------------+----------------+
| Exakt since | 0.8.4          |
+-------------+----------------+
| Php Version | 5.5+           |
+-------------+----------------+
| Severity    | Minor          |
+-------------+----------------+
| Time To Fix | Slow (1 hour)  |
+-------------+----------------+
| Precision   | High           |
+-------------+----------------+


.. _fopen-binary-mode:

Fopen Binary Mode
+++++++++++++++++

 Use explicit ``b`` when opening files.

`fopen() <https://www.php.net/fopen>`_ supports a ``b`` option in the second parameter, to make sure the read is binary. This is the recommended way when writing portable applications, between Linux and Windows.

.. code-block:: php

   <?php
   
   // This opens file with binary reads on every OS
   $fp = fopen('path/to/file.doc', 'wb');
   
   // This may not open files with binary mode on Windows
   $fp = fopen('path/to/file.doc', 'w');
   
   ?>


Also, Windows PHP does support a ``t`` option, that translates automatically line endings to the right value. As this is Windows only, this should be avoided for portability reasons.

See also `fopen <https://www.php.net/fopen>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Portability/FopenMode |
+-------------+-----------------------+
| Rulesets    | none                  |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Instant (5 mins)      |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _glob\_brace-usage:

GLOB_BRACE Usage
++++++++++++++++

 `GLOB_BRACE <https://www.php.net/GLOB_BRACE>`_ is not always available. This is the case on Solaris OS, and on Alpine OS, used for Docker.

.. code-block:: php

   <?php
   
   // glob uses GLOB_BRACE
   $abcFiles = glob($path.'/{a,b,c}*', GLOB_BRACE); 
   
   // avoiding usage of GLOB_BRACE
   $abcFiles = array_merge(glob($path.'/a*'), 
                           glob($path.'/b*'), 
                           glob($path.'/c*'), 
                          ); 
   
   ?>


It is possible to check the support for `GLOB_BRACE <https://www.php.net/GLOB_BRACE>`_ by checking the presence of the constant. 

See also `Alpine Linux <https://alpinelinux.org/>`_ and `GLOB_BRACE breaks Sulu on Alpine Linux <https://github.com/sulu/sulu/issues/4513>`_.


Suggestions
^^^^^^^^^^^

* Create as many glob() calls at there are alternative in the braces

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Portability/GlobBraceUsage |
+-------------+----------------------------+
| Rulesets    | none                       |
+-------------+----------------------------+
| Exakt since | 2.1.6                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Major                      |
+-------------+----------------------------+
| Time To Fix | Quick (30 mins)            |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _iconv-with-translit:

Iconv With Translit
+++++++++++++++++++

 The transliteration feature of `iconv() <https://www.php.net/iconv>`_ depends on the underlying system to support it. 

.. code-block:: php

   <?php
   
   $string = iconv('utf-8', 'utf-8//TRANSLIT', $source);
   
   ?>


See also `iconv() <https://www.php.net/manual/en/function.iconv.php>`_.


Suggestions
^^^^^^^^^^^

* Use an OS that supports TRANSLIT with iconv
* Remove the usage of TRANSLIT

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Portability/IconvTranslit |
+-------------+---------------------------+
| Rulesets    | none                      |
+-------------+---------------------------+
| Exakt since | 2.1.6                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _linux-only-files:

Linux Only Files
++++++++++++++++

 List of files that are only found on Linux style systems. They are making the application depend on the system.

.. code-block:: php

   <?php
   
   // Really non-portable system check
   $os = shell_exec(cat /proc/version);
   echo You are using $os\n;
   
   ?>

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Portability/LinuxOnlyFiles |
+-------------+----------------------------+
| Rulesets    | none                       |
+-------------+----------------------------+
| Exakt since | 0.8.4                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Major                      |
+-------------+----------------------------+
| Time To Fix | Slow (1 hour)              |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _psr-11-usage:

PSR-11 Usage
++++++++++++

 PSR-11 describes a common interface for dependency injection containers.

It is supported by an set of interfaces, that one may use in the code.

.. code-block:: php

   <?php
   
   namespace MyNamespace;
   
   // MyContainerInterface implements the PSR-7 ServerRequestInterface.
   // MyContainerInterface is more of a black hole than a real Container.
   class MyContainerInterface implements \Psr\Container\ContainerInterface {
       public function get($id) {}
       public function has($id) {}
   }
   
   ?>


See also `PSR-11 : Dependency injection container <https://github.com/container-interop/fig-standards/blob/master/proposed/container.md>`_.

Specs
^^^^^
+-------------+----------------+
| Short name  | Psr/Psr11Usage |
+-------------+----------------+
| Rulesets    | :ref:`CE`      |
+-------------+----------------+
| Exakt since | 0.11.5         |
+-------------+----------------+
| Php Version | All            |
+-------------+----------------+
| Severity    | Minor          |
+-------------+----------------+
| Time To Fix | Slow (1 hour)  |
+-------------+----------------+
| Precision   | High           |
+-------------+----------------+


.. _psr-13-usage:

PSR-13 Usage
++++++++++++

 PSR-13 describes a common interface for dependency injection containers.

It is supported by an set of interfaces, that one may use in the code.

.. code-block:: php

   <?php
   
   namespace MyNamespace;
   
   // MyLink implements the PSR-13 LinkInterface.
   // MyLink is more of a black hole than a real Container.
   class MyLink implements LinkInterface {
       public function getHref() {}
       public function isTemplated() {}
       public function getRels() {}
       public function getAttributes() {}
   }
   
   ?>


See also `PSR-13 : Link definition interface <http://www.php-fig.org/psr/psr-13/>`_.

Specs
^^^^^
+-------------+----------------+
| Short name  | Psr/Psr13Usage |
+-------------+----------------+
| Rulesets    | :ref:`CE`      |
+-------------+----------------+
| Exakt since | 0.11.6         |
+-------------+----------------+
| Php Version | All            |
+-------------+----------------+
| Severity    | Minor          |
+-------------+----------------+
| Time To Fix | Slow (1 hour)  |
+-------------+----------------+
| Precision   | High           |
+-------------+----------------+


.. _psr-16-usage:

PSR-16 Usage
++++++++++++

 PSR-16 describes a simple yet extensible interface for a cache item and a cache driver. It is supported by an set of interfaces, that one may use in the code.

.. code-block:: php

   <?php
   
   namespace My\SimpleCache;
   
   // MyCache implements the PSR-16 Simple cache.
   // MyCache is more of a black hole than a real cache.
   class MyCache implements Psr\SimpleCache\CacheInterface {
       public function get($key, $default = null) {}
       public function set($key, $value, $ttl = null) {}
       public function delete($key) {}
       public function clear() {}
       public function getMultiple($keys, $default = null) {}
       public function setMultiple($values, $ttl = null) {}
       public function deleteMultiple($keys) {}
       public function has($key) {}
   }
   
   ?>


See also `PSR-16 : Common Interface for Caching Libraries <http://www.php-fig.org/psr/psr-16/>`_.

Specs
^^^^^
+-------------+----------------+
| Short name  | Psr/Psr16Usage |
+-------------+----------------+
| Rulesets    | :ref:`CE`      |
+-------------+----------------+
| Exakt since | 0.11.6         |
+-------------+----------------+
| Php Version | All            |
+-------------+----------------+
| Severity    | Minor          |
+-------------+----------------+
| Time To Fix | Slow (1 hour)  |
+-------------+----------------+
| Precision   | High           |
+-------------+----------------+


.. _psr-3-usage:

PSR-3 Usage
+++++++++++

 PSR-3 describes a common interface for logging libraries.

It is supported by an set of interfaces, that one may use in the code.

.. code-block:: php

   <?php
   
   namespace MyNamespace;
   
   // MyLog implements the PSR-3 LoggerInterface.
   // MyLog is more of a black hole than a real Log.
   namespace ;
   
   class MyLog implements \Psr\Log\LoggerInterface {
       public function emergency($message, array $context = array()) {}
       public function alert($message, array $context = array()) {}
       public function critical($message, array $context = array()) {}
       public function error($message, array $context = array()) {}
       public function warning($message, array $context = array()) {}
       public function notice($message, array $context = array()) {}
       public function info($message, array $context = array()) {}
       public function debug($message, array $context = array()) {}
       public function log($level, $message, array $context = array()) {}
   }
   
   ?>


See also `PSR-3 : Logger Interface <http://www.php-fig.org/psr/psr-3/>`_.

Specs
^^^^^
+-------------+---------------+
| Short name  | Psr/Psr3Usage |
+-------------+---------------+
| Rulesets    | :ref:`CE`     |
+-------------+---------------+
| Exakt since | 0.11.6        |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _psr-6-usage:

PSR-6 Usage
+++++++++++

 PSR-6 is the cache standard for PHP.

The goal of PSR-6 is to allow developers to create cache-aware libraries that can be integrated into existing frameworks and systems without the need for custom development.

It is supported by an set of interfaces, that one may use in the code.

.. code-block:: php

   <?php
   
   namespace MyNamespace;
   
   // MyCacheItem implements the PSR-7 CacheItemInterface.
   // This MyCacheItem is more of a black hole than a real CacheItem.
   class MyCacheItem implements \Psr\Cache\CacheItemInterface {
       public function getKey() {}
       public function get() {}
       public function isHit() {}
       public function set($value) {}
       public function expiresAt($expiration) {}
       public function expiresAfter($time) {}
   }
   
   ?>


See also `PSR-6 : Caching <http://www.php-fig.org/psr/psr-6/>`_.

Specs
^^^^^
+-------------+---------------+
| Short name  | Psr/Psr6Usage |
+-------------+---------------+
| Rulesets    | :ref:`CE`     |
+-------------+---------------+
| Exakt since | 0.11.6        |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _psr-7-usage:

PSR-7 Usage
+++++++++++

 PSR-7 describes common interfaces for representing HTTP messages as described in `RFC 7230 <https://tools.ietf.org/html/rfc7230>`_ and `RFC 7231 <https://tools.ietf.org/html/rfc7231>`_, and URIs for use with HTTP messages as described in `RFC 3986 <https://tools.ietf.org/html/rfc3986>`_. 

It is supported by an set of interfaces, that one may use in the code.

.. code-block:: php

   <?php
   
   namespace MyNamespace;
   
   // MyServerRequest implements the PSR-7 ServerRequestInterface.
   // MyServerRequest is more of a black hole than a real Server.
   class MyServerRequest extends  \Psr\Http\Message\ServerRequestInterface  {
       public function getServerParams() {}
       public function getCookieParams() {}
       public function withCookieParams(array $cookies) {}
       public function getQueryParams() {}
       public function withQueryParams(array $query) {}
       public function getUploadedFiles() {}
       public function withUploadedFiles(array $uploadedFiles) {}
       public function getParsedBody() {}
       public function withParsedBody($data) {}
       public function getAttributes() {}
       public function getAttribute($name, $default = null) {}
       public function withAttribute($name, $value) {}
       public function withoutAttribute($name) {}
   }
   
   ?>


See also `PSR-7 : HTTP message interfaces <http://www.php-fig.org/psr/psr-7/>`_.

Specs
^^^^^
+-------------+---------------+
| Short name  | Psr/Psr7Usage |
+-------------+---------------+
| Rulesets    | :ref:`CE`     |
+-------------+---------------+
| Exakt since | 0.11.6        |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _always-anchor-regex:

Always Anchor Regex
+++++++++++++++++++

 Unanchored regex finds the requested pattern, and leaves room for malicious content. 

Without ``^`` and ``$``, the regex searches for any pattern that satisfies the criteria, leaving any unused part of the string available for arbitrary content. It is recommended to use both anchor

.. code-block:: php

   <?php
   
   $birthday = getSomeDate($_GET);
   
   // Permissive version : $birthday = '1970-01-01<script>xss();</script>';
   if (!preg_match('/\d{4}-\d{2}-\d{2}/', $birthday) {
       error('Wrong data format for your birthday!');
   }
   
   // Restrictive version : $birthday = '1970-01-01';
   if (!preg_match('/^\d{4}-\d{2}-\d{2}$/', $birthday) {
       error('Wrong data format for your birthday!');
   }
   
   echo 'Your birthday is on '.$birthday;
   
   ?>


Note that $ may be a line ending, still leaving room after it for injection.

.. code-block:: php

   <?php
   
   $birthday = '1970-01-01'.PHP_EOL.'<script>xss();</script>';
   
   ?>


This analysis reports false positive when the regex is used to search a pattern in a much larger string. Check if this rule doesn't apply, though.

See also `CWE-625: Permissive Regular Expression <https://cwe.mitre.org/data/definitions/625.html>`_.



Suggestions
^^^^^^^^^^^

* Add an anchor to the beginning and ending of the string

Specs
^^^^^
+-------------+----------------------+
| Short name  | Security/AnchorRegex |
+-------------+----------------------+
| Rulesets    | :ref:`Security`      |
+-------------+----------------------+
| Exakt since | 0.12.15              |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Major                |
+-------------+----------------------+
| Time To Fix | Instant (5 mins)     |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _avoid-those-hash-functions:

Avoid Those Hash Functions
++++++++++++++++++++++++++

 The following cryptography algorithms are considered insecure, and should be replaced with new and more performant algorithms. 

``MD2``, ``MD4``, ``MD5``, ``SHA0``, ``SHA1``, ``CRC``, ``DES``, ``3DES``, ``RC2``, ``RC4``. 

When possible, avoid using them, may it be as PHP functions, or hashing function configurations (mcrypt, hash...).

.. code-block:: php

   <?php
   
   // Weak cryptographic algorithm
   echo md5('The quick brown fox jumped over the lazy dog.');
   
   // Weak cryptographic algorthim, used with a modern PHP extension (easier to update)
   echo hash('md5', 'The quick brown fox jumped over the lazy dog.');
   
   // Strong cryptographic algorthim, used with a modern PHP extension
   echo hash('sha156', 'The quick brown fox jumped over the lazy dog.');
   
   ?>


Weak cryptography is commonly used for hashing values when caching them. In such cases, security is not a primary concern. However, it may later become such, when hackers get access to the cache folders, or if the cached identifier is published. As a preventive protection, it is recommended to always use a secure hashing function.

See also `Secure Hash Algorithms <https://en.wikipedia.org/wiki/Secure_Hash_Algorithms>`_.


Suggestions
^^^^^^^^^^^

* Keep the current crypto, and add a call to a stronger one. 
* Change the crypto for a more modern one and update the related databases

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Security/AvoidThoseCrypto |
+-------------+---------------------------+
| Rulesets    | :ref:`Security`           |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Major                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _can't-disable-class:

Can't Disable Class
+++++++++++++++++++

 This is the list of potentially dangerous PHP class being used in the code, such as \`Phar <https://www.php.net/Phar>`_. 

.. code-block:: php

   <?php
   
   // This script uses ftp_connect(), therefore, this function shouldn't be disabled. 
   $phar = new Phar();
   
   ?>


This analysis is the base for suggesting values for the ``disable_classes`` directive.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Security/CantDisableClass |
+-------------+---------------------------+
| Rulesets    | :ref:`CE`                 |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _can't-disable-function:

Can't Disable Function
++++++++++++++++++++++

 This is the list of potentially dangerous PHP functions being used in the code, such as `exec() <https://www.php.net/exec>`_ or fsockopen(). 

`eval() <https://www.php.net/eval>`_ is not reported here, as it is not a PHP function, but a language construct : it can't be disabled.

.. code-block:: php

   <?php
   
   // This script uses ftp_connect(), therefore, this function shouldn't be disabled. 
   $ftp = ftp_connect($host, 21);
   
   // This script doesn't use imap_open(), therefore, this function may be disabled. 
   
   ?>


This analysis is the base for suggesting values for the ``disable_functions`` directive.

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Security/CantDisableFunction |
+-------------+------------------------------+
| Rulesets    | :ref:`CE`                    |
+-------------+------------------------------+
| Exakt since | 0.8.4                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Slow (1 hour)                |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _compare-hash:

Compare Hash
++++++++++++

 When comparing hash values, it is important to use the strict comparison : `hash_equals() <https://www.php.net/hash_equals>`_, ``===`` or ``!==``. 

In a number of situations, the hash value will start with ``0e``, and PHP will understand that the comparison involves integers : it will then convert the strings into numbers, and it may end up converting them to 0.

Here is an example : 

.. code-block:: php

   <?php
   
   // The two following passwords hashes matches, while they are not the same. 
   $hashed_password = 0e462097431906509000000000000;
   if (hash('md5','240610708',false) == $hashed_password) {
     print 'Matched.'.PHP_EOL;
   }
   
   // hash returns a string, that is mistaken with 0 by PHP
   // The strength of the hashing algorithm is not a problem
   if (hash('ripemd160','20583002034',false) == '0') {
     print 'Matched.'.PHP_EOL;
   }
   
   if (hash('md5','240610708',false) !== $hashed_password) {
     print 'NOT Matched.'.PHP_EOL;
   }
   
   // Display true
   var_dump(md5('240610708') == md5('QNKCDZO') );
   
   ?>


You may also use `password_hash() <https://www.php.net/password_hash>`_ and `password_verify() <https://www.php.net/password_verify>`_ : they work together without integer conversion problems, and they can't be confused with a number.

See also `Magic Hashes <https://blog.whitehatsec.com/magic-hashes/>`_ `What is the best way to compare hashed strings? (PHP) <https://stackoverflow.com/questions/5211132/what-is-the-best-way-to-compare-hashed-strings-php/23959696#23959696>`_ and `md5('240610708') == md5('QNKCDZO') <https://news.ycombinator.com/item?id=9484757>`_.



Suggestions
^^^^^^^^^^^

* Use dedicated functions for hash comparisons
* Use identity operators (===), and not equality operators (==) to compare hashes
* Compare hashes in the database (or external system), where such confusion is not possible

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------+
| Short name  | Security/CompareHash                                                                                |
+-------------+-----------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Security`                                                                                     |
+-------------+-----------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                               |
+-------------+-----------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                 |
+-------------+-----------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                               |
+-------------+-----------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                     |
+-------------+-----------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                |
+-------------+-----------------------------------------------------------------------------------------------------+
| ClearPHP    | `strict-comparisons <https://github.com/dseguy/clearPHP/tree/master/rules/strict-comparisons.md>`__ |
+-------------+-----------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-traq-security-comparehash`, :ref:`case-livezilla-security-comparehash`                   |
+-------------+-----------------------------------------------------------------------------------------------------+


.. _configure-extract:

Configure Extract
+++++++++++++++++

 The `extract() <https://www.php.net/extract>`_ function overwrites local variables when left unconfigured.

Extract imports variables from an array into the local scope. In case of a conflict, that is when a local variable already exists, it overwrites the previous variable.

In fact, `extract() <https://www.php.net/extract>`_ may be configured to handle the situation differently : it may skip the conflicting variable, prefix it, prefix it only if it exists, only import overwriting variables... It may also import them as references to the original values.

This analysis reports `extract() <https://www.php.net/extract>`_ when it is not configured explicitly. If overwriting is the intended objective, it is not reported.

.. code-block:: php

   <?php
   
   // ignore overwriting variables
   extract($array, EXTR_SKIP);
   
   // prefix all variables explicitly variables with 'php_'
   extract($array, EXTR_PREFIX_ALL, 'php_');
   
   // overwrites explicitly variables
   extract($array, EXTR_OVERWRITE);
   
   // overwrites implicitely variables : do we really want that? 
   extract($array, EXTR_OVERWRITE);
   
   ?>


Always avoid using `extract() <https://www.php.net/extract>`_ on untrusted sources, such as ``$_GET``, ``$_POST``, ``$_FILES``, or even databases records.

See also `extract <https://www.php.net/extract>`_.
 

Suggestions
^^^^^^^^^^^

* Always use the second argument of extract(), and avoid using ``EXTR_OVERWRITE``

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------+
| Short name  | Security/ConfigureExtract                                                                   |
+-------------+---------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Security`                                                                             |
+-------------+---------------------------------------------------------------------------------------------+
| Exakt since | 1.2.9                                                                                       |
+-------------+---------------------------------------------------------------------------------------------+
| Php Version | All                                                                                         |
+-------------+---------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                       |
+-------------+---------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                            |
+-------------+---------------------------------------------------------------------------------------------+
| Precision   | High                                                                                        |
+-------------+---------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-zurmo-security-configureextract`, :ref:`case-dolibarr-security-configureextract` |
+-------------+---------------------------------------------------------------------------------------------+


.. _check-crypto-key-length:

Check Crypto Key Length
+++++++++++++++++++++++

 Each cryptography algorithm requires a reasonable length. Make sure an up-to-date length is used. 

This rule use the following recommendations : 

+ \`OPENSSL_KEYTYPE_RSA <https://www.php.net/OPENSSL_KEYTYPE_RSA>`_' => 3072
+ \`OPENSSL_KEYTYPE_DSA <https://www.php.net/OPENSSL_KEYTYPE_DSA>`_' => 2048
+ \`OPENSSL_KEYTYPE_DH <https://www.php.net/OPENSSL_KEYTYPE_DH>`_'  => 2048
+ \`OPENSSL_KEYTYPE_EC <https://www.php.net/OPENSSL_KEYTYPE_EC>`_'  => 512

The values above are used with the openssl PHP extension. 

.. code-block:: php

   <?php
   
   // Extracted from the documentation
   
   // Generates a new and strong key 
   $private_key = openssl_pkey_new(array(
       private_key_type => OPENSSL_KEYTYPE_EC,
       private_key_bits => 1024,
   ));
   
   // Generates a new and weak key 
   $private_key = openssl_pkey_new(array(
       private_key_type => OPENSSL_KEYTYPE_EC,
       private_key_bits => 256,
   ));
   
   ?>


See also `The Definitive 2019 Guide to Cryptographic Key Sizes and Algorithm Recommendations <https://paragonie.com/blog/2019/03/definitive-2019-guide-cryptographic-key-sizes-and-algorithm-recommendations>`_ and `Cryptographic Key Length Recommendation <https://www.keylength.com/>`_.


Suggestions
^^^^^^^^^^^

* Lengthen the cryptographic key

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Security/CryptoKeyLength |
+-------------+--------------------------+
| Rulesets    | :ref:`Security`          |
+-------------+--------------------------+
| Exakt since | 2.1.1                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Quick (30 mins)          |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _safe-curl-options:

Safe Curl Options
+++++++++++++++++

 It is advised to always use ``CURLOPT_SSL_VERIFYPEER`` and ``CURLOPT_SSL_VERIFYHOST`` when requesting a SSL connection. 

With those tests, the certificate is verified, and if it isn't valid, the connection fails : this is a safe behavior.

.. code-block:: php

   <?php
   $ch = curl_init();
   
   curl_setopt($ch, CURLOPT_URL, https://www.php.net/);
   
   // To be safe, always set this to true
   curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);
   
   curl_exec($ch);
   curl_close($ch);
   ?>


See also `Don’t turn off `CURLOPT_SSL_VERIFYPEER <https://www.php.net/CURLOPT_SSL_VERIFYPEER>`_, fix your PHP configuration <https://www.saotn.org/dont-turn-off-curlopt_ssl_verifypeer-fix-php-configuration/>`_, `Certainty: Automated CACert.pem Management for PHP Software <https://paragonie.com/blog/2017/10/certainty-automated-cacert-pem-management-for-php-software>`_ and `Server-Side HTTPS Requests <https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software#secure-server-side-https>`_.


Suggestions
^^^^^^^^^^^

* Always use CURLOPT_SSL_VERIFYPEER and HTTPS for communication with other servers

Specs
^^^^^
+-------------+-------------------------------------------+
| Short name  | Security/CurlOptions                      |
+-------------+-------------------------------------------+
| Rulesets    | :ref:`Security`                           |
+-------------+-------------------------------------------+
| Exakt since | 0.8.4                                     |
+-------------+-------------------------------------------+
| Php Version | All                                       |
+-------------+-------------------------------------------+
| Severity    | Major                                     |
+-------------+-------------------------------------------+
| Time To Fix | Quick (30 mins)                           |
+-------------+-------------------------------------------+
| Precision   | High                                      |
+-------------+-------------------------------------------+
| Examples    | :ref:`case-openconf-security-curloptions` |
+-------------+-------------------------------------------+


.. _direct-injection:

Direct Injection
++++++++++++++++

 The following code act directly upon PHP incoming variables like ``$_GET`` and ``$_POST``. This makes those snippets very unsafe.

.. code-block:: php

   <?php
   
   // Direct injection
   echo Hello.$_GET['user']., welcome.;
   
   // less direct injection
   foo($_GET['user']);
   function foo($user) {
       echo Hello.$user., welcome.;
   }
   
   ?>


See also `Cross-Site Scripting (XSS) <https://phpsecurity.readthedocs.io/en/latest/Cross-Site-Scripting-(XSS).html>`_



Suggestions
^^^^^^^^^^^

* Validate input : make sure the incoming data are what you expect from them.
* Escape output : prepare outgoing data for the next system to use.

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Security/DirectInjection |
+-------------+--------------------------+
| Rulesets    | :ref:`Security`          |
+-------------+--------------------------+
| Exakt since | 0.8.4                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Major                    |
+-------------+--------------------------+
| Time To Fix | Quick (30 mins)          |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _don't-echo-error:

Don't Echo Error
++++++++++++++++

 It is recommended to avoid displaying error messages directly to the browser.

PHP's uses the ``display_errors`` directive to control display of errors to the browser. This must be kept to ``off`` when in production.

.. code-block:: php

   <?php
   
   // Inside a 'or' test
   mysql_connect('localhost', $user, $pass) or die(mysql_error());
   
   // Inside a if test
   $result = pg_query( $db, $query );
   if( !$result )
   {
   	echo Erreur SQL: . pg_error();
   	exit;
   }
   
   // Changing PHP configuration
   ini_set('display_errors', 1);
   // This is also a security error : 'false' means actually true.
   ini_set('display_errors', 'false');
   
   ?>


Error messages should be logged, but not displayed. 

See also `Error reporting <https://php.earth/docs/security/intro#error-reporting>`_ and `List of php.ini directives <https://www.php.net/manual/en/ini.list.php>`_.



Suggestions
^^^^^^^^^^^

* Remove any echo, print, printf() call built with error messages from an exception, or external source.

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------+
| Short name  | Security/DontEchoError                                                                         |
+-------------+------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Security`                                   |
+-------------+------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.7                                                                                          |
+-------------+------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                            |
+-------------+------------------------------------------------------------------------------------------------+
| Severity    | Critical                                                                                       |
+-------------+------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                               |
+-------------+------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                           |
+-------------+------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-churchcrm-security-dontechoerror`, :ref:`case-phpdocumentor-security-dontechoerror` |
+-------------+------------------------------------------------------------------------------------------------+


.. _dynamic-library-loading:

Dynamic Library Loading
+++++++++++++++++++++++

 Loading a variable dynamically requires a lot of care in the preparation of the library name. 

In case of injection in the variable, the dynamic loading of a library gives a lot of power to an intruder. 

.. code-block:: php

   <?php
   
       // dynamically loading a library
   	dl($library. PHP_SHLIB_SUFFIX);
   
       // dynamically loading ext/vips
   	dl('vips.' . PHP_SHLIB_SUFFIX);
   
       // static loading ext/vips (unix only)
   	dl('vips.so');
   
   ?>


See also `dl <http://www.php.net/dl>`_.


Suggestions
^^^^^^^^^^^

* Use a switch structure, to make the dl() calls static.
* Avoid using dl() and make the needed extension always available in PHP binary.

Specs
^^^^^
+-------------+--------------------+
| Short name  | Security/DynamicDl |
+-------------+--------------------+
| Rulesets    | :ref:`Security`    |
+-------------+--------------------+
| Exakt since | 1.1.7              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Major              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _encoded-simple-letters:

Encoded Simple Letters
++++++++++++++++++++++

 Some simple letters are written in escape sequence. 

Usually, escape sequences are made to encode unusual characters. Using escape sequences for simple characters, like letters or numbers is suspicious.

This analysis also detects Unicode codepoint with superfluous leading zeros.

.. code-block:: php

   <?php
   
   // This escape sequence makes eval hard to spot
   $a = ev\101l;
   $a('php_info();');
   
   // With a PHP 7.0 unicode code point sequence
   $a = ev\u{000041}l;
   $a('php_info();');
   
   // With a PHP 5.0+ hexadecimal sequence
   $a = ev\x41l;
   $a('php_info();');
   
   ?>



Suggestions
^^^^^^^^^^^

* Make all simple letter appear clearly
* Add comments about why this code is encoded

Specs
^^^^^
+-------------+-------------------------------------------+
| Short name  | Security/EncodedLetters                   |
+-------------+-------------------------------------------+
| Rulesets    | :ref:`Security`                           |
+-------------+-------------------------------------------+
| Exakt since | 0.10.5                                    |
+-------------+-------------------------------------------+
| Php Version | All                                       |
+-------------+-------------------------------------------+
| Severity    | Minor                                     |
+-------------+-------------------------------------------+
| Time To Fix | Quick (30 mins)                           |
+-------------+-------------------------------------------+
| Precision   | High                                      |
+-------------+-------------------------------------------+
| Examples    | :ref:`case-zurmo-security-encodedletters` |
+-------------+-------------------------------------------+


.. _filter\_input()-as-a-source:

filter_input() As A Source
++++++++++++++++++++++++++

 The `filter_input() <https://www.php.net/filter_input>`_ and `filter_input_array() <https://www.php.net/filter_input_array>`_ functions access directly to ``$_GET``. They represent a source for external data just like ``$_GET``, ``$_POST``, etc.

The main feature of `filter_input() <https://www.php.net/filter_input>`_ is that it is already filtered. The main drawback is that ``FILTER_FLAG_NONE`` is the ``none`` filter, and that default configuration is `FILTER_UNSAFE_RAW`.

The filter extension keeps access to the incoming data, even after the super globals, such as ``$_GET``, are unset.

.. code-block:: php

   <?php
   
   // Removing $_GET
   $_GET = [];
   
   // with the default : FILTER_UNSAFE_RAW, this means XSS
   echo filter_input(INPUT_GET, 'i');
   
   // Same as above : 
   echo filter_var(_GET, 'i');
   
   ?>


Thanks to `Frederic Bouchery <https://twitter.com/FredBouchery/>`_ for reporting this `special case <https://twitter.com/FredBouchery/status/1049297213598457857>`_.

See also `Data filtering <https://www.php.net/manual/en/book.filter.php>`_.


Suggestions
^^^^^^^^^^^

* Use the classic $_GET, $_POST super globals, which are easier to audit.
* Use your framework's parameter access.

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Security/FilterInputSource |
+-------------+----------------------------+
| Rulesets    | :ref:`Security`            |
+-------------+----------------------------+
| Exakt since | 1.4.8                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Slow (1 hour)              |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _gprc-aliases:

GPRC Aliases
++++++++++++

 The following variables are holding the content of `$_GET <https://www.php.net/manual/en/reserved.variables.get.php>`_, `$_POST <https://www.php.net/manual/en/reserved.variables.post.php>`_, `$_REQUEST <https://www.php.net/manual/en/reserved.variables.request.php>`_ or $_COOKIE. They shouldn't be trusted, just like their original variables.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Security/GPRAliases |
+-------------+---------------------+
| Rulesets    | none                |
+-------------+---------------------+
| Exakt since | 0.8.4               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Major               |
+-------------+---------------------+
| Time To Fix | Quick (30 mins)     |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _indirect-injection:

Indirect Injection
++++++++++++++++++

 Look for injections through indirect usage for GPRC values (`$_GET <https://www.php.net/manual/en/reserved.variables.get.php>`_, `$_POST <https://www.php.net/manual/en/reserved.variables.post.php>`_, `$_REQUEST <https://www.php.net/manual/en/reserved.variables.request.php>`_, $_COOKIE). 

.. code-block:: php

   <?php
   
   $a = $_GET['a'];
   echo $a;
   
   function foo($b) {
       echo $b;
   }
   foo($_POST['c']);
   
   ?>





Suggestions
^^^^^^^^^^^

* Always validate incoming values before using them.

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Security/IndirectInjection |
+-------------+----------------------------+
| Rulesets    | :ref:`Security`            |
+-------------+----------------------------+
| Exakt since | 0.8.4                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Critical                   |
+-------------+----------------------------+
| Time To Fix | Slow (1 hour)              |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _integer-conversion:

Integer Conversion
++++++++++++++++++

 Comparing incoming variables to integer may lead to injection.

When comparing a variable to an integer, PHP applies type juggling, and transform the variable in an integer too. When the value converts smoothly to an integer, this means the validation may pass and yet, the value may carry an injection.

.. code-block:: php

   <?php
   
   // This is safe : 
   if ($_GET['x'] === 2) {
       echo $_GET['x'];
   }
   
   // Using (int) for validation and for display
   if ((int) $_GET['x'] === 2) {
       echo (int) $_GET['x'];
   }
   
   // This is an injection
   // '2 <script>' == 2, then echo will make the injection
   if ($_GET['x'] == 2) {
       echo $_GET['x'];
   }
   
   // This is unsafe, as $_GET['x']  is tested as an integer, but echo'ed raw
   if ((int) $_GET['x'] === 2) {
       echo $_GET['x'];
   }
   
   ?>


This analysis spots situations where an incoming value is compared to an integer. The usage of the validated value is not analyzed further.

See also `Type Juggling Authentication Bypass Vulnerability in CMS Made Simple <https://www.netsparker.com/blog/web-security/type-juggling-authentication-bypass-cms-made-simple/>`_, `PHP STRING COMPARISON VULNERABILITIES <https://hydrasky.com/network-security/php-string-comparison-vulnerabilities/>`_ and `PHP Magic Tricks: Type Juggling <https://www.owasp.org/images/6/6b/PHPMagicTricks-TypeJuggling.pdf>`_.


Suggestions
^^^^^^^^^^^

* Add the typecasting to all read access to the incoming variable

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Security/IntegerConversion |
+-------------+----------------------------+
| Rulesets    | :ref:`Security`            |
+-------------+----------------------------+
| Exakt since | 1.7.7                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Major                      |
+-------------+----------------------------+
| Time To Fix | Quick (30 mins)            |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _keep-files-access-restricted:

Keep Files Access Restricted
++++++++++++++++++++++++++++

 Avoid using 0777 as file or directory mode. In particular, setting a file or a directory to 0777 (or universal read-write-execute) may lead to security vulnerabilities, as anything on the server may read, write and even execute

File mode may be changed using the `chmod() <https://www.php.net/chmod>`_ function, or at directory creation, with `mkdir() <https://www.php.net/mkdir>`_.

.. code-block:: php

   <?php
   
   file_put_contents($file, $content);
   
   // this file is accessible to the current user, and to his group, for reading and writing. 
   chmod($file, 0550); 
   
   // this file is accessible to everyone 
   chmod($file, 0777); 
   
   ?>


By default, this analysis report universal access (0777). It is possible to make this analysis more restrictive, by providing more forbidden modes in the ``filePrivileges`` parameter. For example : ``511,510,489``. Only use a decimal representation. 

See also :ref:`mkdir-default` and `Least Privilege Violation <https://owasp.org/www-community/vulnerabilities/Least_Privilege_Violation>`_.


Suggestions
^^^^^^^^^^^

* Set the file mode to a level of restriction as low as possible.

+----------------+---------+--------+-------------------------------------------------+
| Name           | Default | Type   | Description                                     |
+----------------+---------+--------+-------------------------------------------------+
| filePrivileges | 0777    | string | List of forbidden file modes (comma separated). |
+----------------+---------+--------+-------------------------------------------------+



Specs
^^^^^
+-------------+------------------------------+
| Short name  | Security/KeepFilesRestricted |
+-------------+------------------------------+
| Rulesets    | :ref:`Security`              |
+-------------+------------------------------+
| Exakt since | 2.1.1                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Quick (30 mins)              |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _minus-one-on-error:

Minus One On Error
++++++++++++++++++

 Some PHP native functions return -1 on error. They also return 1 in case of success, and 0 in case of failure. This leads to confusions.

In case the native function is used as a condition without explicit comparison, PHP type cast the return value to a boolean. In this case, -1 and 1 are both converted to true, and the condition applies. This means that an error situation is mistaken for a successful event. 

.. code-block:: php

   <?php
   
   // Proper check of the return value
   if (openssl_verify($data, $signature, $public) === 1) {
       $this->loginAsUser($user);
   }
   
   // if this call fails, it returns -1, and is confused with true
   if (openssl_verify($data, $signature, $public)) {
       $this->loginAsUser($user);
   }
   ?>


This analysis searches for if/then structures, ternary operators inside `while() <https://www.php.net/manual/en/control-structures.while.php>`_ / do...`while() <https://www.php.net/manual/en/control-structures.while.php>`_ loops. 

See also `Can you spot the vulnerability? (openssl_verify) <https://twitter.com/ripstech/status/1124325237967994880>`_ and `Incorrect Signature Verification <https://snyk.io/vuln/SNYK-PHP-SIMPLESAMLPHPSIMPLESAMLPHPMODULEINFOCARD-70167>`_.


Suggestions
^^^^^^^^^^^

* Compare explicitly the return value to 1

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Security/MinusOneOnError |
+-------------+--------------------------+
| Rulesets    | :ref:`Security`          |
+-------------+--------------------------+
| Exakt since | 1.8.0                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Critical                 |
+-------------+--------------------------+
| Time To Fix | Instant (5 mins)         |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _mkdir-default:

Mkdir Default
+++++++++++++

 `mkdir() <https://www.php.net/mkdir>`_ gives universal access to created folders, by default. It is recommended to gives limited set of rights (0755, 0700), or to explicitly set the rights to 0777. 

.. code-block:: php

   <?php
   
   // By default, this dir is 777
   mkdir('/path/to/dir');
   
   // Explicitely, this is wanted. It may also be audited easily
   mkdir('/path/to/dir', 0777);
   
   // This dir is limited to the current user. 
   mkdir('/path/to/dir', 0700);
   
   ?>


See also `Why 777 Folder Permissions are a Security Risk <https://www.spiralscripts.co.uk/Blog/why-777-folder-permissions-are-a-security-risk.html>`_.


Suggestions
^^^^^^^^^^^

* Always use the lowest possible privileges on folders
* Don't use the PHP default : at least, make it explicit that the 'universal' rights are voluntary

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------+
| Short name  | Security/MkdirDefault                                                               |
+-------------+-------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Security`                                                                     |
+-------------+-------------------------------------------------------------------------------------+
| Exakt since | 0.12.2                                                                              |
+-------------+-------------------------------------------------------------------------------------+
| Php Version | All                                                                                 |
+-------------+-------------------------------------------------------------------------------------+
| Severity    | Major                                                                               |
+-------------+-------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                     |
+-------------+-------------------------------------------------------------------------------------+
| Precision   | High                                                                                |
+-------------+-------------------------------------------------------------------------------------+
| Examples    | :ref:`case-mautic-security-mkdirdefault`, :ref:`case-openemr-security-mkdirdefault` |
+-------------+-------------------------------------------------------------------------------------+


.. _move\_uploaded\_file-instead-of-copy:

move_uploaded_file Instead Of copy
++++++++++++++++++++++++++++++++++

 Always use `move_uploaded_file() <https://www.php.net/move_uploaded_file>`_ with uploaded files. Avoid using copy or rename with uploaded file. 

`move_uploaded_file() <https://www.php.net/move_uploaded_file>`_ checks to ensure that the file designated by filename is a valid upload file (meaning that it was uploaded via PHP's HTTP POST upload mechanism).

.. code-block:: php

   <?php
   
       // $a->file was filled with $_FILES at some point
       move_uploaded_file($a->file['tmp_name'], $target);
   
       // $a->file was filled with $_FILES at some point
       rename($a->file['tmp_name'], $target);
   
   ?>


See also `move_uploaded_file <https://www.php.net/move_uploaded_file>`_ and `Uploading Files with PHP <https://www.sitepoint.com/file-uploads-with-php/>`_.


Suggestions
^^^^^^^^^^^

* Always use move_uploaded_file() 
* Extract the needed information from the file, and leave it for PHP to remove without storage

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Security/MoveUploadedFile |
+-------------+---------------------------+
| Rulesets    | :ref:`Security`           |
+-------------+---------------------------+
| Exakt since | 1.3.2                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Major                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _no-ent\_ignore:

No ENT_IGNORE
+++++++++++++

 Certain characters have special significance in HTML, and should be represented by HTML entities if they are to preserve their meanings.

`ENT_IGNORE <https://www.php.net/ENT_IGNORE>`_ is a configuration option for `htmlspecialchars() <https://www.php.net/htmlspecialchars>`_, that ignore any needed character replacement. This mean the raw input will now be processed by PHP, or a target browser.

It is recommended to use the other configuration options : ``ENT_COMPAT``, ``ENT_QUOTES``, ``ENT_NOQUOTES``, ``ENT_SUBSTITUTE``, ``ENT_DISALLOWED``, ``ENT_HTML401``, ``ENT_XML1``, ``ENT_XHTML`` or ``ENT_HTML5``.

.. code-block:: php

   <?php
   
   // This produces a valid HTML tag
   $new = htmlspecialchars("<a href='test'>Test</a>", ENT_IGNORE);
   echo $new; // &lt;a href=&#039;test&#039;&gt;Test&lt;/a&gt;
   
   // This produces a valid string, without any HTML special value
   $new = htmlspecialchars("<a href='test'>Test</a>", ENT_QUOTES);
   echo $new; // &lt;a href=&#039;test&#039;&gt;Test&lt;/a&gt;
   
   ?>


See also `htmlspecialchars <https://www.php.net/htmlspecialchars>`_ and `Deletion of Code Points <http://unicode.org/reports/tr36/#Deletion_of_Noncharacters>`_.


Suggestions
^^^^^^^^^^^

* Use of the the other options

Specs
^^^^^
+-------------+----------------------+
| Short name  | Security/NoEntIgnore |
+-------------+----------------------+
| Rulesets    | :ref:`Security`      |
+-------------+----------------------+
| Exakt since | 1.9.2                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Quick (30 mins)      |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _no-net-for-xml-load:

No Net For Xml Load
+++++++++++++++++++

 Simplexml and ext/DOM load all external entities from the web, by default. This is dangerous, in particular when loading unknown XML code.

Look at this XML code below : it is valid. It defines an entity ``xxe``, that is filled with a file, read on the system and base64 encoded.::

   
   
   &lt;!DOCTYPE replace [&lt;!ENTITY xxe SYSTEM "php://filter/convert.base64-encode/resource=index.php"&gt; ]&gt;
   <replace>&xxe;</replace>
   
   


This file could be processed with the following code : note, you can replace 'index.php' in the above entity by any valid filepath. 

.. code-block:: php

   <?php 
       $dom = new DOMDocument();
       $dom->loadXML($xml, LIBXML_NOENT | LIBXML_DTDLOAD);
       $info = simplexml_import_dom($dom);
       
       print base64_decode($info[0]);
   ?>
 

Here, PHP tries to load the XML file, finds the entity, then solves the entity by encoding a file called ``index.php``. The source code of the file is not used as data in the XML file. 

At that point, the example illustrates how a XXE works : by using the XML engine to load external resources, and preprocessing the XML code. in fact, there is only one change to make this XML code arbitrarily injected :::

   
   
   &lt;!DOCTYPE replace [&lt;!ENTITY writer SYSTEM https://www.example.com/entities.dtd&gt; ]&gt;
   <replace>&xxe;</replace>
   
   


With the above example, the XML code is `static <https://www.php.net/manual/en/language.oop5.static.php>`_ (as, it never changes), but the 'xxe' definitions are loaded from a remove website, and are completely under the attacker control.

See also `XML External Entity <https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XXE%20injection>`_, `XML External Entity (XXE) Processing <https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing>`_ and `Detecting and exploiting XXE in SAML Interfaces <https://web-in-security.blogspot.nl/2014/11/detecting-and-exploiting-xxe-in-saml.html>`_.
 

Suggestions
^^^^^^^^^^^

* Strip out any entity when using external XML
* Forbid any network to the XML engine, by configuring the XML engine without network access

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Security/NoNetForXmlLoad |
+-------------+--------------------------+
| Rulesets    | :ref:`Security`          |
+-------------+--------------------------+
| Exakt since | 1.0.11                   |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Major                    |
+-------------+--------------------------+
| Time To Fix | Slow (1 hour)            |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _avoid-sleep()-usleep():

Avoid sleep()/usleep()
++++++++++++++++++++++

 `sleep() <https://www.php.net/sleep>`_ and `usleep() <https://www.php.net/usleep>`_ help saturate the web server. 

Pausing the script for a specific amount of time means that the Web server is also making all related resources sleep, such as database, sockets, session, etc. This may used to set up a DOS on the server.  

.. code-block:: php

   <?php
   
   $begin = microtime(true);
   checkLogin($user, $password);
   $end   = microtime(true);
   
   // Making all login checks looks the same
   usleep(1000000 - ($end - $begin) * 1000000); 
   
   // Any hit on this page now uses 1 second, no matter if load is high or not
   // Is it now possible to saturate the webserver in 1 s ? 
   
   ?>


As much as possible, avoid delaying the end of the script. 

`sleep() <https://www.php.net/sleep>`_ and `usleep() <https://www.php.net/usleep>`_ have less impact in commandline (``CLI``).



Suggestions
^^^^^^^^^^^

* Add a deadline of usage in the session, and wait past this deadline to start serving again. Until then, abort immediately.
* Use element in the GUI to delay or slow usage.

Specs
^^^^^
+-------------+------------------+
| Short name  | Security/NoSleep |
+-------------+------------------+
| Rulesets    | :ref:`Security`  |
+-------------+------------------+
| Exakt since | 0.8.4            |
+-------------+------------------+
| Php Version | All              |
+-------------+------------------+
| Severity    | Minor            |
+-------------+------------------+
| Time To Fix | Quick (30 mins)  |
+-------------+------------------+
| Precision   | High             |
+-------------+------------------+


.. _no-weak-ssl-crypto:

No Weak SSL Crypto
++++++++++++++++++

 When enabling PHP's stream SSL, it is important to use a safe protocol. 

All the SSL protocols (1.0, 2.0, 3.0), and TLS (1.0 are unsafe. The best is to use the most recent TLS, version 1.2. 

stream_socket_enable_crypto() and `curl_setopt() <https://www.php.net/curl_setopt>`_ are checked.

.. code-block:: php

   <?php
   
   // This socket will use SSL v2, which 
   $socket = 'sslv2://www.example.com';
   $fp = fsockopen($socket, 80, $errno, $errstr, 30);
   
   ?>


Using the TLS transport protocol of PHP will choose the version by itself. 

See also `Insecure Transportation Security Protocol Supported (TLS 1.0) <https://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/insecure-transportation-security-protocol-supported-tls-10/>`_, `The 2018 Guide to Building Secure PHP Software <https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software>`_ and `Internet Domain: TCP, UDP, SSL, and TLS <https://www.php.net/manual/en/transports.inet.php>`_.


Suggestions
^^^^^^^^^^^

* Use TLS transport, with version 1.2

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Security/NoWeakSSLCrypto |
+-------------+--------------------------+
| Rulesets    | :ref:`Security`          |
+-------------+--------------------------+
| Exakt since | 1.9.6                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Quick (30 mins)          |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _parse\_str()-warning:

parse_str() Warning
+++++++++++++++++++

 The `parse_str() <https://www.php.net/parse_str>`_ function parses a query string and assigns the resulting variables to the local scope. This may create a unexpected number of variables, and even overwrite the existing one.

.. code-block:: php

   <?php
     function foo( ) {
       global $a;
       
       echo $a;
     }
   
     parse_str('a=1'); // No second parameter
     foo( );
     // displays 1
   ?>


Always use an empty variable a second parameter to `parse_str() <https://www.php.net/parse_str>`_, so as to collect the incoming values, and then, filter them in that array. 


Suggestions
^^^^^^^^^^^

* Use the second parameter when calling parse_url();
* Change to PHP 8.0 version, which made the second argument compulsory

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------------+
| Short name  | Security/parseUrlWithoutParameters                                                                    |
+-------------+-------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Security`                                                                                       |
+-------------+-------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                 |
+-------------+-------------------------------------------------------------------------------------------------------+
| Php Version | 8.0-                                                                                                  |
+-------------+-------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                 |
+-------------+-------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                         |
+-------------+-------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                  |
+-------------+-------------------------------------------------------------------------------------------------------+
| ClearPHP    | `know-your-variables <https://github.com/dseguy/clearPHP/tree/master/rules/know-your-variables.md>`__ |
+-------------+-------------------------------------------------------------------------------------------------------+


.. _register-globals:

Register Globals
++++++++++++++++

 ``register_globals`` was a PHP directive that dumped all incoming variables from GET, POST, COOKIE and FILES as global variables in the called scripts.
This lead to security failures, as the variables were often used but not filtered. 

Though it is less often found in more recent code, ``register_globals`` is sometimes needed in legacy code, that haven't made the move to eradicate this style of coding.
Backward compatible pieces of code that mimic the ``register_globals`` features usually create even greater security risks by being run after scripts startup. At that point, some important variables are already set, and may be overwritten by the incoming call, creating confusion in the script.

Mimicking ``register_globals`` is achieved with variables variables, `extract() <https://www.php.net/extract>`_, `parse_str() <https://www.php.net/parse_str>`_ and `import_request_variables() <https://www.php.net/import_request_variables>`_ (Up to PHP 5.4). 

.. code-block:: php

   <?php
   
   // Security warning ! This overwrites existing variables. 
   extract($_POST);
   
   // Security warning ! This overwrites existing variables. 
   foreach($_REQUEST as $var => $value) {
       $$var = $value;
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Avoid reimplementing register_globals
* Use a container to store and access commonly used values

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------+
| Short name  | Security/RegisterGlobals                                                                  |
+-------------+-------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Security`                                                                           |
+-------------+-------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                     |
+-------------+-------------------------------------------------------------------------------------------+
| Php Version | All                                                                                       |
+-------------+-------------------------------------------------------------------------------------------+
| Severity    | Critical                                                                                  |
+-------------+-------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                             |
+-------------+-------------------------------------------------------------------------------------------+
| Precision   | High                                                                                      |
+-------------+-------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-teampass-security-registerglobals`, :ref:`case-xoops-security-registerglobals` |
+-------------+-------------------------------------------------------------------------------------------+


.. _safe-http-headers:

Safe HTTP Headers
+++++++++++++++++

 Avoid configuring HTTP headers with lax restriction from within PHP. 

There are a lot of HTTP headers those days, targeting various vulnerabilities. To ensure backward compatibility, those headers have a default mode that is lax and permissive. It is recommended to avoid using those from within the code.

.. code-block:: php

   <?php
   
   //Good configuration, limiting access to origin
   header('Access-Control-Allow-Origin: https://www.exakat.io');
   
   //Configuration is present, but doesn't restrict anything : any external site is a potential source
   header('Access-Control-Allow-Origin: *');
   
   ?>


See also `Hardening Your HTTP Security Headers <https://www.keycdn.com/blog/http-security-headers>`_, `How To Secure Your Web App With HTTP Headers <https://www.smashingmagazine.com/2017/04/secure-web-app-http-headers/>`_ and `SecurityHeaders <https://securityheaders.com/>`_.


Suggestions
^^^^^^^^^^^

* Remove usage of those headers

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Security/SafeHttpHeaders |
+-------------+--------------------------+
| Rulesets    | :ref:`Security`          |
+-------------+--------------------------+
| Exakt since | 1.5.5                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Major                    |
+-------------+--------------------------+
| Time To Fix | Quick (30 mins)          |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _sensitive-argument:

Sensitive Argument
++++++++++++++++++

 Spot the argument that are sensitive for security. The functioncalls that are hosting a sensitive argument are called a sink.

.. code-block:: php

   <?php
   
   // first argument $query is a sensitive argument 
   mysqli_query($query);
   
   ?>

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Security/SensitiveArgument |
+-------------+----------------------------+
| Rulesets    | none                       |
+-------------+----------------------------+
| Exakt since | 0.8.4                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Slow (1 hour)              |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _session-lazy-write:

Session Lazy Write
++++++++++++++++++

 Classes that implements SessionHandlerInterface must also implements SessionUpdateTimestampHandlerInterface. 

The two extra methods are used to help lazy loading : the first actually checks if a sessionId is available, and the seconds updates the time of last usage of the session data in the session storage. 

This was spotted by ``Nicolas Grekas``, and fixed in Symfony `[HttpFoundation] Make sessions secure and lazy #24523 <https://github.com/symfony/symfony/pull/24523>`_. 

.. code-block:: php

   <?php
   
   interface SessionUpdateTimestampHandlerInterface {
       // returns a boolean to indicate that valid data is available for this sessionId, or not.
       function validateId($sessionId);
       
       //called to change the last time of usage for the session data.
       //It may be a file's touch or full write, or a simple update on the database
       function updateTimestamp($sessionId, $sessionData);
   }
   
   ?>


See also `Sessions: Improve original RFC about lazy_write <https://wiki.php.net/rfc/session-read_only-lazy_write>`_ and the `Sessions <https://www.php.net/manual/en/book.session.php>`_.


Suggestions
^^^^^^^^^^^

* Implements the SessionUpdateTimestampHandlerInterface interface

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Security/SessionLazyWrite |
+-------------+---------------------------+
| Rulesets    | :ref:`Security`           |
+-------------+---------------------------+
| Exakt since | 0.12.15                   |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Major                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _set-cookie-safe-arguments:

Set Cookie Safe Arguments
+++++++++++++++++++++++++

 The last five arguments of `setcookie() <https://www.php.net/setcookie>`_ and `setrawcookie() <https://www.php.net/setrawcookie>`_ are for security. Use them anytime you can.

``setcookie ( string $name [, string $value =  [, int $expire = 0 [, string $path =  [, string $domain =  [, bool $secure = false [, bool $httponly = false ]]]]]] )``

The ``$expire`` argument sets the date of expiration of the cookie. It is recommended to make it as low as possible, to reduce its chances to be captured. Sometimes, low expiration date may be several days (for preferences), and other times, low expiration date means a few minutes. 

The ``$path`` argument limits the transmission of the cookie to URL whose path matches the one mentioned here. By default, it is ``'/'``, which means the whole server. If a cookie usage is limited to a part of the application, use it here.

The ``$domain`` argument limits the transmission of the cookie to URL whose domain matches the one mentioned here. By default, it is ``''``, which means any server on the internet. At worse, you may use ``mydomain.com`` to cover your whole domain, or better, refine it with the actual subdomain of usage.

The ``$secure`` argument limits the transmission of the cookie over HTTP (by default) or HTTPS. The second is better, as the transmission of the cookie is crypted. In case HTTPS is still at the planned stage, use '$_SERVER[HTTPS]'. This environment variable is false on HTTP, and true on HTTPS.

The ``$httponly`` argument limits the access of the cookie to JavaScript. It is only transmitted to the browser, and retransmitted. This helps reducing XSS and CSRF attacks, though it is disputed. 

The ``$samesite`` argument limits the sending of the cookie to the domain that initiated the request. It is by default ``Lax`` but should be upgraded to ``Strict`` whenever possible. This feature is available as PHP 7.3. 

.. code-block:: php

   <?php
   
   //admin cookie, available only on https://admin.my-domain.com/system/, for the next minute, and not readable by javascript
   setcookie(admin, $login, time()+60, /system/, admin.my-domain.com, $_SERVER['HTTPS'], 1);
   
   //login cookie, available until the browser is closed, over http or https
   setcookie(login, $login);
   
   //removing the login cookie : Those situations are omitted by the analysis
   setcookie(login, '');
   
   ?>


See also `setcookie <http://www.php.net/setcookie>`_ and `'SameSite' cookie attribute <https://www.chromestatus.com/feature/4672634709082112>`_.



Suggestions
^^^^^^^^^^^

* Use all the argument when setting cookies with PHP functions

Specs
^^^^^
+-------------+------------------------+
| Short name  | Security/SetCookieArgs |
+-------------+------------------------+
| Rulesets    | :ref:`Security`        |
+-------------+------------------------+
| Exakt since | 0.10.6                 |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Major                  |
+-------------+------------------------+
| Time To Fix | Instant (5 mins)       |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _should-use-prepared-statement:

Should Use Prepared Statement
+++++++++++++++++++++++++++++

 Modern databases provides support for prepared statement : it separates the query from the processed data and raise significantly the security. 

Building queries with concatenations is not recommended, though not always avoidable. When possible, use prepared statements.

.. code-block:: php

   <?php
   /* Execute a prepared statement by passing an array of values */
   
   $sql = 'SELECT name, colour, calories
       FROM fruit
       WHERE calories < :calories AND colour = :colour';
   $sth = $conn->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_FWDONLY));
   $sth->execute(array(':calories' => 150, ':colour' => 'red'));
   $red = $sth->fetchAll();
   ?>


Same code, without preparation : 

.. code-block:: php

   <?php
   
       $sql = 'SELECT name, color, calories FROM fruit WHERE calories < '.$conn-quote(150).' AND colour = '.$conn->quotes('red').' ORDER BY name';
       $sth = $conn->query($sql) as $row);
   }
   ?>


See also `Prepared Statements <https://www.php.net/manual/en/`mysqli <https://www.php.net/mysqli>`_.quickstart.prepared-statements.php>`_,
         `PHP `MySQLi <https://www.php.net/mysqli>`_ Prepared Statements Tutorial to Prevent SQL Injection <https://websitebeaver.com/prepared-statements-in-php-`mysqli <https://www.php.net/mysqli>`_-to-prevent-sql-injection>`_,
         `The Best Way to Perform `MYSQLI <https://www.php.net/mysqli>`_ Prepared Statements in PHP <https://developer.hyvor.com/php/prepared-statements>`_.
         


Suggestions
^^^^^^^^^^^

* Use an ORM
* Use an Active Record library
* Change the query to hard code it and make it not injectable

+-------------+--------------------+------+----------------------------+
| Name        | Default            | Type | Description                |
+-------------+--------------------+------+----------------------------+
| queryMethod | query_methods.json | data | Methods that call a query. |
+-------------+--------------------+------+----------------------------+



Specs
^^^^^
+-------------+--------------------------------------------------------------+
| Short name  | Security/ShouldUsePreparedStatement                          |
+-------------+--------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Security` |
+-------------+--------------------------------------------------------------+
| Exakt since | 0.8.4                                                        |
+-------------+--------------------------------------------------------------+
| Php Version | All                                                          |
+-------------+--------------------------------------------------------------+
| Severity    | Major                                                        |
+-------------+--------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                |
+-------------+--------------------------------------------------------------+
| Precision   | High                                                         |
+-------------+--------------------------------------------------------------+
| Examples    | :ref:`case-dolibarr-security-shouldusepreparedstatement`     |
+-------------+--------------------------------------------------------------+


.. _should-use-session\_regenerateid():

Should Use session_regenerateid()
+++++++++++++++++++++++++++++++++

 session_regenerateid() should be used when sessions are used.

When using sessions, a session ID is assigned to the user. It is a random number, used to connect the user and its data on the server. Actually, anyone with the session ID may have access to the data. This is why those session ID are so long and complex.

A good approach to protect the session ID is to reduce its lifespan : the shorter the time of use, the better. While changing the session ID at every hit on the page may no be possible, a more reasonable approach is to change the session id when an important action is about to take place. What important means is left to the application to decide.

Based on this philosophy, a code source that uses Zend\Session but never uses Zend\Session\:\:regenerateId() has to be updated.

.. code-block:: php

   <?php
   
       session_start();
       
       $id = (int) $_SESSION['id'];
       // no usage of session_regenerateid() anywhere triggers the analysis
       
       // basic regeneration every 20 hits on the page. 
       if (++$_SESSION['count'] > 20) {
           session_regenerateid();
       }
   
   ?>


See `session_regenerateid() <https://www.php.net/session_regenerate_id>`_ and `PHP Security Guide: Sessions <http://phpsec.org/projects/guide/4.html>`_.



Suggestions
^^^^^^^^^^^

* Add session_regenerateid() call before any important operation on the application

Specs
^^^^^
+-------------+---------------------------------------+
| Short name  | Security/ShouldUseSessionRegenerateId |
+-------------+---------------------------------------+
| Rulesets    | :ref:`Security`                       |
+-------------+---------------------------------------+
| Exakt since | 0.10.4                                |
+-------------+---------------------------------------+
| Php Version | All                                   |
+-------------+---------------------------------------+
| Severity    | Major                                 |
+-------------+---------------------------------------+
| Time To Fix | Slow (1 hour)                         |
+-------------+---------------------------------------+
| Precision   | High                                  |
+-------------+---------------------------------------+


.. _sqlite3-requires-single-quotes:

Sqlite3 Requires Single Quotes
++++++++++++++++++++++++++++++

 The escapeString() method from ``SQLite3`` doesn't escape ``"``, but only ``'``. 

.. code-block:: php

   <?php
   
   // OK. escapeString is OK with '
   $query = "SELECT * FROM table WHERE col = '".$sqlite->escapeString($x)."'";
   
   // This is vulnerable to " in $x
   $query = 'SELECT * FROM table WHERE col = "'.$sqlite->escapeString($x).'"';
   
   ?>


To properly handle quotes and ``NUL`` characters, use bindParam() instead.

Quote from the PHP manual comments : ``The reason this function doesn't escape double quotes is because double quotes are used with names (the equivalent of backticks in MySQL), as in table or column names, while single quotes are used for values.``

See also `SQLite3\:\:escapeString <https://www.php.net/manual/en/sqlite3.escapestring.php>`_.


Suggestions
^^^^^^^^^^^

* Use prepared statements whenever possible
* Switch the query to use single quote

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Security/Sqlite3RequiresSingleQuotes |
+-------------+--------------------------------------+
| Rulesets    | :ref:`Security`                      |
+-------------+--------------------------------------+
| Exakt since | 1.0.10                               |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Major                                |
+-------------+--------------------------------------+
| Time To Fix | Slow (1 hour)                        |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _super-globals-contagion:

Super Globals Contagion
+++++++++++++++++++++++

 Basic tainting system.

Specs
^^^^^
+-------------+-------------------------------+
| Short name  | Security/SuperGlobalContagion |
+-------------+-------------------------------+
| Rulesets    | none                          |
+-------------+-------------------------------+
| Exakt since | 0.8.4                         |
+-------------+-------------------------------+
| Php Version | All                           |
+-------------+-------------------------------+
| Severity    | Minor                         |
+-------------+-------------------------------+
| Time To Fix | Slow (1 hour)                 |
+-------------+-------------------------------+
| Precision   | High                          |
+-------------+-------------------------------+


.. _unserialize-second-arg:

Unserialize Second Arg
++++++++++++++++++++++

 Since PHP 7, `unserialize() <https://www.php.net/unserialize>`_ function has a second argument that limits the classes that may be unserialized. In case of a breach, this is limiting the classes accessible from `unserialize() <https://www.php.net/unserialize>`_. 

One way to exploit unserialize, is to make PHP unserialized the data to an available class, may be one that may be auto-loaded.

.. code-block:: php

   <?php
   
   // safe unserialization : only the expected class will be extracted
   $serialized = 'O:7:dbClass:0:{}';
   $var = unserialize($serialized, ['dbClass']);
   $var->connect();
   
   // unsafe unserialization : $var may be of any type that was in the serialized string
   // although, here, this is working well.
   $serialized = 'O:7:dbClass:0:{}';
   $var = unserialize($serialized);
   $var->connect();
   
   // unsafe unserialization : $var is not of the expected type.
   // and, here, this will lead to disaster.
   $serialized = 'O:10:debugClass:0:{}';
   $var = unserialize($serialized);
   $var->connect();
   
   ?>


See also `unserialize() <https://www.php.net/unserialize>`_, `Securely Implementing (De)Serialization in PHP <https://paragonie.com/blog/2016/04/securely-implementing-de-serialization-in-php>`_, and `Remote code execution via PHP [Unserialize] <https://www.notsosecure.com/remote-code-execution-via-php-unserialize/>`_.


Suggestions
^^^^^^^^^^^

* Add a list of class as second argument of any call to unserialize(). This is valid for PHP 7.0 and later.

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------------+
| Short name  | Security/UnserializeSecondArg                                                                         |
+-------------+-------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Security`                                                                                       |
+-------------+-------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                 |
+-------------+-------------------------------------------------------------------------------------------------------+
| Php Version | 7.0+                                                                                                  |
+-------------+-------------------------------------------------------------------------------------------------------+
| Severity    | Critical                                                                                              |
+-------------+-------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                       |
+-------------+-------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                  |
+-------------+-------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-piwigo-security-unserializesecondarg`, :ref:`case-livezilla-security-unserializesecondarg` |
+-------------+-------------------------------------------------------------------------------------------------------+


.. _upload-filename-injection:

Upload Filename Injection
+++++++++++++++++++++++++

 When receiving a file via Upload, it is recommended to store it under a `self <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_-generated name. Any storage that uses the original filename, or even a part of it may be vulnerable to injections.

.. code-block:: php

   <?php
   
   // Security error ! the $_FILES['upload']['filename'] is provided by the sender.
   // 'a.<script>alert(\'a\')</script>'; may lead to a HTML injection.
   $extension = substr( strrchr($_FILES['upload']['name'], '.') ,1);
   if (!in_array($extension, array('gif', 'jpeg', 'jpg')) { 
       // process error
       continue;
   }
   // Md5 provides a name without special characters
   $name = md5($_FILES['upload']['filename']);
   if(@move_uploaded_file($_FILES['upload']['tmp_name'], '/var/no-www/upload/'.$name.'.'.$extension)) {
       safeStoring($name.'.'.$extension, $_FILES['upload']['filename']);
   }
   
   // Security error ! the $_FILES['upload']['filename'] is provided by the sender.
   if(@move_uploaded_file($_FILES['upload']['tmp_name'], $_FILES['upload']['filename'])) {
       safeStoring($_FILES['upload']['filename']);
   }
   
   // Security error ! the $_FILES['upload']['filename'] is provided by the sender.
   // 'a.<script>alert('a')</script>'; may lead to a HTML injection.
   $extension = substr( strrchr($_FILES['upload']['name'], '.') ,1);
   $name = md5($_FILES['upload']['filename']);
   if(@move_uploaded_file($_FILES['upload']['tmp_name'], $name.'.'.$extension)) {
       safeStoring($name.'.'.$extension, $_FILES['upload']['filename']);
   }
   
   ?>


It is highly recommended to validate any incoming file, generate a name for it, and store the result in a folder outside the web folder. Also, avoid accepting PHP scripts, if possible.

See also `[CVE-2017-6090] <https://cxsecurity.com/issue/WLB-2017100031>`_, `CWE-616: Incomplete Identification of Uploaded File Variables <https://cwe.mitre.org/data/definitions/616.html>`_, `Why File Upload Forms are a Major Security Threat <https://www.acunetix.com/websitesecurity/upload-forms-threat/>`_.


Suggestions
^^^^^^^^^^^

* Validate uploaded filenames
* Rename files upon storage, and keep the original name in a database

Specs
^^^^^
+-------------+----------------------------------+
| Short name  | Security/UploadFilenameInjection |
+-------------+----------------------------------+
| Rulesets    | :ref:`Security`                  |
+-------------+----------------------------------+
| Exakt since | 0.12.14                          |
+-------------+----------------------------------+
| Php Version | All                              |
+-------------+----------------------------------+
| Severity    | Major                            |
+-------------+----------------------------------+
| Time To Fix | Instant (5 mins)                 |
+-------------+----------------------------------+
| Precision   | High                             |
+-------------+----------------------------------+


.. _adding-zero:

Adding Zero
+++++++++++

 Adding 0 is useless, as 0 is the neutral element for addition. Besides, when one of the argument is an integer, PHP triggers a cast to integer. 

It is recommended to make the cast explicit with ``(int)``. 

.. code-block:: php

   <?php
   
   // Explicit cast
   $a = (int) foo();
   
   // Useless addition
   $a = foo() + 0;
   $a = 0 + foo();
   
   // Also works with minus
   $b = 0 - $c; // drop the 0, but keep the minus
   $b = $c - 0; // drop the 0 and the minus
   
   $a += 0;
   $a -= 0;
   
   ?>


Adding zero is also reported when the zero is a defined constants. 

If it is used to type cast a value to integer, then casting with ``(int)`` is clearer. 



Suggestions
^^^^^^^^^^^

* Remove the +/- 0, may be the whole assignation
* Use an explicit type casting operator (int)

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------+
| Short name  | Structures/AddZero                                                                            |
+-------------+-----------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                   |
+-------------+-----------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------+
| Php Version | All                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                              |
+-------------+-----------------------------------------------------------------------------------------------+
| Precision   | High                                                                                          |
+-------------+-----------------------------------------------------------------------------------------------+
| ClearPHP    | `no-useless-math <https://github.com/dseguy/clearPHP/tree/master/rules/no-useless-math.md>`__ |
+-------------+-----------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-thelia-structures-addzero`, :ref:`case-openemr-structures-addzero`                 |
+-------------+-----------------------------------------------------------------------------------------------+


.. _altering-foreach-without-reference:

Altering Foreach Without Reference
++++++++++++++++++++++++++++++++++

 `Foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_ loop that should use a reference. 

When using a foreach loop that modifies the original source, it is recommended to use referenced variables, rather than access the original value with $source[$index]. 

Using references is then must faster, and easier to read. 

.. code-block:: php

   <?php
   
   // Using references in foreach
   foreach($source as $key => &$value) {
       $value = newValue($value, $key);
   }
   
   // Avoid foreach : use array_map
   $source = array_walk($source, 'newValue');
       // Here, $key MUST be the second argument or newValue
   
   // Slow version to update the array
   foreach($source as $key => &$value) {
       $source[$key] = newValue($value, $key);
   }
   ?>


You may also use `array_walk() <https://www.php.net/array_walk>`_ or `array_map() <https://www.php.net/array_map>`_ (when $key is not used) to avoid the use of foreach.

See also `foreach <https://www.php.net/manual/en/control-structures.foreach.php>`_.

Suggestions
^^^^^^^^^^^

* Add the reference on the modified blind variable, and avoid accessing the source array

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/AlteringForeachWithoutReference                                                                                        |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                                                       |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                                             |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                                               |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                                             |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                                   |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                              |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------+
| ClearPHP    | `use-reference-to-alter-in-foreach <https://github.com/dseguy/clearPHP/tree/master/rules/use-reference-to-alter-in-foreach.md>`__ |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-contao-structures-alteringforeachwithoutreference`, :ref:`case-wordpress-structures-alteringforeachwithoutreference`   |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------+


.. _alternative-syntax-consistence:

Alternative Syntax Consistence
++++++++++++++++++++++++++++++

 PHP allows for two syntax : the alternative syntax, and the classic syntax. 

The classic syntax is almost always used. When used, the alternative syntax is used in templates. 

This analysis reports files that are using both syntax at the same time. This is confusing.

.. code-block:: php

   <?php
   
   // Mixing both syntax is confusing.
   foreach($array as $item) : 
       if ($item > 1) {
           print $item elements\n;
       } else {
           print $item element\n;
       }
   endforeach;
   
   ?>

Specs
^^^^^
+-------------+-----------------------------------------+
| Short name  | Structures/AlternativeConsistenceByFile |
+-------------+-----------------------------------------+
| Rulesets    | :ref:`Analyze`                          |
+-------------+-----------------------------------------+
| Exakt since | 0.11.2                                  |
+-------------+-----------------------------------------+
| Php Version | All                                     |
+-------------+-----------------------------------------+
| Severity    | Major                                   |
+-------------+-----------------------------------------+
| Time To Fix | Quick (30 mins)                         |
+-------------+-----------------------------------------+
| Precision   | High                                    |
+-------------+-----------------------------------------+


.. _comparison-is-always-true:

Comparison Is Always True
+++++++++++++++++++++++++

 Based on the incoming types of arguments, the comparison never change.

.. code-block:: php

   <?php
   
   function foo(array $a) {
       // This will always fail
       if ($a === 1) {
           
       } elseif (is_int($a)) {
       
       }
   
       // This will always succeed
       if ($a !== null) {
           
       } elseif (is_null($a)) {
           
       }
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Remove the constant condition and its corresponding blocks
* Make the constant condition variable

Specs
^^^^^
+-------------+------------------------+
| Short name  | Structures/AlwaysFalse |
+-------------+------------------------+
| Rulesets    | :ref:`Analyze`         |
+-------------+------------------------+
| Exakt since | 1.9.4                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Quick (30 mins)        |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _array\_fill()-with-objects:

Array_Fill() With Objects
+++++++++++++++++++++++++

 `array_fill() <https://www.php.net/array_fill>`_ fills an array with identical objects, not copies nor clones. This means that all the filled objects are a reference to the same object. Changing one of them will change any of them.

Make sure this is the intended effect in the code. 

.. code-block:: php

   <?php
   
   $x = new StdClass();
   $array = array_fill(0, 10, $x);
   
   $array[3]->y = Set in object #3;
   
   // displays Set in object #3;
   echo $array[5]->y;
   
   ?>


This applies to `array_pad() <https://www.php.net/array_pad>`_ too. It doesn't apply to `array_fill_keys() <https://www.php.net/array_fill_keys>`_, as objects will be cast to a string before usage in this case. 



Suggestions
^^^^^^^^^^^

* Use a loop to fill in the array with cloned() objects.

Specs
^^^^^
+-------------+---------------------------------+
| Short name  | Structures/ArrayFillWithObjects |
+-------------+---------------------------------+
| Rulesets    | :ref:`Analyze`                  |
+-------------+---------------------------------+
| Exakt since | 2.1.9                           |
+-------------+---------------------------------+
| Php Version | All                             |
+-------------+---------------------------------+
| Severity    | Minor                           |
+-------------+---------------------------------+
| Time To Fix | Quick (30 mins)                 |
+-------------+---------------------------------+
| Precision   | High                            |
+-------------+---------------------------------+


.. _array\_map()-passes-by-value:

Array_Map() Passes By Value
+++++++++++++++++++++++++++

 `array_map() <https://www.php.net/array_map>`_ requires the callback to receive elements by value. Unlink `array_walk() <https://www.php.net/array_walk>`_, which accepts by value or by reference, depending on the action taken.

PHP 8.0 and more recent emits a Warning

.. code-block:: php

   <?php
   // Example, courtery of Juliette Reinders Folmer
   function trimNewlines(&$line, $key) {
       $line = str_replace(array(\n, \r), '', $line);
   }
   
   $original = [
       text\n\n,
       text\n\r
   ];
   
   $array = $original;
   array_walk($array, 'trimNewlines');
   
   var_dump($array);
   
   array_map('trimNewlines', $original, [0, 1]);
   
   ?>


See also `array_map <https://www.php.net/array_map>`_.

Suggestions
^^^^^^^^^^^

* Make the callback first argument a reference

Specs
^^^^^
+-------------+------------------------------------------------------+
| Short name  | Structures/ArrayMapPassesByValue                     |
+-------------+------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CompatibilityPHP80` |
+-------------+------------------------------------------------------+
| Exakt since | 2.2.0                                                |
+-------------+------------------------------------------------------+
| Php Version | 7.4-                                                 |
+-------------+------------------------------------------------------+
| Severity    | Major                                                |
+-------------+------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                      |
+-------------+------------------------------------------------------+
| Precision   | Medium                                               |
+-------------+------------------------------------------------------+


.. _array\_merge()-and-variadic:

array_merge() And Variadic
++++++++++++++++++++++++++

 Always check value in variadic before using it with `array_merge() <https://www.php.net/array_merge>`_ and `array_merge_recursive() <https://www.php.net/array_merge_recursive>`_.

Before PHP 7.4, `array_merge() <https://www.php.net/array_merge>`_ and `array_merge_recursive() <https://www.php.net/array_merge_recursive>`_ would complain when no argument was provided. As such, using the spread operator `...` on an empty `array() <https://www.php.net/array>`_ would yield no argument, and an error.

.. code-block:: php

   <?php
   
   // 
   $b = array_merge(...$x);
   
   
   
   ?>




Suggestions
^^^^^^^^^^^

* Add a check to the spread variable to ensure it is not empty
* Append an empty array to to the spread variable to ensure it is not empty

Specs
^^^^^
+-------------+----------------------------------+
| Short name  | Structures/ArrayMergeAndVariadic |
+-------------+----------------------------------+
| Rulesets    | :ref:`Analyze`                   |
+-------------+----------------------------------+
| Exakt since | 1.9.2                            |
+-------------+----------------------------------+
| Php Version | 7.4-                             |
+-------------+----------------------------------+
| Severity    | Minor                            |
+-------------+----------------------------------+
| Time To Fix | Quick (30 mins)                  |
+-------------+----------------------------------+
| Precision   | High                             |
+-------------+----------------------------------+


.. _array\_merge-needs-array-of-arrays:

Array_merge Needs Array Of Arrays
+++++++++++++++++++++++++++++++++

 When collecting data to feed `array_merge() <https://www.php.net/array_merge>`_, use an array of array as default value. ```array(`array()) <https://www.php.net/array>`_``` is the neutral value for `array_merge() <https://www.php.net/array_merge>`_;

This analysis also reports when the used types are not an array : `array_merge() <https://www.php.net/array_merge>`_ does not accept scalar values, but only arrays.

.. code-block:: php

   <?php
   
   // safe default value
   $a = array(array());
   
   // when $list is empty, it is 
   foreach($list as $l) {
       $a[] = $l;
   }
   $b = array_merge($a);
   
   ?>


Since PHP 7.4, it is possible to call `array_merge() <https://www.php.net/array_merge>`_ without an argument : this means the default value may an empty array. This array shall not contain scalar values.

See also `array_merge <https://www.php.net/array_merge>`_.



Suggestions
^^^^^^^^^^^

* Use ```array(array())``` or ```[[]]``` as default value for array_merge()
* Remove any non-array value from the values in the default array

Specs
^^^^^
+-------------+---------------------------------+
| Short name  | Structures/ArrayMergeArrayArray |
+-------------+---------------------------------+
| Rulesets    | :ref:`Analyze`                  |
+-------------+---------------------------------+
| Exakt since | 2.1.4                           |
+-------------+---------------------------------+
| Php Version | All                             |
+-------------+---------------------------------+
| Severity    | Minor                           |
+-------------+---------------------------------+
| Time To Fix | Quick (30 mins)                 |
+-------------+---------------------------------+
| Precision   | High                            |
+-------------+---------------------------------+


.. _searching-for-multiple-keys:

Searching For Multiple Keys
+++++++++++++++++++++++++++

 `array_search() <https://www.php.net/array_search>`_ and `array_keys() <https://www.php.net/array_keys>`_ find keys in an array. `array_search() <https://www.php.net/array_search>`_ returns the first key that match a value, while `array_keys() <https://www.php.net/array_keys>`_ returns all the keys that match a value.

`array_search() <https://www.php.net/array_search>`_ and `array_keys() <https://www.php.net/array_keys>`_ both accepts a final parameter to set a strict search or not. 

.. code-block:: php

   <?php
   
   $array = array(0,1,2,3,4,3);
   
   // $id = 3
   $id = array_search($array, 3);
   
   // $ids = [3, 5];
   $ids = array_keys($array, 3);
   
   ?>




Suggestions
^^^^^^^^^^^

* Use array_keys() to find multiple keys in an array
* Use array_keys() to find a unique key in an array

Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Structures/ArraySearchMultipleKeys |
+-------------+------------------------------------+
| Rulesets    | :ref:`Suggestions`                 |
+-------------+------------------------------------+
| Exakt since | 2.2.0                              |
+-------------+------------------------------------+
| Php Version | All                                |
+-------------+------------------------------------+
| Severity    | Minor                              |
+-------------+------------------------------------+
| Time To Fix | Quick (30 mins)                    |
+-------------+------------------------------------+
| Precision   | Unknown                            |
+-------------+------------------------------------+


.. _assign-and-compare:

Assign And Compare
++++++++++++++++++

 Assignation has a lower precedence than comparison. As such, the assignation always happens after the comparison. This leads to the comparison being stored in the variable, and not the value being compared.

.. code-block:: php

   <?php
   
   if ($id = strpos($string, $needle) !== false) { 
       // $id now contains a boolean (true or false), but not the position of the $needle.
   }
   
   // probably valid comparison, as $found will end up being a boolean
   if ($found = strpos($string, $needle) === false) { 
       doSomething();
   }
   
   // always valid comparison, with parenthesis
   if (($id = strpos($string, $needle)) !== false) { 
       // $id now contains a boolean (true or false), but not the position of the $needle.
   }
   
   // Being a lone instruction, this is always valid : there is no double usage with if condition
   $isFound = strpos($string, $needle) !== false;
   
   
   ?>


See also `Operator Precedence <https://www.php.net/manual/en/language.operators.precedence.php>`_.


Suggestions
^^^^^^^^^^^

* Use parenthesis
* Separate assignation and comparison
* Drop assignation or comparison

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/AssigneAndCompare                |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 1.6.3                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _assigned-in-one-branch:

Assigned In One Branch
++++++++++++++++++++++

 Report variables that are assigned in one branch, and not in the other.

.. code-block:: php

   <?php
   
   if ($condition) {
       // $assigned_in_this_branch is assigned in only one of the branches
       $assigned_in_this_branch = 1;
       $also_assigned = 1;
   } else {
       // $also_assigned is assigned in the two branches
       $also_assigned = 1;
   }
   
   ?>

Specs
^^^^^
+-------------+--------------------------------+
| Short name  | Structures/AssignedInOneBranch |
+-------------+--------------------------------+
| Rulesets    | none                           |
+-------------+--------------------------------+
| Exakt since | 1.0.5                          |
+-------------+--------------------------------+
| Php Version | All                            |
+-------------+--------------------------------+
| Severity    | Minor                          |
+-------------+--------------------------------+
| Time To Fix | Slow (1 hour)                  |
+-------------+--------------------------------+
| Precision   | High                           |
+-------------+--------------------------------+


.. _same-variable-foreach:

Same Variable Foreach
+++++++++++++++++++++

 A foreach which uses its own source as a blind variable is actually broken.

Actually, PHP makes a copy of the source before it starts the loop. As such, the same variable may be used for both source and blind value. 

Of course, this is very confusing, to see the same variables used in very different ways. 

The source will also be destroyed immediately after the blind variable has been turned into a reference.

.. code-block:: php

   <?php
   
   $array = range(0, 10);
   foreach($array as $array) {
       print $array.PHP_EOL;
   }
   
   print_r($array); // display number from 0 to 10.
   
   $array = range(0, 10);
   foreach($array as &$array) {
       print $array.PHP_EOL;
   }
   
   print_r($array); // display 10
   
   ?>

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/AutoUnsetForeach                 |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 1.0.5                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _bail-out-early:

Bail Out Early
++++++++++++++

 When using conditions, it is recommended to quit in the current context, and avoid else clause altogether. 

The main benefit is to make clear the method applies a condition, and stop immediately when it is not satisfied. 
The main sequence is then focused on the actual code. 

This works with the ``break``, ``continue``, ``throw`` and ``goto`` keywords too, depending on situations.

.. code-block:: php

   <?php
   
   // Bailing out early, low level of indentation
   function foo1($a) {
       if ($a > 0) {
           return false;
       } 
       
       $a++;
       return $a;
   }
   
   // Works with continue too
   foreach($array as $a => $b) {
       if ($a > 0) {
           continue false;
       } 
       
       $a++;
       return $a;
   }
   
   // No need for else
   function foo2($a) {
       if ($a > 0) {
           return false;
       } else {
           $a++;
       }
       
       return $a;
   }
   
   // No need for else : return goes into then. 
   function foo3($a) {
       if ($a < 0) {
           $a++;
       } else {
           return false;
       }
       
       return $a;
   }
   
   // Make a return early, and make the condition visible.
   function foo3($a) {
       if ($a < 0) {
           $a++;
           methodcall();
           functioncall();
       } 
   }
   
   ?>


See also `Avoid nesting too deeply and return early (part 1) <https://github.com/jupeter/clean-code-php#avoid-nesting-too-deeply-and-return-early-part-1>`_ and `Avoid nesting too deeply and return early (part 2) <https://github.com/jupeter/clean-code-php#avoid-nesting-too-deeply-and-return-early-part-2>`_.



Suggestions
^^^^^^^^^^^

* Detect errors, and then, return as soon as possible.
* When a if...then branches are unbalanced, test for the small branch, finish it with return. Then keep the other branch as the main code.

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------+
| Short name  | Structures/BailOutEarly                                                                  |
+-------------+------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                           |
+-------------+------------------------------------------------------------------------------------------+
| Exakt since | 0.8.9                                                                                    |
+-------------+------------------------------------------------------------------------------------------+
| Php Version | All                                                                                      |
+-------------+------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                    |
+-------------+------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                          |
+-------------+------------------------------------------------------------------------------------------+
| Precision   | High                                                                                     |
+-------------+------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-openemr-structures-bailoutearly`, :ref:`case-opencfp-structures-bailoutearly` |
+-------------+------------------------------------------------------------------------------------------+


.. _use-basename-suffix:

Use Basename Suffix
+++++++++++++++++++

 `basename() <https://www.php.net/basename>`_ will remove extension when it is provided as argument. The second argument will be removed from the name of the file.

.. code-block:: php

   <?php
   
   $path = 'phar:///path/to/file.php';
   
   // Don't forget the . 
   $filename = basename($path, '.php');
   
   // Too much work for this
   $filename = substr(basename($path), 0, -4);
   
   ?>


Using `basename() <https://www.php.net/basename>`_ instead of `substr() <https://www.php.net/substr>`_ or else, makes the intention clear.

See also `basename <http://www.php.net/basename>`_.


Suggestions
^^^^^^^^^^^

* Use basename(), remove more complex code based on substr() or str_replace()

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------+
| Short name  | Structures/BasenameSuffix                                                                       |
+-------------+-------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Suggestions`                                                                              |
+-------------+-------------------------------------------------------------------------------------------------+
| Exakt since | 1.5.1                                                                                           |
+-------------+-------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                             |
+-------------+-------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                           |
+-------------+-------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                   |
+-------------+-------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                            |
+-------------+-------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-nextcloud-structures-basenamesuffix`, :ref:`case-dolibarr-structures-basenamesuffix` |
+-------------+-------------------------------------------------------------------------------------------------+


.. _strict-comparison-with-booleans:

Strict Comparison With Booleans
+++++++++++++++++++++++++++++++

 Strict comparisons prevent from mistaking an error with a false. 

Boolean values may be easily mistaken with other values, especially when the function may return integer or boolean as a normal course of action. 

It is encouraged to use strict comparison === or !== when booleans are involved in a comparison.

.. code-block:: php

   <?php
   
   // distinguish between : $b isn't in $a, and, $b is at the beginning of $a 
   if (strpos($a, $b) === 0) {
       doSomething();
   }
   
   // DOES NOT distinguish between : $b isn't in $a, and, $b is at the beginning of $a 
   if (strpos($a, $b)) {
       doSomething();
   }
   
   // will NOT mistake 1 and true
   $a = array(0, 1, 2, true);
   if (in_array($a, true, true)) {
       doSomething();
   }
   
   // will mistake 1 and true
   $a = array(0, 1, 2, true);
   if (in_array($a, true)) {
       doSomething();
   }
   
   ?>


`switch() <https://www.php.net/manual/en/control-structures.switch.php>`_ structures always uses == comparisons. 

Native function `in_array() <https://www.php.net/in_array>`_ has a third parameter to make it use strict comparisons.



Suggestions
^^^^^^^^^^^

* Use strict comparison whenever possible

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/BooleanStrictComparison                                                                         |
+-------------+------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Suggestions`                                            |
+-------------+------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                        |
+-------------+------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                            |
+-------------+------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-phinx-structures-booleanstrictcomparison`, :ref:`case-typo3-structures-booleanstrictcomparison` |
+-------------+------------------------------------------------------------------------------------------------------------+


.. _bracketless-blocks:

Bracketless Blocks
++++++++++++++++++

 PHP allows one liners as `for() <https://www.php.net/manual/en/control-structures.for.php>`_, `foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_, `while() <https://www.php.net/manual/en/control-structures.while.php>`_, do/`while() <https://www.php.net/manual/en/control-structures.while.php>`_ loops, or as then/else expressions. 

It is generally considered a bad practice, as readability is lower and there are non-negligible risk of excluding from the loop the next instruction.

.. code-block:: php

   <?php
   
   // Legit one liner
   foreach(range('a', 'z') as $letter) ++$letterCount;
   
   // More readable version, even for a one liner.
   foreach(range('a', 'z') as $letter) {
       ++$letterCount;
   }
   
   ?>


`switch() <https://www.php.net/manual/en/control-structures.switch.php>`_ cannot be without bracket.

Specs
^^^^^
+-------------+------------------------+
| Short name  | Structures/Bracketless |
+-------------+------------------------+
| Rulesets    | none                   |
+-------------+------------------------+
| Exakt since | 0.8.4                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Instant (5 mins)       |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _break-with-0:

Break With 0
++++++++++++

 Cannot `break <https://www.php.net/manual/en/control-structures.break.php>`_ 0, as this makes no sense. `Break <https://www.php.net/manual/en/control-structures.break.php>`_ 1 is the minimum, and is the default value.

.. code-block:: php

   <?php
       // Can't break 0. Must be 1 or more, depending on the level of nesting.
       for($i = 0; $i < 10; $i++) {
           break 0;
       }
   
       for($i = 0; $i < 10; $i++) {
           for($j = 0; $j < 10; $j++) {
               break 2;
           }
       }
   
   ?>




Suggestions
^^^^^^^^^^^

* Remove 0, or the break

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Structures/Break0         |
+-------------+---------------------------+
| Rulesets    | :ref:`CompatibilityPHP53` |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | 5.4-                      |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _break-with-non-integer:

Break With Non Integer
++++++++++++++++++++++

 When using a `break <https://www.php.net/manual/en/control-structures.break.php>`_, the argument of the operator must be a positive non-null integer literal or be omitted.

Other values were acceptable in PHP 5.3 and previous version, but this is now reported as an error.

.. code-block:: php

   <?php
       // Can't break $a, even if it contains an integer.
       $a = 1;
       for($i = 0; $i < 10; $i++) {
           break $a;
       }
   
       // can't break on float
       for($i = 0; $i < 10; $i++) {
           for($j = 0; $j < 10; $j++) {
               break 2.2;
           }
       }
   
   ?>

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Structures/BreakNonInteger |
+-------------+----------------------------+
| Rulesets    | :ref:`CompatibilityPHP54`  |
+-------------+----------------------------+
| Exakt since | 0.8.4                      |
+-------------+----------------------------+
| Php Version | 5.4-                       |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Quick (30 mins)            |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _break-outside-loop:

Break Outside Loop
++++++++++++++++++

 Starting with PHP 7, `break <https://www.php.net/manual/en/control-structures.break.php>`_ or `continue <https://www.php.net/manual/en/control-structures.continue.php>`_ that are outside a loop (for, `foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_, do...`while() <https://www.php.net/manual/en/control-structures.while.php>`_, `while()) <https://www.php.net/manual/en/control-structures.while.php>`_ or a `switch() <https://www.php.net/manual/en/control-structures.switch.php>`_ statement won't compile anymore.

It is not possible anymore to include a piece of code inside a loop that will then `break <https://www.php.net/manual/en/control-structures.break.php>`_.

.. code-block:: php

   <?php
   
       // outside a loop : This won't compile
       break 1; 
       
       foreach($array as $a) {
           break 1; // Compile OK
   
           break 2; // This won't compile, as this break is in one loop, and not 2
       }
   
       foreach($array as $a) {
           foreach($array2 as $a2) {
               break 2; // OK in PHP 5 and 7
           }
       }
   ?>

Specs
^^^^^
+-------------+-------------------------------------------+
| Short name  | Structures/BreakOutsideLoop               |
+-------------+-------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CompatibilityPHP70` |
+-------------+-------------------------------------------+
| Exakt since | 0.8.4                                     |
+-------------+-------------------------------------------+
| Php Version | 7.0-                                      |
+-------------+-------------------------------------------+
| Severity    | Major                                     |
+-------------+-------------------------------------------+
| Time To Fix | Slow (1 hour)                             |
+-------------+-------------------------------------------+
| Precision   | High                                      |
+-------------+-------------------------------------------+


.. _buried-assignation:

Buried Assignation
++++++++++++++++++

 Those assignations are buried in the code, and placed in unexpected situations. 

They are difficult to spot, and may be confusing. It is advised to place them in a more visible place.

.. code-block:: php

   <?php
   
   // $b may be assigned before processing $a
   $a = $c && ($b = 2);
   
   // Display property p immeiately, but also, keeps the object for later
   echo ($o = new x)->p;
   
   // legit syntax, but the double assignation is not obvious.
   for($i = 2, $j = 3; $j < 10; $j++) {
       
   }
   ?>




Suggestions
^^^^^^^^^^^

* Extract the assignation and set it on its own line, prior to the current expression.
* Check if the local variable is necessary

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------+
| Short name  | Structures/BuriedAssignation                                                                    |
+-------------+-------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                  |
+-------------+-------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                           |
+-------------+-------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                             |
+-------------+-------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                           |
+-------------+-------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                   |
+-------------+-------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                            |
+-------------+-------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-xoops-structures-buriedassignation`, :ref:`case-mautic-structures-buriedassignation` |
+-------------+-------------------------------------------------------------------------------------------------+


.. _calltime-pass-by-reference:

Calltime Pass By Reference
++++++++++++++++++++++++++

 PHP doesn't allow when a value is turned into a reference at functioncall, since PHP 5.4. 

Either the function use a reference in its signature, either the reference won't pass.

.. code-block:: php

   <?php
   
   function foo($name) {
       $arg = ucfirst(strtolower($name));
       echo 'Hello '.$arg;
   }
   
   $a = 'name';
   foo(&$a);
   
   ?>




Suggestions
^^^^^^^^^^^

* Make the signature of the called method accept references
* Remove the reference from the method call
* Use an object instead of a scalar

Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Structures/CalltimePassByReference |
+-------------+------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP54`          |
+-------------+------------------------------------+
| Exakt since | 0.8.4                              |
+-------------+------------------------------------+
| Php Version | 5.4-                               |
+-------------+------------------------------------+
| Severity    | Minor                              |
+-------------+------------------------------------+
| Time To Fix | Quick (30 mins)                    |
+-------------+------------------------------------+
| Precision   | High                               |
+-------------+------------------------------------+


.. _can't-count-non-countable:

Can't Count Non-Countable
+++++++++++++++++++++++++

 `Count() <https://www.php.net/count>`_ emits an error when it tries to count scalars or objects what don't implement `Countable <https://www.php.net/Countable>`_ interface.

.. code-block:: php

   <?php
   
   // Normal usage
   $a = array(1,2,3,4);
   echo count($a).items\n;
   
   // Error emiting usage
   $a = '1234';
   echo count($a).chars\n;
   
   // Error emiting usage
   echo count($unsetVar).elements\n;
   
   ?>


See also `Warn when counting non-countable types <https://www.php.net/manual/en/migration72.incompatible.php#migration72.incompatible.warn-on-non-countable-types>`_.


Suggestions
^^^^^^^^^^^

* Add a check before using count such as a type check

Specs
^^^^^
+-------------+---------------------------------+
| Short name  | Structures/CanCountNonCountable |
+-------------+---------------------------------+
| Rulesets    | :ref:`CompatibilityPHP72`       |
+-------------+---------------------------------+
| Exakt since | 1.0.4                           |
+-------------+---------------------------------+
| Php Version | All                             |
+-------------+---------------------------------+
| Severity    | Major                           |
+-------------+---------------------------------+
| Time To Fix | Quick (30 mins)                 |
+-------------+---------------------------------+
| Precision   | Medium                          |
+-------------+---------------------------------+


.. _casting-ternary:

Casting Ternary
+++++++++++++++

 Type casting has a precedence over ternary operator, and is applied first. When this happens, the condition is cast, although it is often useless as PHP will do it if needed.

This applies to the ternary operator, the coalesce operator ?: and the null-coalesce operator ??.

.. code-block:: php

   <?php
       $a = (string) $b ? 3 : 4;
       $a = (string) $b ?: 4;
       $a = (string) $b ?? 4;
   ?>


The last example generates first an error `Undefined variable: b`, since $b is first cast to a string. The result is then an empty string, which leads to an empty string to be stored into $a. Multiple errors cascade.

See also `Operators Precedence <https://www.php.net/manual/en/language.operators.precedence.php>`_.


Suggestions
^^^^^^^^^^^

* Add parenthesis around the ternary operator
* Skip the casting
* Cast in another expression

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/CastingTernary                   |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 1.8.0                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Major                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _cast-to-boolean:

Cast To Boolean
+++++++++++++++

 This expression may be reduced by casting to boolean type. 

.. code-block:: php

   <?php
   
   $variable = $condition == 'met' ? 1 : 0;
   // Same as 
   $variable = (bool) $condition == 'met';
   
   $variable = $condition == 'met' ? 0 : 1;
   // Same as (Note the condition inversion)
   $variable = (bool) $condition != 'met';
   // also, with an indentical condition
   $variable = !(bool) $condition == 'met';
   
   // This also works with straight booleans expressions
   $variable = $condition == 'met' ? true : false;
   // Same as 
   $variable = $condition == 'met';
   
   ?>




Suggestions
^^^^^^^^^^^

* Remove the old expression and use ``(bool)`` operator instead
* Change the target values from true/false, or 0/1 to non-binary values, like strings or integers beyond 0 and 1.
* Complete the current branches with other commands

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------+
| Short name  | Structures/CastToBoolean                                                                      |
+-------------+-----------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                |
+-------------+-----------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------+
| Php Version | All                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                              |
+-------------+-----------------------------------------------------------------------------------------------+
| Precision   | High                                                                                          |
+-------------+-----------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-mediawiki-structures-casttoboolean`, :ref:`case-dolibarr-structures-casttoboolean` |
+-------------+-----------------------------------------------------------------------------------------------+


.. _catch-overwrite-variable:

Catch Overwrite Variable
++++++++++++++++++++++++

 The try/catch structure uses some variables that are also in use in this scope. In case of a caught exception, the exception will be put in the catch variable, and overwrite the current value, loosing some data.

.. code-block:: php

   <?php
   
   // variables and caught exceptions are distinct
   $argument = 1;
   try {
       methodThatMayRaiseException($argument);
   } (Exception $e) {
       // here, $e has been changed to an exception.
   }
   
   // variables and caught exceptions are overlapping
   $e = 1;
   try {
       methodThatMayRaiseException();
   } (Exception $e) {
       // here, $e has been changed to an exception.
   }
   
   ?>


It is recommended to use another name for these catch variables.

Suggestions
^^^^^^^^^^^

* Use a standard : only use $e (or else) to catch exceptions. Avoid using them for anything else, parameter, property or local variable.
* Change the variable, and keep the caught exception

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------------+
| Short name  | Structures/CatchShadowsVariable                                                                           |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                            |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                     |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                       |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                     |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                          |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                      |
+-------------+-----------------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-catch-overwrite <https://github.com/dseguy/clearPHP/tree/master/rules/no-catch-overwrite.md>`__       |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-phpipam-structures-catchshadowsvariable`, :ref:`case-suitecrm-structures-catchshadowsvariable` |
+-------------+-----------------------------------------------------------------------------------------------------------+


.. _check-all-types:

Check All Types
+++++++++++++++

 When checking for time, avoid using else. Mention explicitly all tested type, and raise an exception when reaching else.

PHP has a short list of scalar types : null, boolean, integer, real, strings, object, resource and array. When a variable is not holding one the the type, then it may be of any other type. 

Most of the time, when using a simple `is_string() <https://www.php.net/is_string>`_ / else test, this is relying on the conception of the code. By construction, the arguments may be one of two types : array or string. 

What happens often is that in case of failure in the code (database not working, another class not checking its results), a third type is pushed to the structure, and it ends up breaking the execution. 

The safe way is to check the various types all the time, and use the default case (here, the else) to throw exception() or test an assertion and handle the special case.

.. code-block:: php

   <?php
   
   // hasty version
   if (is_array($argument)) {
       $out = $argument;
   } else {
       // Here, $argument is NOT an array. What if it is an object ? or a NULL ? 
       $out = array($argument);
   }
   
   // Safe type checking : do not assume that 'not an array' means that it is the other expected type.
   if (is_array($argument)) {
       $out = $argument;
   } elseif (is_string($argument)) {
       $out = array($argument);
   } else {
       assert(false, '$argument is not an array nor a string, as expected!');
   }
   
   ?>


Using `is_callable() <https://www.php.net/is_callable>`_, `is_iterable() <https://www.php.net/is_iterable>`_ with this structure is fine : when variable is callable or not, while a variable is an integer or else. 

Using a type test without else is also accepted here. This is a special treatment for this test, and all others are ignored. This aspect may vary depending on situations and projects.



Suggestions
^^^^^^^^^^^

* Include a default case to handle all unknown situations
* Include and process explicit types as much as possible

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------+
| Short name  | Structures/CheckAllTypes                                                                       |
+-------------+------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                 |
+-------------+------------------------------------------------------------------------------------------------+
| Exakt since | 0.10.6                                                                                         |
+-------------+------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                            |
+-------------+------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                          |
+-------------+------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                |
+-------------+------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                           |
+-------------+------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-zend-config-structures-checkalltypes`, :ref:`case-vanilla-structures-checkalltypes` |
+-------------+------------------------------------------------------------------------------------------------+


.. _check-json:

Check JSON
++++++++++

 Check errors whenever JSON is encoded or decoded. 

In particular, ``NULL`` is a valid decoded JSON response. If you want to avoid mistaking `NULL <https://www.php.net/manual/en/language.types.null.php>`_ for an error, it is recommended to call ``json_last_error``.

.. code-block:: php

   <?php
   
   $encoded = json_encode($incoming);
   // Unless JSON must contains some non-null data, this mistakes NULL and error
   if(json_last_error() != JSON_ERROR_NONE) {
       die('Error when encoding JSON');
   }
   
   $decoded = json_decode($incoming);
   // Unless JSON must contains some non-null data, this mistakes NULL and error
   if($decoded === null) {
       die('ERROR');
   }
   
   ?>


See also `Option to make json_encode and json_decode throw exceptions on errors <https://ayesh.me/Upgrade-PHP-7.3#json-exceptions>`_, `json_last_error <https://www.php.net/json_last_error>`_.


Suggestions
^^^^^^^^^^^

* Always check after JSON operation : encoding or decoding.
* Add a call to json_last_error()
* Configure operations to throw an exception upon error (``JSON_THROW_ON_ERROR``), and catch it.

Specs
^^^^^
+-------------+----------------------------------------------+
| Short name  | Structures/CheckJson                         |
+-------------+----------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`  |
+-------------+----------------------------------------------+
| Exakt since | 1.3.0                                        |
+-------------+----------------------------------------------+
| Php Version | All                                          |
+-------------+----------------------------------------------+
| Severity    | Major                                        |
+-------------+----------------------------------------------+
| Time To Fix | Quick (30 mins)                              |
+-------------+----------------------------------------------+
| Precision   | High                                         |
+-------------+----------------------------------------------+
| Examples    | :ref:`case-woocommerce-structures-checkjson` |
+-------------+----------------------------------------------+


.. _coalesce-and-concat:

Coalesce And Concat
+++++++++++++++++++

 The concatenation operator dot has precedence over the coalesce operator ??. 

.. code-block:: php

   <?php
   
   // Parenthesis are the right solution when in doubt
   echo a . ($b ?? 'd') . $e;
   
   // 'a' . $b is evaluated first, leading ot a useless ?? operator
   'a' . $b ?? $c;
   
   // 'd' . 'e' is evaluated first, leading to $b OR 'de'. 
   echo $b ?? 'd' . 'e';
   
   ?>




Suggestions
^^^^^^^^^^^

* Add parenthesis around ?? operator to avoid misbehavior
* Do not use dot and ?? together in the same expression

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/CoalesceAndConcat                |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 1.9.4                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _common-alternatives:

Common Alternatives
+++++++++++++++++++

 In the following conditional structures, expressions were found that are common to both 'then' and 'else'. It may be interesting, though not always possible, to put them both out of the conditional, and reduce line count. 

.. code-block:: php

   <?php
   if ($c == 5) {
       $b = strtolower($b[2]); 
       $a++;
   } else {
       $b = strtolower($b[2]); 
       $b++;
   }
   ?>


may be rewritten in : 

.. code-block:: php

   <?php
   
   $b = strtolower($b[2]); 
   if ($c == 5) {
       $a++;
   } else {
       $b++;
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Collect common expressions, and move them before of after the if/then expression.
* Move a prefix and suffixes to a third-party method

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------+
| Short name  | Structures/CommonAlternatives                                                                           |
+-------------+---------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                          |
+-------------+---------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                   |
+-------------+---------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                     |
+-------------+---------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                   |
+-------------+---------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                        |
+-------------+---------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                    |
+-------------+---------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-dolibarr-structures-commonalternatives`, :ref:`case-nextcloud-structures-commonalternatives` |
+-------------+---------------------------------------------------------------------------------------------------------+


.. _compared-but-not-assigned-strings:

Compared But Not Assigned Strings
+++++++++++++++++++++++++++++++++

 Those strings are compared to variables in the code, but those values are never assigned.

.. code-block:: php

   <?php
   
   $a = 'b';
   
   // Depending on the origin of $b, is this possible? 
   if ($b === 'c') {
   
   }
   
   ?>

Specs
^^^^^
+-------------+------------------------------------------+
| Short name  | Structures/ComparedButNotAssignedStrings |
+-------------+------------------------------------------+
| Rulesets    | none                                     |
+-------------+------------------------------------------+
| Exakt since | 1.3.2                                    |
+-------------+------------------------------------------+
| Php Version | All                                      |
+-------------+------------------------------------------+
| Severity    | Minor                                    |
+-------------+------------------------------------------+
| Time To Fix | Slow (1 hour)                            |
+-------------+------------------------------------------+
| Precision   | High                                     |
+-------------+------------------------------------------+


.. _compared-comparison:

Compared Comparison
+++++++++++++++++++

 Usually, comparison are sufficient, and it is rare to have to compare the result of comparison. Check if this two-stage comparison is really needed.

.. code-block:: php

   <?php
   
   if ($a === strpos($string, $needle) > 2) {}
   
   // the expression above apply precedence : 
   // it is equivalent to : 
   if (($a === strpos($string, $needle)) > 2) {}
   
   ?>


See also `Operators Precedence <https://www.php.net/manual/en/language.operators.precedence.php>`_.

Specs
^^^^^
+-------------+-------------------------------+
| Short name  | Structures/ComparedComparison |
+-------------+-------------------------------+
| Rulesets    | :ref:`Analyze`                |
+-------------+-------------------------------+
| Exakt since | 0.8.4                         |
+-------------+-------------------------------+
| Php Version | All                           |
+-------------+-------------------------------+
| Severity    | Major                         |
+-------------+-------------------------------+
| Time To Fix | Quick (30 mins)               |
+-------------+-------------------------------+
| Precision   | High                          |
+-------------+-------------------------------+


.. _strict-or-relaxed-comparison:

Strict Or Relaxed Comparison
++++++++++++++++++++++++++++

 PHP has two comparison styles : strict and relaxed. 

The analyzed code has less than 10% of one of them : for consistency reasons, it is recommended to make them all the same. 

It is recommended to always use the strict comparison by default, and use the relaxed in case of specific situations. 

.. code-block:: php

   <?php
   
   // This compares $strict both in terms of value and type
   if ($strict === 3) {
   
   } elseif ($strict == 3) {
       // This compares $strict after an possible type casting. 
       // '3', 3.0 or 3 would all be possible solutions.
   }
   
   ?>


See also `Comparison Operators <https://www.php.net/manual/en/language.operators.comparison.php>`_.

Specs
^^^^^
+-------------+-------------------------------+
| Short name  | Structures/ComparisonFavorite |
+-------------+-------------------------------+
| Rulesets    | none                          |
+-------------+-------------------------------+
| Exakt since | 1.3.2                         |
+-------------+-------------------------------+
| Php Version | All                           |
+-------------+-------------------------------+
| Severity    | Minor                         |
+-------------+-------------------------------+
| Time To Fix | Slow (1 hour)                 |
+-------------+-------------------------------+
| Precision   | High                          |
+-------------+-------------------------------+


.. _too-complex-expression:

Too Complex Expression
++++++++++++++++++++++

 Long expressions should be broken in small chunks, to limit complexity. 

Really long expressions tends to be error prone : either by typo, or by missing details. They are even harder to review, once the initially build of the expression is gone. 

As a general rule, it is recommended to keep expressions short. The analysis include any expression that is more than 15 tokens large : variable and operators counts as one, properties, arrays count as two. Parenthesis are also counted. 

PHP has no specific limit to expression size, so long expression are legal and valid. It is possible that the business logic requires a complex equation. 

.. code-block:: php

   <?php
   
   // Why not calculate wordwrap size separatedly ? 
   $a = explode("\n", wordwrap($this->message, floor($this->width / imagefontwidth($this->fontsize)), "\n"));
   
   // Longer but easier to read
   $width = floor($this->width / imagefontwidth($this->fontsize)), "\n");
   $a = explode("\n", wordwrap($this->message, $width);
   
   // Here, some string building, including error management with @, is making the data quite complex.
   fwrite($fp, 'HEAD ' . @$url['path'] . @$url['query'] . ' HTTP/1.0' . "\r\n" . 'Host: ' . @$url['host'] . "\r\n\r\n")
   
   // Better validation of data. 
   $http_header = 'HEAD ';
   if (isset($url['path'])) {
       $http_header .= $url['path'];
   }
   if (isset($url['query'])) {
       $http_header .= $url['query'];
   }
   
   $http_header .=  "\r\n";
   if (isset($url['host'])) {
       $http_header .= 'Host: ' . $url['host'] . "\r\n\r\n";
   }
   
   fwrite($fp, $http_header);
   
   ?>




Suggestions
^^^^^^^^^^^

* Reduce complexity by breaking the expressions into smaller ones

+----------------------------+---------+---------+----------------------------------------------------------+
| Name                       | Default | Type    | Description                                              |
+----------------------------+---------+---------+----------------------------------------------------------+
| complexExpressionThreshold | 30      | integer | Minimal number of operators in one expression to report. |
+----------------------------+---------+---------+----------------------------------------------------------+



Specs
^^^^^
+-------------+------------------------------+
| Short name  | Structures/ComplexExpression |
+-------------+------------------------------+
| Rulesets    | :ref:`CE`                    |
+-------------+------------------------------+
| Exakt since | 0.12.16                      |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Quick (30 mins)              |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _concat-empty-string:

Concat Empty String
+++++++++++++++++++

 Using a concatenation to make a value a string should be replaced with a type cast.

Type cast to a string is done with ``(string)`` operator. There is also the function `strval() <https://www.php.net/strval>`_, although it is less recommended.

.. code-block:: php

   <?php
   
   $a = 3;
   
   // explicite way to cast a value
   $b = (string) $a; // $b is a string with the content 3
   
   // Wrong way to cast a value
   $c = $a . ''; // $c is a string with the content 3
   $c = '' . $a; // $c is a string with the content 3
   $a .= '';     // $a is a string with the content 3
   
   // Wrong way to cast a value
   $c = $a . '' . $b; // This is not reported. The empty string is useless, but not meant to type cast
   
   ?>


See also `Type Casting <https://php.net/manual/en/language.types.type-juggling.php#language.types.typecasting>`_ and `PHP Type Casting <https://developer.hyvor.com/tutorials/php/type-casting>`_.


Suggestions
^^^^^^^^^^^

* Avoid concatenating with empty strings
* Use (string) operator to cast to string
* Remove any concatenated empty string

Specs
^^^^^
+-------------+------------------------+
| Short name  | Structures/ConcatEmpty |
+-------------+------------------------+
| Rulesets    | :ref:`Analyze`         |
+-------------+------------------------+
| Exakt since | 1.8.0                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Quick (30 mins)        |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _concatenation-interpolation-consistence:

Concatenation Interpolation Consistence
+++++++++++++++++++++++++++++++++++++++

 Concatenations are done with the . operator or by interpolation inside a string. 

Interpolation is a clean way to write concatenation, though it gets messy with long dereferences or with constants. Concatenations are longer to write. 

The analyzed code has less than 10% of one of them : for consistency reasons, it is recommended to make them all the same. 

.. code-block:: php

   <?php
   
   // be consistent
   $a = $b $c;
   $d = $b $e;
   $e = $b $e;
   $d = $b $f;
   $f = $b $z;
   $h = $b $e;
   $y = $b $e;
   $d = $b $x;
   $j = $b $c;
   $d = $b $g;
   $d = $b $h;
   
   // Be consistent, always use the same. 
   $z = $w.' '.$e;
   
   ?>

Specs
^^^^^
+-------------+-----------------------------------------------+
| Short name  | Structures/ConcatenationInterpolationFavorite |
+-------------+-----------------------------------------------+
| Rulesets    | none                                          |
+-------------+-----------------------------------------------+
| Exakt since | 0.11.6                                        |
+-------------+-----------------------------------------------+
| Php Version | All                                           |
+-------------+-----------------------------------------------+
| Severity    | Minor                                         |
+-------------+-----------------------------------------------+
| Time To Fix | Slow (1 hour)                                 |
+-------------+-----------------------------------------------+
| Precision   | High                                          |
+-------------+-----------------------------------------------+


.. _conditional-structures:

Conditional Structures
++++++++++++++++++++++

 Structures that are defined, but only executed conditionally.

.. code-block:: php

   <?php
   
   if (!function_exists('array_column')) {
       function array_column($a) {
           // some PHP
       }
   }
   
   if (!class_exists('foo')) {
       class foo {
       
       }
   }
   
   ?>

Specs
^^^^^
+-------------+----------------------------------+
| Short name  | Structures/ConditionalStructures |
+-------------+----------------------------------+
| Rulesets    | none                             |
+-------------+----------------------------------+
| Exakt since | 0.8.4                            |
+-------------+----------------------------------+
| Php Version | All                              |
+-------------+----------------------------------+
| Severity    | Minor                            |
+-------------+----------------------------------+
| Time To Fix | Slow (1 hour)                    |
+-------------+----------------------------------+
| Precision   | High                             |
+-------------+----------------------------------+


.. _constant-comparison:

Constant Comparison
+++++++++++++++++++

 Constant to the left or right is a favorite. 

Comparisons are commutative : they may be $a == B or B == $a. The analyzed code show less than 10% of one of the two : for consistency reasons, it is recommended to make them all the same. 

Putting the constant on the left is also called 'Yoda Comparison', as it mimics the famous characters style of speech. It prevents errors like 'B = $a' where the comparison is turned into an assignation. 

The natural way is to put the constant on the right. It is often less surprising. 

Every comparison operator is used when finding the favorite.

.. code-block:: php

   <?php
   
   // 
   if ($a === B) { doSomething(); }
   if ($c > D) { doSomething(); }
   if ($e !== G) { doSomething(); }
   do { doSomething(); } while ($f === B);
   while ($a === B) { doSomething(); }
   
   // be consistent
   if (B === $a) {}
   
   // Compari
   if (B <= $a) {}
   
   ?>

Specs
^^^^^
+-------------+------------------------------------------+
| Short name  | Structures/ConstantComparisonConsistance |
+-------------+------------------------------------------+
| Rulesets    | none                                     |
+-------------+------------------------------------------+
| Exakt since | 0.8.4                                    |
+-------------+------------------------------------------+
| Php Version | All                                      |
+-------------+------------------------------------------+
| Severity    | Minor                                    |
+-------------+------------------------------------------+
| Time To Fix | Quick (30 mins)                          |
+-------------+------------------------------------------+
| Precision   | High                                     |
+-------------+------------------------------------------+


.. _constant-conditions:

Constant Conditions
+++++++++++++++++++

 If/then structures have constant condition. 

The condition doesn't change during execution, and the following blocks are always executed or not. This may also lead to an infinite or a null loop. 

When this is the case, the condition may be removed, and dead code may be removed. 

.. code-block:: php

   <?php
   
   // static if
   if (0.8) {
       $a = $x;
   } else {
       $a = $y;
   }
   
   // static while
   while (1) {
       $a = $x;
   }
   
   // static do..while
   do {
       $a = $x;
   } while ('b'. 'c');
   
   // constant for() : No increment
   for ($i = 0; $i < 10; ) {
       $a = $x;
   }
   
   // constant for() : No final check
   for ( $i = 0; ; ++$i) {
       $a = $x;
   }
   
   
   // static ternary
   $a = TRUE ? $x : $y;
   
   ?>


It is advised to remove them, or to make them depend on configuration.

Specs
^^^^^
+-------------+-------------------------------+
| Short name  | Structures/ConstantConditions |
+-------------+-------------------------------+
| Rulesets    | none                          |
+-------------+-------------------------------+
| Exakt since | 0.8.4                         |
+-------------+-------------------------------+
| Php Version | All                           |
+-------------+-------------------------------+
| Severity    | Minor                         |
+-------------+-------------------------------+
| Time To Fix | Slow (1 hour)                 |
+-------------+-------------------------------+
| Precision   | High                          |
+-------------+-------------------------------+


.. _constant-scalar-expressions:

Constant Scalar Expressions
+++++++++++++++++++++++++++

 Define constant with the result of `static <https://www.php.net/manual/en/language.oop5.static.php>`_ expressions. This means that constants may be defined with the const keyword, with the help of various operators but without any functioncalls. 

This feature was introduced in PHP 5.6. It also supports `array() <https://www.php.net/array>`_, and expressions in arrays.

Those expressions (using simple operators) may only manipulate other constants, and all values must be known at compile time. 

.. code-block:: php

   <?php
   
   // simple definition
   const A = 1;
   
   // constant scalar expression
   const B = A * 3;
   
   // constant scalar expression
   const C = [A ** 3, '3' => B];
   
   ?>


See also `Constant Scalar Expressions <https://wiki.php.net/rfc/const_scalar_exprs>`_.

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------+
| Short name  | Structures/ConstantScalarExpression                                                        |
+-------------+--------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55` |
+-------------+--------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                      |
+-------------+--------------------------------------------------------------------------------------------+
| Php Version | 5.6+                                                                                       |
+-------------+--------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                      |
+-------------+--------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                            |
+-------------+--------------------------------------------------------------------------------------------+
| Precision   | High                                                                                       |
+-------------+--------------------------------------------------------------------------------------------+


.. _const-or-define:

Const Or Define
+++++++++++++++

 ``const`` and ``define()`` have the same functional use : create constants. 

The analyzed code has less than 10% of one of them : for consistency reasons, it is recommended to make them all the same. 

They are almost interchangeable, though not totally : ``define()`` allows the creation of case-insensitive constants, while ``Const`` won\'t. 

.. code-block:: php

   <?php
   
   // be consistent
   const A1  = 1 ;
   const A2  = 2 ;
   const A3  = 3 ;
   const A4  = 4 ;
   const A5  = 5 ;
   const A6  = 6 ;
   const A7  = 7 ;
   const A8  = 8 ;
   const A9  = 9 ;
   const A10 = 10;
   const A11 = 11;
   
   define('A12', 12); // Be consistent, always use the same. 
   
   ?>


See also `define <https://www.php.net/manual/en/function.define.php>`_ and `const <http://www.php.net/manual/en/language.constants.php>`_.

Specs
^^^^^
+-------------+--------------------------------+
| Short name  | Structures/ConstDefineFavorite |
+-------------+--------------------------------+
| Rulesets    | :ref:`CE`                      |
+-------------+--------------------------------+
| Exakt since | 0.12.1                         |
+-------------+--------------------------------+
| Php Version | All                            |
+-------------+--------------------------------+
| Severity    | Minor                          |
+-------------+--------------------------------+
| Time To Fix | Slow (1 hour)                  |
+-------------+--------------------------------+
| Precision   | High                           |
+-------------+--------------------------------+


.. _continue-is-for-loop:

Continue Is For Loop
++++++++++++++++++++

 `break <https://www.php.net/manual/en/control-structures.break.php>`_ and `continue <https://www.php.net/manual/en/control-structures.continue.php>`_ are very similar in PHP : they both `break <https://www.php.net/manual/en/control-structures.break.php>`_ out of loop or switch. Yet, `continue <https://www.php.net/manual/en/control-structures.continue.php>`_ should be reserved for loops.

Since PHP 7.3, the execution will emit a warning when finding a `continue <https://www.php.net/manual/en/control-structures.continue.php>`_ inside a switch inside a loop : '"`continue <https://www.php.net/manual/en/control-structures.continue.php>`_" targeting switch is equivalent to "`break <https://www.php.net/manual/en/control-structures.break.php>`_". Did you mean to use "`continue <https://www.php.net/manual/en/control-structures.continue.php>`_ 2"?'

.. code-block:: php

   <?php
   
   while ($foo) {
       switch ($bar) {
           case 'baz':
               continue; // In PHP: Behaves like 'break;'
                         // In C:   Behaves like 'continue 2;'
       }
   }
   
   ?>


See also `Deprecate and remove `continue <https://www.php.net/manual/en/control-structures.continue.php>`_ targeting switch <https://wiki.php.net/rfc/continue_on_switch_deprecation>`_.



Suggestions
^^^^^^^^^^^

* Replace break by continue

Specs
^^^^^
+-------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/ContinueIsForLoop                                                                                                                                                                                                           |
+-------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70`, :ref:`CompatibilityPHP71`, :ref:`CompatibilityPHP72`, :ref:`CompatibilityPHP73` |
+-------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.3.9                                                                                                                                                                                                                                  |
+-------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                                                                                                                                                    |
+-------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                                                                                                                                                  |
+-------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                                                                                                                                        |
+-------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                                                                                                                   |
+-------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-xoops-structures-continueisforloop`                                                                                                                                                                                         |
+-------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. _could-be-else:

Could Be Else
+++++++++++++

 Merge opposition conditions into one if/then structure.

When two if/then structures follow each other, using a condition and its opposite, they may be merged into one.

.. code-block:: php

   <?php
   
   // Short version
   if ($a == 1) {
       $b = 2;
   } else {
       $b = 1;
   }
   
   // Long version
   if ($a == 1) {
       $b = 2;
   }
   
   if ($a != 1) {
       $b = 3;
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Merge the two conditions into one structure
* Check if the second condition is still applicable

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------+
| Short name  | Structures/CouldBeElse                                                                  |
+-------------+-----------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                          |
+-------------+-----------------------------------------------------------------------------------------+
| Exakt since | 1.0.1                                                                                   |
+-------------+-----------------------------------------------------------------------------------------+
| Php Version | All                                                                                     |
+-------------+-----------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                   |
+-------------+-----------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                        |
+-------------+-----------------------------------------------------------------------------------------+
| Precision   | High                                                                                    |
+-------------+-----------------------------------------------------------------------------------------+
| Examples    | :ref:`case-sugarcrm-structures-couldbeelse`, :ref:`case-openemr-structures-couldbeelse` |
+-------------+-----------------------------------------------------------------------------------------+


.. _could-be-static:

Could Be Static
+++++++++++++++

 This global is only used in one function or method. It may be called '`static <https://www.php.net/manual/en/language.oop5.static.php>`_', instead of global. This allows you to keep the value between call to the function, but will not be accessible outside this function.

.. code-block:: php

   <?php
   function foo( ) {
       static $variableIsReservedForX; // only accessible within foo( ), even between calls.
       global $variableIsGlobal;       //      accessible everywhere in the application
   }
   ?>

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------+
| Short name  | Structures/CouldBeStatic                                                                  |
+-------------+-------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`ClassReview`                                                        |
+-------------+-------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                     |
+-------------+-------------------------------------------------------------------------------------------+
| Php Version | All                                                                                       |
+-------------+-------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                     |
+-------------+-------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                           |
+-------------+-------------------------------------------------------------------------------------------+
| Precision   | High                                                                                      |
+-------------+-------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-dolphin-structures-couldbestatic`, :ref:`case-contao-structures-couldbestatic` |
+-------------+-------------------------------------------------------------------------------------------+


.. _could-use-array\_fill\_keys:

Could Use array_fill_keys
+++++++++++++++++++++++++

 `array_fill_keys() <https://www.php.net/array_fill_keys>`_ is a native PHP function that creates an array from keys. It gets the list of keys, and a constant value to assign to each keys.

This is twice faster than doing the same with a loop.

Note that is possible to use an object as initializing value : every element of the final array will be pointing to the same value. And, also, using an object as initializing value means that the same object will be used for each key : the object will not be cloned for each value.

.. code-block:: php

   <?php
   
   $array = range('a', 'z');
   
   // Fast way to build the array
   $b = array_fill_keys($a, 0);
   
   // Fast way to build the array, but every element will be the same object
   $b = array_fill_keys($a, new Stdclass());
   
   // Slow way to build the array
   foreach($array as $a) {
       $b[$a] = 0;
   }
   
   // Setting everything to null, slowly
   $array = array_map(function() {}, $array);
   
   ?>


See also `array_fill_keys <https://www.php.net/array_fill_keys>`_.



Suggestions
^^^^^^^^^^^

* Use array_fill_keys()

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/CouldUseArrayFillKeys                                                                             |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Suggestions`                                                                                           |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.1.7                                                                                                        |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                          |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                        |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                                |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                         |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-churchcrm-structures-couldusearrayfillkeys`, :ref:`case-phpipam-structures-couldusearrayfillkeys` |
+-------------+--------------------------------------------------------------------------------------------------------------+


.. _could-use-array\_unique:

Could Use array_unique
++++++++++++++++++++++

 Use `array_unique() <https://www.php.net/array_unique>`_ to collect unique elements from an array.

Always try to use native PHP functions, instead of rebuilding them with custom PHP code.

.. code-block:: php

   <?php
   
       $unique = array();
       foreach ($array as $b) {
           if (!in_array($b, $unique)) {
               /*  May be more code */
               $unique[] = $b;
           }
       }
   ?>


See also `array_unique <https://www.php.net/array_unique>`_.


Suggestions
^^^^^^^^^^^

* Turn the foreach() and its condition into a call to array_unique()
* Extract the condition from the foreach() and add a separate call to array_unique()

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------+
| Short name  | Structures/CouldUseArrayUnique                                                                          |
+-------------+---------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Suggestions`                                                                                      |
+-------------+---------------------------------------------------------------------------------------------------------+
| Exakt since | 1.2.6                                                                                                   |
+-------------+---------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                     |
+-------------+---------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                   |
+-------------+---------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                         |
+-------------+---------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                    |
+-------------+---------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-dolibarr-structures-couldusearrayunique`, :ref:`case-openemr-structures-couldusearrayunique` |
+-------------+---------------------------------------------------------------------------------------------------------+


.. _could-use-compact:

Could Use Compact
+++++++++++++++++

 `Compact() <https://www.php.net/compact>`_ turns a group of variables into an array. It may be used to simplify expressions. 

.. code-block:: php

   <?php
   
   $a = 1;
   $b = 2;
   
   // Compact call
   $array = compact('a', 'b');
   
   $array === [1, 2];
   
   // Detailing all the keys and their value
   $array = ['a' => $a, 'b' => $b];
   
   ?>


Note that compact accepts any string, and any undefined variable is not set, without a warning.

See also `compact <http://www.php.net/compact>`_.



Suggestions
^^^^^^^^^^^

* Replace the array() call with a compact() call.

Specs
^^^^^
+-------------+--------------------------------------------------+
| Short name  | Structures/CouldUseCompact                       |
+-------------+--------------------------------------------------+
| Rulesets    | :ref:`Suggestions`                               |
+-------------+--------------------------------------------------+
| Exakt since | 1.1.6                                            |
+-------------+--------------------------------------------------+
| Php Version | All                                              |
+-------------+--------------------------------------------------+
| Severity    | Minor                                            |
+-------------+--------------------------------------------------+
| Time To Fix | Quick (30 mins)                                  |
+-------------+--------------------------------------------------+
| Precision   | High                                             |
+-------------+--------------------------------------------------+
| Examples    | :ref:`case-wordpress-structures-couldusecompact` |
+-------------+--------------------------------------------------+


.. _could-use-\_\_dir\_\_:

Could Use __DIR__
+++++++++++++++++

 Use `__DIR__ <https://www.php.net/manual/en/language.constants.predefined.php>`_ constant to access the current file's `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ directory. 

Avoid using `dirname() <https://www.php.net/dirname>`_ on `__FILE__ <https://www.php.net/manual/en/language.constants.predefined.php>`_.

.. code-block:: php

   <?php
   
   // Better way
   $fp = fopen(__DIR__.'/myfile.txt', 'r');
   
   // compatible, but slow way
   $fp = fopen(dirname(__FILE__).'/myfile.txt', 'r');
   
   // Since PHP 5.3
   assert(dirname(__FILE__) == __DIR__);
   
   ?>


`__DIR__ <https://www.php.net/manual/en/language.constants.predefined.php>`_ has been introduced in PHP 5.3.0.

See also `Magic Constants <https://www.php.net/manual/en/language.constants.predefined.php>`_.



Suggestions
^^^^^^^^^^^

* Use __DIR__ instead of ``dirname(__FILE__);``

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------+
| Short name  | Structures/CouldUseDir                                                                    |
+-------------+-------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Suggestions`, :ref:`php-cs-fixable`    |
+-------------+-------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                     |
+-------------+-------------------------------------------------------------------------------------------+
| Php Version | All                                                                                       |
+-------------+-------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                     |
+-------------+-------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                           |
+-------------+-------------------------------------------------------------------------------------------+
| Precision   | High                                                                                      |
+-------------+-------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-woocommerce-structures-couldusedir`, :ref:`case-piwigo-structures-couldusedir` |
+-------------+-------------------------------------------------------------------------------------------+


.. _could-use-match:

Could Use Match
+++++++++++++++

 The `switch() <https://www.php.net/manual/en/control-structures.switch.php>`_ syntax use may be replaced by a `match() <https://www.php.net/manual/en/control-structures.match.php>`_ call. 

The simplest case for such refactoring is when each of the switch's case (including default), assign one value to the same variable. See this below : 

.. code-block:: php

   <?php
       switch($a) {
           case 1: 
               $b = '1';
               break;
           case 2: 
               $b = '3';
               break;
           default:  
               $b = '0';
               break; 
       }
       
       /*
       $b = match($a) {
           1 => '1',
           2 => '3',
           default => '0'
       };
       */
   ?>


`Match() <https://www.php.net/manual/en/control-structures.match.php>`_ was introduced in PHP 8. It is not valid with older PHP versions.

See also `Match() <https://www.php.net/manual/en/control-structures.match.php>`_.


Suggestions
^^^^^^^^^^^

* Replace switch() with match()

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Structures/CouldUseMatch |
+-------------+--------------------------+
| Rulesets    | :ref:`Suggestions`       |
+-------------+--------------------------+
| Exakt since | 2.2.2                    |
+-------------+--------------------------+
| Php Version | 8.0+                     |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Quick (30 mins)          |
+-------------+--------------------------+
| Precision   | Unknown                  |
+-------------+--------------------------+


.. _could-use-short-assignation:

Could Use Short Assignation
+++++++++++++++++++++++++++

 Use short assignment operator, to speed up code, and keep syntax clear.  

Some operators, like * or +, have a compact and fast 'do-and-assign' version. They looks like a compacted version for = and the operator. This syntax is good for readability, and saves some memory in the process. 

Depending on the operator, not all permutations of arguments are possible. 

Addition and short assignation of addition have a different set of features when applied to arrays. Do not exchange one another in that case.

.. code-block:: php

   <?php
   
   $a = 10 + $a;
   $a += 10;
   
   $b = $b - 1;
   $b -= 1;
   
   $c = $c * 2;
   $c *= 2;
   
   $d = $d / 3;
   $d /= 3;
   
   $e = $e % 4;
   $e %= 4;
   
   $f = $f | 5;
   $f |= 5;
   
   $g = $g & 6;
   $g &= 6;
   
   $h = $h ^ 7;
   $h ^= 7;
   
   $i = $i >> 8;
   $i >>= 8;
   
   $j = $j << 9;
   $j <<= 9;
   
   // PHP 7.4 and more recent
   $l = $l ?? 'value';
   $l ??= 'value';
   
   ?>


Short operators are faster than the extended version, though it is a micro-optimization.

See also `Assignation Operators <https://www.php.net/manual/en/language.operators.assignment.php>`_.



Suggestions
^^^^^^^^^^^

* Change the expression to use the short assignation

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/CouldUseShortAssignation                                                                               |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Performances`                                                  |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                             |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                               |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                             |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                                  |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                              |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| ClearPHP    | `use-short-assignations <https://github.com/dseguy/clearPHP/tree/master/rules/use-short-assignations.md>`__       |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-churchcrm-structures-coulduseshortassignation`, :ref:`case-thelia-structures-coulduseshortassignation` |
+-------------+-------------------------------------------------------------------------------------------------------------------+


.. _could-use-str\_repeat():

Could Use str_repeat()
++++++++++++++++++++++

 Use `str_repeat() <https://www.php.net/str_repeat>`_ or `str_pad() <https://www.php.net/str_pad>`_ instead of making a loop.

Making a loop to repeat the same concatenation is actually much longer than using `str_repeat() <https://www.php.net/str_repeat>`_. As soon as the loop repeats more than twice, `str_repeat() <https://www.php.net/str_repeat>`_ is much faster. With arrays of 30, the difference is significant, though the whole operation is short by itself. 

.. code-block:: php

   <?php
   
   // This adds 7 'e' to $x
   $x .= str_repeat('e', 7);
   
   // This is the same as above, 
   for($a = 3; $a < 10; ++$a) {
       $x .= 'e';
   }
   
   // here, $default must contains 7 elements to be equivalent to the previous code
   foreach($default as $c) {
       $x .= 'e';
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Use strrepeat() whenever possible

Specs
^^^^^
+-------------+-----------------------------------------------------------+
| Short name  | Structures/CouldUseStrrepeat                              |
+-------------+-----------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Top10` |
+-------------+-----------------------------------------------------------+
| Exakt since | 0.11.0                                                    |
+-------------+-----------------------------------------------------------+
| Php Version | All                                                       |
+-------------+-----------------------------------------------------------+
| Severity    | Minor                                                     |
+-------------+-----------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                             |
+-------------+-----------------------------------------------------------+
| Precision   | Very high                                                 |
+-------------+-----------------------------------------------------------+
| Examples    | :ref:`case-zencart-structures-couldusestrrepeat`          |
+-------------+-----------------------------------------------------------+


.. _crypt()-without-salt:

crypt() Without Salt
++++++++++++++++++++

 PHP requires a salt when calling `crypt() <https://www.php.net/crypt>`_. 5.5 and previous versions didn't require it. Salt is a simple string, that is usually only known by the application.

According to the manual : The salt parameter is optional. However, `crypt() <https://www.php.net/crypt>`_ creates a weak hash without the salt. PHP 5.6 or later raise an `E_NOTICE <https://www.php.net/E_NOTICE>`_ error without it. Make sure to specify a strong enough salt for better security.

.. code-block:: php

   <?php
   // Set the password
   $password = 'mypassword';
   
   // salted crypt usage (always valid)
   $hash = crypt($password, '123salt');
   
   // Get the hash, letting the salt be automatically generated
   // This generates a notice after PHP 5.6
   $hash = crypt($password);
   
   ?>


See also `crypt <http://www.php.net/crypt>`_.


Suggestions
^^^^^^^^^^^

* Always provide the second argument

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Structures/CryptWithoutSalt |
+-------------+-----------------------------+
| Rulesets    | :ref:`CompatibilityPHP54`   |
+-------------+-----------------------------+
| Exakt since | 0.8.4                       |
+-------------+-----------------------------+
| Php Version | 5.6-                        |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Instant (5 mins)            |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _curl\_version()-has-no-argument:

curl_version() Has No Argument
++++++++++++++++++++++++++++++

 `curl_version() <https://www.php.net/curl_version>`_ used to accept ``CURLVERSION_NOW`` as argument. Since PHP 7.4, it is a function without arguments.

.. code-block:: php

   <?php
   
   // Compatible syntax
   $details = curl_version(CURLVERSION_NOW);
   
   // New PHP 7.4 syntax
   $details = curl_version();
   
   ?>


See also `curl_version <https://www.php.net/manual/en/function.curl-version.php>`_.

Suggestions
^^^^^^^^^^^

* Drop all arguments from curl_version() calls.

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Structures/CurlVersionNow            |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP74` |
+-------------+--------------------------------------+
| Exakt since | 1.8.4                                |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Minor                                |
+-------------+--------------------------------------+
| Time To Fix | Quick (30 mins)                      |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _dangling-array-references:

Dangling Array References
+++++++++++++++++++++++++

 Always unset a referenced-variable used in a loop.

It is highly recommended to unset blind variables when they are set up as references after a loop. 

.. code-block:: php

   <?php
   
   $array = array(1,2,3,4);
   
   foreach($array as &$a) {
       $a += 1;
   }
   // This only unset the reference, not the value
   unset($a);
   
   
   // Dangling array problem
   foreach($array as &$a) {
       $a += 1;
   }
   //$array === array(3,4,5,6);
   
   // This does nothing (apparently)
   // $a is already a reference, even if it doesn't show here.
   foreach($array as $a) {}
   //$array === array(3,4,5,5);
   
   ?>


When omitting this step, the next loop that will also require this variable will deal with garbage values, and produce unexpected results.

See also : `No Dangling Reference <https://github.com/dseguy/clearPHP/blob/master/rules/no-dangling-reference.md>`_, `PHP foreach pass-by-reference: Do it right, or better not at all <https://coderwall.com/p/qx3fpa/php-foreach-pass-by-reference-do-it-right-or-better-not-at-all>`_, `How does PHP 'foreach' actually work? <https://stackoverflow.com/questions/10057671/how-does-php-foreach-actually-work/14854568#14854568>`_, `References and foreach <https://schlueters.de/blog/archives/141-references-and-foreach.html>`_.


Suggestions
^^^^^^^^^^^

* Avoid using the reference altogether : sometimes, the reference is not needed.
* Add unset() right after the loop, to avoid reusing the reference.

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/DanglingArrayReferences                                                                            |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Top10`                                                     |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                         |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                           |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                         |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                              |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                          |
+-------------+---------------------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-dangling-reference <https://github.com/dseguy/clearPHP/tree/master/rules/no-dangling-reference.md>`__     |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-typo3-structures-danglingarrayreferences`, :ref:`case-sugarcrm-structures-danglingarrayreferences` |
+-------------+---------------------------------------------------------------------------------------------------------------+


.. _declare-static-once:

Declare Static Once
+++++++++++++++++++

 Global and `static <https://www.php.net/manual/en/language.oop5.static.php>`_ variables should be declared only once in a method. It is also recommended to configure it at the beginning of the method. This could be refined by defining the variable at the last common moment, though it lacks readability.

.. code-block:: php

   <?php
   
   function foo() {
       if (rand(0, 1)) {
           static $x;
           
           ++$x;
       } else {
           static $x;
           
           --$x;
       }
   }
   
   ?>


Defining `static <https://www.php.net/manual/en/language.oop5.static.php>`_ or global methods late is a micro-optimisation. 



Suggestions
^^^^^^^^^^^

* Remove duplicate static and global calls
* Move the static and global calls to the beginning of the method
* Refactor the static and global variable to properties

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Structures/DeclareStaticOnce |
+-------------+------------------------------+
| Rulesets    | :ref:`Suggestions`           |
+-------------+------------------------------+
| Exakt since | 2.2.1                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Quick (30 mins)              |
+-------------+------------------------------+
| Precision   | Very high                    |
+-------------+------------------------------+


.. _dereferencing-string-and-arrays:

Dereferencing String And Arrays
+++++++++++++++++++++++++++++++

 PHP allows the direct dereferencing of strings and arrays. 

This was added in PHP 5.5. There is no need anymore for an intermediate variable between a string and array (or any expression generating such value) and accessing an index.

.. code-block:: php

   <?php
   $x = array(4,5,6); 
   $y = $x[2] ; // is 6
   
   May be replaced by 
   $y = array(4,5,6)[2];
   $y = [4,5,6][2];
   ?>

Specs
^^^^^
+-------------+-----------------------------------------------------------------+
| Short name  | Structures/DereferencingAS                                      |
+-------------+-----------------------------------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54` |
+-------------+-----------------------------------------------------------------+
| Exakt since | 0.8.4                                                           |
+-------------+-----------------------------------------------------------------+
| Php Version | 5.3-                                                            |
+-------------+-----------------------------------------------------------------+
| Severity    | Major                                                           |
+-------------+-----------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                 |
+-------------+-----------------------------------------------------------------+
| Precision   | High                                                            |
+-------------+-----------------------------------------------------------------+


.. _die-exit-consistence:

Die Exit Consistence
++++++++++++++++++++

 `Die <https://www.php.net/die>`_ and `Exit <https://www.www.php.net/exit>`_ have the same functional use. 

The analyzed code has less than 10% of one of them : for consistency reasons, it is recommended to make them all the same. 

It happens that `die <https://www.php.net/die>`_ or `exit <https://www.www.php.net/exit>`_ are used depending on coding style and files. One file may be consistently using `exit <https://www.www.php.net/exit>`_, while the others are all using `exit <https://www.www.php.net/exit>`_. 

.. code-block:: php

   <?php
   
   // be consistent
   switch ($a) {
       case 1 : 
           exit;
       case 2 : 
           exit;
       case 3 : 
           exit;
       case 4 : 
           exit;
       case 5 : 
           exit;
       case 6 : 
           exit;
       case 7 : 
           exit;
       case 8 : 
           exit;
       case 9 : 
           exit;
       case 10 : 
           exit;
       default : 
           die();   // Be consistent, always use the same. 
   }
   
   ?>


Using `die <https://www.php.net/die>`_ or `exit <https://www.www.php.net/exit>`_ is also the target of other analysis.

Specs
^^^^^
+-------------+-------------------------------+
| Short name  | Structures/DieExitConsistance |
+-------------+-------------------------------+
| Rulesets    | none                          |
+-------------+-------------------------------+
| Exakt since | 0.8.9                         |
+-------------+-------------------------------+
| Php Version | All                           |
+-------------+-------------------------------+
| Severity    | Minor                         |
+-------------+-------------------------------+
| Time To Fix | Instant (5 mins)              |
+-------------+-------------------------------+
| Precision   | High                          |
+-------------+-------------------------------+


.. _difference-consistence:

Difference Consistence
++++++++++++++++++++++

 There are two operators to check a difference : <> and !=.

The analyzed code has less than 10% of one of them : for consistency reasons, it is recommended to make them all the same. 

It happens that != and <> are used depending on coding style and files. One file may be consistently using <>, while the others are all using !=. 

.. code-block:: php

   <?php
   
   // Both != and <> are used in the code
   // When one of them is used less than 10%, it is reported as a consistence issue.
   if ($a != $b) {
   
   } elseif ($c <> $d) {
   
   }
   
   ?>


<> and != are the two only comparison operators that are identical.

See also `Comparison Operators <https://www.php.net/manual/en/language.operators.comparison.php>`_.

Specs
^^^^^
+-------------+---------------------------------+
| Short name  | Structures/DifferencePreference |
+-------------+---------------------------------+
| Rulesets    | none                            |
+-------------+---------------------------------+
| Exakt since | 0.11.1                          |
+-------------+---------------------------------+
| Php Version | All                             |
+-------------+---------------------------------+
| Severity    | Minor                           |
+-------------+---------------------------------+
| Time To Fix | Slow (1 hour)                   |
+-------------+---------------------------------+
| Precision   | High                            |
+-------------+---------------------------------+


.. _directly-use-file:

Directly Use File
+++++++++++++++++

 Some PHP functions have a close cousin that work directly on files : use them. This is faster and less code to write.

* md5`() <https://www.php.net/>`_ => `md5_file() <https://www.php.net/md5_file>`_
* `highlight_string() <https://www.php.net/highlight_string>`_ => `highlight_file() <https://www.php.net/highlight_file>`_, `show_source() <https://www.php.net/show_source>`_
* `parsekit_compile_string() <https://www.php.net/parsekit_compile_string>`_ => `parsekit_compile_file() <https://www.php.net/parsekit_compile_file>`_
* `parse_ini_string() <https://www.php.net/parse_ini_string>`_ => `parse_ini_file() <https://www.php.net/parse_ini_file>`_
* sha1`() <https://www.php.net/>`_ => `sha1_file() <https://www.php.net/sha1_file>`_
* `simplexml_load_string() <https://www.php.net/simplexml_load_string>`_ => `simplexml_load_file() <https://www.php.net/simplexml_load_file>`_
* `yaml_parse() <https://www.php.net/yaml_parse>`_ => `yaml_parse_file() <https://www.php.net/yaml_parse_file>`_
* `hash() <https://www.php.net/hash>`_ => `hash_file() <https://www.php.net/hash_file>`_
* `hash_hmac() <https://www.php.net/hash_hmac>`_ => hash_mac_file()
* `hash_update() <https://www.php.net/hash_update>`_ => `hash_update_file() <https://www.php.net/hash_update_file>`_
* `recode() <https://www.php.net/recode>`_ => `recode_file() <https://www.php.net/recode_file>`_
* `recode_string() <https://www.php.net/recode_string>`_ => `recode_file() <https://www.php.net/recode_file>`_


.. code-block:: php

   <?php
   
   // Good way
   $file_hash = hash_file('sha512', 'example.txt');
   
   // Slow way
   $file_hash = hash('sha512', file_get_contents('example.txt'));
   
   ?>


See also `hash_file <https://www.php.net/manual/en/function.hash-file.php>`_. 


Suggestions
^^^^^^^^^^^

* Use the _file() version of those functions

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Structures/DirectlyUseFile |
+-------------+----------------------------+
| Rulesets    | :ref:`Suggestions`         |
+-------------+----------------------------+
| Exakt since | 1.5.5                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Instant (5 mins)           |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _\_\_dir\_\_-then-slash:

__DIR__ Then Slash
++++++++++++++++++

 `__DIR__ <https://www.php.net/manual/en/language.constants.predefined.php>`_ must be concatenated with a string starting with /.

The magic constant `__DIR__ <https://www.php.net/manual/en/language.constants.predefined.php>`_ holds the name of the current directory, without final /. When it is used to build path, then the following path fragment must start with /. Otherwise, two directories names will be merged together. 

.. code-block:: php

   <?php
   
   // __DIR__ = /a/b/c
   // $filePath = /a/b/c/g.php
   
   // /a/b/c/d/e/f.txt : correct path
   echo __DIR__.'/d/e/f.txt';
   echo dirname($filePath).'/d/e/f.txt';
   
   // /a/b/cd/e/f.txt : most probably incorrect path
   echo __DIR__.'d/e/f.txt';
   echo dirname($filePath).'d/e/f.txt';
   
   ?>




Suggestions
^^^^^^^^^^^

* Add a check on __DIR__, as it may be '/' when run at the root of the server
* Add a '/' at the beginning of the path after __DIR__.
* Add a call to realpath() or file_exists(), before accessing the file.

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/DirThenSlash                     |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.10.3                                      |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Major                                       |
+-------------+---------------------------------------------+
| Time To Fix | Instant (5 mins)                            |
+-------------+---------------------------------------------+
| Precision   | Very high                                   |
+-------------+---------------------------------------------+
| Examples    | :ref:`case-traq-structures-dirthenslash`    |
+-------------+---------------------------------------------+


.. _don't-be-too-manual:

Don't Be Too Manual
+++++++++++++++++++

 Adapt the examples from the PHP manual to your code. Don't reuse directly the same names in your code : be more specific about what to expect in those variables.

.. code-block:: php

   <?php
   
   // Search for phone numbers in a text
   preg_match_all('/((\d{3})-(\d{3})-(\d{4}))/', $string, $phoneNumber);
   
   // Search for phone numbers in a text
   preg_match_all('/(\d{3})-(\d{3})-(\d{4})/', $string, $matches);
   
   ?>




Suggestions
^^^^^^^^^^^

* Use precise name with your variables

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Structures/DontBeTooManual |
+-------------+----------------------------+
| Rulesets    | none                       |
+-------------+----------------------------+
| Exakt since | 1.6.4                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Quick (30 mins)            |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _dont-change-the-blind-var:

Dont Change The Blind Var
+++++++++++++++++++++++++

 When using a `foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_, the blind variables hold a copy of the original value. It is confusing to modify them, as it seems that the original value may be changed.

When actually changing the original value, use the reference in the foreach definition to make it obvious, and save the final reassignation.

When the value has to be prepared before usage, then save the filtered value in a separate variable. This makes the clean value obvious, and preserve the original value for a future usage.

.. code-block:: php

   <?php
   
   // $bar is duplicated and kept 
   $foo = [1, 2, 3];
   foreach($foo as $bar) {
       // $bar is updated but its original value is kept
       $nextBar = $bar + 1;
       print $bar . ' => ' . ($nextBar) . PHP_EOL;
       foobar($nextBar);
   }
   
   // $bar is updated and lost
   $foo = [1, 2, 3];
   foreach($foo as $bar) {
       // $bar is updated but its final value is lost
       print $bar . ' => ' . (++$bar) . PHP_EOL;
       // Now that $bar is reused, it is easy to confuse its value
       foobar($bar);
   }
   
   // $bar is updated and kept
   $foo = [1, 2, 3];
   foreach($foo as &$bar) {
       // $bar is updated and keept
       print $bar . ' => ' . (++$bar) . PHP_EOL;
       foobar($bar);
   }
   
   ?>

Specs
^^^^^
+-------------+-------------------------------+
| Short name  | Structures/DontChangeBlindKey |
+-------------+-------------------------------+
| Rulesets    | :ref:`Analyze`                |
+-------------+-------------------------------+
| Exakt since | 0.8.9                         |
+-------------+-------------------------------+
| Php Version | All                           |
+-------------+-------------------------------+
| Severity    | Minor                         |
+-------------+-------------------------------+
| Time To Fix | Quick (30 mins)               |
+-------------+-------------------------------+
| Precision   | High                          |
+-------------+-------------------------------+


.. _dont-compare-typed-boolean:

Dont Compare Typed Boolean
++++++++++++++++++++++++++

 There is no need to compare explicitly a function call to a boolean, when the definition has a boolean return typehint.

The analysis checks for equality and identity comparisons. It doesn't check for the not operator usage.

.. code-block:: php

   <?php
   
   // Sufficient check
   if (foo()) {
       doSomething();
   }
   
   // Superfluous check
   if (foo() === true) {
       doSomething();
   }
   
   function foo() : bool {}
   
   ?>




Suggestions
^^^^^^^^^^^

* Simplify the code and make it short

Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Structures/DontCompareTypedBoolean |
+-------------+------------------------------------+
| Rulesets    | :ref:`Suggestions`                 |
+-------------+------------------------------------+
| Exakt since | 2.1.5                              |
+-------------+------------------------------------+
| Php Version | All                                |
+-------------+------------------------------------+
| Severity    | Minor                              |
+-------------+------------------------------------+
| Time To Fix | Quick (30 mins)                    |
+-------------+------------------------------------+
| Precision   | High                               |
+-------------+------------------------------------+


.. _don't-loop-on-yield:

Don't Loop On Yield
+++++++++++++++++++

 Use ``yield from``, instead of looping on a generator with ``yield``.

``yield from`` delegate the yielding to another generator, and keep calling that generator until it is finished. It also works with implicit generator datastructure, like arrays.

.. code-block:: php

   <?php
   
   function generator() {
       for($i = 0; $i < 10; ++$i) {
           yield $i;
       }
   }
   
   function delegatingGenerator() {
       yield from generator();
   }
   
   // Too much code here
   function generator2() {
       foreach(generator() as $g) {
           yield $g;
       }
   }
   
   ?>


There is a performance gain when delegating, over looping manually on the generator. You may even consider writing the loop to store all values in an array, then ``yield from`` the array.

See also `Generator delegation via yield from <https://www.php.net/manual/en/language.generators.syntax.php#control-structures.yield.from>`_.


Suggestions
^^^^^^^^^^^

* Use `yield from` instead of the whole foreach() loop

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------------+
| Short name  | Structures/DontLoopOnYield                                                                       |
+-------------+--------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Suggestions`                                                                               |
+-------------+--------------------------------------------------------------------------------------------------+
| Exakt since | 1.5.3                                                                                            |
+-------------+--------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                              |
+-------------+--------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                            |
+-------------+--------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                  |
+-------------+--------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                             |
+-------------+--------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-dolibarr-structures-dontlooponyield`, :ref:`case-tikiwiki-structures-dontlooponyield` |
+-------------+--------------------------------------------------------------------------------------------------+


.. _dont-mix-++:

Dont Mix ++
+++++++++++

 ++ operators, pre and post, have two distinct behaviors, and should be used separately.

When mixed in a larger expression, they are difficult to read, and may lead to unwanted behaviors.

.. code-block:: php

   <?php
   
       // Clear and defined behavior
       $i++;
       $a[$i] = $i;
   
       // The index is also incremented, as it is used AFTP the incrementation
       // With $i = 2; $a is array(3 => 3)
       $a[$i] = ++$i;
   
       // $i is actually modified twice 
       $i = --$i + 1; 
   ?>


See also `EXP30-C. Do not depend on the order of evaluation for side effects <https://wiki.sei.cmu.edu/confluence/display/c/EXP30-C.+Do+not+depend+on+the+order+of+evaluation+for+side+effects>`_.


Suggestions
^^^^^^^^^^^

* Extract the increment from the expression, and put it on a separate line.

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------+
| Short name  | Structures/DontMixPlusPlus                                                                  |
+-------------+---------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                              |
+-------------+---------------------------------------------------------------------------------------------+
| Exakt since | 1.3.2                                                                                       |
+-------------+---------------------------------------------------------------------------------------------+
| Php Version | All                                                                                         |
+-------------+---------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                       |
+-------------+---------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                            |
+-------------+---------------------------------------------------------------------------------------------+
| Precision   | High                                                                                        |
+-------------+---------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-contao-structures-dontmixplusplus`, :ref:`case-typo3-structures-dontmixplusplus` |
+-------------+---------------------------------------------------------------------------------------------+


.. _don't-read-and-write-in-one-expression:

Don't Read And Write In One Expression
++++++++++++++++++++++++++++++++++++++

 Avoid giving value and using it at the same time, in one expression. This is an undefined behavior of PHP, and may change without warning.

One of those changes happens between PHP 7.2 and 7.3 : 

.. code-block:: php

   <?php
   
   $arr = [1];
   $ref =& $arr[0];
   var_dump($arr[0] + ($arr[0] = 2));
   // PHP 7.2: int(4)
   // PHP 7.3: int(3)
   
   ?>


See also `UPGRADING 7.3 <https://github.com/php/php-src/blob/PHP-7.3/UPGRADING#L83-L95>`_.


Suggestions
^^^^^^^^^^^

* Split the expression in two separate expressions

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------+
| Short name  | Structures/DontReadAndWriteInOneExpression                                      |
+-------------+---------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CompatibilityPHP73`, :ref:`CompatibilityPHP74` |
+-------------+---------------------------------------------------------------------------------+
| Exakt since | 1.4.9                                                                           |
+-------------+---------------------------------------------------------------------------------+
| Php Version | All                                                                             |
+-------------+---------------------------------------------------------------------------------+
| Severity    | Critical                                                                        |
+-------------+---------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                 |
+-------------+---------------------------------------------------------------------------------+
| Precision   | High                                                                            |
+-------------+---------------------------------------------------------------------------------+


.. _double-assignation:

Double Assignation
++++++++++++++++++

 This happens when a container (variable, property, array index) is assigned with values twice in a row. One of them is probably a debug instruction, that was forgotten. 

.. code-block:: php

   <?php
   
   // Normal assignation
   $a = 1;
   
   // Double assignation
   $b = 2;
   $b = 3;
   
   ?>

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Structures/DoubleAssignation |
+-------------+------------------------------+
| Rulesets    | :ref:`Analyze`               |
+-------------+------------------------------+
| Exakt since | 0.8.4                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Major                        |
+-------------+------------------------------+
| Time To Fix | Quick (30 mins)              |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _double-instructions:

Double Instructions
+++++++++++++++++++

 Twice the same call in a row. This is worth a check.

.. code-block:: php

   <?php
   
   // repetition of the same command, with the same effect each time. 
   $a = array_merge($b, $c);
   $a = array_merge($b, $c);
   
   // false positive : commands are identical, but the effect is compounded 
   $a = array_merge($a, $c);
   $a = array_merge($a, $c);
   
   ?>



Suggestions
^^^^^^^^^^^

* Remove double work
* Avoid repetition by using loops, variadic or quantifiers `(dirname($path, 2))`

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Structures/DoubleInstruction |
+-------------+------------------------------+
| Rulesets    | :ref:`Analyze`               |
+-------------+------------------------------+
| Exakt since | 0.8.4                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Instant (5 mins)             |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _double-object-assignation:

Double Object Assignation
+++++++++++++++++++++++++

 Make sure that assigning the same object to two variables is the intended purpose.

.. code-block:: php

   <?php
   
   // $x and $y are the same object, as they both hold a reference to the same object.
   // This means that changing $x, will also change $y.
   $x = $y = new Z();
   
   // $a and $b are distinct values, by default
   $a = $b = 1;
   
   ?>




Suggestions
^^^^^^^^^^^

* Split the double assignation to two distinct instantiations
* Split the double assignation to two distinct lines

Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Structures/DoubleObjectAssignation |
+-------------+------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`ClassReview` |
+-------------+------------------------------------+
| Exakt since | 2.1.2                              |
+-------------+------------------------------------+
| Php Version | All                                |
+-------------+------------------------------------+
| Severity    | Minor                              |
+-------------+------------------------------------+
| Time To Fix | Quick (30 mins)                    |
+-------------+------------------------------------+
| Precision   | High                               |
+-------------+------------------------------------+


.. _drop-else-after-return:

Drop Else After Return
++++++++++++++++++++++

 Avoid else clause when the then clause returns, but not the else. And vice-versa.

This way, the else block disappears, and is now the main sequence of the function. 

This is also true if else has a return, and then not. When doing so, don't forget to reverse the condition. 

.. code-block:: php

   <?php
   
   // drop the else
   if ($a) {
       return $a;
   } else {
       doSomething();
   }
   
   // drop the then
   if ($b) {
       doSomething();
   } else {
       return $a;
   }
   
   // return in else and then
   if ($a3) {
       return $a;
   } else {
       $b = doSomething();
       return $b;
   }
   
   ?>


Suggestions
^^^^^^^^^^^

* Remove the else clause and move its code to the main part of the method

Specs
^^^^^
+-------------+-----------------------------------------------------------------+
| Short name  | Structures/DropElseAfterReturn                                  |
+-------------+-----------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Suggestions` |
+-------------+-----------------------------------------------------------------+
| Exakt since | 0.8.6                                                           |
+-------------+-----------------------------------------------------------------+
| Php Version | All                                                             |
+-------------+-----------------------------------------------------------------+
| Severity    | Minor                                                           |
+-------------+-----------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                 |
+-------------+-----------------------------------------------------------------+
| Precision   | High                                                            |
+-------------+-----------------------------------------------------------------+


.. _duplicate-calls:

Duplicate Calls
+++++++++++++++

 Duplicate calls within the same context. They should be called once, and then stashed in a variable for reuse. This saves a lot of time.

.. code-block:: php

   <?php
   
   function foo($name) {
       // The name decoration on the string is done twice. Once should be cached in a variable.
       echo Hello,.ucfirst(strtolower($name)).<br />;
       
       $query = 'Insert into visitors values (.ucfirst(strtolower($name)).)';
       $res = $db->query($query);
   }
   
   ?>


See also `Constants <https://www.php.net/manual/en/language.constants.php>`_ and `Userland naming Guide <https://www.php.net/manual/en/userlandnaming.php>`_.

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------+
| Short name  | Structures/DuplicateCalls                                                                           |
+-------------+-----------------------------------------------------------------------------------------------------+
| Rulesets    | none                                                                                                |
+-------------+-----------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                               |
+-------------+-----------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                 |
+-------------+-----------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                               |
+-------------+-----------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                       |
+-------------+-----------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                |
+-------------+-----------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-duplicated-code <https://github.com/dseguy/clearPHP/tree/master/rules/no-duplicated-code.md>`__ |
+-------------+-----------------------------------------------------------------------------------------------------+


.. _dynamic-calls:

Dynamic Calls
+++++++++++++

 List of dynamic calls. They will probably need to be review manually.

.. code-block:: php

   <?php
   
   $a = 'b';
   
   // Dynamic call of a constant
   echo constant($a);
   
   // Dynamic variables
   $$a = 2;
   echo $b;
   
   // Dynamic call of a function
   $a('b'); 
   
   // Dynamic call of a method
   $object->$a('b'); 
   
   // Dynamic call of a static method
   A::$a('b'); 
   
   ?>


See also `Variable functions <https://www.php.net/manual/en/functions.variable-functions.php>`_.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Structures/DynamicCalls |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Quick (30 mins)         |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _dynamic-code:

Dynamic Code
++++++++++++

 List of instructions that were left during analysis, as they rely on dynamic data. 

.. code-block:: php

   <?php
   
   // Dynamic call to 'method';
   $name = 'method';
   $object->$name();
   
   // Hard coded call to 'method';
   $object->method();
   
   ?>


Any further analysis will need to start from here.

See also `Variable functions <https://www.php.net/manual/en/functions.variable-functions.php>`_.

Specs
^^^^^
+-------------+------------------------+
| Short name  | Structures/DynamicCode |
+-------------+------------------------+
| Rulesets    | :ref:`CE`              |
+-------------+------------------------+
| Exakt since | 0.8.4                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Slow (1 hour)          |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _echo-or-print:

Echo Or Print
+++++++++++++

 Echo and print have the same functional use. <?= and `printf() <https://www.php.net/printf>`_ are also considered in this analysis. 

There seems to be a choice that is not enforced : one form is dominant, (> 90%) while the others are rare. 

The analyzed code has less than 10% of one of the three : for consistency reasons, it is recommended to make them all the same. 

It happens that print, echo or <?= are used depending on coding style and files. One file may be consistently using print, while the others are all using echo. 

.. code-block:: php

   <?php
   
   echo 'a';
   echo 'b';
   echo 'c';
   echo 'd';
   echo 'e';
   echo 'f';
   echo 'g';
   echo 'h';
   echo 'i';
   echo 'j';
   echo 'k';
   
   // This should probably be written 'echo';
   print 'l';
   
   ?>

Specs
^^^^^
+-------------+---------------------------------+
| Short name  | Structures/EchoPrintConsistance |
+-------------+---------------------------------+
| Rulesets    | none                            |
+-------------+---------------------------------+
| Exakt since | 0.8.4                           |
+-------------+---------------------------------+
| Php Version | All                             |
+-------------+---------------------------------+
| Severity    | Minor                           |
+-------------+---------------------------------+
| Time To Fix | Quick (30 mins)                 |
+-------------+---------------------------------+
| Precision   | High                            |
+-------------+---------------------------------+


.. _echo-with-concat:

Echo With Concat
++++++++++++++++

 Optimize your ``echo``'s by not concatenating at ``echo`` time, but serving all argument separated. This will save PHP a memory copy.

If values, literals and variables, are small enough, this won't have visible impact. Otherwise, this is less work and less memory waste.

.. code-block:: php

   <?php
     echo $a, ' b ', $c;
   ?>


instead of

.. code-block:: php

   <?php
     echo  $a . ' b ' . $c;
     echo $a b $c;
   ?>




Suggestions
^^^^^^^^^^^

* Turn the concatenation into a list of argument, by replacing the dots by commas.

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/EchoWithConcat                                                                                                             |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Performances`, :ref:`Suggestions`                                                                               |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                                                 |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                                                   |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                                                 |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                                       |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                  |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-unnecessary-string-concatenation <https://github.com/dseguy/clearPHP/tree/master/rules/no-unnecessary-string-concatenation.md>`__ |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-phpdocumentor-structures-echowithconcat`, :ref:`case-teampass-structures-echowithconcat`                                   |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+


.. _else-if-versus-elseif:

Else If Versus Elseif
+++++++++++++++++++++

 Always use elseif instead of else and if. 

"The keyword elseif SHOULD be used instead of else if so that all control keywords look like single words". Quoted from the PHP-FIG documentation

.. code-block:: php

   <?php
   
   // Using elseif 
   if ($a == 1) { doSomething(); }
   elseif ($a == 2) { doSomethingElseIf(); }
   else { doSomethingElse(); }
   
   // Using else if 
   if ($a == 1) { doSomething(); }
   else if ($a == 2) { doSomethingElseIf(); }
   else { doSomethingElse(); }
   
   // Using else if, no {}
   if ($a == 1)  doSomething(); 
   else if ($a == 2) doSomethingElseIf(); 
   else  doSomethingElse(); 
   
   ?>


See also `elseif/else if <https://www.php.net/manual/en/control-structures.elseif.php>`_.


Suggestions
^^^^^^^^^^^

* Merge else and if into elseif
* Turn the else expression into a block, and have more than the second if in this block
* Turn the if / else if / else into a switch structure

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------+
| Short name  | Structures/ElseIfElseif                                                                         |
+-------------+-------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Rector`, :ref:`php-cs-fixable`               |
+-------------+-------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                           |
+-------------+-------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                             |
+-------------+-------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                           |
+-------------+-------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                 |
+-------------+-------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                            |
+-------------+-------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-teampass-structures-elseifelseif`, :ref:`case-phpdocumentor-structures-elseifelseif` |
+-------------+-------------------------------------------------------------------------------------------------+


.. _else-usage:

Else Usage
++++++++++

 Else should be avoided by various means. For example, defaulting values before, or short-circuiting the method as soon as the condition is not met.

.. code-block:: php

   <?php
   
   // $a is always set
   $a = 'default';
   if ($condition) {
       $a = foo($condition);
   }
   
   // Don't use else for default : set default before
   if ($condition) {
       $a = foo($condition);
   } else {
       $a = 'default';
   }
   
   // Use then to exit 
   if ( ! $condition) {
       return;
   }
   $a = foo($condition);
   
   // don't use else to return
   if ($condition) {
       $a = foo($condition);
   } else {
       return;
   }
   
   ?>


See also `Avoid Else, Return Early <http://blog.timoxley.com/post/47041269194/avoid-else-return-early>`_ and `Why does clean code forbid else expression <https://stackoverflow.com/questions/32677046/why-does-clean-code-forbid-else-expression>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Structures/ElseUsage |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _empty-blocks:

Empty Blocks
++++++++++++

 Full empty block, part of a control structures. 

It is recommended to remove those blocks, so as to reduce confusion in the code. 

.. code-block:: php

   <?php
   
   foreach($foo as $bar) ; // This block seems erroneous
       $foobar++;
   
   if ($a === $b) {
       doSomething();
   } else {
       // Empty block. Remove this
   }
   
   // Blocks containing only empty expressions are also detected
   for($i = 0; $i < 10; $i++) {
       ;
   }
   
   // Although namespaces are not control structures, they are reported here
   namespace A;
   namespace B;
   
   ?>




Suggestions
^^^^^^^^^^^

* Fill the block with a command
* Fill the block with a comment that explain the situation
* Remove the block and its commanding operator

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------+
| Short name  | Structures/EmptyBlocks                                                                     |
+-------------+--------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                |
+-------------+--------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                      |
+-------------+--------------------------------------------------------------------------------------------+
| Php Version | All                                                                                        |
+-------------+--------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                      |
+-------------+--------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                           |
+-------------+--------------------------------------------------------------------------------------------+
| Precision   | High                                                                                       |
+-------------+--------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-cleverstyle-structures-emptyblocks`, :ref:`case-phpipam-structures-emptyblocks` |
+-------------+--------------------------------------------------------------------------------------------+


.. _empty-instructions:

Empty Instructions
++++++++++++++++++

 Empty instructions are part of the code that have no instructions. 

This may be trailing semi-colon or empty blocks for if-then structures.

Comments that explains the reason of the situation are not taken into account.

.. code-block:: php

   <?php
       $condition = 3;;;;
       if ($condition) { } 
   ?>




Suggestions
^^^^^^^^^^^

* Remove the empty lines
* Fill the empty lines

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------+
| Short name  | Structures/EmptyLines                                                               |
+-------------+-------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Dead code <dead-code>`                                        |
+-------------+-------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                               |
+-------------+-------------------------------------------------------------------------------------+
| Php Version | All                                                                                 |
+-------------+-------------------------------------------------------------------------------------+
| Severity    | Minor                                                                               |
+-------------+-------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                    |
+-------------+-------------------------------------------------------------------------------------+
| Precision   | High                                                                                |
+-------------+-------------------------------------------------------------------------------------+
| Examples    | :ref:`case-zurmo-structures-emptylines`, :ref:`case-thinkphp-structures-emptylines` |
+-------------+-------------------------------------------------------------------------------------+


.. _empty-try-catch:

Empty Try Catch
+++++++++++++++

 The code does try, then catch errors but do no act upon the error. 

.. code-block:: php

   <?php
   
   try { 
       doSomething();
   } catch (Throwable $e) {
       // ignore this
   }
   
   ?>


At worst, the error should be logged, so as to measure the actual usage of the catch expression.

``catch( Exception $e)`` (PHP 5) or ``catch(`Throwable <https://www.php.net/manual/en/class.throwable.php>`_ $e)`` with empty catch block should be banned. They ignore any error and proceed as if nothing happened. At worst, the event should be logged for future analysis. 

See also `Empty Catch Clause <http://wiki.c2.com/?EmptyCatchClause>`_.


Suggestions
^^^^^^^^^^^

* Add some logging in the catch
* Add a comment to mention why the catch is empty
* Change the exception, chain it and throw again

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------+
| Short name  | Structures/EmptyTryCatch                                                                    |
+-------------+---------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                              |
+-------------+---------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                       |
+-------------+---------------------------------------------------------------------------------------------+
| Php Version | All                                                                                         |
+-------------+---------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                       |
+-------------+---------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                             |
+-------------+---------------------------------------------------------------------------------------------+
| Precision   | High                                                                                        |
+-------------+---------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-livezilla-structures-emptytrycatch`, :ref:`case-mautic-structures-emptytrycatch` |
+-------------+---------------------------------------------------------------------------------------------+


.. _empty-with-expression:

Empty With Expression
+++++++++++++++++++++

 `empty() <https://www.php.net/empty>`_ doesn't accept expressions until PHP 5.5. Until then, it is necessary to store the result of the expression in a variable and then, test it with `empty() <https://www.php.net/empty>`_.

.. code-block:: php

   <?php
   
   // PHP 5.5+ empty() usage
   if (empty(strtolower($b . $c))) {
       doSomethingWithoutA();
   }
   
   // Compatible empty() usage
   $a = strtolower($b . $c);
   if (empty($a)) {
       doSomethingWithoutA();
   }
   
   ?>


See also `empty <http://www.php.net/empty>`_.


Suggestions
^^^^^^^^^^^

* Use the compatible syntax, and store the result in a local variable before testing it with empty

Specs
^^^^^
+-------------+-----------------------------------------------------+
| Short name  | Structures/EmptyWithExpression                      |
+-------------+-----------------------------------------------------+
| Rulesets    | :ref:`Suggestions`                                  |
+-------------+-----------------------------------------------------+
| Exakt since | 0.8.4                                               |
+-------------+-----------------------------------------------------+
| Php Version | 5.5+                                                |
+-------------+-----------------------------------------------------+
| Severity    | Major                                               |
+-------------+-----------------------------------------------------+
| Time To Fix | Quick (30 mins)                                     |
+-------------+-----------------------------------------------------+
| Precision   | High                                                |
+-------------+-----------------------------------------------------+
| Examples    | :ref:`case-humo-gen-structures-emptywithexpression` |
+-------------+-----------------------------------------------------+


.. _error-messages:

Error Messages
++++++++++++++

 Error message when an error is reported in the code. Those messages will be read by whoever is triggering the error, and it has to be helpful. 

It is a good exercise to read the messages out of context, and try to understand what is about.

.. code-block:: php

   <?php
   
   // Not so helpful messages
   die('Here be monsters');
   exit('An error happened');
   throw new Exception('Exception thrown at runtime');
   
   ?>


Error messages are spotted via `die <https://www.php.net/die>`_, `exit <https://www.www.php.net/exit>`_ or throw.

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Structures/ErrorMessages |
+-------------+--------------------------+
| Rulesets    | :ref:`CE`                |
+-------------+--------------------------+
| Exakt since | 0.8.4                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Slow (1 hour)            |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _error\_reporting()-with-integers:

error_reporting() With Integers
+++++++++++++++++++++++++++++++

 Using named constants with error_reporting is strongly encouraged to ensure compatibility for future versions. As error levels are added, the range of integers increases, so older integer-based error levels will not always behave as expected. (Adapted from the documentation).

.. code-block:: php

   <?php
   
   // This is ready for PHP next version
   error_reporting(E_ALL & ~E_DEPRECATED & ~E_STRICT & ~E_NOTICE & ~E_WARNING);
   
   // This is not ready for PHP next version
   error_reporting(2047);
   
   // -1 and 0 are omitted, as they will be valid even is constants changes.
   error_reporting(-1);
   error_reporting(0);
   
   ?>


See also `directive error_reporting <https://www.php.net/manual/en/errorfunc.configuration.php#ini.error-reporting>`_ and `error_reporting <https://www.php.net/manual/en/function.error-reporting.php>`_.


Suggestions
^^^^^^^^^^^

* Always use the constant combination when configuring error_reporting or any PHP native function

Specs
^^^^^
+-------------+-----------------------------------------------------------+
| Short name  | Structures/ErrorReportingWithInteger                      |
+-------------+-----------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`               |
+-------------+-----------------------------------------------------------+
| Exakt since | 0.8.4                                                     |
+-------------+-----------------------------------------------------------+
| Php Version | All                                                       |
+-------------+-----------------------------------------------------------+
| Severity    | Minor                                                     |
+-------------+-----------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                          |
+-------------+-----------------------------------------------------------+
| Precision   | High                                                      |
+-------------+-----------------------------------------------------------+
| Examples    | :ref:`case-sugarcrm-structures-errorreportingwithinteger` |
+-------------+-----------------------------------------------------------+


.. _eval()-usage:

Eval() Usage
++++++++++++

 Using `eval() <https://www.php.net/eval>`_ is evil. 

Using `eval() <https://www.php.net/eval>`_ is bad for performances (compilation time), for caches (it won't be compiled), and for security (if it includes external data).

.. code-block:: php

   <?php
       // Avoid using incoming data to build the eval() expression : any filtering error leads to PHP injection
       $mathExpression = $_GET['mathExpression']; 
       $mathExpression = preg_replace('#[^0-9+\-*/\(/)]#is', '', $mathExpression); // expecting 1+2
       $literalCode = '$a = '.$mathExpression.';';
       eval($literalCode);
       echo $a;
   
       // If the code code given to eval() is known at compile time, it is best to put it inline
       $literalCode = 'phpinfo();';
       eval($literalCode);
   
   ?>


Most of the time, it is possible to replace the code by some standard PHP, like variable variable for accessing a variable for which you have the name.
At worse, including a pregenerated file is faster and cacheable. 

There are several situations where `eval() <https://www.php.net/eval>`_ is actually the only solution : 

For PHP 7.0 and later, it is important to put `eval() <https://www.php.net/eval>`_ in a try..catch expression.

See also `eval <http://www.php.net/eval>`_ and `The Land Where PHP Uses `eval() <https://www.php.net/eval>`_ <https://www.exakat.io/land-where-php-uses-eval/>`_.


Suggestions
^^^^^^^^^^^

* Use a dynamic feature of PHP to replace the dynamic code
* Store the code on the disk, and use include
* Replace create_function() with a closure!

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------+
| Short name  | Structures/EvalUsage                                                            |
+-------------+---------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`Performances`, :ref:`Security`                 |
+-------------+---------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                           |
+-------------+---------------------------------------------------------------------------------+
| Php Version | All                                                                             |
+-------------+---------------------------------------------------------------------------------+
| Severity    | Major                                                                           |
+-------------+---------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                 |
+-------------+---------------------------------------------------------------------------------+
| Precision   | High                                                                            |
+-------------+---------------------------------------------------------------------------------+
| ClearPHP    | `no-eval <https://github.com/dseguy/clearPHP/tree/master/rules/no-eval.md>`__   |
+-------------+---------------------------------------------------------------------------------+
| Examples    | :ref:`case-xoops-structures-evalusage`, :ref:`case-mautic-structures-evalusage` |
+-------------+---------------------------------------------------------------------------------+


.. _eval()-without-try:

eval() Without Try
++++++++++++++++++

 ``eval()`` emits a ``ParseError`` exception with PHP 7 and later. Catching this exception is the recommended way to handle errors when using the ``eval()`` function.

.. code-block:: php

   <?php
   
   $code = 'This is no PHP code.';
   
   //PHP 5 style
   eval($code);
   // Ends up with a Fatal error, at execution time
   
   //PHP 7 style
   try {
       eval($code);
   } catch (ParseError $e) {
       cleanUpAfterEval();
   }
   
   ?>


Note that it will catch situations where ``eval()`` is provided with code that can't be used, but it will not catch security problems. Avoid using ``eval()`` with incoming data.


Suggestions
^^^^^^^^^^^

* Always add a try/catch block around eval() call

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------------+
| Short name  | Structures/EvalWithoutTry                                                                             |
+-------------+-------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Security`                                          |
+-------------+-------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                 |
+-------------+-------------------------------------------------------------------------------------------------------+
| Php Version | 7.0+                                                                                                  |
+-------------+-------------------------------------------------------------------------------------------------------+
| Severity    | Critical                                                                                              |
+-------------+-------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                       |
+-------------+-------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                  |
+-------------+-------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-fuelcms-structures-evalwithouttry`, :ref:`case-expressionengine-structures-evalwithouttry` |
+-------------+-------------------------------------------------------------------------------------------------------+


.. _exit()-usage:

Exit() Usage
++++++++++++

 Using `exit <https://www.www.php.net/exit>`_ or `die() <https://www.php.net/`die <https://www.php.net/die>`_>`_ in the code makes the code untestable (it will `break <https://www.php.net/manual/en/control-structures.break.php>`_ unit tests). Moreover, if there is no reason or string to display, it may take a long time to spot where the application is stuck. 

.. code-block:: php

   <?php
   
   // Throw an exception, that may be caught somewhere
   throw new \Exception('error');
   
   // Dying with error message. 
   die('error');
   
   function foo() {
       //exiting the function but not dying
       if (somethingWrong()) {
           return true;
       }
   }
   ?>


Try exiting the function/class with return, or throw exception that may be caught later in the code.


Suggestions
^^^^^^^^^^^

* Avoid exit and die. Let the script finish.
* Throw an exception and let it be handled before finishing

Specs
^^^^^
+-------------+----------------------------------------------------------------------------------+
| Short name  | Structures/ExitUsage                                                             |
+-------------+----------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                      |
+-------------+----------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                            |
+-------------+----------------------------------------------------------------------------------+
| Php Version | All                                                                              |
+-------------+----------------------------------------------------------------------------------+
| Severity    | Major                                                                            |
+-------------+----------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                  |
+-------------+----------------------------------------------------------------------------------+
| Precision   | High                                                                             |
+-------------+----------------------------------------------------------------------------------+
| ClearPHP    | `no-exit <https://github.com/dseguy/clearPHP/tree/master/rules/no-exit.md>`__    |
+-------------+----------------------------------------------------------------------------------+
| Examples    | :ref:`case-traq-structures-exitusage`, :ref:`case-thinkphp-structures-exitusage` |
+-------------+----------------------------------------------------------------------------------+


.. _failed-substr-comparison:

Failed Substr Comparison
++++++++++++++++++++++++

 The extracted string must be of the size of the compared string.

This is also true for negative lengths.

.. code-block:: php

   <?php
   
   // Possible comparison
   if (substr($a, 0, 3) === 'abc') { }
   if (substr($b, 4, 3) === 'abc') { }
   
   // Always failing
   if (substr($a, 0, 3) === 'ab') { }
   if (substr($a, 3, -3) === 'ab') { }
   
   // Omitted in this analysis
   if (substr($a, 0, 3) !== 'ab') { }
   
   ?>

 

Suggestions
^^^^^^^^^^^

* Fix the string
* Fix the length of the string
* Put the string in a constant, and use strlen() or mb_strlen()

Specs
^^^^^
+-------------+----------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/FailingSubstrComparison                                                                             |
+-------------+----------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Top10`                                                      |
+-------------+----------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                          |
+-------------+----------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                            |
+-------------+----------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                          |
+-------------+----------------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                               |
+-------------+----------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                           |
+-------------+----------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-zurmo-structures-failingsubstrcomparison`, :ref:`case-mediawiki-structures-failingsubstrcomparison` |
+-------------+----------------------------------------------------------------------------------------------------------------+


.. _switch-fallthrough:

Switch Fallthrough
++++++++++++++++++

 A switch with fallthrough is prone to errors. 

A fallthrough happens when a case or default clause in a switch statement is not finished by a `break <https://www.php.net/manual/en/control-structures.break.php>`_ (or equivalent);
CWE report this as a security concern, unless well documented.

A fallthrough may be used as a feature. Then, it is indistinguishable from an error. 

When the case block is empty, this analysis doesn't report it : the case is then used as an alias.

.. code-block:: php

   <?php
   switch($variable) {
       case 1 :   // case 1 is not reported, as it actually shares the same body as case 33
       case 33 :  
           break ;
       case 2 : 
           break ;
       default: 
           ++$a;
       case 4 : 
           break ;
   }
   ?>


This analysis doesn't take into account comments about the fallthrough. 

See also `CWE-484: Omitted `Break <https://www.php.net/manual/en/control-structures.break.php>`_ Statement in Switch <https://cwe.mitre.org/data/definitions/484.html>`_ and `Rule: no-switch-case-fall-through <https://palantir.github.io/tslint/rules/no-switch-case-fall-through/>`_.


Suggestions
^^^^^^^^^^^

* Make separate code for each case. Always use break at the end of a case or default.

Specs
^^^^^
+-------------+------------------------+
| Short name  | Structures/Fallthrough |
+-------------+------------------------+
| Rulesets    | :ref:`Security`        |
+-------------+------------------------+
| Exakt since | 0.12.14                |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Instant (5 mins)       |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _file-uploads:

File Uploads
++++++++++++

 This code makes usage of file upload features of PHP.

Upload file feature is detected through the usage of specific functions : 

.. code-block:: php

   <?php
   $uploaddir = '/var/www/uploads/';
   $uploadfile = $uploaddir . basename($_FILES['userfile']['name']);
   
   echo '<pre>';
   if (move_uploaded_file($_FILES['userfile']['tmp_name'], $uploadfile)) {
       echo 'File is valid, and was successfully uploaded.'.PHP_EOL;
   } else {
       echo 'Possible file upload attack!'.PHP_EOL;
   }
   
   echo 'Here is some more debugging info:';
   print_r($_FILES);
   
   print '</pre>';
   
   ?>


See also `Handling file uploads <https://www.php.net/manual/en/features.file-upload.php>`_.

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Structures/FileUploadUsage |
+-------------+----------------------------+
| Rulesets    | :ref:`CE`                  |
+-------------+----------------------------+
| Exakt since | 0.8.4                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Slow (1 hour)              |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _file-usage:

File Usage
++++++++++

 The application makes usage of files on the system (read, write, delete, etc.).

Files usage is based on the usage of file functions.

.. code-block:: php

   <?php
       $fp = fopen('/tmp/file.txt', 'w+');
       // ....
   ?>


See also `filesystem <http://www.php.net/manual/en/book.filesystem.php>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Structures/FileUsage |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _foreach-needs-reference-array:

Foreach Needs Reference Array
+++++++++++++++++++++++++++++

 When using foreach with a reference as value, the source must be a referenced array, which is a variable (or array or property or `static <https://www.php.net/manual/en/language.oop5.static.php>`_ property). 
When the array is the result of an expression, the array is not kept in memory after the foreach loop, and any change made with & are lost.

This will do nothing

.. code-block:: php

   <?php
       foreach(array(1,2,3) as &$value) {
           $value *= 2;
       }
   ?>


This will have an actual effect

.. code-block:: php

   <?php
       $array = array(1,2,3);
       foreach($array as &$value) {
           $value *= 2;
       }
   ?>

Specs
^^^^^
+-------------+----------------------------------------+
| Short name  | Structures/ForeachNeedReferencedSource |
+-------------+----------------------------------------+
| Rulesets    | none                                   |
+-------------+----------------------------------------+
| Exakt since | 0.8.4                                  |
+-------------+----------------------------------------+
| Php Version | All                                    |
+-------------+----------------------------------------+
| Severity    | Minor                                  |
+-------------+----------------------------------------+
| Time To Fix | Quick (30 mins)                        |
+-------------+----------------------------------------+
| Precision   | High                                   |
+-------------+----------------------------------------+


.. _foreach-reference-is-not-modified:

Foreach Reference Is Not Modified
+++++++++++++++++++++++++++++++++

 Foreach statement may loop using a reference, especially when the loop has to change values of the array it is looping on. 

In the spotted loop, reference are used but never modified. They may be removed.

.. code-block:: php

   <?php
   
   $letters = range('a', 'z');
   
   // $letter is not used here
   foreach($letters as &$letter) {
       $alphabet .= $letter;
   }
   
   // $letter is actually used here
   foreach($letters as &$letter) {
       $letter = strtoupper($letter);
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Remove the reference from the foreach
* Actually modify the content of the reference

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/ForeachReferenceIsNotModified                                                                                    |
+-------------+-----------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                                                 |
+-------------+-----------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                                       |
+-------------+-----------------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                                       |
+-------------+-----------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                             |
+-------------+-----------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                        |
+-------------+-----------------------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-dolibarr-structures-foreachreferenceisnotmodified`, :ref:`case-vanilla-structures-foreachreferenceisnotmodified` |
+-------------+-----------------------------------------------------------------------------------------------------------------------------+


.. _overwritten-source-and-value:

Overwritten Source And Value
++++++++++++++++++++++++++++

 In a `foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_, it is best to keep source and values distinct. Otherwise, they overwrite each other.

Since PHP 7.0, PHP makes a copy of the original source, then works on it. This makes possible to use the same name for the source and the values.

.. code-block:: php

   <?php
   
   // displays 0-1-2-3-3
   $array = range(0, 3);
   foreach($array as $array) {
       print $array . '-';
   }
   print_r($array);
   
   
   /* displays 0-1-2-3-Array
   (
       [0] => 0
       [1] => 1
       [2] => 2
       [3] => 3
   )
   */
   $array = range(0, 3);
   foreach($array as $v) {
       print $v . '-';
   }
   print_r($array);
   
   ?>


When the source is used as the value, the elements in the array are successively assigned to itself. After the loop, the original array has been replaced by its last element.

The same applies to the index, or to any variable in a `list() <https://www.php.net/list>`_ structure, used in a `foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_.



Suggestions
^^^^^^^^^^^

* Keep the source, the index and the values distinct

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/ForeachSourceValue                                                                                   |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                                  |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.8.9                                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                             |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                 |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                            |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-churchcrm-structures-foreachsourcevalue`, :ref:`case-expressionengine-structures-foreachsourcevalue` |
+-------------+-----------------------------------------------------------------------------------------------------------------+


.. _foreach-with-list():

Foreach With list()
+++++++++++++++++++

 Foreach loops have the ability to use `list() <https://www.php.net/list>`_ (or []) as blind variables. This syntax assign directly array elements to various variables. 

PHP 5.5 introduced the usage of list in `foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_ loops. Until PHP 7.1, it was not possible to use non-numerical arrays as `list() <https://www.php.net/list>`_ wouldn't support string-indexed arrays.

.. code-block:: php

   <?php
       // PHP 5.5 and later, with numerically-indexed arrays
       foreach($array as list($a, $b)) { 
           // do something 
       }
   
   
       // PHP 7.1 and later, with arrays
       foreach($array as list('col1' => $a, 'col3' => $b)) { // 'col2 is ignored'
           // do something 
       }
   ?>


Previously, it was compulsory to `extract() <https://www.php.net/extract>`_ the data from the blind array : 

.. code-block:: php

   <?php
       foreach($array as $c) { 
           list($a, $b) = $c;
           // do something 
       }
   ?>


See also `The list function & practical uses of array destructuring in PHP <https://sebastiandedeyne.com/the-list-function-and-practical-uses-of-array-destructuring-in-php>`_ and `Array destructuring in PHP <https://stitcher.io/blog/array-destructuring-with-list-in-php#in-loops>`_.

Specs
^^^^^
+-------------+------------------------------------------------------+
| Short name  | Structures/ForeachWithList                           |
+-------------+------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54` |
+-------------+------------------------------------------------------+
| Exakt since | 0.8.4                                                |
+-------------+------------------------------------------------------+
| Php Version | 5.5+                                                 |
+-------------+------------------------------------------------------+
| Severity    | Minor                                                |
+-------------+------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                        |
+-------------+------------------------------------------------------+
| Precision   | Very high                                            |
+-------------+------------------------------------------------------+


.. _forgotten-whitespace:

Forgotten Whitespace
++++++++++++++++++++

 Forgotten whitespaces only bring misery to the code.

White spaces have been left at either end of a file : before the PHP opening tag, or after the closing tag. 

Usually, such whitespaces are forgotten, and may end up summoning the infamous 'headers already sent' error. It is better to remove them. 

.. code-block:: php

   <?php
       // This script has no forgotten whitespace, not at the beginning
       function foo() {}
   
       // This script has no forgotten whitespace, not at the end
   ?>


See also `How to fix Headers already sent error in PHP <http://stackoverflow.com/questions/8028957/how-to-fix-headers-already-sent-error-in-php>`_.


Suggestions
^^^^^^^^^^^

* Remove all whitespaces before and after a script. This doesn't apply to template, which may need to use those spaces.
* Remove the final tag, to prevent any whitespace to be forgotten at the end of the file. This doesn't apply to the opening PHP tag, which is always necessary.

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/ForgottenWhiteSpace              |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.8.4                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Instant (5 mins)                            |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _for-using-functioncall:

For Using Functioncall
++++++++++++++++++++++

 It is recommended to avoid functioncall in the `for() <https://www.php.net/manual/en/control-structures.for.php>`_ statement. 

.. code-block:: php

   <?php
   
   // Fastest way
   $nb = count($array); 
   for($i = 0; $i < $nb; ++$i) {
       doSomething($i);
   } 
   
   // Same as above, but slow
   for($i = 0; $i < count($array); ++$i) {
       doSomething($i);
   } 
   
   // Same as above, but slow
   foreach($portions as &$portion) {
       // here, array_sum() doesn't depends on the $grade. It should be out of the loop
       $portion = $portion / array_sum($portions);
   } 
   
   $total = array_sum($portion);
   foreach($portion as &$portion) {
       $portion = $portion / $total;
   } 
   
   ?>


This is true with any kind of functioncall that returns the same value throughout the loop. 



Suggestions
^^^^^^^^^^^

* Call the function once, before the loop

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/ForWithFunctioncall                                                                                |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Performances`, :ref:`Top10`                                                                             |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                         |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                           |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                         |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                                 |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                          |
+-------------+---------------------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-functioncall-in-loop <https://github.com/dseguy/clearPHP/tree/master/rules/no-functioncall-in-loop.md>`__ |
+-------------+---------------------------------------------------------------------------------------------------------------+


.. _function-subscripting,-old-style:

Function Subscripting, Old Style
++++++++++++++++++++++++++++++++

 Since PHP 5.4, it is now possible use function results as an array, and access directly its element : 

.. code-block:: php

   <?php
   
   function foo() {
       return array(1 => 'a', 'b', 'c');
   }
   
   echo foo()[1]; // displays 'a';
   
   // Function subscripting, the old way
   function foo() {
       return array(1 => 'a', 'b', 'c');
   }
   
   $x = foo();
   echo $x[1]; // displays 'a';
   
   ?>




Suggestions
^^^^^^^^^^^

* Skip the local variable and directly use the return value from the function

Specs
^^^^^
+-------------+---------------------------------------------------------+
| Short name  | Structures/FunctionPreSubscripting                      |
+-------------+---------------------------------------------------------+
| Rulesets    | :ref:`Suggestions`                                      |
+-------------+---------------------------------------------------------+
| Exakt since | 0.8.4                                                   |
+-------------+---------------------------------------------------------+
| Php Version | 5.4+                                                    |
+-------------+---------------------------------------------------------+
| Severity    | Minor                                                   |
+-------------+---------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                        |
+-------------+---------------------------------------------------------+
| Precision   | High                                                    |
+-------------+---------------------------------------------------------+
| Examples    | :ref:`case-openconf-structures-functionpresubscripting` |
+-------------+---------------------------------------------------------+


.. _function-subscripting:

Function Subscripting
+++++++++++++++++++++

 It is possible to use the result of a methodcall directly as an array, without storing the result in a temporary variable.

This works, given that the method actually returns an array. 

This syntax was not possible until PHP 5.4. Until then, it was compulsory to store the result in a variable first. Although this is now superfluous, it has been a standard syntax in PHP, and is still being used.

.. code-block:: php

   <?php
   
   function foo() {
       return array(1 => 'a', 'b', 'c');
   }
   
   echo foo()[1]; // displays 'a';
   
   // Function subscripting, the old way
   function foo() {
       return array(1 => 'a', 'b', 'c');
   }
   
   $x = foo();
   echo $x[1]; // displays 'a';
   
   ?>


Storing the result in a variable is still useful if the result is actually used more than once.

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Structures/FunctionSubscripting      |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP53` |
+-------------+--------------------------------------+
| Exakt since | 0.8.4                                |
+-------------+--------------------------------------+
| Php Version | 5.4+                                 |
+-------------+--------------------------------------+
| Severity    | Minor                                |
+-------------+--------------------------------------+
| Time To Fix | Instant (5 mins)                     |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _global-in-global:

Global In Global
++++++++++++++++

 List of global variables. There are the global variables, defined with the global keyword, and the implicit global variables, defined in the global scope.

.. code-block:: php

   <?php
       global $explicitGlobal; // in global namespace
       
       $implicitGlobal = 1; // in global namespace, variables are automatically global
       
       function foo() {
           global $explicitGlobalInFoo; // in functions, globals must be declared with global
       }
   ?>


See also `Variable Scope <https://www.php.net/manual/en/language.variables.scope.php>`_.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Structures/GlobalInGlobal |
+-------------+---------------------------+
| Rulesets    | :ref:`CE`                 |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _global-inside-loop:

Global Inside Loop
++++++++++++++++++

 The global keyword must be used out of loops. Otherwise, it is evaluated each loop, slowing the whole process.

.. code-block:: php

   <?php
   
   // Here, global is used once
   global $total;
   foreach($a as $b) {
       $total += $b;
   }
   
   // Global is called each time : this is slow.
   foreach($a as $b) {
       global $total;
       $total += $b;
   }
   ?>




Suggestions
^^^^^^^^^^^

* Move the global keyword outside the loop

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Structures/GlobalOutsideLoop |
+-------------+------------------------------+
| Rulesets    | :ref:`Performances`          |
+-------------+------------------------------+
| Exakt since | 0.8.4                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Slow (1 hour)                |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _global-usage:

Global Usage
++++++++++++

 List usage of globals variables, with global keywords or direct access to $GLOBALS.

.. code-block:: php

   <?php
   $a = 1; /* global scope */ 
   
   function test()
   { 
       echo $a; /* reference to local scope variable */ 
   } 
   
   test();
   
   ?>

It is recommended to avoid using global variables, at it makes it very difficult to track changes in values across the whole application. 

See also `Variable scope <https://www.php.net/manual/en/language.variables.scope.php>`_.

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------+
| Short name  | Structures/GlobalUsage                                                            |
+-------------+-----------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`                                                         |
+-------------+-----------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                             |
+-------------+-----------------------------------------------------------------------------------+
| Php Version | All                                                                               |
+-------------+-----------------------------------------------------------------------------------+
| Severity    | Minor                                                                             |
+-------------+-----------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                     |
+-------------+-----------------------------------------------------------------------------------+
| Precision   | High                                                                              |
+-------------+-----------------------------------------------------------------------------------+
| ClearPHP    | `no-global <https://github.com/dseguy/clearPHP/tree/master/rules/no-global.md>`__ |
+-------------+-----------------------------------------------------------------------------------+


.. _find-key-directly:

Find Key Directly
+++++++++++++++++

 No need for a `foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_ to search for a key. 

PHP offers two solutions : `array_search() <https://www.php.net/array_search>`_ and `array_keys() <https://www.php.net/array_keys>`_. `Array_search() <https://www.php.net/array_search>`_ finds the first key that fits a value, and array_keys returns all the keys. 

.. code-block:: php

   <?php
   
   $array = ['a', 'b', 'c', 'd', 'e'];
   
   print array_search($array, 'c'); 
   // print 2 => 'c';
   
   print_r(array_keys($array, 'c')); 
   // print 2 => 'c';
   
   ?>


See also `array_search <https://www.php.net/array_search>`_ and `array_keys <https://www.php.net/array_keys>`_.

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Structures/GoToKeyDirectly |
+-------------+----------------------------+
| Rulesets    | none                       |
+-------------+----------------------------+
| Exakt since | 1.1.4                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Major                      |
+-------------+----------------------------+
| Time To Fix | Instant (5 mins)           |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _comparisons-orientation:

Comparisons Orientation
+++++++++++++++++++++++

 Maths has two comparisons styles : ``>`` or ``<``. Both may include equality : ``<=`` and ``>=``.

The analyzed code has less than 10% of one of them : for consistency reasons, it is recommended to make them all the same. 

It is recommended to always use the same comparison style. 

.. code-block:: php

   <?php
   
   // Always compare in the same direction
   if ($a > $c) {
   
   } elseif ($c > $b) {
   
   } else {
       // equality case
   }
   
   // Alterning comparison style lead to harder to read code
   if ($b > 3) {
   
   } elseif ($b < 3) {
   
   }
   
   ?>


See also `Comparison Operators <https://www.php.net/manual/en/language.operators.comparison.php>`_.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Structures/GtOrLtFavorite |
+-------------+---------------------------+
| Rulesets    | none                      |
+-------------+---------------------------+
| Exakt since | 1.3.2                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _heredoc-delimiter:

Heredoc Delimiter
+++++++++++++++++

 Heredoc and Nowdoc expressions may use a variety of delimiters. 

There seems to be a standard delimiter in the code, and some exceptions : one or several forms are dominant (> 90%), while the others are rare. 

The analyzed code has less than 10% of the rare delimiters. For consistency reasons, it is recommended to make them all the same. 

Generally, one or two delimiters are used, with generic value. It is recommended to use a humanly readable delimiter : SQL, HTML, XML, GREMLIN, etc. This helps readability in the code.

.. code-block:: php

   <?php
   
   echo <<<SQL
   SELECT * FROM table1;
   SQL;
   
   echo <<<SQL
   SELECT * FROM table2;
   SQL;
   
   echo <<<SQL
   SELECT * FROM table3;
   SQL;
   
   echo <<<SQL
   SELECT * FROM table4;
   SQL;
   
   echo <<<SQL
   SELECT * FROM table5;
   SQL;
   
   echo <<<SQL
   SELECT * FROM table11;
   SQL;
   
   echo <<<SQL
   SELECT * FROM table12;
   SQL;
   
   echo <<<SQL
   SELECT * FROM table13;
   SQL;
   
   // Nowdoc
   echo <<<'SQL'
   SELECT * FROM table14;
   SQL;
   
   echo <<<SQL
   SELECT * FROM table15;
   SQL;
   
   
   echo <<<HEREDOC
   SELECT * FROM table215;
   HEREDOC;
   
   ?>

Specs
^^^^^
+-------------+-------------------------------------+
| Short name  | Structures/HeredocDelimiterFavorite |
+-------------+-------------------------------------+
| Rulesets    | none                                |
+-------------+-------------------------------------+
| Exakt since | 0.12.0                              |
+-------------+-------------------------------------+
| Php Version | All                                 |
+-------------+-------------------------------------+
| Severity    | Minor                               |
+-------------+-------------------------------------+
| Time To Fix | Slow (1 hour)                       |
+-------------+-------------------------------------+
| Precision   | High                                |
+-------------+-------------------------------------+


.. _htmlentities-calls:

Htmlentities Calls
++++++++++++++++++

 `htmlentities() <https://www.php.net/htmlentities>`_ and `htmlspecialchars() <https://www.php.net/htmlspecialchars>`_ are used to prevent injecting special characters in HTML code. As a bare minimum, they take a string and encode it for HTML.

The second argument of the functions is the type of protection. The protection may apply to quotes or not, to HTML 4 or 5, etc. It is highly recommended to set it explicitly.

The third argument of the functions is the encoding of the string. In PHP 5.3, it is ``ISO-8859-1``, in 5.4, was ``UTF-8``, and in 5.6, it is now default_charset, a ``php.ini`` configuration that has the default value of ``UTF-8``. It is highly recommended to set this argument too, to avoid distortions from the configuration.

.. code-block:: php

   <?php
   $str = 'A quote is <b>bold</b>';
   
   // Outputs, without depending on the php.ini: A &#039;quote&#039; is &lt;b&gt;bold&lt;/b&gt; 
   echo htmlentities($str, ENT_QUOTES, 'UTF-8');
   
   // Outputs, while depending on the php.ini: A quote is &lt;b&gt;bold&lt;/b&gt;
   echo htmlentities($str);
   
   ?>


Also, note that arguments 2 and 3 are constants and string, respectively, and should be issued from the list of values available in the manual. Other values than those will make PHP use the default values. 

See also `htmlentities <https://www.php.net/htmlentities>`_ and `htmlspecialchars <https://www.php.net/htmlspecialchars>`_.


Suggestions
^^^^^^^^^^^

* Always use the third argument with htmlentities()

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/Htmlentitiescall                 |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.8.4                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Major                                       |
+-------------+---------------------------------------------+
| Time To Fix | Instant (5 mins)                            |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _identical-conditions:

Identical Conditions
++++++++++++++++++++

 These logical expressions contain members that are identical. 

This means those expressions may be simplified. 

.. code-block:: php

   <?php
   
   // twice $a
   if ($a || $b || $c || $a) {  }
   
   // Hiding in parenthesis is bad
   if (($a) ^ ($a)) {}
   
   // expressions may be large
   if ($a === 1 && 1 === $a) {}
   
   ?>


Suggestions
^^^^^^^^^^^

* Merge the two structures into one unique test
* Add extra expressions between the two structures
* Nest the structures, to show that different attempts are made

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------------+
| Short name  | Structures/IdenticalConditions                                                                            |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                               |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                     |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                       |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Severity    | Critical                                                                                                  |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                      |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-wordpress-structures-identicalconditions`, :ref:`case-dolibarr-structures-identicalconditions` |
+-------------+-----------------------------------------------------------------------------------------------------------+


.. _identical-consecutive-expression:

Identical Consecutive Expression
++++++++++++++++++++++++++++++++

 Identical consecutive expressions are worth being checked. 

They may be a copy/paste with unmodified content. When the content has to be duplicated, it is recommended to avoid executing the expression again, and just access the cached result.

.. code-block:: php

   <?php
   
   $current  = $array[$i];
   $next     = $array[$i + 1];
   $nextnext = $array[$i + 1]; // OOps, nextnext is wrong.
   
   // Initialization
   $previous = foo($array[1]); // previous is initialized with the first value on purpose
   $next     = foo($array[1]); // the second call to foo() with the same arguments should be avoided
   // the above can be rewritten as : 
   $next     = $previous; // save the processing.
   
   for($i = 1; $i < 200; ++$i) {
       $next = doSomething();
   }
   ?>

Specs
^^^^^
+-------------+---------------------------------+
| Short name  | Structures/IdenticalConsecutive |
+-------------+---------------------------------+
| Rulesets    | :ref:`Analyze`                  |
+-------------+---------------------------------+
| Exakt since | 1.0.8                           |
+-------------+---------------------------------+
| Php Version | All                             |
+-------------+---------------------------------+
| Severity    | Minor                           |
+-------------+---------------------------------+
| Time To Fix | Instant (5 mins)                |
+-------------+---------------------------------+
| Precision   | High                            |
+-------------+---------------------------------+


.. _identical-on-both-sides:

Identical On Both Sides
+++++++++++++++++++++++

 Operands should be different when comparing or making a logical combination. Of course, the value each operand holds may be identical. When the same operand appears on both sides of the expression, the result is know before execution. 

.. code-block:: php

   <?php
   
   // Trying to confirm consistency
   if ($login == $login) {
       doSomething();
   }
   
   // Works with every operators
   if ($object->login( ) !== $object->login()) {
       doSomething();
   }
   
   if ($sum >= $sum) {
       doSomething();
   }
   
   //
   if ($mask && $mask) {
       doSomething();
   }
   
   if ($mask || $mask) {
       doSomething();
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Remove one of the alternative, and remove the logical link
* Modify one of the alternative, and make it different from the other

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/IdenticalOnBothSides                                                                              |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                                  |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.0.8                                                                                                        |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                          |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                        |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                              |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                         |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-phpmyadmin-structures-identicalonbothsides`, :ref:`case-humo-gen-structures-identicalonbothsides` |
+-------------+--------------------------------------------------------------------------------------------------------------+


.. _iffectations:

Iffectations
++++++++++++

 Affectations that appears in a condition. 

Iffectations are a way to do both a test and an affectations. 
They may also be typos, such as if ($x = 3) { `... <https://www.php.net/manual/en/functions.arguments.php#functions.variable-arg-list>`_ }, leading to a constant condition. 

.. code-block:: php

   <?php
   
   // an iffectation : assignation in a If condition
   if($connexion = mysql_connect($host, $user, $pass)) {
       $res = mysql_query($connexion, $query);
   }
   
   // Iffectation may happen in while too.
   while($row = mysql_fetch($res)) {
       $store[] = $row;
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Move the assignation inside the loop, and make an existence test in the condition.
* Move the assignation before the if/then, make an existence test in the condition.

Specs
^^^^^
+-------------+------------------------+
| Short name  | Structures/Iffectation |
+-------------+------------------------+
| Rulesets    | :ref:`Analyze`         |
+-------------+------------------------+
| Exakt since | 0.8.4                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Quick (30 mins)        |
+-------------+------------------------+
| Precision   | Very high              |
+-------------+------------------------+


.. _if-with-same-conditions:

If With Same Conditions
+++++++++++++++++++++++

 Successive If / then structures that have the same condition may be either merged or have one of the condition changed. 

.. code-block:: php

   <?php
   
   if ($a == 1) {
       doSomething();
   }
   
   if ($a == 1) {
       doSomethingElse();
   }
   
   // May be replaced by 
   if ($a == 1) {
       doSomething();
       doSomethingElse();
   }
   
   ?>


Note that if the values used in the condition have been modified in the first if/then structure, the two distinct conditions may be needed. 

.. code-block:: php

   <?php
   
   // May not be merged
   if ($a == 1) {
       // Check that this is really the situation
       $a = checkSomething();
   }
   
   if ($a == 1) {
       doSomethingElse();
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Merge the two conditions so the condition is used once.
* Change one of the condition, so they are different
* Make it obvious that the first condition is a try, preparing the normal conditions.

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/IfWithSameConditions                                                                                   |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                                       |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                             |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                               |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                             |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                   |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                              |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-phpmyadmin-structures-ifwithsameconditions`, :ref:`case-phpdocumentor-structures-ifwithsameconditions` |
+-------------+-------------------------------------------------------------------------------------------------------------------+


.. _implicit-global:

Implicit Global
+++++++++++++++

 Global variables, that are used in local scope with global keyword, but are not declared as global in the global scope. They may be mistaken with distinct values, while, in PHP, variables in the global scope are truly global.

.. code-block:: php

   <?php
   
   // This is implicitely global
   $implicitGlobal = 1;
   
   global $explicitGlobal;
   $explicitGlobal = 2;
   
   foo();
   echo $explicitFunctionGlobal;
   
   function foo() {
       // This global is needed, but not the one in the global space
       global $implicitGlobal, $explicitGlobal, $explicitFunctionGlobal;
       
       // This won't be a global, as it must be 'global' in a function scope
       $notImplicitGlobal = 3;
       $explicitFunctionGlobal = 3;
   }
   
   ?>

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Structures/ImplicitGlobal |
+-------------+---------------------------+
| Rulesets    | none                      |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _implied-if:

Implied If
++++++++++

 It is confusing to emulate if/then with boolean operators.

It is possible to emulate a if/then structure by using the operators 'and' and 'or'. Since optimizations will be applied to them : 
when the left operand of 'and' is false, the right one is not executed, as its result is useless; 
when the left operand of 'or' is true, the right one is not executed, as its result is useless; 

However, such structures are confusing. It is easy to misread them as conditions, and ignore an important logic step. 

.. code-block:: php

   <?php
   
   // Either connect, or die
   mysql_connect('localhost', $user, $pass) or die();
   
   // Defines a constant if not found. 
   defined('SOME_CONSTANT') and define('SOME_CONSTANT', 1);
   
   // Defines a default value if provided is empty-ish 
   // Warning : this is 
   $user = $_GET['user'] || 'anonymous';
   
   ?>


It is recommended to use a real 'if then' structures, to make the condition readable.

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------+
| Short name  | Structures/ImpliedIf                                                                      |
+-------------+-------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                               |
+-------------+-------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                     |
+-------------+-------------------------------------------------------------------------------------------+
| Php Version | All                                                                                       |
+-------------+-------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                     |
+-------------+-------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                          |
+-------------+-------------------------------------------------------------------------------------------+
| Precision   | High                                                                                      |
+-------------+-------------------------------------------------------------------------------------------+
| ClearPHP    | `no-implied-if <https://github.com/dseguy/clearPHP/tree/master/rules/no-implied-if.md>`__ |
+-------------+-------------------------------------------------------------------------------------------+


.. _implode()-arguments-order:

Implode() Arguments Order
+++++++++++++++++++++++++

 `implode() <https://www.php.net/implode>`_ accepted two signatures, but is only recommending one. Both types orders of string then array, and array then string have been possible until PHP 7.4.

In PHP 7.4, the order array then string is deprecated, and emits a warning. It will be removed in PHP 8.0.

.. code-block:: php

   <?php
   
   $glue = ',';
   $pieces = range(0, 4);
   
   // documented argument order
   $s = implode($glue, $pieces);
   
   // Pre 7.4 argument order
   $s = implode($pieces, $glue);
   
   // both produces 0,1,2,3,4
   
   ?>


See also `implode() <https://www.php.net/implode>`_.


Suggestions
^^^^^^^^^^^

* Always use the array as the second argument

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/ImplodeArgsOrder                 |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 1.9.2                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _inclusions:

Inclusions
++++++++++

 List of all inclusions. Inclusions are made with include(), include_once(), require() and require_once().

.. code-block:: php

   <?php
   
   include 'library.php';
   
   // display is a function defined in 'library.php';
   display('Message');
   
   ?>

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Structures/IncludeUsage |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _inconsistent-concatenation:

Inconsistent Concatenation
++++++++++++++++++++++++++

 Concatenations happens within a string or using the dot operator. Using both is an inconsistent way of writing concatenations.

Switching methods of concatenation, sometimes in the same expression, is error prone. The reader gets confused, and may miss important information. 

.. code-block:: php

   <?php
   
       //Concatenation
     $consistent = $a . 'b'. $c;
   
       //Interpolation
     $consistentToo = "{$a}b$c";
   
       // Concatenation and interpolation
     $inconsistent = $a . "b$c";
   
       // Concatenation and interpolation too
     $consistentThree = <<<CONSISTENT
   {$a}b$c
   CONSISTENT;
   
       // Concatenation and interpolation collisions
     $collision = theClass::CONSTANTE . "b{$c}".number_format($t, 2).' $CAD'.\n;
   
   ?>


There are some situations where using concatenation are compulsory : when calling a constant, or a function, or make use of the escape sequence. Those are ignored in this analysis.

Specs
^^^^^
+-------------+----------------------------------------------------------+
| Short name  | Structures/InconsistentConcatenation                     |
+-------------+----------------------------------------------------------+
| Rulesets    | none                                                     |
+-------------+----------------------------------------------------------+
| Exakt since | 0.8.4                                                    |
+-------------+----------------------------------------------------------+
| Php Version | All                                                      |
+-------------+----------------------------------------------------------+
| Severity    | Minor                                                    |
+-------------+----------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                          |
+-------------+----------------------------------------------------------+
| Precision   | High                                                     |
+-------------+----------------------------------------------------------+
| Examples    | :ref:`case-fuelcms-structures-inconsistentconcatenation` |
+-------------+----------------------------------------------------------+


.. _inconsistent-elseif:

Inconsistent Elseif
+++++++++++++++++++

 Chaining if/elseif requires a consistent string of conditions. The conditions are executed one after the other, and the conditions shouldn't overlap.

This analysis reports chains of elseif that don't share a common variable (or array, or property, etc.. ). As such, testing different conditions are consistent. 

.. code-block:: php

   <?php
   
   // $a is always common, so situations are mutually exclusive
   if ($a === 1) {
       doSomething();
   } else if ($a > 1) {
       doSomethingElse();
   } else {
       doSomethingDefault();
   }
   
   // $a is always common, so situations are mutually exclusive
   // although, it may be worth checking the consistency here
   if ($a->b === 1) {
       doSomething();
   } else if ($a->c > 1) {
       doSomethingElse();
   } else {
       doSomethingDefault();
   }
   
   // if $a === 1, then $c doesn't matter? 
   // This happens, but then logic doesn't appear in the code.
   if ($a === 1) {
       doSomething();
   } else if ($c > 1) {
       doSomethingElse();
   } else {
       doSomethingDefault();
   }
   
   ?>

Specs
^^^^^
+-------------+-------------------------------+
| Short name  | Structures/InconsistentElseif |
+-------------+-------------------------------+
| Rulesets    | :ref:`Analyze`                |
+-------------+-------------------------------+
| Exakt since | 1.4.3                         |
+-------------+-------------------------------+
| Php Version | All                           |
+-------------+-------------------------------+
| Severity    | Major                         |
+-------------+-------------------------------+
| Time To Fix | Slow (1 hour)                 |
+-------------+-------------------------------+
| Precision   | High                          |
+-------------+-------------------------------+


.. _indices-are-int-or-string:

Indices Are Int Or String
+++++++++++++++++++++++++

 Indices in an array notation such as ``$array['indice']`` may only be integers or string.

Boolean, Null or float will be converted to their integer or string equivalent.

.. code-block:: php

   <?php
       $a = [true => 1,
             1.0  => 2,
             1.2  => 3,
             1    => 4,
             '1'  => 5,
             0.8  => 6,
             0x1  => 7,
             01   => 8,
             
             null  => 1,
             ''    => 2,
             
             false => 1,
             0     => 2,
   
             '0.8' => 3,
             '01'  => 4,
             '2a'  => 5
             ];
             
       print_r($a);
   
   /*
   The above displays
   Array
   (
       [1] => 8
       [0] => 2
       [] => 2
       [0.8] => 3
       [01] => 4
       [2a] => 5
   )
   */
   ?>


Decimal numbers are rounded to the closest integer; Null is transtyped to '' (empty string); true is 1 and false is 0; Integers in strings are transtyped, while partial numbers or decimals are not analyzed in strings. 

As a general rule of thumb, only use integers or strings that don\'t look like integers. 

This analyzer may find constant definitions, when available.

Note also that PHP detects integer inside strings, and silently turn them into integers. Partial and octal numbers are not transformed.

.. code-block:: php

   <?php
       $a = [1      => 1,
             '2'    => 2,
             '011'  => 9, // octal number
             '11d'  => 11, // partial number 
             ];
             
       var_dump($a);
   
   /*
   The above displays
   array(4) {
     [1]=>
     int(1)
     [2]=>
     int(2)
     [011]=>
     int(9)
     [11d]=>
     int(11)
   }*/
   ?>


See also `Arrays syntax <https://www.php.net/manual/en/language.types.array.php>`_.


Suggestions
^^^^^^^^^^^

* Do not use any type but string or integer
* Force typecast the keys when building an array

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------------+
| Short name  | Structures/IndicesAreIntOrString                                                                          |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                               |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                     |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                       |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                     |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                      |
+-------------+-----------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-zencart-structures-indicesareintorstring`, :ref:`case-mautic-structures-indicesareintorstring` |
+-------------+-----------------------------------------------------------------------------------------------------------+


.. _infinite-recursion:

Infinite Recursion
++++++++++++++++++

 A method is calling itself, with unchanged arguments. This will probably repeat indefinitely.

This applies to recursive functions without any condition. This also applies to function which inject the incoming arguments, without modifications.

.. code-block:: php

   <?php
   
   function foo($a, $b) {
       if ($a > 10) {
           return;
       }
       foo($a, $b);
   }
   
   function foo2($a, $b) {
       ++$a;   // $a is modified
       if ($a > 10) {
           return;
       }
       foo2($a, $b);
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Modify arguments before injecting them again in the same method
* Use different values when calling the same method

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Structures/InfiniteRecursion |
+-------------+------------------------------+
| Rulesets    | :ref:`Analyze`               |
+-------------+------------------------------+
| Exakt since | 1.8.6                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Major                        |
+-------------+------------------------------+
| Time To Fix | Quick (30 mins)              |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _invalid-pack-format:

Invalid Pack Format
+++++++++++++++++++

 Some characters are invalid in a `pack() <https://www.php.net/pack>`_ format string.

`pack() <https://www.php.net/pack>`_ and `unpack() <https://www.php.net/unpack>`_ accept the following format specifiers : ``aAhHcCsSnviIlLNVqQJPfgGdeExXZ``. 

`unpack() <https://www.php.net/unpack>`_ also accepts a name after the format specifier and an optional quantifier. 

All other situations is not a valid, and produces a warning : ``pack(): Type t: unknown format code``

.. code-block:: php

   <?php
       $binarydata = pack(nvc*, 0x1234, 0x5678, 65, 66);
       
       // the first unsigned short is stored as 'first'. The next matches are names with numbers.
       $res = unpack('nfirst/vc*', $binarydata);
   ?>


Check `pack() <https://www.php.net/pack>`_ documentation for format specifiers that were introduced in various PHP version, namely 7.0, 7.1 and 7.2.

See also `pack <https://www.php.net/pack>`_ and `unpack <https://www.php.net/pack>`_.


Suggestions
^^^^^^^^^^^

* Fix the packing format with correct values

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/InvalidPackFormat                |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 1.4.9                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Major                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _invalid-regex:

Invalid Regex
+++++++++++++

 The PCRE regex doesn't compile. It isn't a valid regex.

Several reasons may lead to this situation : syntax error, Unknown modifier, missing parenthesis or reference.

.. code-block:: php

   <?php
   
   // valid regex
   preg_match('/[abc]/', $string);
   
   // invalid regex (missing terminating ] for character class 
   preg_match('/[abc/', $string);
   
   ?>


Regex are check with the Exakat version of PHP. 

Dynamic regex are only checked for simple values. Dynamic values may eventually generate a compilation error.



Suggestions
^^^^^^^^^^^

* Fix the regex before running it

Specs
^^^^^
+-------------+----------------------------------------------+
| Short name  | Structures/InvalidRegex                      |
+-------------+----------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`  |
+-------------+----------------------------------------------+
| Exakt since | 1.0.5                                        |
+-------------+----------------------------------------------+
| Php Version | All                                          |
+-------------+----------------------------------------------+
| Severity    | Major                                        |
+-------------+----------------------------------------------+
| Time To Fix | Quick (30 mins)                              |
+-------------+----------------------------------------------+
| Precision   | High                                         |
+-------------+----------------------------------------------+
| Examples    | :ref:`case-sugarcrm-structures-invalidregex` |
+-------------+----------------------------------------------+


.. _isset()-with-constant:

isset() With Constant
+++++++++++++++++++++

 Until PHP 7, it was possible to use arrays as constants, but it was not possible to test them with `isset <https://www.www.php.net/isset>`_.

.. code-block:: php

   <?php
   const X = [1,2,3];
   
   if (isset(X[4])) {}
   ?>


This would yield an error : ``Cannot use `isset() <https://www.www.php.net/isset>`_ on the result of an expression (you can use "null !== expression" instead)``. This is a backward incompatibility.

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/IssetWithConstant                                                                               |
+-------------+------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56` |
+-------------+------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Php Version | 7.0+                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                           |
+-------------+------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+


.. _is-actually-zero:

Is Actually Zero
++++++++++++++++

 This addition actually may be simplified because one term is actually negated by another. 

This kind of error happens when the expression is very large : the more terms are included, the more chances are that some auto-annihilation happens. 

This error may also be a simple typo : for example, calculating the difference between two consecutive terms.

.. code-block:: php

   <?php
   
   // This is quite obvious
   $a = 2 - 2;
   
   // This is obvious too. This may be a typo-ed difference between two consecutive terms. 
   // Could have been $c = $fx[3][4] - $fx[3][3] or $c = $fx[3][5] - $fx[3][4];
   $c = $fx[3][4] - $fx[3][4];
   
   // This is less obvious
   $a = $b[3] - $c + $d->foo(1,2,3) + $c + $b[3];
   
   ?>




Suggestions
^^^^^^^^^^^

* Clean the code and remove the null sum
* Fix one of the variable : this expression needs another variable here
* When adding differences, calculate the difference in a temporary variable first.

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------+
| Short name  | Structures/IsZero                                                              |
+-------------+--------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                    |
+-------------+--------------------------------------------------------------------------------+
| Exakt since | 0.12.15                                                                        |
+-------------+--------------------------------------------------------------------------------+
| Php Version | All                                                                            |
+-------------+--------------------------------------------------------------------------------+
| Severity    | Minor                                                                          |
+-------------+--------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                               |
+-------------+--------------------------------------------------------------------------------+
| Precision   | High                                                                           |
+-------------+--------------------------------------------------------------------------------+
| Examples    | :ref:`case-dolibarr-structures-iszero`, :ref:`case-suitecrm-structures-iszero` |
+-------------+--------------------------------------------------------------------------------+


.. _use-json\_decode()-options:

Use json_decode() Options
+++++++++++++++++++++++++

 `json_decode() <https://www.php.net/json_decode>`_ returns objects by default, unless the second argument is set to ``TRUE`` or ``JSON_OBJECT_AS_ARRAY``. Then, it returns arrays.

Avoid casting the returned value from `json_decode() <https://www.php.net/json_decode>`_, and use the second argument to directly set the correct type.

.. code-block:: php

   <?php
   
   $json = '{a:b}';
   
   // Good syntax
   $array = json_decode($json, JSON_OBJECT_AS_ARRAY);
   
   // GoToo much work
   $array = (array) json_decode($json);
   
   ?>


Note that all objects will be turned into arrays, recursively. If you're expecting an array of objects, don't use the ``JSON_OBJECT_AS_ARRAY`` constant, and change your JSON code.

Note that ``JSON_OBJECT_AS_ARRAY`` is the only constant : there is no defined constant to explicitly ask for an object as returned value. 

See also `json_decode <https://www.php.net/json_decode>`_.
.. index\:\:
   json



Suggestions
^^^^^^^^^^^

* Use the correct second argument of json_decode() : JSON_OBJECT_AS_ARRAY

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Structures/JsonWithOption |
+-------------+---------------------------+
| Rulesets    | :ref:`Suggestions`        |
+-------------+---------------------------+
| Exakt since | 1.4.3                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Major                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _list()-may-omit-variables:

list() May Omit Variables
+++++++++++++++++++++++++

 Simply omit any unused variable in a `list() <https://www.php.net/list>`_ call. 

`list() <https://www.php.net/list>`_ is the only PHP function that accepts to have omitted arguments. If the following code makes no usage of a listed variable, just omit it. 

.. code-block:: php

   <?php
       // No need for '2', so no assignation
       list ($a, , $b) = array(1, 2, 3);
       
       // works with PHP 7.1 short syntax
       [$a, , $b] = array(1, 2, 3);
   
       // No need for '2', so no assignation
       list ($a, $c, $b) = array(1, 2, 3);
   ?>


See also `list <https://www.php.net/manual/en/function.list.php>`_.



Suggestions
^^^^^^^^^^^

* Remove the unused variables from the list call
* When the ignored values are at the beginning or the end of the array, array_slice() may be used to shorten the array.

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------+
| Short name  | Structures/ListOmissions                                                                    |
+-------------+---------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Suggestions`                             |
+-------------+---------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                       |
+-------------+---------------------------------------------------------------------------------------------+
| Php Version | All                                                                                         |
+-------------+---------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                       |
+-------------+---------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                             |
+-------------+---------------------------------------------------------------------------------------------+
| Precision   | Very high                                                                                   |
+-------------+---------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-openconf-structures-listomissions`, :ref:`case-fuelcms-structures-listomissions` |
+-------------+---------------------------------------------------------------------------------------------+


.. _logical-mistakes:

Logical Mistakes
++++++++++++++++

 Avoid logical mistakes within long expressions. 

Sometimes, the logic is not what it seems. It is important to check the actual impact of every part of the logical expression. Do not hesitate to make a table with all possible cases. If those cases are too numerous, it may be time to rethink the whole expression. 

.. code-block:: php

   <?php 
   
   // Always true
   if ($a != 1 || $a != 2) { } 
   
   // $a == 1 is useless
   if ($a == 1 || $a != 2) {}
   
   // Always false
   if ($a == 1 && $a == 2) {}
   
   // $a != 2 is useless
   if ($a == 1 && $a != 2) {}
   
   ?>


Based on article from ``Andrey Karpov``  `Logical Expressions in C/C++. Mistakes Made by Professionals <http://www.viva64.com/en/b/0390/>`_



Suggestions
^^^^^^^^^^^

* Change the expressions for them to have a real meaning

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------+
| Short name  | Structures/LogicalMistakes                                                                          |
+-------------+-----------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                         |
+-------------+-----------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                               |
+-------------+-----------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                 |
+-------------+-----------------------------------------------------------------------------------------------------+
| Severity    | Critical                                                                                            |
+-------------+-----------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                     |
+-------------+-----------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                |
+-------------+-----------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-dolibarr-structures-logicalmistakes`, :ref:`case-cleverstyle-structures-logicalmistakes` |
+-------------+-----------------------------------------------------------------------------------------------------+


.. _lone-blocks:

Lone Blocks
+++++++++++

 Any grouped code without a commanding structure is useless. 

Blocks are compulsory when defining a structure, such as a class or a function. They are most often used with flow control instructions, like if then or switch. 

Blocks are also valid syntax that group several instructions together, though they have no effect at all, except confuse the reader. Most often, it is a ruin from a previous flow control instruction, whose condition was removed or commented. They should be removed. 

.. code-block:: php

   <?php
   
       // Lone block
       //foreach($a as $b) 
       {
           $b++;
       }
   ?>




Suggestions
^^^^^^^^^^^

* Remove the useless curly brackets

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------+
| Short name  | Structures/LoneBlock                                                               |
+-------------+------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                        |
+-------------+------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                              |
+-------------+------------------------------------------------------------------------------------+
| Php Version | All                                                                                |
+-------------+------------------------------------------------------------------------------------+
| Severity    | Minor                                                                              |
+-------------+------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                   |
+-------------+------------------------------------------------------------------------------------+
| Precision   | High                                                                               |
+-------------+------------------------------------------------------------------------------------+
| Examples    | :ref:`case-thinkphp-structures-loneblock`, :ref:`case-tine20-structures-loneblock` |
+-------------+------------------------------------------------------------------------------------+


.. _long-arguments:

Long Arguments
++++++++++++++

 Long arguments should be put in variable, to preserve readability. 

When literal arguments are too long, they `break <https://www.php.net/manual/en/control-structures.break.php>`_ the hosting structure by moving the next argument too far on the right. Whenever possible, long arguments should be set in a local variable to keep the readability.

.. code-block:: php

   <?php
   
   // Now the call to foo() is easier to read.
   $reallyBigNumber = <<<BIGNUMBER
   123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
   BIGNUMBER
   foo($reallyBigNumber, 2, '12345678901234567890123456789012345678901234567890');
   
   // where are the next arguments ? 
   foo('123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890', 2, '123456789012345678901234567890123456789012345678901234567890');
   
   // This is still difficult to read
   foo(<<<BIGNUMBER
   123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
   BIGNUMBER
   , 2, '123456789012345678901234567890123456789012345678901234567890');
   
   ?>


Literal strings and heredoc strings, including variables, that are over 50 chars longs are reported here. 



Suggestions
^^^^^^^^^^^

* Put the long arguments in a separate variable, and use the variable in the second expression, reducing its total length

+-------------+---------+---------+---------------------------------------------------------------------------+
| Name        | Default | Type    | Description                                                               |
+-------------+---------+---------+---------------------------------------------------------------------------+
| codeTooLong | 100     | integer | Minimum size of a functioncall or a methodcall to be considered too long. |
+-------------+---------+---------+---------------------------------------------------------------------------+



Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------+
| Short name  | Structures/LongArguments                                                                      |
+-------------+-----------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                |
+-------------+-----------------------------------------------------------------------------------------------+
| Exakt since | 0.9.7                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------+
| Php Version | All                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                               |
+-------------+-----------------------------------------------------------------------------------------------+
| Precision   | High                                                                                          |
+-------------+-----------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-cleverstyle-structures-longarguments`, :ref:`case-contao-structures-longarguments` |
+-------------+-----------------------------------------------------------------------------------------------+


.. _too-long-a-block:

Too Long A Block
++++++++++++++++

 The loop is operating on a block that is too long. 

This analysis is applied to loops (for, foreach, while, do..while) and if/then/else/elseif structures.

Then length of a block is managed with the ``longBlock`` parameter. By default, it is 200 lines, from beginning to the end. Comments are taken into account.

.. code-block:: php

   <?php
   
   $i = 0;
   do {
       // 200 lines of PHP code
       
       ++$i;
   } while($i < 100);
   
   ?>




Suggestions
^^^^^^^^^^^

* Move the code of the block to an method or a function
* Move part of the code of the block to methods or functions
* Extract repeated patterns and use them

+-----------+---------+---------+---------------------------------------------------------------------------------------------------------------------------+
| Name      | Default | Type    | Description                                                                                                               |
+-----------+---------+---------+---------------------------------------------------------------------------------------------------------------------------+
| longBlock | 200     | integer | Size of a block for it to be too long. A block is commanded by a for, foreach, while, do...while, if/then else structure. |
+-----------+---------+---------+---------------------------------------------------------------------------------------------------------------------------+



Specs
^^^^^
+-------------+----------------------+
| Short name  | Structures/LongBlock |
+-------------+----------------------+
| Rulesets    | :ref:`Suggestions`   |
+-------------+----------------------+
| Exakt since | 2.1.2                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Quick (30 mins)      |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _mail-usage:

Mail Usage
++++++++++

 Report usage of mail from PHP. 

The analysis is based on `mail() <https://www.php.net/mail>`_ function and various classes used to send mail.

.. code-block:: php

   <?php
   // The message
   $message = Line 1\r\nLine 2\r\nLine 3;
   
   // In case any of our lines are larger than 70 characters, we should use wordwrap()
   $message = wordwrap($message, 70, \r\n);
   
   // Send
   mail('caffeinated@example.com', 'My Subject', $message);
   ?>


See also `mail <https://www.php.net/mail>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Structures/MailUsage |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _max-level-of-nesting:

Max Level Of Nesting
++++++++++++++++++++

 Avoid nesting structures too deep, as it hurts readability.

Nesting structures are : if/then, switch, for, foreach, while, do...while. Ternary operator, try/catch are not considered a nesting structures.

Closures, and more generally, functions definitions are counted separatedly. 

This analysis checks for 4 levels of nesting, by default. This may be changed by configuration.

.. code-block:: php

   <?php
   
   // 5 levels of indentation
   function foo() {
       if (1) {
           if (2) {
               if (3) {
                   if (4) {
                       if (5) {
                           51;
                       } else {
                           5;
                       }
                   } else {
                       4;
                   }
               } else {
                   3;
               }
           } else {
               2;
           }
       } else {
           1;
       }
   }
   
   // 2 levels of indentation
   function foo() {
       if (1) {
           if (2) {
               // 3 levels of indentation
               return function () {
                   if (3) {
                       if (4) {
                           if (5) {
                               51;
                           } else {
                               5;
                           }
                       } else {
                           4;
                       }
                   } else {
                       3;
                   }
               }
           } else {
               2;
           }
       } else {
           1;
       }
   }
   
   
   ?>



Suggestions
^^^^^^^^^^^

* Refactor code to avoid nesting
* Export some nested blocks to an external method or function

+----------+---------+---------+---------------------------------------------------------------------+
| Name     | Default | Type    | Description                                                         |
+----------+---------+---------+---------------------------------------------------------------------+
| maxLevel | 4       | integer | Maximum level of nesting for control flow structures in one scope.  |
+----------+---------+---------+---------------------------------------------------------------------+



Specs
^^^^^
+-------------+---------------------------------+
| Short name  | Structures/MaxLevelOfIdentation |
+-------------+---------------------------------+
| Rulesets    | :ref:`Analyze`                  |
+-------------+---------------------------------+
| Exakt since | 1.9.3                           |
+-------------+---------------------------------+
| Php Version | All                             |
+-------------+---------------------------------+
| Severity    | Minor                           |
+-------------+---------------------------------+
| Time To Fix | Quick (30 mins)                 |
+-------------+---------------------------------+
| Precision   | High                            |
+-------------+---------------------------------+


.. _mbstring-third-arg:

Mbstring Third Arg
++++++++++++++++++

 Some mbstring functions use the third argument for offset, not for encoding.

Those are the following functions : 

* `mb_strrichr() <https://www.php.net/mb_strrichr>`_
* `mb_stripos() <https://www.php.net/mb_stripos>`_
* `mb_strrpos() <https://www.php.net/mb_strrpos>`_
* `mb_strstr() <https://www.php.net/mb_strstr>`_
* `mb_stristr() <https://www.php.net/mb_stristr>`_
* `mb_strpos() <https://www.php.net/mb_strpos>`_
* `mb_strripos() <https://www.php.net/mb_strripos>`_
* `mb_strrchr() <https://www.php.net/mb_strrchr>`_
* `mb_strrichr() <https://www.php.net/mb_strrichr>`_
* `mb_substr() <https://www.php.net/mb_substr>`_

.. code-block:: php

   <?php
   
   // Display BC
   echo mb_substr('ABC', 1 , 2, 'UTF8');
   
   // Yields Warning: mb_substr() expects parameter 3 to be int, string given
   // Display 0 (aka, substring from 0, for length (int) 'UTF8' => 0)
   echo mb_substr('ABC', 1 ,'UTF8');
   
   ?>


See also `mb_substr() <https://www.php.net/mb_substr>`_ manual pages.



Suggestions
^^^^^^^^^^^

* Add a third argument
* Use the default encoding (aka, omit both third AND fourth argument)

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/MbstringThirdArg                 |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 1.9.9                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _mbstring-unknown-encoding:

Mbstring Unknown Encoding
+++++++++++++++++++++++++

 The encoding used is not known to the ext/mbstring extension.

This analysis takes in charge all ``mbstring`` encoding and aliases. The full list of supported mbstring encoding is available with `mb_list_encodings() <https://www.php.net/mb_list_encodings>`_. Each encoding alias is available with `mb_encoding_aliases() <https://www.php.net/mb_encoding_aliases>`_.

.. code-block:: php

   <?php
   
   // Invalid encoding
   $str = mb_strtolower($str, 'utf_8');
   
   // Valid encoding
   $str = mb_strtolower($str, 'utf8');
   $str = mb_strtolower($str, 'UTF8');
   $str = mb_strtolower($str, 'UTF-8');
   
   ?>


See also `ext/mbstring <http://www.php.net/manual/en/book.mbstring.php>`_.


Suggestions
^^^^^^^^^^^

* Use a valid mbstring encoding

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/MbstringUnknownEncoding          |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 1.9.9                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _mcrypt\_create\_iv()-with-default-values:

mcrypt_create_iv() With Default Values
++++++++++++++++++++++++++++++++++++++

 Avoid using `mcrypt_create_iv() <https://www.php.net/manual/en/function.mcrypt-create-iv.php>`_ default values.

`mcrypt_create_iv() <https://www.php.net/manual/en/function.mcrypt-create-iv.php>`_ used to have ``MCRYPT_DEV_RANDOM`` as default values, and in PHP 5.6, it now uses ``MCRYPT_DEV_URANDOM``.

.. code-block:: php

   <?php
       $size = mcrypt_get_iv_size(MCRYPT_CAST_256, MCRYPT_MODE_CFB);
       // mcrypt_create_iv is missing the second argument
       $iv = mcrypt_create_iv($size);
   
   // Identical to the line below
   //    $iv = mcrypt_create_iv($size, MCRYPT_DEV_RANDOM);
   
   ?>


If the code doesn't have a second argument, it relies on the default value. It is recommended to set explicitly the value, so has to avoid problems while migrating.

See also `mcrypt_create_iv() <https://www.php.net/manual/en/function.mcrypt-create-iv.php>`_.

Specs
^^^^^
+-------------+----------------------------------------+
| Short name  | Structures/McryptcreateivWithoutOption |
+-------------+----------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP70`              |
+-------------+----------------------------------------+
| Exakt since | 0.8.4                                  |
+-------------+----------------------------------------+
| Php Version | 5.6-                                   |
+-------------+----------------------------------------+
| Severity    | Minor                                  |
+-------------+----------------------------------------+
| Time To Fix | Instant (5 mins)                       |
+-------------+----------------------------------------+
| Precision   | High                                   |
+-------------+----------------------------------------+


.. _merge-if-then:

Merge If Then
+++++++++++++

 Two successive if/then into one, by merging the two conditions.

.. code-block:: php

   <?php
   
   // two merge conditions
   if ($a == 1 && $b == 2) {
       // doSomething()
   }
   
   // two distinct conditions
   // two nesting
   if ($a == 1) {
       if ($b == 2) {
           // doSomething()
       }
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Merge the two structures into one

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/MergeIfThen                      |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 1.9.9                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _mismatched-ternary-alternatives:

Mismatched Ternary Alternatives
+++++++++++++++++++++++++++++++

 A ternary operator should yield the same type on both branches.

Ternary operator applies a condition, and yield two different results. Those results will then be processed by code that expects the same types. It is recommended to match the types on both branches of the ternary operator.

.. code-block:: php

   <?php
   
   // $object may end up in a very unstable state
   $object = ($type == 'Type') ? new $type() : null;
   
   //same result are provided by both alternative, though process is very different
   $result = ($type == 'Addition') ? $a + $b : $a * $b;
   
   //Currently, this is omitted
   $a = 1;
   $result = empty($condition) ? $a : 'default value';
   $result = empty($condition) ? $a : getDefaultValue();
   
   ?>




Suggestions
^^^^^^^^^^^

* Use compatible data type in both branch of the alternative
* Turn the ternary into a if/then, with different processing

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------+
| Short name  | Structures/MismatchedTernary                                                                         |
+-------------+------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Suggestions`                                                                   |
+-------------+------------------------------------------------------------------------------------------------------+
| Exakt since | 0.12.1                                                                                               |
+-------------+------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                  |
+-------------+------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                |
+-------------+------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                 |
+-------------+------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-phpadsnew-structures-mismatchedternary`, :ref:`case-openemr-structures-mismatchedternary` |
+-------------+------------------------------------------------------------------------------------------------------+


.. _missing-cases-in-switch:

Missing Cases In Switch
+++++++++++++++++++++++

 It seems that some cases are missing in this switch structure.

When comparing two different `switch() <https://www.php.net/manual/en/control-structures.switch.php>`_ structures, it appears that some cases are missing in one of them. The set of cases are almost identical, but one of the values are missing. 

`Switch() <https://www.php.net/manual/en/control-structures.switch.php>`_ structures using strings as literals are compared in this analysis. When the discrepancy between two lists is below 25%, both switches are reported.

.. code-block:: php

   <?php
   
   // This switch operates on a, b, c, d and default 
   switch($a) {
       case 'a': doSomethingA(); break 1;
       case 'b': doSomethingB(); break 1;
       case 'c': doSomethingC(); break 1;
       case 'd': doSomethingD(); break 1;
       default: doNothing();
   }
   
   // This switch operates on a, b, d and default 
   switch($o->p) {
       case 'a': doSomethingA(); break 1;
       case 'b': doSomethingB(); break 1;
   
       case 'd': doSomethingD(); break 1;
       default: doNothing();
   }
   
   ?>


In the example, one may argue that the 'c' case is actually handled by the 'default' case. Otherwise, business logic may request that omission. 



Suggestions
^^^^^^^^^^^

* Add the missing cases
* Add comments to mention that missing cases are processed in the default case

Specs
^^^^^
+-------------+----------------------------------------------+
| Short name  | Structures/MissingCases                      |
+-------------+----------------------------------------------+
| Rulesets    | :ref:`Analyze`                               |
+-------------+----------------------------------------------+
| Exakt since | 0.10.7                                       |
+-------------+----------------------------------------------+
| Php Version | All                                          |
+-------------+----------------------------------------------+
| Severity    | Minor                                        |
+-------------+----------------------------------------------+
| Time To Fix | Slow (1 hour)                                |
+-------------+----------------------------------------------+
| Precision   | High                                         |
+-------------+----------------------------------------------+
| Examples    | :ref:`case-tikiwiki-structures-missingcases` |
+-------------+----------------------------------------------+


.. _maybe-missing-new:

Maybe Missing New
+++++++++++++++++

 This functioncall looks like a class instantiation that is missing the new keyword.

Any function definition was found for that function, but a class with that name was. New is probably missing.

.. code-block:: php

   <?php
   
   // Functioncall
   $a = foo();
   
   // Class definition
   class foo {}
   // Function definition
   function foo {}
   
   
   // Functioncall
   $a = BAR;
   
   // Function definition
   class bar {}
   // Constant definition
   const BAR = 1;
   
   
   ?>




Suggestions
^^^^^^^^^^^

* Add the new
* Rename the class to distinguish it from the function
* Rename the function to distinguish it from the class

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Structures/MissingNew |
+-------------+-----------------------+
| Rulesets    | :ref:`Analyze`        |
+-------------+-----------------------+
| Exakt since | 1.0.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Critical              |
+-------------+-----------------------+
| Time To Fix | Instant (5 mins)      |
+-------------+-----------------------+
| Precision   | Medium                |
+-------------+-----------------------+


.. _missing-parenthesis:

Missing Parenthesis
+++++++++++++++++++

 Add parenthesis to those expression to prevent bugs. 

.. code-block:: php

   <?php
   
   // Missing some parenthesis!!
   if (!$a instanceof Stdclass) {
       print Not\n;
   } else {
       print Is\n;
   }
   
   // Could this addition be actually
   $c = -$a + $b;
   
   // This one ? 
   $c = -($a + $b);
   
   ?>


See also `Operators Precedence <https://www.php.net/manual/en/language.operators.precedence.php>`_.

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/MissingParenthesis               |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 1.2.6                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Major                                       |
+-------------+---------------------------------------------+
| Time To Fix | Instant (5 mins)                            |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _mixed-concat-and-interpolation:

Mixed Concat And Interpolation
++++++++++++++++++++++++++++++

 Mixed usage of concatenation and string interpolation is error prone. It is harder to read, and leads to overlooking the concatenation or the interpolation.

.. code-block:: php

   <?php
   
   // Concatenation string
   $a = $b . 'c' . $d;
   
   // Interpolation strings
   $a = {$b}c{$d};   // regular form
   $a = {$b}c$d;     // irregular form
   
   // Mixed Concatenation and Interpolation string
   $a = {$b}c . $d;
   $a = $b . c$d;
   $a = $b . c{$d};
   
   // Mixed Concatenation and Interpolation string with constant
   $a = {$b}c . CONSTANT;
   
   ?>


Fixing this issue has no impact on the output. It makes code less error prone.

There are some situations where using concatenation are compulsory : when using a constant, calling a function, running a complex expression or make use of the escape sequence. You may also consider pushing the storing of such expression in a local variable.



Suggestions
^^^^^^^^^^^

* Only use one type of variable usage : either interpolation, or concatenation

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/MixedConcatInterpolation                                                                               |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                                    |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.11.5                                                                                                            |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                               |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                             |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                   |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                              |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-suitecrm-structures-mixedconcatinterpolation`, :ref:`case-edusoho-structures-mixedconcatinterpolation` |
+-------------+-------------------------------------------------------------------------------------------------------------------+


.. _modernize-empty-with-expression:

Modernize Empty With Expression
+++++++++++++++++++++++++++++++

 `empty() <https://www.php.net/empty>`_ accepts expressions as argument. This feature was added in PHP 5.5. 

There is no need to store the expression in a variable before testing, unless it is reused later.

.. code-block:: php

   <?php
   
   // PHP 5.5+ empty() usage
   if (empty(foo($b . $c))) {
       doSomethingWithoutA();
   }
   
   // Compatible empty() usage
   $a = foo($b . $c);
   if (empty($a)) {
       doSomethingWithoutA();
   }
   
   // $a2 is reused, storage is legit
   $a2 = strtolower($b . $c);
   if (empty($a2)) {
       doSomething();
   } else {
       echo $a2;
   }
   
   ?>


See also `empty() <https://www.php.net/empty>`_ and `empty() supports arbitrary expressions <https://www.php.net/manual/en/migration55.new-features.php#migration55.new-features.empty>`_.


Suggestions
^^^^^^^^^^^

* Avoid the temporary variable, and use directly empty()

Specs
^^^^^
+-------------+------------------------+
| Short name  | Structures/ModernEmpty |
+-------------+------------------------+
| Rulesets    | :ref:`Analyze`         |
+-------------+------------------------+
| Exakt since | 0.8.6                  |
+-------------+------------------------+
| Php Version | 5.5+                   |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Quick (30 mins)        |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _multiple-catch:

Multiple Catch
++++++++++++++

 Indicates if a try structure have several catch statement.

.. code-block:: php

   <?php
   
   // This try has several catch
   try {
       doSomething();
   } catch (RuntimeException $e) {
       processRuntimeException();
   } catch (OtherException $e) {
       processOtherException();
   }
   
   ?>

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Structures/MultipleCatch |
+-------------+--------------------------+
| Rulesets    | :ref:`CE`                |
+-------------+--------------------------+
| Exakt since | 0.8.4                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Slow (1 hour)            |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _multiples-identical-case:

Multiples Identical Case
++++++++++++++++++++++++

 Some cases are defined multiple times, but only one will be processed. Check the list of cases, and remove the extra one.

Exakat tries to find the value of the case as much as possible, and ignore any dynamic cases (using variables).

.. code-block:: php

   <?php
   
   const A = 1;
   
   case ($x) {
       case 1 : 
           break;
       case true:    // This is a duplicate of the previous
           break; 
       case 1 + 0:   // This is a duplicate of the previous
           break; 
       case 1.0 :    // This is a duplicate of the previous
           break; 
       case A :      // The A constant is actually 1
           break; 
       case $y  :    // This is not reported.
           break; 
       default:
           
   }
   ?>



Suggestions
^^^^^^^^^^^

* Remove the double case
* Change the case to another and rightful value

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/MultipleDefinedCase                                                                                   |
+-------------+------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                            |
+-------------+------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                              |
+-------------+------------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                            |
+-------------+------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                  |
+-------------+------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                             |
+-------------+------------------------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-duplicate-case <https://github.com/dseguy/clearPHP/tree/master/rules/no-duplicate-case.md>`__                |
+-------------+------------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-sugarcrm-structures-multipledefinedcase`, :ref:`case-expressionengine-structures-multipledefinedcase` |
+-------------+------------------------------------------------------------------------------------------------------------------+


.. _multiple-type-variable:

Multiple Type Variable
++++++++++++++++++++++

 Avoid using the same variable with different types of data. 

It is recommended to use different names for differently typed data, while processing them. This prevents errors where one believe the variable holds the former type, while it has already been cast to the later.

Incrementing variables, with math operations or concatenation, is OK : the content changes, but not the type. And casting the variable without storing it in itself is OK. 

.. code-block:: php

   <?php
   
   // $x is an array
   $x = range('a', 'z');
   // $x is now a string
   $x = join('', $x);
   $c = count($x); // $x is not an array anymore
   
   
   // $letters is an array
   $letters = range('a', 'z');
   // $alphabet is a string
   $alphabet = join('', $letters);
   
   // Here, $letters is cast by PHP, but the variable is changed.
   if ($letters) { 
       $count = count($letters); // $letters is still an array 
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Use a class that accepts one type of argument, and exports another type of argument.
* Use different variable for each type of data format : $rows (for array), $list (for implode('', $rows))
* Pass the final result as argument to another method, avoiding the temporary variable

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------------------+
| Short name  | Structures/MultipleTypeVariable                                                                        |
+-------------+--------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                         |
+-------------+--------------------------------------------------------------------------------------------------------+
| Exakt since | 0.12.15                                                                                                |
+-------------+--------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                    |
+-------------+--------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                  |
+-------------+--------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                        |
+-------------+--------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                   |
+-------------+--------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-typo3-structures-multipletypevariable`, :ref:`case-vanilla-structures-multipletypevariable` |
+-------------+--------------------------------------------------------------------------------------------------------+


.. _multiple-unset():

Multiple Unset()
++++++++++++++++

 `Unset() <https://www.php.net/unset>`_ accepts multiple arguments, unsetting them one after each other. It is more efficient to call `unset() <https://www.php.net/unset>`_ once, than multiple times.

.. code-block:: php

   <?php
   
   // One call to unset only
   unset($a, $b, $c, $d);
   
   // Too many calls to unset
   unset($a);
   unset($b);
   unset($c);
   unset($d);
   
   ?>


See also `unset <https://www.php.net/unset>`_.


Suggestions
^^^^^^^^^^^

* Merge all unset into one call

Specs
^^^^^
+-------------+-------------------------------------------+
| Short name  | Structures/MultipleUnset                  |
+-------------+-------------------------------------------+
| Rulesets    | :ref:`Suggestions`, :ref:`php-cs-fixable` |
+-------------+-------------------------------------------+
| Exakt since | 1.7.6                                     |
+-------------+-------------------------------------------+
| Php Version | All                                       |
+-------------+-------------------------------------------+
| Severity    | Minor                                     |
+-------------+-------------------------------------------+
| Time To Fix | Quick (30 mins)                           |
+-------------+-------------------------------------------+
| Precision   | High                                      |
+-------------+-------------------------------------------+


.. _multiply-by-one:

Multiply By One
+++++++++++++++

 Multiplying by 1 is a fancy type cast. 

If it is used to type cast a value to number, then casting (int) or (float) is clearer. This behavior may change with PHP 7.1, which has unified the behavior of all hidden casts. 

.. code-block:: php

   <?php
   
   // Still the same value than $m, but now cast to integer or float
   $m = $m * 1; 
   
   // Still the same value than $m, but now cast to integer or float
   $n *= 1; 
   
   // make typecasting clear, and merge it with the producing call.
   $n = (int) $n;
   
   ?>


See also `Type Juggling <https://www.php.net/manual/en/language.types.type-juggling.php>`_



Suggestions
^^^^^^^^^^^

* Typecast to (int) or (float) for better readability
* Skip useless math operation altogether

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------+
| Short name  | Structures/MultiplyByOne                                                                      |
+-------------+-----------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                   |
+-------------+-----------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------+
| Php Version | All                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                              |
+-------------+-----------------------------------------------------------------------------------------------+
| Precision   | High                                                                                          |
+-------------+-----------------------------------------------------------------------------------------------+
| ClearPHP    | `no-useless-math <https://github.com/dseguy/clearPHP/tree/master/rules/no-useless-math.md>`__ |
+-------------+-----------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-sugarcrm-structures-multiplybyone`, :ref:`case-edusoho-structures-multiplybyone`   |
+-------------+-----------------------------------------------------------------------------------------------+


.. _named-regex:

Named Regex
+++++++++++

 Captured subpatterns may be named, for easier reference. 

From the manual : It is possible to name a subpattern using the syntax ``(?P<name>pattern)``. This subpattern will then be indexed in the matches array by its normal numeric position and also by name. PHP 5.2.2 introduced two alternative syntaxes ``(?<name>pattern)`` and ``(?'name'pattern)``.

Naming subpatterns makes it easier to know what is read from the results of the subpattern : for example, ``$r['name']`` has more meaning than ``$r[1]``. 

Named subpatterns may also be shifted in the regex without impact on the resulting array. 

.. code-block:: php

   <?php
   
   $x = 'abc';
   preg_match_all('/(?<name>a)/', $x, $r);
   print_r($r[1]);
   print_r($r['name']);
   
   preg_match("/(?<name>a)(?'sub'b)/", $x, $s);
   print $s[2];
   print $s['sub'];
   
   ?>


See also `Subpatterns <https://www.php.net/manual/en/regexp.reference.subpatterns.php>`_.

 

Suggestions
^^^^^^^^^^^

* Use named regex, and stop using integer-named subpatterns

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------+
| Short name  | Structures/NamedRegex                                                               |
+-------------+-------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Suggestions`                                                                  |
+-------------+-------------------------------------------------------------------------------------+
| Exakt since | 1.4.9                                                                               |
+-------------+-------------------------------------------------------------------------------------+
| Php Version | All                                                                                 |
+-------------+-------------------------------------------------------------------------------------+
| Severity    | Minor                                                                               |
+-------------+-------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                       |
+-------------+-------------------------------------------------------------------------------------+
| Precision   | High                                                                                |
+-------------+-------------------------------------------------------------------------------------+
| Examples    | :ref:`case-phinx-structures-namedregex`, :ref:`case-shopware-structures-namedregex` |
+-------------+-------------------------------------------------------------------------------------+


.. _negative-power:

Negative Power
++++++++++++++

 The power operator `** <https://www.php.net/manual/en/language.operators.arithmetic.php>`_ has higher precedence than the sign operators + and -.

This means that -2 `** <https://www.php.net/manual/en/language.operators.arithmetic.php>`_ 2 == -4. It is in fact, -(2 `** <https://www.php.net/manual/en/language.operators.arithmetic.php>`_ 2). 

When using negative power, it is clearer to add parenthesis or to use the `pow() <https://www.php.net/pow>`_ function, which has no such ambiguity : 

.. code-block:: php

   <?php
   
   // -2 to the power of 2 (a square)
   pow(-2, 2) == 4;
   
   // minus 2 to the power of 2 (a negative square)
   -2 ** 2 == -(2 ** 2) == 4;
   
   ?>


Suggestions
^^^^^^^^^^^

* Avoid negative number, as operands of **
* Use parenthesis with negative numbers and **

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/NegativePow                      |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.8.4                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Major                                       |
+-------------+---------------------------------------------+
| Time To Fix | Instant (5 mins)                            |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _nested-ifthen:

Nested Ifthen
+++++++++++++

 Three levels of ifthen is too much. The method should be split into smaller functions.

.. code-block:: php

   <?php
   
   function foo($a, $b) {
       if ($a == 1) {
           // Second level, possibly too much already
           if ($b == 2) {
               
           }
       }
   }
   
   function bar($a, $b, $c) {
       if ($a == 1) {
           // Second level. 
           if ($b == 2) {
               // Third level level. 
               if ($c == 3) {
                   // Too much
               }
           }
       }
   }
   
   ?>

+--------------+---------+---------+------------------------------------------------------------+
| Name         | Default | Type    | Description                                                |
+--------------+---------+---------+------------------------------------------------------------+
| nestedIfthen | 3       | integer | Maximal number of acceptable nesting of if-then structures |
+--------------+---------+---------+------------------------------------------------------------+



Specs
^^^^^
+-------------+----------------------------------------------------------------------------------------------+
| Short name  | Structures/NestedIfthen                                                                      |
+-------------+----------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                               |
+-------------+----------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                        |
+-------------+----------------------------------------------------------------------------------------------+
| Php Version | All                                                                                          |
+-------------+----------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                        |
+-------------+----------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                              |
+-------------+----------------------------------------------------------------------------------------------+
| Precision   | High                                                                                         |
+-------------+----------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-livezilla-structures-nestedifthen`, :ref:`case-mediawiki-structures-nestedifthen` |
+-------------+----------------------------------------------------------------------------------------------+


.. _nested-loops:

Nested Loops
++++++++++++

 Nested loops happens when a loop (while, do..while, for, foreach), is used inside another loop. 

.. code-block:: php

   <?php
   
   // Nested loops
   foreach($array as $a) {
       foreach ($letters as $b) {
           // This is performed count($array) * count($letters) times. 
           doSomething();
       }
   }
   
   ?>


Such structure tends to require a lot of processing, as the size of both loops have to be multiplied to estimate the actual payload. They should be avoided as much as possible. This may no be always possible, though.

Nested loops are worth a check for performances reasons, as they will process a lot of times the same instructions.

Specs
^^^^^
+-------------+------------------------+
| Short name  | Structures/NestedLoops |
+-------------+------------------------+
| Rulesets    | :ref:`CE`              |
+-------------+------------------------+
| Exakt since | 0.8.4                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Slow (1 hour)          |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _nested-ternary:

Nested Ternary
++++++++++++++

 Ternary operators should not be nested too deep.

They are a convenient instruction to apply some condition, and avoid a if() structure. It works best when it is simple, like in a one liner. 

However, ternary operators tends to make the syntax very difficult to read when they are nested. It is then recommended to use an if() structure, and make the whole code readable.

.. code-block:: php

   <?php
   
   // Simple ternary expression
   echo ($a == 1 ? $b : $c) ;
   
   // Nested ternary expressions
   echo ($a === 1 ? $d === 2 ? $b : $d : $d === 3 ? $e : $c) ;
   echo ($a === 1 ? $d === 2 ? $f ===4 ? $g : $h : $d : $d === 3 ? $e : $i === 5 ? $j : $k) ;
   
   //Previous expressions, written as a if / Then expression
   if ($a === 1) {
       if ($d === 2) {
           echo $b;
       } else {
           echo $d;
       }
   } else {
       if ($d === 3) {
           echo $e;
       } else {
           echo $c;
       }
   }
   
   if ($a === 1) {
       if ($d === 2) {
           if ($f === 4) {
               echo $g;
           } else {
               echo $h;
           }
       } else {
           echo $d;
       }
   } else {
       if ($d === 3) {
           echo $e;
       } else {
           if ($i === 5) {
               echo $j;
           } else {
               echo $k;
           }
       }
   }
   
   ?>


See also `Nested Ternaries are Great <https://medium.com/javascript-scene/nested-ternaries-are-great-361bddd0f340>`_.



Suggestions
^^^^^^^^^^^

* Replace ternaries by if/then structures.
* Replace ternaries by a functioncall : this provides more readability, offset the actual code, and gives room for making it different.

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------+
| Short name  | Structures/NestedTernary                                                                          |
+-------------+---------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                       |
+-------------+---------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                             |
+-------------+---------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                               |
+-------------+---------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                             |
+-------------+---------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                   |
+-------------+---------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                              |
+-------------+---------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-nested-ternary <https://github.com/dseguy/clearPHP/tree/master/rules/no-nested-ternary.md>`__ |
+-------------+---------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-spip-structures-nestedternary`, :ref:`case-zencart-structures-nestedternary`           |
+-------------+---------------------------------------------------------------------------------------------------+


.. _always-positive-comparison:

Always Positive Comparison
++++++++++++++++++++++++++

 Some PHP native functions, such as `count() <https://www.php.net/count>`_, `strlen() <https://www.php.net/strlen>`_, or `abs() <https://www.php.net/abs>`_ only returns positive or null values. 

When comparing them to 0, the following expressions are always true and should be avoided. 

.. code-block:: php

   <?php
   
   $a = [1, 2, 3];
   
   var_dump(count($a) >= 0);
   var_dump(count($a) < 0); 
   
   ?>



Suggestions
^^^^^^^^^^^

* Compare count() to non-zero values
* Use empty()

Specs
^^^^^
+-------------+----------------------------------------------+
| Short name  | Structures/NeverNegative                     |
+-------------+----------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`  |
+-------------+----------------------------------------------+
| Exakt since | 0.8.4                                        |
+-------------+----------------------------------------------+
| Php Version | All                                          |
+-------------+----------------------------------------------+
| Severity    | Major                                        |
+-------------+----------------------------------------------+
| Time To Fix | Instant (5 mins)                             |
+-------------+----------------------------------------------+
| Precision   | High                                         |
+-------------+----------------------------------------------+
| Examples    | :ref:`case-magento-structures-nevernegative` |
+-------------+----------------------------------------------+


.. _new-line-style:

New Line Style
++++++++++++++

 New lines may be written with the sequence \n or with the constant PHP_EOL.

When one of those alternatives is used over 90% of the time, it is considered as standard : the remaining are reported.

\n are only located when used alone, in \n (including the double quotes). When \n is used inside a double-quoted string, its replacement with PHP_EOL would be cumbersome : as such, they are ignored by this analyzer.

.. code-block:: php

   <?php
   
   // This may be repeated over 10 times
   $a = PHP is a great language\n;
   $a .= \n;
   
   // This only appears once in the code : this line is reported.
   $b = $a.PHP_EOL.$c;
   
   ?>

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Structures/NewLineStyle |
+-------------+-------------------------+
| Rulesets    | none                    |
+-------------+-------------------------+
| Exakt since | 0.9.8                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _next-month-trap:

Next Month Trap
+++++++++++++++

 Avoid using +1 month with `strtotime() <https://www.php.net/strtotime>`_. 

`strtotime() <https://www.php.net/strtotime>`_ calculates the next month by incrementing the month number. For day number that do not exist from one month to the next, `strtotime() <https://www.php.net/strtotime>`_ fixes them by setting them in the next-next month. 

This happens to January, March, May, July, August and October. January is also vulnerable for 29 (not every year), 30 and 31. 

Avoid using '+1 month', and rely on 'first day of next month' or 'last day of next month' to extract the next month's name.

.. code-block:: php

   <?php
   
   // Base date is October 31 => 10/31
   // +1 month adds +1 to 10 => 11/31 
   // Since November 31rst doesn't exists, it is corrected to 12/01. 
   echo date('F', strtotime('+1 month',mktime(0,0,0,$i,31,2017))).PHP_EOL;
   
   // Base date is October 31 => 10/31
   echo date('F', strtotime('first day of next month',mktime(0,0,0,$i,31,2017))).PHP_EOL;
   
   ?>


See also `It is the 31st again <https://twitter.com/rasmus/status/925431734128197632>`_.


Suggestions
^^^^^^^^^^^

* Review strtotime() usage for month additions
* Use datetime() and other classes, not PHP native functions
* Use a external library, like carbon, to handle dates

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------+
| Short name  | Structures/NextMonthTrap                                                                  |
+-------------+-------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Top10`                                 |
+-------------+-------------------------------------------------------------------------------------------+
| Exakt since | 1.0.1                                                                                     |
+-------------+-------------------------------------------------------------------------------------------+
| Php Version | All                                                                                       |
+-------------+-------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                     |
+-------------+-------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                          |
+-------------+-------------------------------------------------------------------------------------------+
| Precision   | High                                                                                      |
+-------------+-------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-contao-structures-nextmonthtrap`, :ref:`case-edusoho-structures-nextmonthtrap` |
+-------------+-------------------------------------------------------------------------------------------+


.. _no-append-on-source:

No Append On Source
+++++++++++++++++++

 Do not append new elements to an array in a foreach loop. Since PHP 7.0, the array is still used as a source, and will be augmented, and used again. 

.. code-block:: php

   <?php
   
   // Relying on the initial copy
   $a = [1];
   $initial = $a;
   foreach($initial as $v) {
       $a[] = $v + 1;
   }
   
   // Keep new results aside
   $a = [1];
   $tmp = [];
   foreach($a as $v) {
       $tmp[] = $v + 1;
   }
   $a = array_merge($a, $tmp);
   unset($tmp);
   
   // Example, courtesy of Frederic Bouchery
   // This is an infinite loop
   $a = [1];
   foreach($a as $v) {
       $a[] = $v + 1;
   }
   
   ?>


Thanks to `Frederic Bouchery <https://twitter.com/FredBouchery/>`_ for the reminder.

See also `foreach <https://www.php.net/manual/en/control-structures.foreach.php>`_ and `What will this code return? #PHP <https://twitter.com/FredBouchery/status/1135480412703211520>`_.


Suggestions
^^^^^^^^^^^

* Use a copy of the source, to avoid modifying it during the loop
* Store the new values in a separate storage

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Structures/NoAppendOnSource |
+-------------+-----------------------------+
| Rulesets    | :ref:`Analyze`              |
+-------------+-----------------------------+
| Exakt since | 1.8.2                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Quick (30 mins)             |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _avoid-array\_unique():

Avoid array_unique()
++++++++++++++++++++

 The native function `array_unique() <https://www.php.net/array_unique>`_ is much slower than using other alternatives, such as `array_count_values() <https://www.php.net/array_count_values>`_, `array_flip() <https://www.php.net/array_flip>`_/`array_keys() <https://www.php.net/array_keys>`_, or even a `foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_ loops. 

.. code-block:: php

   <?php
   
   // using array_unique()
   $uniques = array_unique($someValues);
   
   // When values are strings or integers
   $uniques = array_keys(array_count_values($someValues));
   $uniques = array_flip(array_flip($someValues))
   
   //even some loops are faster.
   $uniques = [];
   foreach($someValues as $s) {
       if (!in_array($uniques, $s)) {
           $uniques[] $s;
       }
   }
   
   ?>


See also `array_unique <https://www.php.net/array_unique>`_.



Suggestions
^^^^^^^^^^^

* Upgrade to PHP 7.2
* Use an alternative way to make values unique in an array, using array_count_values(), for example.

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Structures/NoArrayUnique |
+-------------+--------------------------+
| Rulesets    | :ref:`Performances`      |
+-------------+--------------------------+
| Exakt since | 0.8.4                    |
+-------------+--------------------------+
| Php Version | 7.2-                     |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Quick (30 mins)          |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _avoid-large-array-assignation:

Avoid Large Array Assignation
+++++++++++++++++++++++++++++

 Avoid setting large arrays to local variables. This is done every time the function is called.

There are different ways to avoid this : inject the array, build the array once. Using an constant or even a global variable is faster.

The effect on small arrays (less than 10 elements) is not significant. Arrays with 10 elements or more are reported here. The effect is also more important on functions that are called often, or within loops.

.. code-block:: php

   <?php
   
   // with constants, for functions
   const ARRAY = array(1,2,3,4,5,6,7,8,9,10,11);
   function foo() {
       $array = ARRAY;
       //more code
   }
   
   // with class constants, for methods 
   class x {
       const ARRAY = array(1,2,3,4,5,6,7,8,9,10,11);
       function foo() {
           $array = self::ARRAY;
           //more code
       }
   }
   
   // with properties, for methods 
   class x {
       private $array = array(1,2,3,4,5,6,7,8,9,10,11);
       
       function foo() {
           $array = $this->array;
           //more code
       }
   }
   
   // injection, leveraging default values
   function foo($array = array(1,2,3,4,5,6,7,8,9,10,11)) {
       //more code
   }
   
   // local cache with static
   function foo() {
       static $array;
       if ($array === null) {
           $array = array(1,2,3,4,5,6,7,8,9,10,11);
       }
       
       //more code
   }
   
   // Avoid creating the same array all the time in a function
   class x {
       function foo() {
           // assign to non local variable is OK. 
           // Here, to a property, though it may be better in a __construct or as default values
           $this->s = array(1,2,3,4,5,6,7,8,9,10,11);
   
           // This is wasting resources, as it is done each time. 
           $array = array(1,2,3,4,5,6,7,8,9,10,11);
       }
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Make the literal a global constant or a class constant
* Make the literal an argument, so it is injected
* Make the literal an property, with it as default value

Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Structures/NoAssignationInFunction |
+-------------+------------------------------------+
| Rulesets    | :ref:`Performances`                |
+-------------+------------------------------------+
| Exakt since | 0.9.7                              |
+-------------+------------------------------------+
| Php Version | All                                |
+-------------+------------------------------------+
| Severity    | Minor                              |
+-------------+------------------------------------+
| Time To Fix | Slow (1 hour)                      |
+-------------+------------------------------------+
| Precision   | High                               |
+-------------+------------------------------------+


.. _don't-change-incomings:

Don't Change Incomings
++++++++++++++++++++++

 PHP hands over a lot of information using special variables like `$_GET <https://www.php.net/manual/en/reserved.variables.get.php>`_, `$_POST <https://www.php.net/manual/en/reserved.variables.post.php>`_, etc... Modifying those variables and those values inside variables means that the original content is lost, while it will still look like raw data, and, as such, will be untrustworthy.

.. code-block:: php

   <?php
   
   // filtering and keeping the incoming value. 
   $_DATA'id'] = (int) $_GET['id'];
   
   // filtering and changing the incoming value. 
   $_GET['id'] = strtolower($_GET['id']);
   
   ?>


It is recommended to put the modified values in another variable, and keep the original one intact.

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Structures/NoChangeIncomingVariables |
+-------------+--------------------------------------+
| Rulesets    | :ref:`Analyze`                       |
+-------------+--------------------------------------+
| Exakt since | 0.8.4                                |
+-------------+--------------------------------------+
| Php Version | All                                  |
+-------------+--------------------------------------+
| Severity    | Minor                                |
+-------------+--------------------------------------+
| Time To Fix | Slow (1 hour)                        |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _no-choice:

No Choice
+++++++++

 A conditional structure is being used, but both alternatives are the same, leading to the illusion of choice. 

Either the condition is useless, and may be removed, or the alternatives need to be distinguished.

.. code-block:: php

   <?php
   
   if ($condition == 2) {
       doSomething();
   } else {
       doSomething();
   }
   
   $condition == 2 ?     doSomething() :     doSomething();
   
   ?>





Suggestions
^^^^^^^^^^^

* Remove the conditional, and call the expression directly
* Replace one of the alternative with a distinct call
* Remove the whole conditional : it may end up being useless

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------+
| Short name  | Structures/NoChoice                                                                |
+-------------+------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Top10`                          |
+-------------+------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                              |
+-------------+------------------------------------------------------------------------------------+
| Php Version | All                                                                                |
+-------------+------------------------------------------------------------------------------------+
| Severity    | Major                                                                              |
+-------------+------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                   |
+-------------+------------------------------------------------------------------------------------+
| Precision   | High                                                                               |
+-------------+------------------------------------------------------------------------------------+
| Examples    | :ref:`case-nextcloud-structures-nochoice`, :ref:`case-zencart-structures-nochoice` |
+-------------+------------------------------------------------------------------------------------+


.. _no-direct-access:

No Direct Access
++++++++++++++++

 This expression protects files against direct access. It will kill the process if it realizes this is not supposed to be directly accessed.

Those expressions are used in applications and framework, to prevent direct access to definition files. 

.. code-block:: php

   <?php
   
     // CONSTANT_EXEC is defined in the main file of the application
     defined('CONSTANT_EXEC') or die('Access not allowed'); : Constant used!
   
   ?>

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Structures/NoDirectAccess |
+-------------+---------------------------+
| Rulesets    | :ref:`CE`                 |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _no-direct-usage:

No Direct Usage
+++++++++++++++

 The results of the following functions shouldn't be used directly, but checked first. 

For example, `glob() <https://www.php.net/glob>`_ returns an array, unless some error happens, in which case it returns a boolean (false). In such case, however rare it is, plugging `glob() <https://www.php.net/glob>`_ directly in a `foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_ loops will yield errors.

.. code-block:: php

   <?php
       // Used without check : 
       foreach(glob('.') as $file) { /* do Something */ }.
       
       // Used without check : 
       $files = glob('.');
       if (!is_array($files)) {
           foreach($files as $file) { /* do Something */ }.
       }
   ?>



Suggestions
^^^^^^^^^^^

* Check the return of the function before using it, in particular for false, or array().

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------+
| Short name  | Structures/NoDirectUsage                                                                 |
+-------------+------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                           |
+-------------+------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                    |
+-------------+------------------------------------------------------------------------------------------+
| Php Version | All                                                                                      |
+-------------+------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                    |
+-------------+------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                            |
+-------------+------------------------------------------------------------------------------------------+
| Precision   | High                                                                                     |
+-------------+------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-edusoho-structures-nodirectusage`, :ref:`case-xoops-structures-nodirectusage` |
+-------------+------------------------------------------------------------------------------------------+


.. _no-empty-regex:

No Empty Regex
++++++++++++++

 PHP regex don't accept empty regex, nor regex with alphanumeric delimiter.

Most of those errors happen at execution time, when the regex is build dynamically, but still may end empty. At compile time, such error are made when the code is not tested before commit.

.. code-block:: php

   <?php
   
   // No empty regex
   preg_match('', $string, $r); 
   
   // Delimiter must be non-alphanumerical
   preg_replace('1abc1', $string, $r); 
   
   // Delimiter must be non-alphanumerical
   preg_replace('1'.$regex.'1', $string, $r); 
   
   ?>


See also `PCRE <https://www.php.net/pcre>`_ and `Delimiters <https://www.php.net/manual/en/regexp.reference.delimiters.php>`_.


Suggestions
^^^^^^^^^^^

* Fix the regex by adding regex delimiters

Specs
^^^^^
+-------------+----------------------------------------------+
| Short name  | Structures/NoEmptyRegex                      |
+-------------+----------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`  |
+-------------+----------------------------------------------+
| Exakt since | 0.11.1                                       |
+-------------+----------------------------------------------+
| Php Version | All                                          |
+-------------+----------------------------------------------+
| Severity    | Critical                                     |
+-------------+----------------------------------------------+
| Time To Fix | Quick (30 mins)                              |
+-------------+----------------------------------------------+
| Precision   | High                                         |
+-------------+----------------------------------------------+
| Examples    | :ref:`case-tikiwiki-structures-noemptyregex` |
+-------------+----------------------------------------------+


.. _no-get\_class()-with-null:

No get_class() With Null
++++++++++++++++++++++++

 It is not possible to pass explicitly null to `get_class() <https://www.php.net/get_class>`_ to get the current's class name. Since PHP 7.2, one must call `get_class() <https://www.php.net/get_class>`_ without arguments to achieve that result.

.. code-block:: php

   <?php
   
   class A {
     public function f() {
       // Gets the classname
       $classname = get_class();
   
       // Gets the classname and a warning
       $classname = get_class(null);
     }
   }
   
   $a = new A();
   $a->f('get_class');
   
   ?>

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/NoGetClassNull                                                                                                                                                                                   |
+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70`, :ref:`CompatibilityPHP71`, :ref:`CompatibilityPHP72` |
+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 1.0.4                                                                                                                                                                                                       |
+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                                                                                                                         |
+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                                                                                                                       |
+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                                                                                                                            |
+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                                                                                        |
+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+


.. _no-hardcoded-hash:

No Hardcoded Hash
+++++++++++++++++

 Hash should never be hardcoded. 

Hashes may be MD5, SHA1, SHA512, Bcrypt or any other. Such values must be easily changed, for security reasons, and the source code is not the safest place to hide it. 

.. code-block:: php

   <?php
   
       // Those strings may be sha512 hashes. 
       // it is recomemdned to check if they are static or should be put into configuration
       $init512 = array( // initial values for SHA512
           '6a09e667f3bcc908', 'bb67ae8584caa73b', '3c6ef372fe94f82b', 'a54ff53a5f1d36f1', 
       );
   
       // strings which are obvious conversion are ignored 
       $decimal = intval('87878877', 12);
   ?>


See also `Salted Password Hashing - Doing it Right <https://crackstation.net/hashing-security.htm>`_ and `Hash-Buster <https://github.com/s0md3v/Hash-Buster>`_.


Suggestions
^^^^^^^^^^^

* Put any hardcoded hash in a configuration file, a database or a environment variable. An external source.

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------------+
| Short name  | Structures/NoHardcodedHash                                                                       |
+-------------+--------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Security`                                                                  |
+-------------+--------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                            |
+-------------+--------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                              |
+-------------+--------------------------------------------------------------------------------------------------+
| Severity    | Critical                                                                                         |
+-------------+--------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                    |
+-------------+--------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                             |
+-------------+--------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-shopware-structures-nohardcodedhash`, :ref:`case-sugarcrm-structures-nohardcodedhash` |
+-------------+--------------------------------------------------------------------------------------------------+


.. _no-hardcoded-ip:

No Hardcoded Ip
+++++++++++++++

 Do not leave hard coded IP in your code.

It is recommended to move such configuration in external files or databases, for each update. 
This may also come handy when testing. 

.. code-block:: php

   <?php
   
   // This IPv4 is hardcoded. 
   $ip = '183.207.224.50';
   // This IPv6 is hardcoded. 
   $ip = '2001:0db8:85a3:0000:0000:8a2e:0370:7334';
   
   // This looks like an IP
   $thisIsNotAnIP = '213.187.99.50';
   $thisIsNotAnIP = '2133:1387:9393:5330';
   
   ?>


``127.0.0.1``, ``\:\:1`` and ``\:\:0`` are omitted, and not considered as a violation.

See also `Use of Hardcoded IPv4 Addresses <https://docs.microsoft.com/en-us/windows/desktop/winsock/use-of-hardcoded-ipv4-addresses-2>`_ and `Never hard code sensitive information <https://wiki.sei.cmu.edu/confluence/display/java/MSC03-J.+Never+hard+code+sensitive+information>`_.



Suggestions
^^^^^^^^^^^

* Move the hardcoded IP to an external source : environment variable, configuration file, database.
* Remove the hardcoded IP and ask for it at execution.
* Use a literal value for default messages in form.

Specs
^^^^^
+-------------+----------------------------------------------------------------------------------------------+
| Short name  | Structures/NoHardcodedIp                                                                     |
+-------------+----------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Security`                                                              |
+-------------+----------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                        |
+-------------+----------------------------------------------------------------------------------------------+
| Php Version | All                                                                                          |
+-------------+----------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                        |
+-------------+----------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                |
+-------------+----------------------------------------------------------------------------------------------+
| Precision   | High                                                                                         |
+-------------+----------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-openemr-structures-nohardcodedip`, :ref:`case-nextcloud-structures-nohardcodedip` |
+-------------+----------------------------------------------------------------------------------------------+


.. _no-hardcoded-path:

No Hardcoded Path
+++++++++++++++++

 It is not recommended to use hardcoded literals when designating files. Full paths are usually tied to one file system organization. As soon as the organisation changes or must be adapted to any external constraint, the path is not valid anymore.

Either use `__FILE__ <https://www.php.net/manual/en/language.constants.predefined.php>`_ and `__DIR__ <https://www.php.net/manual/en/language.constants.predefined.php>`_ to make the path relative to the current file; use a ``DOC_ROOT`` as a configuration constant that will allow the moving of the script to another folder; finally functions like `sys_get_temp_dir() <https://www.php.net/sys_get_temp_dir>`_ produce a viable temporary folder.

Relative paths are relative to the current execution directory, and not the current file. This means they may differ depending on the location of the start of the application, and are sensitive to `chdir() <https://www.php.net/chdir>`_ and `chroot() <https://www.php.net/chroot>`_ usage.

.. code-block:: php

   <?php
   
       // This depends on the current executed script
       file_get_contents('token.txt');
   
       // Exotic protocols are ignored
       file_get_contents('jackalope://file.txt');
   
       // Some protocols are ignored : http, https, ftp, ssh2, php (with memory)
       file_get_contents('http://www.php.net/');
       file_get_contents('php://memory/');
       
       // glob() with special chars * and ? are not reported
       glob('./*/foo/bar?.txt');
       // glob() without special chars * and ? are reported
       glob('/foo/bar/');
       
   ?>




Suggestions
^^^^^^^^^^^

* Add __DIR__ before the path to make it relative to the current file
* Add a configured prefix before the path to point to any file in the system
* Use sys_get_temp_dir() for temporary data
* Use ``include_path`` argument function, such as fie_get_contents(), to have the file located in configurable directories.

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------+
| Short name  | Structures/NoHardcodedPath                                                                        |
+-------------+---------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                    |
+-------------+---------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                             |
+-------------+---------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                               |
+-------------+---------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                             |
+-------------+---------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                     |
+-------------+---------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                              |
+-------------+---------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-hardcoded-path <https://github.com/dseguy/clearPHP/tree/master/rules/no-hardcoded-path.md>`__ |
+-------------+---------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-tine20-structures-nohardcodedpath`, :ref:`case-thelia-structures-nohardcodedpath`      |
+-------------+---------------------------------------------------------------------------------------------------+


.. _no-hardcoded-port:

No Hardcoded Port
+++++++++++++++++

 When connecting to a remove server, port is an important information. It is recommended to make this configurable (with constant or configuration), to as to be able to change this value without changing the code.

.. code-block:: php

   <?php
   
       // Both configurable IP and hostname
       $connection = ssh2_connect($_ENV['SSH_HOST'], $_ENV['SSH_PORT'], $methods, $callbacks);
       
       // Both hardcoded IP and hostname
       $connection = ssh2_connect('shell.example.com', 22, $methods, $callbacks);
   
       if (!$connection) die('Connection failed');
   ?>




Suggestions
^^^^^^^^^^^

* Move the port to a configuration file, an environment variable

Specs
^^^^^
+-------------+--------------------------------------------------+
| Short name  | Structures/NoHardcodedPort                       |
+-------------+--------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Security`                  |
+-------------+--------------------------------------------------+
| Exakt since | 0.8.4                                            |
+-------------+--------------------------------------------------+
| Php Version | All                                              |
+-------------+--------------------------------------------------+
| Severity    | Minor                                            |
+-------------+--------------------------------------------------+
| Time To Fix | Quick (30 mins)                                  |
+-------------+--------------------------------------------------+
| Precision   | High                                             |
+-------------+--------------------------------------------------+
| Examples    | :ref:`case-wordpress-structures-nohardcodedport` |
+-------------+--------------------------------------------------+


.. _no-isset()-with-empty():

No isset() With empty()
+++++++++++++++++++++++

 `empty() <https://www.php.net/empty>`_ actually does the job of `isset() <https://www.www.php.net/isset>`_ too. 

From the manual : ``No warning is generated if the variable does not exist. That means `empty() <https://www.php.net/empty>`_ is essentially the concise equivalent to !`isset( <https://www.www.php.net/isset>`_$var) || $var == false.`` The main difference is that `isset() <https://www.www.php.net/isset>`_ only works with variables, while `empty() <https://www.php.net/empty>`_ works with other structures, such as constants.

.. code-block:: php

   <?php
   
   
   // Enough validation
   if (!empty($a)) {
       doSomething();
   }
   
   // Too many tests
   if (isset($a) && !empty($a)) {
       doSomething();
   }
   
   ?>


See also `Isset <http://www.php.net/`isset <https://www.www.php.net/isset>`_>`_ and `empty <http://www.php.net/empty>`_.


Suggestions
^^^^^^^^^^^

* Only use isset(), just drop the empty()
* Only use empty(), just drop the empty()
* Use a null value, so the variable is always set

Specs
^^^^^
+-------------+-----------------------------------------------+
| Short name  | Structures/NoIssetWithEmpty                   |
+-------------+-----------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`   |
+-------------+-----------------------------------------------+
| Exakt since | 0.8.7                                         |
+-------------+-----------------------------------------------+
| Php Version | All                                           |
+-------------+-----------------------------------------------+
| Severity    | Minor                                         |
+-------------+-----------------------------------------------+
| Time To Fix | Instant (5 mins)                              |
+-------------+-----------------------------------------------+
| Precision   | High                                          |
+-------------+-----------------------------------------------+
| Examples    | :ref:`case-xoops-structures-noissetwithempty` |
+-------------+-----------------------------------------------+


.. _non-breakable-space-in-names:

Non Breakable Space In Names
++++++++++++++++++++++++++++

 PHP allows non-breakable spaces in structures names, such as class, interfaces, traits, and variables.

This may be a nice trick to make names more readable outside code context, like long-named methods for tests. 

.. code-block:: php

   <?php
   
   class class with non breakable spaces {}
   
   class ClassWithoutNonBreakableSpaces {}
   
   ?>


See also the original post by ``Matthieu Napoli`` : `Using non-breakable spaces in test method names <http://mnapoli.fr/using-non-breakable-spaces-in-test-method-names/>`_ and `PHP Variable Names <http://schappo.blogspot.nl/2015/06/php-variable-names.html>`_.

Specs
^^^^^
+-------------+-------------------------------------+
| Short name  | Structures/NonBreakableSpaceInNames |
+-------------+-------------------------------------+
| Rulesets    | :ref:`CE`                           |
+-------------+-------------------------------------+
| Exakt since | 0.12.0                              |
+-------------+-------------------------------------+
| Php Version | All                                 |
+-------------+-------------------------------------+
| Severity    | Minor                               |
+-------------+-------------------------------------+
| Time To Fix | Slow (1 hour)                       |
+-------------+-------------------------------------+
| Precision   | High                                |
+-------------+-------------------------------------+


.. _no-need-for-else:

No Need For Else
++++++++++++++++

 Else is not needed when the Then ends with a `break <https://www.php.net/manual/en/control-structures.break.php>`_. A `break <https://www.php.net/manual/en/control-structures.break.php>`_ may be the following keywords : `break <https://www.php.net/manual/en/control-structures.break.php>`_, `continue <https://www.php.net/manual/en/control-structures.continue.php>`_, return, goto. Any of these send the execution somewhere in the code. The else block is then executed as the main sequence, only if the condition fails.

.. code-block:: php

   <?php
   
   function foo() {
       // Else may be in the main sequence.
       if ($a1) {
           return $a1;
       } else {
           $a++;
       }
   
       // Same as above, but negate the condition : if (!$a2) { return $a2; }
       if ($a2) {
           $a++;
       } else {
           return $a2;
       }
   
       // This is OK
       if ($a3) {
           return;
       }
   
       // This has no break
       if ($a4) {
           $a++;
       } else {
           $b++;
       }
   
       // This has no else
       if ($a5) {
           $a++;
       }
   }
   ?>


See also `Object Calisthenics, rule # 2 <http://williamdurand.fr/2013/06/03/object-calisthenics/>`_.



Suggestions
^^^^^^^^^^^

* Remove else block, but keep the code

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------+
| Short name  | Structures/NoNeedForElse                                                                   |
+-------------+--------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                             |
+-------------+--------------------------------------------------------------------------------------------+
| Exakt since | 0.10.4                                                                                     |
+-------------+--------------------------------------------------------------------------------------------+
| Php Version | All                                                                                        |
+-------------+--------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                      |
+-------------+--------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                            |
+-------------+--------------------------------------------------------------------------------------------+
| Precision   | High                                                                                       |
+-------------+--------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-thelia-structures-noneedforelse`, :ref:`case-thinkphp-structures-noneedforelse` |
+-------------+--------------------------------------------------------------------------------------------+


.. _no-need-for-triple-equal:

No Need For Triple Equal
++++++++++++++++++++++++

 There is no need for the identity comparison when the methods returns the proper type.

.. code-block:: php

   <?php
   
   // foo() returns a string. 
   if ('a' === foo()) {
       // doSomething()
   }
   
   
   function foo() : string { 
       return 'a';
   }
   
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Structures/NoNeedForTriple |
+-------------+----------------------------+
| Rulesets    | :ref:`Analyze`             |
+-------------+----------------------------+
| Exakt since | 2.1.4                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Quick (30 mins)            |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _no-need-for-get\_class():

No Need For get_class()
+++++++++++++++++++++++

 There is no need to call `get_class() <https://www.php.net/get_class>`_ to build a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ call. The argument of `get_class() <https://www.php.net/get_class>`_ may be used directly. 

.. code-block:: php

   <?php
   
   // 
   $a->b::$c
   
   // This is too much code
   get_class($a->b)::$c
   
   ?>


See also `Scope Resolution Operator (\:\:) <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_.


Suggestions
^^^^^^^^^^^

* Use get_called_class(), which may carry different class names
* Use self, static or parent keywords, if you are already in the current class
* Use the argument of get_class() directly

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Structures/NoNeedGetClass |
+-------------+---------------------------+
| Rulesets    | :ref:`Suggestions`        |
+-------------+---------------------------+
| Exakt since | 1.8.1                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _no-parenthesis-for-language-construct:

No Parenthesis For Language Construct
+++++++++++++++++++++++++++++++++++++

 Some PHP language constructs, such are ``include``, ``require``, ``include_once``, ``require_once``, ``print``, ``echo`` don't need parenthesis. They accept parenthesis, but it is may lead to strange situations. 

.. code-block:: php

   <?php
   
   // This is an attempt to load 'foo.inc', or kill the script
   include('foo.inc') or die();
   // in fact, this is read by PHP as : include 1 
   // include  'foo.inc' or die();
   
   ?>


It it better to avoid using parenthesis with ``echo``, ``print``, ``return``, ``throw``, ``yield``, ``yield from``, ``include``, ``require``, ``include_once``, ``require_once``.

See also `include <https://www.php.net/manual/en/function.include.php>`_.


Suggestions
^^^^^^^^^^^

* Remove parenthesis

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/NoParenthesisForLanguageConstruct                                                                                                |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Suggestions`                                                                             |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                                                       |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                                                         |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                                                       |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                                             |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                        |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-parenthesis-for-language-construct <https://github.com/dseguy/clearPHP/tree/master/rules/no-parenthesis-for-language-construct.md>`__   |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-phpdocumentor-structures-noparenthesisforlanguageconstruct`, :ref:`case-phpmyadmin-structures-noparenthesisforlanguageconstruct` |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------------+


.. _no-reference-on-left-side:

No Reference On Left Side
+++++++++++++++++++++++++

 Do not use references as the right element in an assignation. 

.. code-block:: php

   <?php
   
   $b = 2;
   $c = 3;
   
   $a = &$b + $c;
   // $a === 2 === $b;
   
   $a = $b + $c;
   // $a === 5
   
   ?>


This is the case for most situations : addition, multiplication, bitshift, logical, power, concatenation.
Note that PHP won't compile the code if the operator is a short operator (+=, .=, etc.), nor if the & is on the right side of the operator.

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/NoReferenceOnLeft                |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.11.5                                      |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Critical                                    |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _no-return-or-throw-in-finally:

No Return Or Throw In Finally
+++++++++++++++++++++++++++++

 Avoid using return and throw in a finally block. Both command will interrupt the processing of the try catch block, and any exception that was emitted will not be processed. This leads to unprocessed exceptions, leaving the application in an unstable state.

Note that PHP prevents the usage of goto, `break <https://www.php.net/manual/en/control-structures.break.php>`_ and `continue <https://www.php.net/manual/en/control-structures.continue.php>`_ within the finally block at linting phase. This is categorized as a Security problem.

.. code-block:: php

   <?php
   function foo() {
           try {
               // Exception is thrown here 
               throw new \Exception();
           } catch (Exception $e) {
               // This is executed AFTER finally
               return 'Exception';
           } finally {
               // This is executed BEFORE catch
               return 'Finally';
           }
       }
   }
   
   // Displays 'Finally'. No exception
   echo foo();
   
   function bar() {
           try {
               // Exception is thrown here 
               throw new \Exception();
           } catch (Exception $e) {
               // Process the exception. 
               return 'Exception';
           } finally {
               // clean the current situation
               // Keep running the current function
           }
           return 'Finally';
       }
   }
   
   // Displays 'Exception', with processed Exception
   echo bar();
   
   ?>


See also `Return Inside Finally Block <https://www.owasp.org/index.php/Return_Inside_Finally_Block>`_.
 

Suggestions
^^^^^^^^^^^

* Move the return right after the try/catch/finally call

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Structures/NoReturnInFinally |
+-------------+------------------------------+
| Rulesets    | :ref:`Security`              |
+-------------+------------------------------+
| Exakt since | 0.12.1                       |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Major                        |
+-------------+------------------------------+
| Time To Fix | Quick (30 mins)              |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _@-operator:

@ Operator
++++++++++

 `@ <https://www.php.net/manual/en/language.operators.errorcontrol.php>`_ is the 'no scream' operator : it suppresses error output. 

.. code-block:: php

   <?php
   
   // Set x with incoming value, or else null. 
   $x = @$_GET['x'];
   
   ?>


This operator is actually very slow : it will process the error all the way up, and finally decide not to display it. It is often faster to check the conditions first, then run the method without ``@``.

You may also set display_error to 0 in the ``php.ini`` : this will avoid user's error display, but will keep the error in the PHP logs, for later processing. 

The only situation where ``@`` is useful is when a native PHP function displays errors messages when error happens and there is no way to check it from the code. 

This is the case with `fopen() <https://www.php.net/fopen>`_, `stream_socket_server() <https://www.php.net/stream_socket_server>`_, `token_get_all() <https://www.php.net/token_get_all>`_. 

See also `Error Control Operators <https://www.php.net/manual/en/language.operators.errorcontrol.php>`_ and `Five reasons why the shut-op operator should be avoided <https://derickrethans.nl/five-reasons-why-the-shutop-operator-should-be-avoided.html>`_. 


Suggestions
^^^^^^^^^^^

* Remove the @ operator by default

+---------------------+-------------------------+------+----------------------------------------------+
| Name                | Default                 | Type | Description                                  |
+---------------------+-------------------------+------+----------------------------------------------+
| authorizedFunctions | noscream_functions.json | data | Functions that are authorized to sports a @. |
+---------------------+-------------------------+------+----------------------------------------------+



Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------+
| Short name  | Structures/Noscream                                                                   |
+-------------+---------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Performances`                      |
+-------------+---------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                 |
+-------------+---------------------------------------------------------------------------------------+
| Php Version | All                                                                                   |
+-------------+---------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                 |
+-------------+---------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                       |
+-------------+---------------------------------------------------------------------------------------+
| Precision   | Very high                                                                             |
+-------------+---------------------------------------------------------------------------------------+
| ClearPHP    | `no-noscream <https://github.com/dseguy/clearPHP/tree/master/rules/no-noscream.md>`__ |
+-------------+---------------------------------------------------------------------------------------+
| Examples    | :ref:`case-phinx-structures-noscream`, :ref:`case-phpipam-structures-noscream`        |
+-------------+---------------------------------------------------------------------------------------+


.. _avoid-substr()-one:

Avoid Substr() One
++++++++++++++++++

 Use array notation ``$string[$position]`` to reach a single byte in a string.

There are two ways to access a byte in a string : `substr() <https://www.php.net/substr>`_ and ``$v[$pos]``.

The second style is more readable. It may be up to four times faster, though it is a micro-optimization. It is recommended to use it. 

PHP 7.1 also introduces the support of negative offsets as string index : negative offset are also reported.

.. code-block:: php

   <?php
   
   $string = 'ab人cde';
   
   echo substr($string, $pos, 1);
   echo $string[$pos];
   
   echo mb_substr($string, $pos, 1);
   
   // when $pos = 1
   // displays bbb
   // when $pos = 2
   // displays ??人
   
   ?>


Beware that `substr() <https://www.php.net/substr>`_ and ``$v[$pos]`` are similar, while `mb_substr() <https://www.php.net/mb_substr>`_ is not. The first function works on bytes, while the latter works on characters.

Suggestions
^^^^^^^^^^^

* Replace substr() with the array notations for strings.
* Replace substr() with a call to mb_substr().

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/NoSubstrOne                                                                                                        |
+-------------+-------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`CompatibilityPHP71`, :ref:`Performances`, :ref:`Suggestions`, :ref:`Top10` |
+-------------+-------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                                         |
+-------------+-------------------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                                           |
+-------------+-------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                                         |
+-------------+-------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                                              |
+-------------+-------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                          |
+-------------+-------------------------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-churchcrm-structures-nosubstrone`, :ref:`case-livezilla-structures-nosubstrone`                                    |
+-------------+-------------------------------------------------------------------------------------------------------------------------------+


.. _not-equal-is-not-!==:

Not Equal Is Not !==
++++++++++++++++++++

 Not and Equal operators, used separately, don't amount to the different operator ``!==``.

``!$a == $b`` first turns ``$a``into the opposite boolean, then compares this boolean value to ``$b``. On the other hand, ``$a !== $b`` compares the two variables for type and value, and returns a boolean. 

.. code-block:: php

   <?php
   
   if ($string != 'abc') {
       // doSomething()
   }
   
   // Here, string will be an boolean, leading 
   if (!$string == 'abc') {
       // doSomething()
   }
   
   // operator priority may be confusing
   if (!$object instanceof OneClass) {
       // doSomething()
   }
   ?>


Note that the ``instanceof`` operator may be use with this syntax, due to operator precedence.

See also `Operator Precedence <https://www.php.net/manual/en/language.operators.precedence.php>`_.


Suggestions
^^^^^^^^^^^

* Use the != or !==
* Use parenthesis

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/NotEqual                         |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 2.0.6                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _not-not:

Not Not
+++++++

 Double not makes a boolean, not a ``true``.

This is a wrong casting to boolean. PHP supports ``(boolean)`` to do the same, faster and cleaner.

.. code-block:: php

   <?php
       // Explicit code
       $b = (boolean) $x; 
       $b = (bool) $x; 
   
       // Wrong type casting
       $b = !!$x; 
   
   ?>


See also `Logical Operators <https://www.php.net/manual/en/language.operators.logical.php>`_ and `Type Juggling <https://www.php.net/manual/en/language.types.type-juggling.php>`_.


Suggestions
^^^^^^^^^^^

* Use ``(bool)`` casting operator for that
* Don't typecast, and let PHP handle it. This works in situations where the boolean is immediately used.

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------+
| Short name  | Structures/NotNot                                                                             |
+-------------+-----------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                   |
+-------------+-----------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------+
| Php Version | All                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                              |
+-------------+-----------------------------------------------------------------------------------------------+
| Precision   | High                                                                                          |
+-------------+-----------------------------------------------------------------------------------------------+
| ClearPHP    | `no-implied-cast <https://github.com/dseguy/clearPHP/tree/master/rules/no-implied-cast.md>`__ |
+-------------+-----------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-cleverstyle-structures-notnot`, :ref:`case-tine20-structures-notnot`               |
+-------------+-----------------------------------------------------------------------------------------------+


.. _not-or-tilde:

Not Or Tilde
++++++++++++

 There are two NOT operator in PHP : ``!`` and ``~``. The first is a logical operator, and returns a boolean. The second is a bit-wise operator, and flips each bit. 

Although they are distinct operations, there are situations where they provide the same results. In particular, when processing booleans. 

Yet, ``!`` and ``~`` are not the same. ``~`` has a higher priority, and will not yield to ``instanceof``, while ``!`` does.

The analyzed code has less than 10% of one of them : for consistency reasons, it is recommended to make them all the same. 

.. code-block:: php

   <?php
   
   // be consistent
   if (!$condition) {
       doSomething();
   }
   
   if (~$condition) {
       doSomething();
   }
   
   ?>


See also `Bitwise Operators <https://www.php.net/manual/en/language.operators.bitwise.php>`_,
         `Logical Operators <https://www.php.net/manual/en/language.operators.logical.php>`_ and 
         `Operators Precedences <https://www.php.net/manual/en/language.operators.precedence.php>`_ .


Suggestions
^^^^^^^^^^^

* Be consistent

Specs
^^^^^
+-------------+---------------------+
| Short name  | Structures/NotOrNot |
+-------------+---------------------+
| Rulesets    | none                |
+-------------+---------------------+
| Exakt since | 1.8.9               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Quick (30 mins)     |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _variable-is-not-a-condition:

Variable Is Not A Condition
+++++++++++++++++++++++++++

 Avoid using a lone variable as a condition. It is recommended to use a comparative value, or one of the filtering function, such as `isset() <https://www.www.php.net/isset>`_, `empty() <https://www.php.net/empty>`_. 

Using the raw variable as a condition blurs the difference between an undefined variable and an empty value. By using an explicit comparison or validation function, it is easier to understand what the variable stands for.

.. code-block:: php

   <?php
   
   if (isset($error)) {
       echo 'Found one error : '.$error!;
   }
   
   //
   if ($errors) {
       print count($errors).' errors found : '.join('', $errors).PHP_EOL;
       echo 'Not found';
   }
   
   ?>


Thanks to the `PMB <https://www.sigb.net/>`_ team for the inspiration.



Suggestions
^^^^^^^^^^^

* Make the validation explicit, by using a comparison operator, or one of the validation function.

Specs
^^^^^
+-------------+-----------------------------------+
| Short name  | Structures/NoVariableIsACondition |
+-------------+-----------------------------------+
| Rulesets    | :ref:`Analyze`                    |
+-------------+-----------------------------------+
| Exakt since | 1.6.5                             |
+-------------+-----------------------------------+
| Php Version | All                               |
+-------------+-----------------------------------+
| Severity    | Minor                             |
+-------------+-----------------------------------+
| Time To Fix | Quick (30 mins)                   |
+-------------+-----------------------------------+
| Precision   | High                              |
+-------------+-----------------------------------+


.. _objects-don't-need-references:

Objects Don't Need References
+++++++++++++++++++++++++++++

 There is no need to create references for objects, as those are always passed by reference when used as arguments.

Note that when the argument is assigned another value, including another object, then the reference is needed : PHP forgets about reference when they are replaced.

.. code-block:: php

   <?php
       
       $object = new stdClass();
       $object->name = 'a';
       
       foo($object);
       print $object->name; // Name is 'b'
       
       // No need to make $o a reference
       function foo(&$o) {
           $o->name = 'b';
       }
   
       
       // $o is assigned inside the function : it must be called with a &, or the object won't make it out of the foo3 scope
       function foo3(&$o) {
           $o = new stdClass;
       }
       
       $array = array($object);
       foreach($array as &$o) { // No need to make this a reference
           $o->name = 'c';
       }
   
   ?>


See also `Passing by reference <https://www.php.net/manual/en/language.references.pass.php>`_.


Suggestions
^^^^^^^^^^^

* Remove the reference
* Assign the argument with a new value

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/ObjectReferences                                                                                     |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Top10`                                                       |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                             |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                                |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                            |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-references-on-objects <https://github.com/dseguy/clearPHP/tree/master/rules/no-references-on-objects.md>`__ |
+-------------+-----------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-zencart-structures-objectreferences`, :ref:`case-xoops-structures-objectreferences`                  |
+-------------+-----------------------------------------------------------------------------------------------------------------+


.. _include\_once()-usage:

include_once() Usage
++++++++++++++++++++

 include_once() and require_once() functions should be avoided for performances reasons.

.. code-block:: php

   <?php
   
   // Including a library. 
   include 'lib/helpers.inc';
   
   // Including a library, and avoiding double inclusion
   include_once 'lib/helpers.inc';
   
   ?>


Try using autoload for loading classes, or use include() or require() and make it possible to include several times the same file without errors.


Suggestions
^^^^^^^^^^^

* Avoid using include_once() whenever possible 
* Use autoload() to load classes, and avoid loading them with include

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------+
| Short name  | Structures/OnceUsage                                                              |
+-------------+-----------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`                                                         |
+-------------+-----------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                             |
+-------------+-----------------------------------------------------------------------------------+
| Php Version | All                                                                               |
+-------------+-----------------------------------------------------------------------------------+
| Severity    | Minor                                                                             |
+-------------+-----------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                   |
+-------------+-----------------------------------------------------------------------------------+
| Precision   | High                                                                              |
+-------------+-----------------------------------------------------------------------------------+
| Examples    | :ref:`case-xoops-structures-onceusage`, :ref:`case-tikiwiki-structures-onceusage` |
+-------------+-----------------------------------------------------------------------------------+


.. _one-dot-or-object-operator-per-line:

One Dot Or Object Operator Per Line
+++++++++++++++++++++++++++++++++++

 Rule #4 of Object Calisthenics : Only one -> or . per line.

.. code-block:: php

   <?php
   
   // Those should be on different lines for readability
   $a->foo()->bar()->getFinal();
   
   $a->foo()
     ->bar()
     ->getFinal();
   
   // Those should be on different lines for readability
   $concatenation = 'a' . 'b' . $c . 'd';
   
   $concatenation = 'a' . 
                    'b' . 
                    $c .
                    'd';
   
   ?>


This analysis will also catch the following cases : 

.. code-block:: php

   <?php
       // set of multiples (concatenations or properties or methodcalls)
       foo('a' . 'b', 'c'. 'd');
       foo('a' . 'b', $c->d);
   
   ?>


When kept, simple, this rule has some edge cases which are left to the reader.

.. code-block:: php

   <?php
   
   $a = 'a' . 'b'
        . 
        'c' . 'd';
   $c = $f->g('e' . 'f');
   
   $e = A::B::D;
   
   ?>

Specs
^^^^^
+-------------+------------------------------------------+
| Short name  | Structures/OneDotOrObjectOperatorPerLine |
+-------------+------------------------------------------+
| Rulesets    | none                                     |
+-------------+------------------------------------------+
| Exakt since | 0.8.9                                    |
+-------------+------------------------------------------+
| Php Version | All                                      |
+-------------+------------------------------------------+
| Severity    | Minor                                    |
+-------------+------------------------------------------+
| Time To Fix | Quick (30 mins)                          |
+-------------+------------------------------------------+
| Precision   | High                                     |
+-------------+------------------------------------------+


.. _one-expression-brackets-consistency:

One Expression Brackets Consistency
+++++++++++++++++++++++++++++++++++

 Brackets around one-line expressions are not consistent. 

PHP makes bracket optional when a control structure pilot only one expression. Both are semantically identical.

This analysis reports code that uses brackets while the vast majority of other expressions uses none. Or the contrary. 

.. code-block:: php

   <?php
   
   // One expression with brackets
   for($i = 0; $i < 10; $i++) { $c++; }
   
   // One expression without bracket
   for($i2 = 0; $i2 < 10; $i2++)  $c++; 
   
   ?>


Another analysis, [Structures/Bracketless], reports the absence of brackets as an error.

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/OneExpressionBracketsConsistency |
+-------------+---------------------------------------------+
| Rulesets    | none                                        |
+-------------+---------------------------------------------+
| Exakt since | 0.9.5                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Slow (1 hour)                               |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _one-if-is-sufficient:

One If Is Sufficient
++++++++++++++++++++

 Nested conditions may be written another way, and reduce the amount of code.

Nested conditions are equivalent to a ``&&`` condition. As such, they may be switched. When one of the condition has no explicit else, then it is lighter to write it as the first condition. This way, it is written once, and not repeated.

.. code-block:: php

   <?php
   
   // Less conditions are written here.
     	if($b == 2) {
           if($a == 1) {
       		++$c;
       	}
           else {
       		++$d;
       	}
       }
   
   // ($b == 2) is double here
       if($a == 1) {
       	if($b == 2) {
       		++$c;
       	}
       }
       else {
       	if($b == 2) {
       		++$d;
       	}
       }
   ?>




Suggestions
^^^^^^^^^^^

* Switch the if...then conditions, to reduce the amount of conditions to read.

Specs
^^^^^
+-------------+---------------------------------------------------+
| Short name  | Structures/OneIfIsSufficient                      |
+-------------+---------------------------------------------------+
| Rulesets    | :ref:`Suggestions`                                |
+-------------+---------------------------------------------------+
| Exakt since | 1.2.6                                             |
+-------------+---------------------------------------------------+
| Php Version | All                                               |
+-------------+---------------------------------------------------+
| Severity    | Minor                                             |
+-------------+---------------------------------------------------+
| Time To Fix | Quick (30 mins)                                   |
+-------------+---------------------------------------------------+
| Precision   | High                                              |
+-------------+---------------------------------------------------+
| Examples    | :ref:`case-tikiwiki-structures-oneifissufficient` |
+-------------+---------------------------------------------------+


.. _more-than-one-level-of-indentation:

More Than One Level Of Indentation
++++++++++++++++++++++++++++++++++

 According to PHP Object Calisthenics, one level of indentation is sufficient.

It helps to abide by the Single Responsibility rule and increase reuse.

.. code-block:: php

   <?php
   
   class foo {
       function multipleLevels($array) {
           $return = array();
           foreach($array as $b) {
   
               // This is a second level of indentation
               if ($this->check($b)) { continue; }
               $return[] = $b;
           }
           return $return;
       }
   
       function oneLevel($array) {
           $return = array_filter($array, array($this, 'check'));
           return $return;
       }
   
   }
   
   ?>

Specs
^^^^^
+-------------+----------------------------------+
| Short name  | Structures/OneLevelOfIndentation |
+-------------+----------------------------------+
| Rulesets    | none                             |
+-------------+----------------------------------+
| Exakt since | 0.8.9                            |
+-------------+----------------------------------+
| Php Version | All                              |
+-------------+----------------------------------+
| Severity    | Minor                            |
+-------------+----------------------------------+
| Time To Fix | Slow (1 hour)                    |
+-------------+----------------------------------+
| Precision   | High                             |
+-------------+----------------------------------+


.. _several-instructions-on-the-same-line:

Several Instructions On The Same Line
+++++++++++++++++++++++++++++++++++++

 Usually, instructions do not share their line : one instruction, one line. 

This is good for readability, and help at understanding the code. This is especially important when fast-reading the code to find some special situation, where such double-meaning line way have an impact.

.. code-block:: php

   <?php
   
   switch ($x) {
       // Is it a fallthrough or not ? 
       case 1:
           doSomething(); break;
   
       // Easily spotted break.
       case 1:
           doSomethingElse(); 
           break;
   
       default : 
           doDefault(); 
           break;
   }
   
   ?>


See also `Object Calisthenics, rule # 5 <http://williamdurand.fr/2013/06/03/object-calisthenics/#one-dot-per-line>`_.


Suggestions
^^^^^^^^^^^

* Add new lines, so that one expression is on one line

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/OneLineTwoInstructions                                                                          |
+-------------+------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                             |
+-------------+------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                        |
+-------------+------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                           |
+-------------+------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-piwigo-structures-onelinetwoinstructions`, :ref:`case-tine20-structures-onelinetwoinstructions` |
+-------------+------------------------------------------------------------------------------------------------------------+


.. _only-variable-returned-by-reference:

Only Variable Returned By Reference
+++++++++++++++++++++++++++++++++++

 Function can't return literals by reference.

When a function returns a reference, it is only possible to return variables, properties or `static <https://www.php.net/manual/en/language.oop5.static.php>`_ properties. 

Anything else, like literals or `static <https://www.php.net/manual/en/language.oop5.static.php>`_ expressions, yield a warning at execution time.

.. code-block:: php

   <?php
   
   // Can't return a literal number
   function &foo() {
       return 3 + rand();
   }
   
   // bar must return values that are stored in a 
   function &bar() {
       $a = 3 + rand();
       return $a;
   }
   
   ?>

Specs
^^^^^
+-------------+--------------------------------------------+
| Short name  | Structures/OnlyVariableReturnedByReference |
+-------------+--------------------------------------------+
| Rulesets    | :ref:`Analyze`                             |
+-------------+--------------------------------------------+
| Exakt since | 0.8.4                                      |
+-------------+--------------------------------------------+
| Php Version | All                                        |
+-------------+--------------------------------------------+
| Severity    | Major                                      |
+-------------+--------------------------------------------+
| Time To Fix | Quick (30 mins)                            |
+-------------+--------------------------------------------+
| Precision   | High                                       |
+-------------+--------------------------------------------+


.. _openssl\_random\_pseudo\_byte()-second-argument:

openssl_random_pseudo_byte() Second Argument
++++++++++++++++++++++++++++++++++++++++++++

 openssl_random_pseudo_byte() uses exceptions to signal an error. Since PHP 7.4, there is no need to use the second argument.

On the other hand, it is important to catch the exception that openssl_random_pseudo_byte() may emit.

.. code-block:: php

   <?php
       // PHP 7.4 way to check on random number generation
       try {
           $bytes = openssl_random_pseudo_bytes($i);
       } catch(\Exception $e) {
           die(Error while loading random number);
       }
   
       // Old way to check on random number generation
       $bytes = openssl_random_pseudo_bytes($i, $cstrong);
       if ($cstrong === false) {
           die(Error while loading random number);
       }
   ?>


See also `openssl_random_pseudo_byte <https://www.php.net/openssl_random_pseudo_bytes>`_ and `PHP RFC: Improve `openssl_random_pseudo_bytes() <https://www.php.net/openssl_random_pseudo_bytes>`_ <https://wiki.php.net/rfc/improve-openssl-random-pseudo-bytes>`_.


Suggestions
^^^^^^^^^^^

* Skip the second argument, add a try/catch around the call to openssl_random_pseudo_bytes()

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/OpensslRandomPseudoByteSecondArg |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP74`        |
+-------------+---------------------------------------------+
| Exakt since | 1.9.3                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _or-die:

Or Die
++++++

 Classic old style failed error management. 

.. code-block:: php

   <?php
   
   // In case the connexion fails, this kills the current script
   mysql_connect('localhost', $user, $pass) or die();
   
   ?>


Interrupting a script will leave the application with a blank page, will make your life miserable for testing. Just don't do that.

See also `pg_last_error <https://www.php.net/manual/en/function.pg-last-error.php>`_ or `PDO\:\:exec <https://www.php.net/manual/en/pdo.exec.php>`_.


Suggestions
^^^^^^^^^^^

* Throw an exception
* Trigger an error with trigger_error()
* Use your own error mechanism

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------+
| Short name  | Structures/OrDie                                                                          |
+-------------+-------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                               |
+-------------+-------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                     |
+-------------+-------------------------------------------------------------------------------------------+
| Php Version | All                                                                                       |
+-------------+-------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                     |
+-------------+-------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                           |
+-------------+-------------------------------------------------------------------------------------------+
| Precision   | High                                                                                      |
+-------------+-------------------------------------------------------------------------------------------+
| ClearPHP    | `no-implied-if <https://github.com/dseguy/clearPHP/tree/master/rules/no-implied-if.md>`__ |
+-------------+-------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-tine20-structures-ordie`, :ref:`case-openconf-structures-ordie`                |
+-------------+-------------------------------------------------------------------------------------------+


.. _php7-dirname:

PHP7 Dirname
++++++++++++

 With PHP 7, `dirname() <https://www.php.net/dirname>`_ has a second argument that represents the number of `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ folder to follow. This prevent us from using nested `dirname() <https://www.php.net/dirname>`_ calls to reach an grand-`parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ direct.

.. code-block:: php

   <?php
   $path = '/a/b/c/d/e/f';
   
   // PHP 7 syntax
   $threeFoldersUp = dirname($path, 3);
   
   // PHP 5 syntax
   $threeFoldersUp = dirname(dirname(dirname($path)));
   
   ?>


See also `dirname <https://www.php.net/dirname>`_.
 

Suggestions
^^^^^^^^^^^

* Use dirname()'s second argument

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/PHP7Dirname                                                                                                                                |
+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`Suggestions`, :ref:`php-cs-fixable` |
+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                                                                 |
+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | 7.0+                                                                                                                                                  |
+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                                                                 |
+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                                                       |
+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                                  |
+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-openconf-structures-php7dirname`, :ref:`case-mediawiki-structures-php7dirname`                                                             |
+-------------+-------------------------------------------------------------------------------------------------------------------------------------------------------+


.. _phpinfo:

Phpinfo
+++++++

 `phpinfo() <https://www.php.net/phpinfo>`_ is a great function to learn about the current configuration of the server.

.. code-block:: php

   <?php
   
   if (DEBUG) {
       phpinfo();
   }
   
   ?>


If left in the production code, it may lead to a critical leak, as any attacker gaining access to this data will know a lot about the server configuration.

It is advised to never leave that kind of instruction in a production code. 

`phpinfo() <https://www.php.net/phpinfo>`_ may be necessary to access some specific configuration of the server : for example, ``Apache`` module list are only available via `phpinfo() <https://www.php.net/phpinfo>`_, and apache_get(), when they are loaded.



Suggestions
^^^^^^^^^^^

* Remove all usage of phpinfo()
* Add one or more constant to fine-tune the phpinfo(), and limit the amount of displayed information
* Replace phpinfo() with a more adapted method : get_loaded_extensions() to access the list of loaded extensions

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/PhpinfoUsage                     |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Security`                             |
+-------------+---------------------------------------------+
| Exakt since | 0.8.4                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Major                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+
| Examples    | :ref:`case-dolphin-structures-phpinfousage` |
+-------------+---------------------------------------------+


.. _no-plus-one:

No Plus One
+++++++++++

 Incrementing a variable should be done with the ++ or -- operators. Any other way, may be avoided.

.. code-block:: php

   <?php
   
   // Best way to increment
   ++$x; --$y;
   
   // Second best way to increment, if the current value is needed :
   echo $x++, $y--;
   
   // Good but slow 
   $x += 1; 
   $x -= -1; 
   
   $y += -1;
   $y -= 1;
   
   // even slower
   $x = $x + 1; 
   $y = $y - 1; 
   
   ?>


This is a micro optimisation.

Specs
^^^^^
+-------------+------------------------+
| Short name  | Structures/PlusEgalOne |
+-------------+------------------------+
| Rulesets    | none                   |
+-------------+------------------------+
| Exakt since | 0.8.4                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Quick (30 mins)        |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _possible-increment:

Possible Increment
++++++++++++++++++

 This expression looks like a typo : a missing + would change the behavior.

The same pattern is not reported with -, as it is legit expression. + sign is usually understated, rather than explicit.

.. code-block:: php

   <?php
   
   // could it be a ++$b ? 
   $a = +$b;
   
   ?>


See also `Incrementing/Decrementing Operators <https://www.php.net/manual/en/language.operators.increment.php>`_ and `Arithmetic Operators <https://www.php.net/manual/en/language.operators.arithmetic.php>`_.


Suggestions
^^^^^^^^^^^

* Drop the whole assignation
* Complete the addition with another value : $a = 1 + $b
* Make this a ++ operator : ++$b
* Make this a negative operator : -$b
* Make the casting explicit : (int) $b

Specs
^^^^^
+-------------+----------------------------------------------------------------------------------------------------+
| Short name  | Structures/PossibleIncrement                                                                       |
+-------------+----------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Suggestions`                                                                                 |
+-------------+----------------------------------------------------------------------------------------------------+
| Exakt since | 1.2.1                                                                                              |
+-------------+----------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                |
+-------------+----------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                              |
+-------------+----------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                   |
+-------------+----------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                               |
+-------------+----------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-zurmo-structures-possibleincrement`, :ref:`case-mediawiki-structures-possibleincrement` |
+-------------+----------------------------------------------------------------------------------------------------+


.. _possible-infinite-loop:

Possible Infinite Loop
++++++++++++++++++++++

 Loops on files that can't be open results in infinite loop.

`fgets() <https://www.php.net/fgets>`_, and functions like `fgetss() <https://www.php.net/fgetss>`_, `fgetcsv() <https://www.php.net/fgetcsv>`_, `fread() <https://www.php.net/fread>`_, return false when they finish reading, or can't access the file. 

In case the file is not accessible, comparing the result of the reading to something that is falsy, leads to a permanent valid condition. The execution will only finish when the ``max_execution_time`` is reached. 

.. code-block:: php

   <?php
   
   $file = fopen('/path/to/file.txt', 'r');
   // when fopen() fails, the next loops is infinite
   // fgets() will always return false, and while will always be true. 
   while($line = fgets($file) != 'a') {
       doSomething();
   }
   
   ?>


It is recommended to check the file resources when they are opened, and always use === or !== to compare readings. `feof() <https://www.php.net/feof>`_ is also a reliable function here.

Specs
^^^^^
+-------------+---------------------------------+
| Short name  | Structures/PossibleInfiniteLoop |
+-------------+---------------------------------+
| Rulesets    | :ref:`Analyze`                  |
+-------------+---------------------------------+
| Exakt since | 1.1.5                           |
+-------------+---------------------------------+
| Php Version | All                             |
+-------------+---------------------------------+
| Severity    | Critical                        |
+-------------+---------------------------------+
| Time To Fix | Quick (30 mins)                 |
+-------------+---------------------------------+
| Precision   | High                            |
+-------------+---------------------------------+


.. _preg\_replace-with-option-e:

preg_replace With Option e
++++++++++++++++++++++++++

 `preg_replace() <https://www.php.net/preg_replace>`_ supported the /e option until PHP 7.0. It allowed the use of `eval() <https://www.php.net/eval>`_'ed expression as replacement. This has been dropped in PHP 7.0, for security reasons.

`preg_replace() <https://www.php.net/preg_replace>`_ with /e option may be replaced with `preg_replace_callback() <https://www.php.net/preg_replace_callback>`_ and a closure, or `preg_replace_callback_array() <https://www.php.net/preg_replace_callback_array>`_ and an array of closures.

.. code-block:: php

   <?php
   
   // preg_replace with /e
   $string = 'abcde';
   
   // PHP 5.6 and older usage of /e
   $replaced = preg_replace('/c/e', 'strtoupper(\$0)', $string);
   
   // PHP 7.0 and more recent
   // With one replacement
   $replaced = preg_replace_callback('/c/', function ($x) { return strtoupper($x[0]); }, $string);
   
   // With several replacements, preventing multiple calls to preg_replace_callback
   $replaced = preg_replace_callback_array(array('/c/' => function ($x) { return strtoupper($x[0]); },
                                                 '/[a-b]/' => function ($x) { return strtolower($x[0]); }), $string);
   ?>




Suggestions
^^^^^^^^^^^

* Replace call to preg_replace() and /e with preg_replace_callback() or preg_replace_callback_array()

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/pregOptionE                                                                                                                        |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`CompatibilityPHP70`, :ref:`CompatibilityPHP71`, :ref:`CompatibilityPHP72`, :ref:`Security` |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                                               |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                          |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-edusoho-structures-pregoptione`                                                                                                    |
+-------------+-----------------------------------------------------------------------------------------------------------------------------------------------+


.. _print-and-die:

Print And Die
+++++++++++++

 `Die() <https://www.php.net/`die <https://www.php.net/die>`_>`_ also prints. 

When stopping a script with `die() <https://www.php.net/`die <https://www.php.net/die>`_>`_, it is possible to provide a message as first argument, that will be displayed at execution. There is no need to make a specific call to print or echo.

.. code-block:: php

   <?php
   
   //  die may do both print and die.
   echo 'Error message';
   die();
   
   //  exit may do both print and die.
   print 'Error message';
   exit;
   
   //  exit cannot print integers only : they will be used as status report to the system.
   print 'Error message';
   exit 1;
   
   ?>

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/PrintAndDie                      |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.8.4                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Instant (5 mins)                            |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _printf-number-of-arguments:

Printf Number Of Arguments
++++++++++++++++++++++++++

 The number of arguments provided to `printf() <https://www.php.net/printf>`_ or `vprintf() <https://www.php.net/vprintf>`_ doesn't match the format string.

Extra arguments are ignored, and are dead code as such. Missing arguments are reported with a warning, and nothing is displayed.

Omitted arguments produce an error.

.. code-block:: php

   <?php
   
   // not enough
   printf(' a %s ', $a1); 
   // OK
   printf(' a %s ', $a1, $a2); 
   // too many
   printf(' a %s ', $a1, $a2, $a3); 
   
   // not enough
   sprintf(' a %s ', $a1); 
   // OK
   \sprintf(' a %s ', $a1, $a2); 
   // too many
   sprintf(' a %s ', $a1, $a2, $a3); 
   
   ?>


See also `printf <https://www.php.net/printf>`_ and `sprintf <https://www.php.net/sprintf>`_.


Suggestions
^^^^^^^^^^^

* Sync the number of argument with the format command

Specs
^^^^^
+-------------+------------------------------------------------+
| Short name  | Structures/PrintfArguments                     |
+-------------+------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`    |
+-------------+------------------------------------------------+
| Exakt since | 1.0.1                                          |
+-------------+------------------------------------------------+
| Php Version | All                                            |
+-------------+------------------------------------------------+
| Severity    | Minor                                          |
+-------------+------------------------------------------------+
| Time To Fix | Instant (5 mins)                               |
+-------------+------------------------------------------------+
| Precision   | Medium                                         |
+-------------+------------------------------------------------+
| Examples    | :ref:`case-phpipam-structures-printfarguments` |
+-------------+------------------------------------------------+


.. _avoid-parenthesis:

Avoid Parenthesis
+++++++++++++++++

 Avoid Parenthesis for language construct. Languages constructs are a few PHP native elements, that looks like functions but are not. 

Among other distinction, those elements cannot be directly used as variable function call, and they may be used with or without parenthesis.

.. code-block:: php

   <?php
   
   // normal usage of include
   include 'file.php';
   
   // This looks like a function and is not
   include('file2.php');
   
   ?>


The usage of parenthesis actually give some feeling of comfort, it won't prevent PHP from combining those argument with any later operators, leading to unexpected results.

Even if most of the time, usage of parenthesis is legit, it is recommended to avoid them.

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/PrintWithoutParenthesis          |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.8.4                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _property-variable-confusion:

Property Variable Confusion
+++++++++++++++++++++++++++

 Within a class, there is both a property and variables bearing the same name. 

.. code-block:: php

   <?php
   class Object {
       private $x;
       
       function SetData( ) {
           $this->x = $x + 2;
       }
   }
   ?>


The property and the variable may easily be confused one for another and lead to a bug. 

Sometimes, when the property is going to be replaced by the incoming argument, or data based on that argument, this naming schema is made on purpose, indicating that the current argument will eventually end up in the property. When the argument has the same name as the property, no warning is reported.


Suggestions
^^^^^^^^^^^

* Use different names for the properties and variables
* Adopt and apply a naming convention for variables and properties.

Specs
^^^^^
+-------------+----------------------------------------------------------+
| Short name  | Structures/PropertyVariableConfusion                     |
+-------------+----------------------------------------------------------+
| Rulesets    | :ref:`Semantics`                                         |
+-------------+----------------------------------------------------------+
| Exakt since | 0.8.4                                                    |
+-------------+----------------------------------------------------------+
| Php Version | All                                                      |
+-------------+----------------------------------------------------------+
| Severity    | Minor                                                    |
+-------------+----------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                            |
+-------------+----------------------------------------------------------+
| Precision   | High                                                     |
+-------------+----------------------------------------------------------+
| Examples    | :ref:`case-phpipam-structures-propertyvariableconfusion` |
+-------------+----------------------------------------------------------+


.. _queries-in-loops:

Queries In Loops
++++++++++++++++

 Avoid querying databases in a loop. 

Querying an external database in a loop usually leads to performances problems. This is also called the 'n + 1 problem'. 

This problem applies also to prepared statement : when such statement are called in a loop, they are slower than one-time large queries.

It is recommended to reduce the number of queries by making one query, and dispatching the results afterwards. This is true with SQL databases, graph queries, LDAP queries, etc. 

.. code-block:: php

   <?php
   
   // Typical N = 1 problem : there will be as many queries as there are elements in $array
   $ids = array(1,2,3,5,6,10);
   
   $db = new SQLite3('mysqlitedb.db');
   
   // all the IDS are merged into the query at once
   $results = $db->query('SELECT bar FROM foo WHERE id  in ('.implode(',', $id).')');
   while ($row = $results->fetchArray()) {
       var_dump($row);
   }
   
   
   // Typical N = 1 problem : there will be as many queries as there are elements in $array
   $ids = array(1,2,3,5,6,10);
   
   $db = new SQLite3('mysqlitedb.db');
   
   foreach($ids as $id) {
       $results = $db->query('SELECT bar FROM foo WHERE id = '.$id);
       while ($row = $results->fetchArray()) {
           var_dump($row);
       }
   }
   
   ?>


This optimisation is not always possible : for example, some SQL queries may not be prepared, like ``DROP TABLE`` or ``DESC``. ``UPDATE`` commands often update one row at a time, and grouping such queries may be counter-productive or unsafe. 



Suggestions
^^^^^^^^^^^

* Batch calls by using WHERE clauses and applying the same operation to all similar data
* Use native commands to avoid double query : REPLACE instead of SELECT-(UPDATE/INSERT), or UPSERT, for example

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------+
| Short name  | Structures/QueriesInLoop                                                                    |
+-------------+---------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Top10`                                                                |
+-------------+---------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                       |
+-------------+---------------------------------------------------------------------------------------------+
| Php Version | All                                                                                         |
+-------------+---------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                       |
+-------------+---------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                               |
+-------------+---------------------------------------------------------------------------------------------+
| Precision   | High                                                                                        |
+-------------+---------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-teampass-structures-queriesinloop`, :ref:`case-openemr-structures-queriesinloop` |
+-------------+---------------------------------------------------------------------------------------------+


.. _random-without-try:

Random Without Try
++++++++++++++++++

 `random_int() <https://www.php.net/random_int>`_ and `random_bytes() <https://www.php.net/random_bytes>`_ require a try/catch structure around them.

`random_int() <https://www.php.net/random_int>`_ and `random_bytes() <https://www.php.net/random_bytes>`_ emit Exceptions if they meet a problem. This way, failure can't be mistaken with returning an empty value, which leads to lower security. 

.. code-block:: php

   <?php
   
   try {
       $salt = random_bytes($length);
   } catch (TypeError $e) {
       // Error while reading the provided parameter
   } catch (Exception $e) {
       // Insufficient random data generated
   } catch (Error $e) {
       // Error with the provided parameter : <= 0
   }
   
   ?>


Since PHP 7.4, `openssl_random_pseudo_bytes() <https://www.php.net/openssl_random_pseudo_bytes>`_ has adopted the same behavior. It is included in this analysis : check your PHP version for actual application.



Suggestions
^^^^^^^^^^^

* Add a try/catch structure around calls to random_int() and random_bytes().

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Structures/RandomWithoutTry |
+-------------+-----------------------------+
| Rulesets    | :ref:`Security`             |
+-------------+-----------------------------+
| Exakt since | 0.8.4                       |
+-------------+-----------------------------+
| Php Version | 7.0+                        |
+-------------+-----------------------------+
| Severity    | Critical                    |
+-------------+-----------------------------+
| Time To Fix | Quick (30 mins)             |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _regex-delimiter:

Regex Delimiter
+++++++++++++++

 PCRE regular expressions may use a variety of delimiters. 

There seems to be a standard delimiter in the code, and some exceptions : one or several forms are dominant (> 90%), while the others are rare. 

The analyzed code has less than 10% of the rare delimiters. For consistency reasons, it is recommended to make them all the same. 

Generally, one or two delimiters are used, depending on the expected special chars in the scanned strings : for example, / tends to be avoided when parsing HTML.

Regex are literals, or partial literals, used in `preg_match() <https://www.php.net/preg_match>`_, `preg_match_all() <https://www.php.net/preg_match_all>`_, `preg_replace() <https://www.php.net/preg_replace>`_, `preg_replace_callback() <https://www.php.net/preg_replace_callback>`_, `preg_replace_callback_array() <https://www.php.net/preg_replace_callback_array>`_.

.. code-block:: php

   <?php
   
   echo 'a';
   echo 'b';
   echo 'c';
   echo 'd';
   echo 'e';
   echo 'f';
   echo 'g';
   echo 'h';
   echo 'i';
   echo 'j';
   echo 'k';
   
   // This should probably be written 'echo';
   print 'l';
   
   ?>


See also `Ideal regex delimiters in PHP <http://codelegance.com/ideal-regex-delimiters-in-php/>`_.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Structures/RegexDelimiter |
+-------------+---------------------------+
| Rulesets    | none                      |
+-------------+---------------------------+
| Exakt since | 0.10.5                    |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _repeated-print():

Repeated print()
++++++++++++++++

 Always merge several print or echo in one call.

It is recommended to use echo with multiple arguments, or a concatenation with print, instead of multiple calls to print echo, when outputting several blob of text.

.. code-block:: php

   <?php
   
   //Write : 
     echo 'a', $b, 'c';
     print 'a' . $b . 'c';
   
   //Don't write :  
     print 'a';
     print $b;
     print 'c';
   ?>
  



Suggestions
^^^^^^^^^^^

* Merge all prints into one echo call, separating arguments by commas.
* Collect all values in one variable, and do only one call to print or echo.

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------+
| Short name  | Structures/RepeatedPrint                                                                          |
+-------------+---------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Suggestions`, :ref:`Top10`                     |
+-------------+---------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                             |
+-------------+---------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                               |
+-------------+---------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                             |
+-------------+---------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                   |
+-------------+---------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                              |
+-------------+---------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-repeated-print <https://github.com/dseguy/clearPHP/tree/master/rules/no-repeated-print.md>`__ |
+-------------+---------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-edusoho-structures-repeatedprint`, :ref:`case-humo-gen-structures-repeatedprint`       |
+-------------+---------------------------------------------------------------------------------------------------+


.. _repeated-regex:

Repeated Regex
++++++++++++++

 Repeated regex should be centralized. 

When a regex is repeatedly used in the code, it is getting harder to update. 

.. code-block:: php

   <?php
   
   // Regex used several times, at least twice.
   preg_match('/^abc_|^square$/i', $_GET['x']);
   
   //.......
   
   preg_match('/^abc_|^square$/i', $row['name']);
   
   // This regex is dynamically built, so it is not reported.
   preg_match('/^circle|^'.$x.'$/i', $string);
   
   // This regex is used once, so it is not reported.
   preg_match('/^circle|^square$/i', $string);
   
   ?>


Regex that are repeated at least once (aka, used twice or more) are reported. Regex that are dynamically build are not reported.


Suggestions
^^^^^^^^^^^

* Create a central library of regex
* Use the regex inventory to spot other regex that are close, and should be identical.

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------+
| Short name  | Structures/RepeatedRegex                                                                    |
+-------------+---------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                 |
+-------------+---------------------------------------------------------------------------------------------+
| Exakt since | 0.10.9                                                                                      |
+-------------+---------------------------------------------------------------------------------------------+
| Php Version | All                                                                                         |
+-------------+---------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                       |
+-------------+---------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                             |
+-------------+---------------------------------------------------------------------------------------------+
| Precision   | High                                                                                        |
+-------------+---------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-vanilla-structures-repeatedregex`, :ref:`case-tikiwiki-structures-repeatedregex` |
+-------------+---------------------------------------------------------------------------------------------+


.. _resources-usage:

Resources Usage
+++++++++++++++

 List of situations that are creating resources.

.. code-block:: php

   <?php
       // This functioncall creates a resource to use
       $fp = fopen('/tmp/file.txt', 'r');
       
       if (!is_resource($fp)){
           thrown new RuntimeException('Could not open file.txt');
       }
   ?>

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Structures/ResourcesUsage |
+-------------+---------------------------+
| Rulesets    | :ref:`CE`                 |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _results-may-be-missing:

Results May Be Missing
++++++++++++++++++++++

 `preg_match() <https://www.php.net/preg_match>`_ may return empty values, if the search fails. It is important to check for the existence of results before assigning them to another variable, or using it.

.. code-block:: php

   <?php
       preg_match('/PHP ([0-9\.]+) /', $res, $r);
       $s = $r[1];
       // $s may end up null if preg_match fails.
   ?>

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/ResultMayBeMissing               |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.8.4                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Major                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _return-true-false:

Return True False
+++++++++++++++++

 These conditional expressions return true/false, depending on the condition. This may be simplified by dropping the control structure altogether.

.. code-block:: php

   <?php
   
   if (version_compare($a, $b) >= 0) {
       return true;
   } else {
       return false;
   }
   
   ?>


This may be simplified with : 

.. code-block:: php

   <?php
   
   return version_compare($a, $b) >= 0;
   
   ?>


This may be applied to assignations and ternary operators too.

.. code-block:: php

   <?php
   
   if (version_compare($a, $b) >= 0) {
       $a = true;
   } else {
       $a = false;
   }
   
   $a = version_compare($a, $b) >= 0 ? false : true;
   
   ?>


 

Suggestions
^^^^^^^^^^^

* Return directly the comparison, without using the if/then structure
* Cast the value to (boolean) and use it instead of the ternary

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------+
| Short name  | Structures/ReturnTrueFalse                                                                    |
+-------------+-----------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                   |
+-------------+-----------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------+
| Php Version | All                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                               |
+-------------+-----------------------------------------------------------------------------------------------+
| Precision   | High                                                                                          |
+-------------+-----------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-mautic-structures-returntruefalse`, :ref:`case-fuelcms-structures-returntruefalse` |
+-------------+-----------------------------------------------------------------------------------------------+


.. _return-void-:

Return void 
++++++++++++

 Return returns null as default value. It is recommended to mention explicitly 'null' or find a meaningful return such as a boolean or a default value instead.

.. code-block:: php

   <?php
   
   function foo(&$a) {
       ++$a;
       // No explicit return : it returns void
   }
   
   function bar(&$a) {
       ++$a;
       
       // Explicit return : it returns null
       return null
   }
   
   ?>


See also `Void functions <https://www.php.net/manual/en/migration71.new-features.php#migration71.new-features.void-functions>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Structures/ReturnVoid |
+-------------+-----------------------+
| Rulesets    | none                  |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Instant (5 mins)      |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _reuse-variable:

Reuse Variable
++++++++++++++

 A variable is already holding the content that is calculated multiple times over. 

It is recommended to use the cached value. This saves some computation, in particular when used in a loop, and speeds up the process.

.. code-block:: php

   <?php
   
   function foo($a) {
       $b = strtolower($a);
       
       // strtolower($a) is already calculated in $b. Just reuse the value.
       if (strtolower($a) === 'c') {
           doSomething();
       }
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Reuse the already created variable

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Structures/ReuseVariable |
+-------------+--------------------------+
| Rulesets    | :ref:`Suggestions`       |
+-------------+--------------------------+
| Exakt since | 1.1.4                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Slow (1 hour)            |
+-------------+--------------------------+
| Precision   | Medium                   |
+-------------+--------------------------+


.. _same-conditions-in-condition:

Same Conditions In Condition
++++++++++++++++++++++++++++

 At least two consecutive if/then structures use identical conditions. The latter will probably be ignored.

This analysis returns false positive when there are attempt to fix a situation, or to call an alternative solution. 

Conditions that are shared between if structures, but inside a logical OR expression are also detected.

.. code-block:: php

   <?php
   
   if ($a == 1) { doSomething(); }
   elseif ($b == 1) { doSomething(); }
   elseif ($c == 1) { doSomething(); }
   elseif ($a == 1) { doSomething(); }
   else {}
   
   // Also works on if then else if chains
   if ($a == 1) { doSomething(); }
   else if ($b == 1) { doSomething(); }
   else if ($c == 1) { doSomething(); }
   else if ($a == 1) { doSomething(); }
   else {}
   
   // Also works on if then else if chains
   // Here, $a is common and sufficient in both conditions
   if ($a || $b) { doSomething(); } 
   elseif ($a || $c) { doSomethingElse(); } 
   
   // This sort of situation generate false postive. 
   $config = load_config_from_commandline();
   if (empty($config)) {
       $config = load_config_from_file();
       if (empty($config)) {
           $config = load_default_config();
       }
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Merge the two conditions into one
* Make the two conditions different

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------+
| Short name  | Structures/SameConditions                                                                   |
+-------------+---------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                 |
+-------------+---------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                       |
+-------------+---------------------------------------------------------------------------------------------+
| Php Version | All                                                                                         |
+-------------+---------------------------------------------------------------------------------------------+
| Severity    | Critical                                                                                    |
+-------------+---------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                             |
+-------------+---------------------------------------------------------------------------------------------+
| Precision   | High                                                                                        |
+-------------+---------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-teampass-structures-sameconditions`, :ref:`case-typo3-structures-sameconditions` |
+-------------+---------------------------------------------------------------------------------------------+


.. _sequences-in-for:

Sequences In For
++++++++++++++++

 `For() <https://www.php.net/manual/en/control-structures.for.php>`_ instructions allows several instructions in each of its parameters. Then, the instruction separator is comma ',', not semi-colon, which is used for separating the 3 arguments.

.. code-block:: php

   <?php
      for ($a = 0, $b = 0; $a < 10, $b < 20; $a++, $b += 3) {
       // For loop
      }
   ?>


This loop will simultaneously increment $a and $b. It will stop only when the last of the central sequence reach a value of false : here, when $b reach 20 and $a will be 6. 

This structure is often unknown, and makes the for instruction quite difficult to read. It is also easy to oversee the multiples instructions, and omit one of them.
It is recommended not to use it.

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Structures/SequenceInFor |
+-------------+--------------------------+
| Rulesets    | none                     |
+-------------+--------------------------+
| Exakt since | 0.8.4                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Quick (30 mins)          |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _set-aside-code:

Set Aside Code
++++++++++++++

 Setting aside code should be made into a method. 

Setting aside code happens when one variable or member is stored locally, to be temporarily replaced by another value. Once the new value has been processed, the original value is reverted.

The temporary change of the value makes the code hard to read. 

It is a good example of a piece of code that could be moved to a separate method or function. Using the temporary value as a parameter makes the change visible, and avoid local pollution.

.. code-block:: php

   <?php
   
   // Setting aside database
   class cache extends Storage {
       private $database = null;
       
       function __construct($database) {
           $this->database = $database;
       }
       
       function foo($values) {
           // handling storage with sqlite3 
           $secondary = new cache(new Sqlite3(':memory:'));
           $secondary->store($values);
   
           $this->store($values);      // handling storage with injection 
       }
   }
   
   // Setting aside database to cache data in two distinct backend
   class cache extends Storage {
       private $database = null;
       
       function __construct(\Pdo $database) {
           $this->database = $database;
       }
       
       function foo($values) {
           // $this->database is set aside for secondary configuration
           $side = $this->database;
           $this->database = new Sqlite3(':memory:');
           $this->store($values);      // handling storage with sqlite3 
           $this->database = $side;
           // $this->database is restored
           $this->store($values);      // handling storage with injection 
       }
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Extract the code that run with the temporary value to a separate method.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Structures/SetAside |
+-------------+---------------------+
| Rulesets    | :ref:`Suggestions`  |
+-------------+---------------------+
| Exakt since | 1.8.8               |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Quick (30 mins)     |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _setlocale()-uses-constants:

Setlocale() Uses Constants
++++++++++++++++++++++++++

 `setlocale() <https://www.php.net/setlocale>`_ don't use strings but constants. 

The first argument of `setlocale() <https://www.php.net/setlocale>`_ must be one of the valid constants, ``LC_ALL``, ``LC_COLLATE``, ``LC_CTYPE``, ``LC_MONETARY``, ``LC_NUMERIC``, ``LC_TIME, `LC_MESSAGES <https://www.php.net/LC_MESSAGES>`_``.

.. code-block:: php

   <?php
   
   // Use constantes for setlocale first argument
   setlocale(LC_ALL, 'nl_NL');
   setlocale(\LC_ALL, 'nl_NL');
   
   // Don't use string for setlocale first argument
   setlocale('LC_ALL', 'nl_NL');
   setlocale('LC_'.'ALL', 'nl_NL');
   
   ?>


The PHP 5 usage of strings (same name as above, enclosed in ' or ") is not legit anymore in PHP 7 and later.

See also `setlocale <https://www.php.net/setlocale>`_.


Suggestions
^^^^^^^^^^^

* Use setlocale() constants

Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Structures/SetlocaleNeedsConstants |
+-------------+------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP70`          |
+-------------+------------------------------------+
| Exakt since | 0.8.4                              |
+-------------+------------------------------------+
| Php Version | All                                |
+-------------+------------------------------------+
| Severity    | Major                              |
+-------------+------------------------------------+
| Time To Fix | Instant (5 mins)                   |
+-------------+------------------------------------+
| Precision   | High                               |
+-------------+------------------------------------+


.. _static-global-variables-confusion:

Static Global Variables Confusion
+++++++++++++++++++++++++++++++++

 PHP can't have variable that are both `static <https://www.php.net/manual/en/language.oop5.static.php>`_ and global variable. While the syntax is legit, the variables will be alternatively global or `static <https://www.php.net/manual/en/language.oop5.static.php>`_.

It is recommended to avoid using the same name for a global variable and a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ variable. 

.. code-block:: php

   <?php
   
   function foo() {
       $a = 1; // $a is a local variable
       
       global $a; // $a is now a global variable
       
       static $a; // $a is not w static variable 
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Avoid using static variables
* Avoid using global variables
* Avoid using the same name for static and global variables

Specs
^^^^^
+-------------+---------------------------------+
| Short name  | Structures/SGVariablesConfusion |
+-------------+---------------------------------+
| Rulesets    | :ref:`Suggestions`              |
+-------------+---------------------------------+
| Exakt since | 2.1.2                           |
+-------------+---------------------------------+
| Php Version | All                             |
+-------------+---------------------------------+
| Severity    | Minor                           |
+-------------+---------------------------------+
| Time To Fix | Quick (30 mins)                 |
+-------------+---------------------------------+
| Precision   | High                            |
+-------------+---------------------------------+


.. _shell-usage:

Shell Usage
+++++++++++

 List of shell calls to system.

.. code-block:: php

   <?php
       // Using backtick operator
       $a = `ls -hla`;
       
       // Using one of PHP native or extension functions
       $a = shell_exec('ls -hla');
       $b = \pcntl_exec('/path/to/command');
       
   ?>


See also `shell_exec <http://www.php.net/shell_exec>`_ and `Execution Operators <http://www.php.net/manual/en/language.operators.execution.php>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Structures/ShellUsage |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _using-short-tags:

Using Short Tags
++++++++++++++++

 The code makes use of short tags. Short tags are the following : ``<?`` . A full scripts looks like that : ``<? /* php code */ ?>`` .

It is recommended to not use short tags, and use standard PHP tags. This makes PHP code compatible with XML standards. Short tags used to be popular, but have lost it.

See also `PHP Tags <https://www.php.net/manual/en/language.basic-syntax.phptags.php>`_.

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------+
| Short name  | Structures/ShortTags                                                                      |
+-------------+-------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CE`                                                                                 |
+-------------+-------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                     |
+-------------+-------------------------------------------------------------------------------------------+
| Php Version | 7.0-                                                                                      |
+-------------+-------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                     |
+-------------+-------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                          |
+-------------+-------------------------------------------------------------------------------------------+
| Precision   | High                                                                                      |
+-------------+-------------------------------------------------------------------------------------------+
| ClearPHP    | `no-short-tags <https://github.com/dseguy/clearPHP/tree/master/rules/no-short-tags.md>`__ |
+-------------+-------------------------------------------------------------------------------------------+


.. _should-chain-exception:

Should Chain Exception
++++++++++++++++++++++

 Chain exception to provide more context.

When catching an exception and rethrowing another one, it is recommended to chain the exception : this means providing the original exception, so that the final recipient has a chance to track the origin of the problem. This doesn't change the thrown message, but provides more information.

Note : Chaining requires PHP > 5.3.0.

.. code-block:: php

   <?php
       try {
           throw new Exception('Exception 1', 1);
       } catch (\Exception $e) {
           throw new Exception('Exception 2', 2, $e); 
           // Chaining here. 
   
       }
   ?>


See also `Exception\:\:`__construct <https://www.php.net/manual/en/language.oop5.decon.php>`_ <https://www.php.net/manual/en/exception.construct.php>`_ and `What are the best practices for catching and re-throwing exceptions? <https://stackoverflow.com/questions/5551668/what-are-the-best-practices-for-catching-and-re-throwing-exceptions/5551828>`_.


Suggestions
^^^^^^^^^^^

* Add the incoming exception to the newly thrown exception

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------+
| Short name  | Structures/ShouldChainException                                                                         |
+-------------+---------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                             |
+-------------+---------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                   |
+-------------+---------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                     |
+-------------+---------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                   |
+-------------+---------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                        |
+-------------+---------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                    |
+-------------+---------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-magento-structures-shouldchainexception`, :ref:`case-tine20-structures-shouldchainexception` |
+-------------+---------------------------------------------------------------------------------------------------------+


.. _should-make-ternary:

Should Make Ternary
+++++++++++++++++++

 Ternary operators are the best when assigning values to a variable.

This way, they are less verbose, compatible with assignation and easier to read.

.. code-block:: php

   <?php
       // verbose if then structure
       if ($a == 3) {
           $b = 2;
       } else {
           $b = 3;
       }
   
       // compact ternary call
       $b = ($a == 3) ? 2 : 3;
   
       // verbose if then structure
       // Works with short assignations and simple expressions
       if ($a != 3) {
           $b += 2 - $a * 4;
       } else {
           $b += 3;
       }
   
       // compact ternary call
       $b += ($a != 3) ? 2 - $a * 4 : 3;
   
   ?>


See also `Ternary Operator <https://www.php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary>`_ and `Shorthand comparisons in PHP <https://stitcher.io/blog/shorthand-comparisons-in-php>`_.

Specs
^^^^^
+-------------+----------------------------------------------------+
| Short name  | Structures/ShouldMakeTernary                       |
+-------------+----------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`        |
+-------------+----------------------------------------------------+
| Exakt since | 0.8.5                                              |
+-------------+----------------------------------------------------+
| Php Version | All                                                |
+-------------+----------------------------------------------------+
| Severity    | Minor                                              |
+-------------+----------------------------------------------------+
| Time To Fix | Instant (5 mins)                                   |
+-------------+----------------------------------------------------+
| Precision   | High                                               |
+-------------+----------------------------------------------------+
| Examples    | :ref:`case-churchcrm-structures-shouldmaketernary` |
+-------------+----------------------------------------------------+


.. _preprocessable:

Preprocessable
++++++++++++++

 The following expression are made of literals or already known values : they may be fully calculated before running PHP.

.. code-block:: php

   <?php
   
   // Building an array from a string
   $name = 'PHP'.' '.'7.2';
   
   // Building an array from a string
   $list = explode(',', 'a,b,c,d,e,f');
   
   // Calculating a power
   $kbytes = $bytes / pow(2, 10);
   
   // This will never change
   $name = ucfirst(strtolower('PARIS'));
   
   ?>


By doing so, this will reduce the amount of work of PHP.

Suggestions
^^^^^^^^^^^

* Do the work yourself, instead of giving it to PHP

Specs
^^^^^
+-------------+---------------------------------------------------+
| Short name  | Structures/ShouldPreprocess                       |
+-------------+---------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Rector`                     |
+-------------+---------------------------------------------------+
| Exakt since | 0.8.4                                             |
+-------------+---------------------------------------------------+
| Php Version | All                                               |
+-------------+---------------------------------------------------+
| Severity    | Minor                                             |
+-------------+---------------------------------------------------+
| Time To Fix | Instant (5 mins)                                  |
+-------------+---------------------------------------------------+
| Precision   | High                                              |
+-------------+---------------------------------------------------+
| Examples    | :ref:`case-phpadsnew-structures-shouldpreprocess` |
+-------------+---------------------------------------------------+


.. _should-use-explode-args:

Should Use Explode Args
+++++++++++++++++++++++

 `explode() <https://www.php.net/explode>`_ has a third argument, which limits the amount of exploded elements. With it, it is possible to collect only the first elements, or drop the last ones.

.. code-block:: php

   <?php
   
   $exploded = explode(DELIMITER, $string);
   
   // use explode(DELIMITER, $string, -1);
   array_pop($exploded);
   
   // use explode(DELIMITER, $string, -2);
   $c = array_slice($exploded, 0, -2);
   
   // with explode()'s third argument : 
   list($a, $b) = explode(DELIMITER, $string, 2);
   
   // with list() omitted arguments
   list($a, $b, ) = explode(DELIMITER, $string);
   
   ?>


See also `explode <https://www.php.net/manual/en/function.explode.php>`_.



Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/ShouldUseExplodeArgs             |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 1.9.4                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _should-use-foreach:

Should Use Foreach
++++++++++++++++++

 Use foreach instead of for when traversing an array.

`Foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_ is the modern loop : it maps automatically every element of the array to a blind variable, and loop over it. This is faster and safer.

.. code-block:: php

   <?php
   
   // Foreach version
   foreach($array as $element) {
       doSomething($element);
   }
   
   // The above case may even be upgraded with array_map and a callback, 
   // for the simplest one of them
   $array = array_map('doSomething', $array);
   
   // For version (one of various alternatives)
   for($i = 0; $i < count($array); $i++) {
       $element = $array[$i];
       doSomething($element);
   }
   
   // Based on array_pop or array_shift()
   while($value = array_pop($array)) {
       doSomething($array);
   }
   
   ?>


See also `foreach <https://www.php.net/manual/en/control-structures.foreach.php>`_ and `5 Ways To Loop Through An Array In PHP <https://www.codewall.co.uk/5-ways-to-loop-through-array-php/>`_.



Suggestions
^^^^^^^^^^^

* Move for() loops to foreach(), whenever they apply to a finite list of elements

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/ShouldUseForeach                                                                                   |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Suggestions`                                                                                            |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.12.7                                                                                                        |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                           |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                         |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                              |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                          |
+-------------+---------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-expressionengine-structures-shoulduseforeach`, :ref:`case-woocommerce-structures-shoulduseforeach` |
+-------------+---------------------------------------------------------------------------------------------------------------+


.. _should-use-math:

Should Use Math
+++++++++++++++

 Use math operators to make the operation readable.

.. code-block:: php

   <?php
   
   // Adding one to self
   $a *= 2;
   // same as above
   $a += $a;
   
   // Squaring oneself
   $a \*\*\= 2;
   // same as above
   $a *= $a;
   
   // Removing oneself
   $a = 0;
   // same as above
   $a -= $a;
   
   // Dividing oneself
   $a = 1;
   // same as above
   $a /= $a;
   
   // Divisition remainer
   $a = 0;
   // same as above
   $a %= $a;
   
   ?>


See also `Mathematical Functions <https://www.php.net/manual/en/book.math.php>`_.


Suggestions
^^^^^^^^^^^

* Use explicit math assignation

Specs
^^^^^
+-------------+----------------------------------------------+
| Short name  | Structures/ShouldUseMath                     |
+-------------+----------------------------------------------+
| Rulesets    | :ref:`Suggestions`                           |
+-------------+----------------------------------------------+
| Exakt since | 1.1.5                                        |
+-------------+----------------------------------------------+
| Php Version | All                                          |
+-------------+----------------------------------------------+
| Severity    | Minor                                        |
+-------------+----------------------------------------------+
| Time To Fix | Instant (5 mins)                             |
+-------------+----------------------------------------------+
| Precision   | High                                         |
+-------------+----------------------------------------------+
| Examples    | :ref:`case-openemr-structures-shouldusemath` |
+-------------+----------------------------------------------+


.. _should-use-operator:

Should Use Operator
+++++++++++++++++++

 Some functions duplicate the feature of an operator. When in doubt, it is better to use the operator. 

Beware, some edge cases may apply. In particular, backward compatibility may prevent usage of newer features.

* `array_push() <https://www.php.net/array_push>`_ is equivalent to [] 
* `is_object() <https://www.php.net/is_object>`_ is equivalent to `instanceof <https://www.php.net/manual/en/language.operators.type.php>`_
* function_get_arg() and function_get_args() is equivalent to ellipsis : `... <https://www.php.net/manual/en/functions.arguments.php#functions.variable-arg-list>`_
* `chr() <https://www.php.net/chr>`_ is equivalent to string escape sequences, such as ``\n``, ``\x69``, ``u{04699}``
* `call_user_func() <https://www.php.net/call_user_func>`_ is equivalent to ``$functionName(arguments)``, ``$object->$method(`... <https://www.php.net/manual/en/functions.arguments.php#functions.variable-arg-list>`_$arguments)``
* `is_null() <https://www.php.net/is_null>`_ is equivalent to ``=== null``
* php_version() is equivalent to ``PHP_VERSION`` (the constant)
* `is_array() <https://www.php.net/is_array>`_, `is_int() <https://www.php.net/is_int>`_, `is_object() <https://www.php.net/is_object>`_, etc. is equivalent to a scalar typehint




Suggestions
^^^^^^^^^^^

* Use [] instead of array_push()
* Use instanceof instead of is_object()
* Use ... instead of function_get_arg() and function_get_args()
* Use escape sequences instead of chr()
* Use dynamic function call instead of call_user_func()
* Use === null instead of is_null()
* Use PHP_VERSION instead of php_version()
* Use typehint instead of is_int(), is_string(), is_bool(), etc.

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------+
| Short name  | Structures/ShouldUseOperator                                                                        |
+-------------+-----------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Suggestions`                                                                                  |
+-------------+-----------------------------------------------------------------------------------------------------+
| Exakt since | 1.3.0                                                                                               |
+-------------+-----------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                 |
+-------------+-----------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                               |
+-------------+-----------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                    |
+-------------+-----------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                |
+-------------+-----------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-zencart-structures-shoulduseoperator`, :ref:`case-sugarcrm-structures-shoulduseoperator` |
+-------------+-----------------------------------------------------------------------------------------------------+


.. _simplify-regex:

Simplify Regex
++++++++++++++

 Avoid using regex when the searched string or the replacement are simple enough.

PRCE regex are a powerful way to search inside strings, but they also come at the price of performance. When the query is simple enough, try using `strpos() <https://www.php.net/strpos>`_ or `stripos() <https://www.php.net/stripos>`_ instead.

.. code-block:: php

   <?php
   
   // simple preg calls
   if (preg_match('/a/', $string))  {}
   if (preg_match('/b/i', $string)) {} // case insensitive
   
   // light replacements
   if( strpos('a', $string)) {}
   if( stripos('b', $string)) {}       // case insensitive
   
   ?>



Suggestions
^^^^^^^^^^^

* Use str_replace(), strtr() or even strpos()

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------+
| Short name  | Structures/SimplePreg                                                               |
+-------------+-------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Performances`                                                                 |
+-------------+-------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                               |
+-------------+-------------------------------------------------------------------------------------+
| Php Version | All                                                                                 |
+-------------+-------------------------------------------------------------------------------------+
| Severity    | Major                                                                               |
+-------------+-------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                     |
+-------------+-------------------------------------------------------------------------------------+
| Precision   | High                                                                                |
+-------------+-------------------------------------------------------------------------------------+
| Examples    | :ref:`case-zurmo-structures-simplepreg`, :ref:`case-openconf-structures-simplepreg` |
+-------------+-------------------------------------------------------------------------------------+


.. _static-loop:

Static Loop
+++++++++++

 `Static <https://www.php.net/manual/en/language.oop5.static.php>`_ loop may be preprocessed.

It looks like the following loops are `static <https://www.php.net/manual/en/language.oop5.static.php>`_ : the same code is executed each time, without taking into account loop variables.

.. code-block:: php

   <?php
   
   // Static loop
   $total = 0;
   for($i = 0; $i < 10; $i++) {
       $total += $i;
   }
   
   // The above loop may be replaced by (with some math help)
   $total = 10 * (10  + 1) / 2;
   
   // Non-Static loop (the loop depends on the size of the array)
   $n = count($array);
   for($i = 0; $i < $n; $i++) {
       $total += $i;
   }
   
   ?>


It is possible to create loops that don't use any blind variables, though this is fairly rare. In particular, calling a method may update an internal pointer, like `next() <https://www.php.net/next>`_ or ``SimpleXMLIterator\:\:`next() <https://www.php.net/next>`_``. 

It is recommended to turn a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ loop into an expression that avoid the loop. For example, replacing the sum of all integers by the ``function $n * ($n + 1) / 2``, or using `array_sum() <https://www.php.net/array_sum>`_.

This analysis doesn't detect usage of variables with ``compact``.

 

Suggestions
^^^^^^^^^^^

* Precalculate the result of that loop and removes it altogether
* Check that the loop is not missing a blind variable usage
* Replace the usage of a loop with a native PHP call : for example, with str_repeat(). Although the loop is still here, it usually reflects better the intend.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Structures/StaticLoop |
+-------------+-----------------------+
| Rulesets    | :ref:`Analyze`        |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _strip\_tags-skips-closed-tag:

strip_tags Skips Closed Tag
+++++++++++++++++++++++++++

 `strip_tags() <https://www.php.net/strip_tags>`_ skips non-`self <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_ closing tags. This means that tags such as ``<br />`` will be ignored from the 2nd argument of the function.

.. code-block:: php

   <?php
   
   $input = 'a<br />';
   
   // Displays 'a' and clean the tag
   echo strip_tags($input, '<br>');
   
   // Displays 'a<br />' and skips the allowed tag
   echo strip_tags($input, '<br/>');
   
   ?>


See also `strip_tags <https://www.php.net/manual/en/function.strip-tags.php>`_.

Suggestions
^^^^^^^^^^^

* Do not use self-closing tags in the 2nd parameter

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/StripTagsSkipsClosedTag          |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 1.9.3                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _strpos()-like-comparison:

Strpos()-like Comparison
++++++++++++++++++++++++

 The result of that function may be mistaken with an error.

`strpos() <https://www.php.net/strpos>`_, along with several PHP native functions, returns a string position, starting at 0, or false, in case of failure. 

.. code-block:: php

   <?php
   
   // This is the best comparison
   if (strpos($string, 'a') === false) { }
   
   // This is OK, as 2 won't be mistaken with false
   if (strpos($string, 'a') == 2) { }
   
   // strpos is one of the 26 functions that may behave this way
   if (preg_match($regex, $string)) { } 
   
   // This works like above, catching the value for later reuse
   if ($a = strpos($string, 'a')) { }
   
   // This misses the case where 'a' is the first char of the string
   if (strpos($string, 'a')) { }
   
   // This misses the case where 'a' is the first char of the string, just like above
   if (strpos($string, 'a') == 0) { }
   
   ?>


It is recommended to check the result of `strpos() <https://www.php.net/strpos>`_ with === or !==, so as to avoid confusing 0 and false. 

This analyzer list all the `strpos() <https://www.php.net/strpos>`_-like functions that are directly compared with == or !=. `preg_match() <https://www.php.net/preg_match>`_, when its first argument is a literal, is omitted : this function only returns `NULL <https://www.php.net/manual/en/language.types.null.php>`_ in case of regex error. 

The full list is the following : 


* `array_search() <https://www.php.net/array_search>`_
* `collator_compare() <https://www.php.net/collator_compare>`_
* `collator_get_sort_key() <https://www.php.net/collator_get_sort_key>`_
* `current() <https://www.php.net/current>`_
* `fgetc() <https://www.php.net/fgetc>`_
* `file_get_contents() <https://www.php.net/file_get_contents>`_
* `file_put_contents() <https://www.php.net/file_put_contents>`_
* `fread() <https://www.php.net/fread>`_
* `iconv_strpos() <https://www.php.net/iconv_strpos>`_
* `iconv_strrpos() <https://www.php.net/iconv_strrpos>`_
* `imagecolorallocate() <https://www.php.net/imagecolorallocate>`_
* `imagecolorallocatealpha() <https://www.php.net/imagecolorallocatealpha>`_
* `mb_strlen() <https://www.php.net/mb_strlen>`_
* `next() <https://www.php.net/next>`_
* `pcntl_getpriority() <https://www.php.net/pcntl_getpriority>`_
* `preg_match() <https://www.php.net/preg_match>`_
* `prev() <https://www.php.net/prev>`_
* `readdir() <https://www.php.net/readdir>`_
* `stripos() <https://www.php.net/stripos>`_
* `strpos() <https://www.php.net/strpos>`_
* `strripos() <https://www.php.net/strripos>`_
* `strrpos() <https://www.php.net/strrpos>`_
* `strtok() <https://www.php.net/strtok>`_
* `curl_exec() <https://www.php.net/curl_exec>`_

In PHP 8.0, str_contains() will do the expected job of `strpos() <https://www.php.net/strpos>`_, with less confusion. 

See also `strpos not working correctly <https://bugs.php.net/bug.php?id=52198>`_.



Suggestions
^^^^^^^^^^^

* Use identity comparisons, for 0 values : === instead of ==, etc.
* Compare with other exact values than 0 : strpos() == 2
* Use str_contains()

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------+
| Short name  | Structures/StrposCompare                                                                            |
+-------------+-----------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Top10`                                           |
+-------------+-----------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                               |
+-------------+-----------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                 |
+-------------+-----------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                               |
+-------------+-----------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                     |
+-------------+-----------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                |
+-------------+-----------------------------------------------------------------------------------------------------+
| ClearPHP    | `strict-comparisons <https://github.com/dseguy/clearPHP/tree/master/rules/strict-comparisons.md>`__ |
+-------------+-----------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-piwigo-structures-strposcompare`, :ref:`case-thelia-structures-strposcompare`            |
+-------------+-----------------------------------------------------------------------------------------------------+


.. _drop-substr-last-arg:

Drop Substr Last Arg
++++++++++++++++++++

 `Substr() <https://www.php.net/substr>`_ works till the end of the string when the last argument is omitted. There is no need to calculate string size to make this work.

.. code-block:: php

   <?php
   
   $string = 'abcdef';
   
   // Extract the end of the string
   $cde = substr($string, 2);
   
   // Too much work
   $cde = substr($string, 2, strlen($string));
   
   ?>


See also `substr <http://www.php.net/substr>`_.


Suggestions
^^^^^^^^^^^

* Use negative length
* Omit the last argument to get the string till its end

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------+
| Short name  | Structures/SubstrLastArg                                                                   |
+-------------+--------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Suggestions`                                                                         |
+-------------+--------------------------------------------------------------------------------------------+
| Exakt since | 1.2.2                                                                                      |
+-------------+--------------------------------------------------------------------------------------------+
| Php Version | All                                                                                        |
+-------------+--------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                      |
+-------------+--------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                            |
+-------------+--------------------------------------------------------------------------------------------+
| Precision   | High                                                                                       |
+-------------+--------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-suitecrm-structures-substrlastarg`, :ref:`case-tine20-structures-substrlastarg` |
+-------------+--------------------------------------------------------------------------------------------+


.. _substr-to-trim:

Substr To Trim
++++++++++++++

 When removing the first or the last character of a string, `trim() <https://www.php.net/trim>`_ does a more readable job. 

`trim() <https://www.php.net/trim>`_, `ltrim() <https://www.php.net/ltrim>`_ and `rtrim() <https://www.php.net/rtrim>`_ accept a string as second argument. Those will all be removed from the endings of the string.

.. code-block:: php

   <?php
   
   $a = '$drop the dollar'; 
   $b = substr($a, 1); // drop the first char 
   $b = ltrim($a, '$'); // remove the initial '$'s
   
   
   $b = substr($a, 1);     // replace with ltrim()
   
   $b = substr($a, 0, -1); // replace with rtrim()
   
   $b = substr($a, 1, -1); // replace with trim()
   
   ?>


`trim() <https://www.php.net/trim>`_ will remove all occurrences of the requested char(). This may remove a loop with `substr() <https://www.php.net/substr>`_, or remove more than is needed. 

`trim() <https://www.php.net/trim>`_ doesn't work with multi-bytes strings, but so does `substr() <https://www.php.net/substr>`_. For that, use `mb_substr() <https://www.php.net/mb_substr>`_, as there isn't any mb_trim function (yet).

See also `trim <https://www.php.net/manual/en/function.trim.php>`_, `ltrim <https://www.php.net/manual/en/function.ltrim.php>`_, `rtrim <https://www.php.net/manual/en/function.rtrim.php>`_.



Suggestions
^^^^^^^^^^^

* Replace substr() with trim(), ltrim() or rtrim().

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Structures/SubstrToTrim |
+-------------+-------------------------+
| Rulesets    | :ref:`Suggestions`      |
+-------------+-------------------------+
| Exakt since | 1.8.3                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Quick (30 mins)         |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _suspicious-comparison:

Suspicious Comparison
+++++++++++++++++++++

 The comparison seems to be misplaced.

A comparison happens in the last argument, while the actual function expect another type : this may be the case of a badly placed parenthesis.

.. code-block:: php

   <?php
   
   // trim expect a string, a boolean is given.
   if (trim($str === '')){
   
   }
   
   // Just move the first closing parenthesis to give back its actual meaning
   if (trim($str) === ''){
   
   }
   
   ?>


Original idea by `Vladimir Reznichenko <https://twitter.com/kalessil>`_. 



Suggestions
^^^^^^^^^^^

* Remove the comparison altogether
* Move the comparison to its right place : that, or more the parenthesis.
* This may be what is intended : just leave it.

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/SuspiciousComparison                                                                                   |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                                    |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.11.0                                                                                                            |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                               |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                             |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                                  |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                              |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-phpipam-structures-suspiciouscomparison`, :ref:`case-expressionengine-structures-suspiciouscomparison` |
+-------------+-------------------------------------------------------------------------------------------------------------------+


.. _switch-to-switch:

Switch To Switch
++++++++++++++++

 The following structures are based on if / elseif / else. Since they have more than three conditions (not withstanding the final else), it is recommended to use the switch structure, so as to make this more readable.

On the other hand, `switch() <https://www.php.net/manual/en/control-structures.switch.php>`_ structures with less than 3 elements should be expressed as a if / else structure.

Note that if condition that uses strict typing (=== or !==) can't be converted to `switch() <https://www.php.net/manual/en/control-structures.switch.php>`_ as the latter only performs == or != comparisons.

.. code-block:: php

   <?php
   
   if ($a == 1) {
   
   } elseif ($a == 2) {
   
   } elseif ($a == 3) {
   
   } elseif ($a == 4) {
   
   } else {
   
   }
   
   // Better way to write long if/else lists
   switch ($a) {
       case 1 : 
           doSomething(1);
           break 1;
       
       case 2 : 
           doSomething(2);
           break 1;
   
       case 3 : 
           doSomething(3);
           break 1;
   
       case 4 : 
           doSomething(4);
           break 1;
       
       default :
           doSomething();
           break 1;
   }
   
   ?>


Note that simple switch statement, which compare a variable to a literal are optimised in PHP 7.2 and more recent. This gives a nice performance boost, and keep code readable.

See also `PHP 7.2's switch optimisations <https://derickrethans.nl/php7.2-switch.html>`_ and `Is Your Code Readable By Humans? Cognitive Complexity Tells You <https://www.tomasvotruba.cz/blog/2018/05/21/is-your-code-readable-by-humans-cognitive-complexity-tells-you/>`_.


Suggestions
^^^^^^^^^^^

* Use a switch statement, rather than a long string of if/else
* Use a match() statement, rather than a long string of if/else (PHP 8.0 +)

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------+
| Short name  | Structures/SwitchToSwitch                                                                 |
+-------------+-------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                            |
+-------------+-------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                     |
+-------------+-------------------------------------------------------------------------------------------+
| Php Version | All                                                                                       |
+-------------+-------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                     |
+-------------+-------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                           |
+-------------+-------------------------------------------------------------------------------------------+
| Precision   | High                                                                                      |
+-------------+-------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-thelia-structures-switchtoswitch`, :ref:`case-xoops-structures-switchtoswitch` |
+-------------+-------------------------------------------------------------------------------------------+


.. _switch-with-too-many-default:

Switch With Too Many Default
++++++++++++++++++++++++++++

 Switch statements should only hold one default, not more. Check the code and remove the extra default.  

PHP 7.0 won't compile a script that allows for several default cases. 

Multiple default happens often with large `switch() <https://www.php.net/manual/en/control-structures.switch.php>`_.

.. code-block:: php

   <?php
   
   switch($a) {
       case 1 : 
           break;
       default : 
           break;
       case 2 : 
           break;
       default :  // This default is never reached
           break;
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Remove the useless default : it may be the first, or the last. In case of ambiguity, keep the first, as it is the one being used at the moment.

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/SwitchWithMultipleDefault                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56` |
+-------------+------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Php Version | 7.0-                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                            |
+-------------+------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+


.. _switch-without-default:

Switch Without Default
++++++++++++++++++++++

 Always use a default statement in `switch() <https://www.php.net/manual/en/control-structures.switch.php>`_.

Switch statements hold a number of 'case' that cover all known situations, and a 'default' one which is executed when all other options are exhausted. 

.. code-block:: php

   <?php
   
   // Missing default
   switch($format) {
       case 'gif' : 
           processGif();
           break 1;
       
       case 'jpeg' : 
           processJpeg();
           break 1;
           
       case 'bmp' :
           throw new UnsupportedFormat($format);
   }
   // In case $format is not known, then switch is ignored and no processing happens, leading to preparation errors
   
   
   // switch with default
   switch($format) {
       case 'text' : 
           processText();
           break 1;
       
       case 'jpeg' : 
           processJpeg();
           break 1;
           
       case 'rtf' :
           throw new UnsupportedFormat($format);
           
       default :
           throw new UnknownFileFormat($format);
   }
   // In case $format is not known, an exception is thrown for processing 
   
   ?>


Most of the time, `switch() <https://www.php.net/manual/en/control-structures.switch.php>`_ do need a default case, so as to catch the odd situation where the 'value is not what it was expected'. This is a good place to catch unexpected values, to set a default behavior. 


Suggestions
^^^^^^^^^^^

* Add a default case

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/SwitchWithoutDefault                                                                                   |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                                       |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                             |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                               |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                             |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                   |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                              |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-switch-without-default <https://github.com/dseguy/clearPHP/tree/master/rules/no-switch-without-default.md>`__ |
+-------------+-------------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-zencart-structures-switchwithoutdefault`, :ref:`case-traq-structures-switchwithoutdefault`             |
+-------------+-------------------------------------------------------------------------------------------------------------------+


.. _ternary-in-concat:

Ternary In Concat
+++++++++++++++++

 Ternary and coalesce operator have higher priority than dot '.' for concatenation. This means that : 

.. code-block:: php

   <?php
     // print B0CE as expected  
     print 'B'.$b.'C'. ($b > 1 ? 'D') : 'E';
   
     // print E, instead of B0CE
     print 'B'.$b.'C'. $b > 1 ? 'D' : 'E';
   
     print 'B'.$b.'C'. $b > 1 ? 'D' : 'E';
   ?>


prints actually 'E', instead of the awaited 'B0CE'.

To be safe, always add parenthesis when using ternary operator with concatenation.

See also `Operator Precedence <https://www.php.net/manual/en/language.operators.precedence.php>`_.



Suggestions
^^^^^^^^^^^

* Use parenthesis 
* Avoid ternaries and coalesce operators inside a string

Specs
^^^^^
+-------------+-------------------------------------------------+
| Short name  | Structures/TernaryInConcat                      |
+-------------+-------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`     |
+-------------+-------------------------------------------------+
| Exakt since | 0.8.4                                           |
+-------------+-------------------------------------------------+
| Php Version | All                                             |
+-------------+-------------------------------------------------+
| Severity    | Critical                                        |
+-------------+-------------------------------------------------+
| Time To Fix | Quick (30 mins)                                 |
+-------------+-------------------------------------------------+
| Precision   | High                                            |
+-------------+-------------------------------------------------+
| Examples    | :ref:`case-teampass-structures-ternaryinconcat` |
+-------------+-------------------------------------------------+


.. _test-then-cast:

Test Then Cast
++++++++++++++

 A test is run on the value, but the cast value is later used. 

The cast may introduce a distortion to the value, and still lead to the unwanted situation. For example, comparing to 0, then later casting to an int. The comparison to 0 is done without casting, and as such, 0.1 is different from 0. Yet, (int) 0.1 is actually 0, leading to a Division by 0 error.

.. code-block:: php

   <?php
   
   // Here. $x may be different from 0, but (int) $x may be 0
   $x = 0.1;
   
   if ($x != 0) {
       $y = 4 / (int) $x;
   }
   
   // Safe solution : check the cast value.
   if ( (int) $x != 0) {
       $y = 4 / (int) $x;
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Test with the cast value

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------+
| Short name  | Structures/TestThenCast                                                                   |
+-------------+-------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                            |
+-------------+-------------------------------------------------------------------------------------------+
| Exakt since | 1.1.6                                                                                     |
+-------------+-------------------------------------------------------------------------------------------+
| Php Version | All                                                                                       |
+-------------+-------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                     |
+-------------+-------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                          |
+-------------+-------------------------------------------------------------------------------------------+
| Precision   | High                                                                                      |
+-------------+-------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-dolphin-structures-testthencast`, :ref:`case-suitecrm-structures-testthencast` |
+-------------+-------------------------------------------------------------------------------------------+


.. _throws-an-assignement:

Throws An Assignement
+++++++++++++++++++++

 It is possible to throw an exception, and, in the same time, assign this exception to a variable.

However, the variable will never be used, as the exception is thrown, and any following code is not executed, unless the exception is caught in the same scope. 

.. code-block:: php

   <?php
   
       // $e is useful, though not by much
       $e = new() Exception();
       throw $e;
   
       // $e is useless
       throw $e = new Exception();
   
   ?>




Suggestions
^^^^^^^^^^^

* Drop the assignation

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/ThrowsAndAssign                  |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.8.4                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Instant (5 mins)                            |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _timestamp-difference:

Timestamp Difference
++++++++++++++++++++

 ``time()`` and ``microtime()`` shouldn't be used to calculate duration. 

``time()`` and ``microtime()`` are subject to variations, depending on system clock variations, such as daylight saving time difference (every spring and fall, one hour variation), or leap seconds, happening on ``June, 30th`` or ``December 31th``, as announced by `IERS <https://www.iers.org/IERS/EN/Home/home_node.html>`_.

.. code-block:: php

   <?php
   
   // Calculating tomorow, same hour, the wrong way
   // tomorrow is not always in 86400s, especially in countries with daylight saving 
   $tomorrow = time()  + 86400; 
   
   // Good way to calculate tomorrow
   $datetime = new DateTime('tomorrow');
   
   ?>


When the difference may be rounded to a larger time unit (rounding the difference to days, or several hours), the variation may be ignored safely.

When the difference is very small, it requires a better way to measure time difference, such as `Ticks <https://www.php.net/manual/en/control-structures.declare.php#control-structures.declare.ticks>'_, 
`ext/hrtime <https://www.php.net/manual/en/book.hrtime.php>'_, or including a check on the actual time zone (``ini_get()`` with 'date.timezone'). 

See also `PHP `DateTime <https://www.php.net/`DateTime <https://www.php.net/DateTime>`_>`_ difference – it’s a trap! <http://blog.codebusters.pl/en/php-datetime-difference-trap/>`_ and `PHP Daylight savings bug? <https://stackoverflow.com/questions/22519091/php-daylight-savings-bug>`_.


Suggestions
^^^^^^^^^^^

* For small time intervals, use hrtime() functions
* For larger time intervals, use add() method with ``DateTime``

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------------+
| Short name  | Structures/TimestampDifference                                                                        |
+-------------+-------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                           |
+-------------+-------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                 |
+-------------+-------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                   |
+-------------+-------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                 |
+-------------+-------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                         |
+-------------+-------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                  |
+-------------+-------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-zurmo-structures-timestampdifference`, :ref:`case-shopware-structures-timestampdifference` |
+-------------+-------------------------------------------------------------------------------------------------------+


.. _\_\_tostring()-throws-exception:

__toString() Throws Exception
+++++++++++++++++++++++++++++

 Magical method `__toString() <https://www.php.net/manual/en/language.oop5.magic.php>`_ can't throw exceptions.

In fact, `__toString() <https://www.php.net/manual/en/language.oop5.magic.php>`_ may not let an exception pass. If it throw an exception, but must catch it. If an underlying method throws an exception, it must be caught.

.. code-block:: php

   <?php
   
   class myString {
       private $string = null;
       
       public function __construct($string) {
           $this->string = $string;
       }
       
       public function __toString() {
           // Do not throw exceptions in __toString
           if (!is_string($this->string)) {
               throw new Exception("$this->string is not a string!!");
           }
           
           return $this->string;
       }
   }   
   
   ?>


A fatal error is displayed, when an exception is not intercepted in the `__toString() <https://www.php.net/manual/en/language.oop5.magic.php>`_ function. 

\:\:

    PHP Fatal error:  Method myString\:\:`__toString() <https://www.php.net/manual/en/language.oop5.magic.php>`_ must not throw an exception, caught Exception: 'Exception message' in ``file.php``

See also `__toString() <https://www.php.net/manual/en/language.oop5.magic.php>`_.


Suggestions
^^^^^^^^^^^

* Remove any usage of exception from __toString() magic method

Specs
^^^^^
+-------------+------------------------------------+
| Short name  | Structures/toStringThrowsException |
+-------------+------------------------------------+
| Rulesets    | :ref:`Analyze`                     |
+-------------+------------------------------------+
| Exakt since | 0.8.4                              |
+-------------+------------------------------------+
| Php Version | 7.4-                               |
+-------------+------------------------------------+
| Severity    | Major                              |
+-------------+------------------------------------+
| Time To Fix | Quick (30 mins)                    |
+-------------+------------------------------------+
| Precision   | High                               |
+-------------+------------------------------------+


.. _try-with-finally:

Try With Finally
++++++++++++++++

 Indicates if a try use a finally statement.

.. code-block:: php

   <?php
   
   try {
       $a = doSomething();
   } catch (Throwable $e) {
       // Fix the problem
   } finally {
       // remove $a anyway
       unset($a);
   }
   
   ?>


See also `Exceptions <https://www.php.net/manual/en/language.exceptions.php>`_, to learn about catching an exception.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Structures/TryFinally |
+-------------+-----------------------+
| Rulesets    | :ref:`CE`             |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | 5.5+                  |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | Very high             |
+-------------+-----------------------+


.. _unchecked-resources:

Unchecked Resources
+++++++++++++++++++

 Resources are created, but never checked before being used. This is not safe.

Always check that resources are correctly created before using them.

.. code-block:: php

   <?php
   
   // always check that the resource is created correctly
   $fp = fopen($d,'r');
   if ($fp === false) {
       throw new Exception('File not found');
   } 
   $firstLine = fread($fp);
   
   // This directory is not checked : the path may not exist and return false
   $uncheckedDir = opendir($pathToDir);
   while(readdir($uncheckedDir)) {
       // do something()
   }
   
   // This file is not checked : the path may not exist or be unreadable and return false
   $fp = fopen($pathToFile);
   while($line = freads($fp)) {
       $text .= $line;
   }
   
   // unsafe one-liner : using bzclose on an unchecked resource
   bzclose(bzopen('file'));
   
   ?>


See also `resources <https://www.php.net/manual/en/language.types.resource.php>`_.


Suggestions
^^^^^^^^^^^

* Add a check between the resource acquisition and its usage

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/UncheckedResources                                                                               |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                                 |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                       |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                         |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                       |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                               |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                        |
+-------------+-------------------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-unchecked-resources <https://github.com/dseguy/clearPHP/tree/master/rules/no-unchecked-resources.md>`__ |
+-------------+-------------------------------------------------------------------------------------------------------------+


.. _unconditional-break-in-loop:

Unconditional Break In Loop
+++++++++++++++++++++++++++

 An unconditional `break <https://www.php.net/manual/en/control-structures.break.php>`_ in a loop creates dead code. Since the `break <https://www.php.net/manual/en/control-structures.break.php>`_ is directly in the body of the loop, it is always executed, creating a strange loop that can only run once. 

Here, `break <https://www.php.net/manual/en/control-structures.break.php>`_ may also be a return, a goto or a `continue <https://www.php.net/manual/en/control-structures.continue.php>`_. They all branch out of the loop. Such statement are valid, but should be moderated with a condition. 

.. code-block:: php

   <?php
   
   // return in loop should be in 
   function summAll($array) {
       $sum = 0;
       
       foreach($array as $a) {
           // Stop at the first error
           if (is_string($a)) {
               return $sum;
           }
           $sum += $a;
       }
       
       return $sum;
   }
   
   // foreach loop used to collect first element in array
   function getFirst($array) {
       foreach($array as $a) {
           return $a;
       }
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Remove the loop and call the content of the loop once.

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/UnconditionLoopBreak                                                                              |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                                  |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.12.16                                                                                                      |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                          |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                        |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                              |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                         |
+-------------+--------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-livezilla-structures-unconditionloopbreak`, :ref:`case-mediawiki-structures-unconditionloopbreak` |
+-------------+--------------------------------------------------------------------------------------------------------------+


.. _unkown-regex-options:

Unkown Regex Options
++++++++++++++++++++

 Regex support in PHP accepts the following list of options : ``eimsuxADJSUX``. 

All other letter used as option are not supported : depending on the situation, they may be ignored or raise an error.

.. code-block:: php

   <?php
   
   // all options are available
   if (preg_match('/\d+/isA', $string, $results)) { }
   
   // p and h are not regex options, p is double
   if (preg_match('/\d+/php', $string, $results)) { }
   
   ?>


See also `Pattern Modifiers <https://www.php.net/manual/en/reference.pcre.pattern.modifiers.php>`_


Suggestions
^^^^^^^^^^^

* Remove the unknown options
* Replace the option with a valid one
* Fix any syntax typo in the regex

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Structures/UnknownPregOption |
+-------------+------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`    |
+-------------+------------------------------+
| Exakt since | 0.8.4                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Major                        |
+-------------+------------------------------+
| Time To Fix | Slow (1 hour)                |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _unpreprocessed-values:

Unpreprocessed Values
+++++++++++++++++++++

 Preprocessing values is the preparation of values before PHP executes the code. 

There is no macro language in PHP, that prepares the code before compilation, bringing some comfort and short syntax. Most of the time, one uses PHP itself to preprocess data. 

For example : 

.. code-block:: php

   <?php
       $days_en = 'monday,tuesday,wednesday,thursday,friday,saturday,sunday';
       $days_zh = '星期－,星期二,星期三,星期四,星期五,星期六,星期日';
   
       $days = explode(',', $lang === 'en' ? $days_en : $days_zh); 
   ?>


could be written 

.. code-block:: php

   <?php
       if ($lang === 'en') {
           $days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
       } else {
           $days = ['星期－', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日'];
       }
   ?>


and avoid preprocessing the string into an array first. 

Preprocessing could be done anytime the script includes all the needed values to process the expression. 



Suggestions
^^^^^^^^^^^

* Preprocess the values and hardcode them in PHP. Do not use PHP to calculate something at the last moment.
* Use already processed values, or cache to avoid calculating the value each hit.
* Create a class that export the data in the right format for every situation, including the developer's comfort.

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------+
| Short name  | Structures/Unpreprocessed                                                                         |
+-------------+---------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                    |
+-------------+---------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                             |
+-------------+---------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                               |
+-------------+---------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                             |
+-------------+---------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                  |
+-------------+---------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                              |
+-------------+---------------------------------------------------------------------------------------------------+
| ClearPHP    | `always-preprocess <https://github.com/dseguy/clearPHP/tree/master/rules/always-preprocess.md>`__ |
+-------------+---------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-zurmo-structures-unpreprocessed`, :ref:`case-piwigo-structures-unpreprocessed`         |
+-------------+---------------------------------------------------------------------------------------------------+


.. _unreachable-code:

Unreachable Code
++++++++++++++++

 Code may be unreachable, because other instructions prevent its reaching. 

For example, it be located after throw, return, `exit() <https://www.php.net/`exit <https://www.www.php.net/exit>`_>`_, `die() <https://www.php.net/`die <https://www.php.net/die>`_>`_, goto, `break <https://www.php.net/manual/en/control-structures.break.php>`_ or `continue <https://www.php.net/manual/en/control-structures.continue.php>`_ : this way, it cannot be reached, as the previous instruction will divert the engine to another part of the code. 

.. code-block:: php

   <?php
   
   function foo() {
       $a++;
       return $a;
       $b++;      // $b++ can't be reached;
   }
   
   function bar() {
       if ($a) {
           return $a;
       } else {
           return $b;
       }
       $b++;      // $b++ can't be reached;
   }
   
   foreach($a as $b) {
       $c += $b;
       if ($c > 10) {
           continue 1;
       } else {
           $c--;
           continue;
       }
       $d += $e;   // this can't be reached
   }
   
   $a = 1;
   goto B;
   class foo {}    // Definitions are accessible, but not functioncalls
   B: 
   echo $a;
   
   ?>


This is dead code, that may be removed.

Suggestions
^^^^^^^^^^^

* Remove the unreachable code
* Remove the blocking expression, and let the code execute

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------+
| Short name  | Structures/UnreachableCode                                                              |
+-------------+-----------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Dead code <dead-code>`, :ref:`Suggestions`                                        |
+-------------+-----------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                   |
+-------------+-----------------------------------------------------------------------------------------+
| Php Version | All                                                                                     |
+-------------+-----------------------------------------------------------------------------------------+
| Severity    | Major                                                                                   |
+-------------+-----------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                        |
+-------------+-----------------------------------------------------------------------------------------+
| Precision   | High                                                                                    |
+-------------+-----------------------------------------------------------------------------------------+
| ClearPHP    | `no-dead-code <https://github.com/dseguy/clearPHP/tree/master/rules/no-dead-code.md>`__ |
+-------------+-----------------------------------------------------------------------------------------+


.. _unset-in-foreach:

Unset In Foreach
++++++++++++++++

 Unset applied to the variables of a ``foreach`` loop are useless. Those variables are copies and not the actual value. Even if the value is a reference, unsetting it has no effect on the original array : the only effect may be indirect, on elements inside an array, or on properties inside an object.

.. code-block:: php

   <?php
   
   // When unset is useless
   $array = [1, 2, 3];
   foreach($array as $a) {
       unset($a);
   }
   
   print_r($array); // still [1, 2, 3]
   
   foreach($array as $b => &$a) {
       unset($a);
   }
   
   print_r($array); // still [1, 2, 3]
   
   // When unset is useful
   $array = [ [ 'c' => 1] ]; // Array in array
   foreach($array as &$a) {
       unset(&$a['c']);
   }
   
   print_r($array); // now [ ['c' => null] ]
   
   ?>


See also `foreach <https://www.php.net/manual/en/control-structures.foreach.php>`_.


Suggestions
^^^^^^^^^^^

* Drop the unset

Specs
^^^^^
+-------------+----------------------------------------------+
| Short name  | Structures/UnsetInForeach                    |
+-------------+----------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Dead code <dead-code>` |
+-------------+----------------------------------------------+
| Exakt since | 0.8.4                                        |
+-------------+----------------------------------------------+
| Php Version | All                                          |
+-------------+----------------------------------------------+
| Severity    | Major                                        |
+-------------+----------------------------------------------+
| Time To Fix | Quick (30 mins)                              |
+-------------+----------------------------------------------+
| Precision   | High                                         |
+-------------+----------------------------------------------+


.. _unsupported-types-with-operators:

Unsupported Types With Operators
++++++++++++++++++++++++++++++++

 Arrays, resources and objects are generally not accepted with unary and binary operators. 

The operators are `+`, `-`, `*`, `/`, `**`, `%`, `<<`, `>>`, `&`, `|`, `^`, `~`, `++` and `--`.

.. code-block:: php

   <?php
   
   var_dump([] % [42]);
   // int(0) in PHP 7.x
   // TypeError in PHP 8.0 + 
   
   // Also impossible usage : index are string or int
   $a = [];
   $b = $c[$a]; 
   
   ?>


In PHP 8.0, the rules have been made stricter and more consistent. 

The only valid operator is `+`, combined with arrays in both operands. Other situation will throw `TypeError`.

See also `Stricter type checks for arithmetic/bitwise operators <https://wiki.php.net/rfc/arithmetic_operator_type_checks>`_ and `TypeError <https://www.php.net/manual/en/class.typeerror.php>`_.


Suggestions
^^^^^^^^^^^

* Do not use those values with those operators
* Use a condition to skip this awkward situation
* Add an extra step to turn this value into a valid type

Specs
^^^^^
+-------------+------------------------------------------------------+
| Short name  | Structures/UnsupportedTypesWithOperators             |
+-------------+------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CompatibilityPHP80` |
+-------------+------------------------------------------------------+
| Exakt since | 2.1.9                                                |
+-------------+------------------------------------------------------+
| Php Version | All                                                  |
+-------------+------------------------------------------------------+
| Severity    | Minor                                                |
+-------------+------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                      |
+-------------+------------------------------------------------------+
| Precision   | Medium                                               |
+-------------+------------------------------------------------------+


.. _unused-global:

Unused Global
+++++++++++++

 A global keyword is used in a method, yet the variable is not actually used. This makes PHP import values for nothing, or may create interference

.. code-block:: php

   <?php
       function foo() {
           global bar;
           
           return 1;
       }
   ?>




Suggestions
^^^^^^^^^^^

* Remove the global declaration
* Remove the global variable altogether

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/UnusedGlobal                     |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`                              |
+-------------+---------------------------------------------+
| Exakt since | 0.8.4                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+
| Examples    | :ref:`case-dolphin-structures-unusedglobal` |
+-------------+---------------------------------------------+


.. _unused-label:

Unused Label
++++++++++++

 Some labels have been defined in the code, but they are not used. They may be removed as they are dead code.

.. code-block:: php

   <?php
   
   $a = 0;
   A: 
   
       ++$a;
       
       // A loop. A: is used
       if ($a < 10) { goto A; }
   
   // B is never called explicitely. This is useless.
   B: 
   
   ?>


There is no analysis for undefined goto call, as PHP checks that goto has a destination label at compile time : 

See also `Goto <https://www.php.net/manual/en/control-structures.goto.php>`_.



Suggestions
^^^^^^^^^^^

* Remove the unused label
* Add a goto call to this label
* Check for spelling mistakes

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Structures/UnusedLabel       |
+-------------+------------------------------+
| Rulesets    | :ref:`Dead code <dead-code>` |
+-------------+------------------------------+
| Exakt since | 0.8.4                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Quick (30 mins)              |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _use-array-functions:

Use Array Functions
+++++++++++++++++++

 There are a lot of native PHP functions for arrays. It is often faster to take advantage of them than write a loop.

* `array_push() <https://www.php.net/array_push>`_ : use `array_merge() <https://www.php.net/array_merge>`_
* `array_slice() <https://www.php.net/array_slice>`_ : use `array_chunk() <https://www.php.net/array_chunk>`_
* index access : use `array_column() <https://www.php.net/array_column>`_
* append `[]`: use `array_merge() <https://www.php.net/array_merge>`_
* addition : use `array_sum() <https://www.php.net/array_sum>`_
* multiplication : use `array_product() <https://www.php.net/array_product>`_
* concatenation : use `implode() <https://www.php.net/implode>`_
* ifthen : use `array_filter() <https://www.php.net/array_filter>`_

.. code-block:: php

   <?php
   
   $all = implode('-', $s).'-';
   
   // same as above
   $all = '';
   foreach($array as $s) {
       $all .= $s . '-';
   }
   
   ?>


See also `Array Functions <https://www.php.net/manual/en/ref.array.php>`_ and
        :ref:`no-array\_merge()-in-loops`. 


Suggestions
^^^^^^^^^^^

* Remove the loop and use a native PHP function
* Add more expressions to the loop : batching multiple operations in one loop makes it more interesting than running separates loops.

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Structures/UseArrayFunctions |
+-------------+------------------------------+
| Rulesets    | :ref:`Suggestions`           |
+-------------+------------------------------+
| Exakt since | 1.8.8                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Quick (30 mins)              |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _use-case-value:

Use Case Value
++++++++++++++

 When `switch() <https://www.php.net/manual/en/control-structures.switch.php>`_ has branched to the right case, the value of the switched variable is know : it is the case.

This doesn't work with complex expression cases, nor with default. 

.. code-block:: php

   <?php
   
   switch($a) {
       case 'a' : 
           // $a == 'a';
           echo $a;
           break;
           
       case 'b' : 
           // $a == 'b';
           echo 'b';
           break;
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Use the literal value in the case, to avoid unnecessary computation.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Structures/UseCaseValue |
+-------------+-------------------------+
| Rulesets    | :ref:`Suggestions`      |
+-------------+-------------------------+
| Exakt since | 1.9.6                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Quick (30 mins)         |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _use-constant:

Use Constant
++++++++++++

 The following functioncall have a constant equivalent, that is faster to use than calling the functions. 

This applies to the following functions : 

* `pi() <https://www.php.net/pi>`_ : replace with `M_PI`
* `phpversion() <https://www.php.net/phpversion>`_ : replace with `PHP_VERSION`
* `php_sapi_name() <https://www.php.net/php_sapi_name>`_ : replace with `PHP_SAPI_NAME`

.. code-block:: php

   <?php
   
   // recommended way 
   echo PHP_VERSION;
   
   // slow version
   echo php_version();
   
   ?>


See also `PHP why `pi() <https://www.php.net/pi>`_ and `M_PI <https://www.php.net/M_PI>`_ <https://stackoverflow.com/questions/42021176/php-why-pi-and-m-pi>`_.


Suggestions
^^^^^^^^^^^

* Use the constant version, not the function.

Specs
^^^^^
+-------------+--------------------------------------------------------------------+
| Short name  | Structures/UseConstant                                             |
+-------------+--------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`php-cs-fixable` |
+-------------+--------------------------------------------------------------------+
| Exakt since | 0.8.4                                                              |
+-------------+--------------------------------------------------------------------+
| Php Version | All                                                                |
+-------------+--------------------------------------------------------------------+
| Severity    | Minor                                                              |
+-------------+--------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                   |
+-------------+--------------------------------------------------------------------+
| Precision   | High                                                               |
+-------------+--------------------------------------------------------------------+


.. _use-count-recursive:

Use Count Recursive
+++++++++++++++++++

 The code could use the recursive version of count.

The second argument of count, when set to ``COUNT_RECURSIVE``, count recursively the elements. It also counts the elements themselves. 

.. code-block:: php

   <?php
   
   $array = array( array(1,2,3), array(4,5,6));
   
   print (count($array, COUNT_RECURSIVE) - count($array, COUNT_NORMAL));
   
   $count = 0;
   foreach($array as $a) {
       $count += count($a);
   }
   print $count;
   
   ?>


See also `count <https://www.php.net/count>`_.


Suggestions
^^^^^^^^^^^

* Drop the loop and use the 2nd argument of count()

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------+
| Short name  | Structures/UseCountRecursive                                                                            |
+-------------+---------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Suggestions`                                                                                      |
+-------------+---------------------------------------------------------------------------------------------------------+
| Exakt since | 1.1.7                                                                                                   |
+-------------+---------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                     |
+-------------+---------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                   |
+-------------+---------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                           |
+-------------+---------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                    |
+-------------+---------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-wordpress-structures-usecountrecursive`, :ref:`case-prestashop-structures-usecountrecursive` |
+-------------+---------------------------------------------------------------------------------------------------------+


.. _use-debug:

Use Debug
+++++++++

 The code source includes calls to debug functions.

The following debug functions and libraries are reported : 

* `Aronduby Dump <https://github.com/aronduby/dump>`_
* `Cakephp Debug Toolbar <https://github.com/cakephp/debug_kit>`_
* `Kint <https://github.com/kint-php/kint>`_
* `Krumo <https://github.com/mmucklo/krumo>`_
* `Nette tracy <https://tracy.nette.org/>`_
* `php-debugbar <https://github.com/maximebf/php-debugbar>`_
* PHP native functions : print_r(), `var_dump() <https://www.php.net/var_dump>`_, `debug_backtrace() <https://www.php.net/debug_backtrace>`_, debug_print_backtrace(), `debug_zval_dump() <https://www.php.net/debug_zval_dump>`_
* `Symfony debug <https://symfony.com/doc/current/components/debug.html>`_
* `Wordpress debug <https://codex.wordpress.org/Debugging_in_WordPress>`_
* `Xdebug <https://xdebug.org/>`_
* `Zend debug <https://github.com/zendframework/zend-debug>`_

.. code-block:: php

   <?php
   
   // Example with Zend Debug
   Zend\Debug\Debug::dump($var, $label = null, $echo = true);
   
   ?>

Specs
^^^^^
+-------------+---------------------+
| Short name  | Structures/UseDebug |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.11.4              |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _avoid-get\_class():

Avoid get_class()
+++++++++++++++++

 ``get_class()`` should be replaced with the ``instanceof`` operator to check the class of an object. 

``get_class()`` only compares the full namespace name of the object's class, while ``instanceof`` actually resolves the name, using the local namespace and aliases.

.. code-block:: php

   <?php
   
       use Stdclass as baseClass;
       
       function foo($arg) {
           // Slow and prone to namespace errors
           if (get_class($arg) === 'Stdclass') {
               // doSomething()
           }
       }
   
       function bar($arg) {
           // Faster, and uses aliases.
           if ($arg instanceof baseClass) {
               // doSomething()
           }
       }
   ?>


See also `get_class <https://www.php.net/get_class>`_ and `Instanceof <https://www.php.net/manual/en/language.operators.type.php>`_.

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/UseInstanceof                    |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.8.4                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _useless-brackets:

Useless Brackets
++++++++++++++++

 Standalone brackets have no use. Brackets are used to delimit a block of code, and are used by control statements. They may also be used to protect variables in strings. 

Standalone brackets may be a left over of an old instruction, or a misunderstanding of the alternative syntax.

.. code-block:: php

   <?php
   
   // The following brackets are useless : they are a leftover from an older instruction
   // if (DEBUG) 
   {
       $a = 1;
   }
   
   // Here, the extra brackets are useless
   for($a = 2; $a < 5; $a++) : {
       $b++;
   } endfor;
   
   ?>



Suggestions
^^^^^^^^^^^

* Remove the brackets
* Restore the flow-control operation that was there and removed
* Move the block into a method or function, and call it

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------+
| Short name  | Structures/UselessBrackets                                                                      |
+-------------+-------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                     |
+-------------+-------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                           |
+-------------+-------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                             |
+-------------+-------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                           |
+-------------+-------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                |
+-------------+-------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                            |
+-------------+-------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-churchcrm-structures-uselessbrackets`, :ref:`case-piwigo-structures-uselessbrackets` |
+-------------+-------------------------------------------------------------------------------------------------+


.. _useless-type-casting:

Useless Type Casting
++++++++++++++++++++

 There is no need to overcast returned values.

.. code-block:: php

   <?php
   
   // trim always returns a string : cast is useless
   $a = (string) trim($b);
   
   // strpos doesn't always returns an integer : cast is useful
   $a = (boolean) strpos($b, $c);
   
   // comparison don't need casting, nor parenthesis
   $c = (bool) ($b > 2);
   
   ?>


See also `Type juggling <https://www.php.net/manual/en/language.types.type-juggling.php>`_.


Suggestions
^^^^^^^^^^^

* Remove the type cast

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------+
| Short name  | Structures/UselessCasting                                                                     |
+-------------+-----------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                   |
+-------------+-----------------------------------------------------------------------------------------------+
| Exakt since | 0.8.7                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------+
| Php Version | All                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                              |
+-------------+-----------------------------------------------------------------------------------------------+
| Precision   | Very high                                                                                     |
+-------------+-----------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-fuelcms-structures-uselesscasting`, :ref:`case-thinkphp-structures-uselesscasting` |
+-------------+-----------------------------------------------------------------------------------------------+


.. _useless-check:

Useless Check
+++++++++++++

 There is no need to check the size of an array content before using foreach. `Foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_ applies a test on the source, and skips the loop if no element is found.

.. code-block:: php

   <?php
   
   // Checking for type is good. 
   if (is_array($array)) {
       foreach($array as $a) {
           doSomething($a);
       }
   }
   
   // Foreach on empty arrays doesn't start. Checking is useless
   if (!empty($array)) {
       foreach($array as $a) {
           doSomething($a);
       }
   }
   
   ?>


This analysis checks for conditions with `sizeof() <https://www.php.net/sizeof>`_ and `count() <https://www.php.net/count>`_. Conditions with `isset() <https://www.www.php.net/isset>`_ and `empty() <https://www.php.net/empty>`_ are omitted : they also check for the variable existence, and thus, offer extra coverage.

See also `foreach <https://www.php.net/manual/en/control-structures.foreach.php>`_.



Suggestions
^^^^^^^^^^^

* Drop the condition and the check
* Turn the condition into isset(), empty() and is_array()

Specs
^^^^^
+-------------+----------------------------------------------------------------------------------------+
| Short name  | Structures/UselessCheck                                                                |
+-------------+----------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                            |
+-------------+----------------------------------------------------------------------------------------+
| Exakt since | 0.8.9                                                                                  |
+-------------+----------------------------------------------------------------------------------------+
| Php Version | All                                                                                    |
+-------------+----------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                  |
+-------------+----------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                       |
+-------------+----------------------------------------------------------------------------------------+
| Precision   | High                                                                                   |
+-------------+----------------------------------------------------------------------------------------+
| Examples    | :ref:`case-magento-structures-uselesscheck`, :ref:`case-phinx-structures-uselesscheck` |
+-------------+----------------------------------------------------------------------------------------+


.. _useless-global:

Useless Global
++++++++++++++

 Global are useless in two cases. First, on super-globals, which are always globals, like `$_GET <https://www.php.net/manual/en/reserved.variables.get.php>`_; secondly, on variables that are not used.

.. code-block:: php

   <?php
   
   // $_POST is already a global : it is in fact a global everywhere
   global $_POST;
   
   // $unused is useless
   function foo() {
       global $used, $unused;
       
       ++$used;
   }
   
   ?>


Also, PHP has superglobals, a special team of variables that are always available, whatever the context. 
They are : $GLOBALS, $_SERVER, `$_GET <https://www.php.net/manual/en/reserved.variables.get.php>`_, `$_POST <https://www.php.net/manual/en/reserved.variables.post.php>`_, $_FILES, $_COOKIE, $_SESSION, `$_REQUEST <https://www.php.net/manual/en/reserved.variables.request.php>`_ and `$_ENV <https://www.php.net/manual/en/reserved.variables.env.php>`_. 


Suggestions
^^^^^^^^^^^

* Drop the global expression

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------+
| Short name  | Structures/UselessGlobal                                                                    |
+-------------+---------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                              |
+-------------+---------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                       |
+-------------+---------------------------------------------------------------------------------------------+
| Php Version | All                                                                                         |
+-------------+---------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                       |
+-------------+---------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                             |
+-------------+---------------------------------------------------------------------------------------------+
| Precision   | High                                                                                        |
+-------------+---------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-zencart-structures-uselessglobal`, :ref:`case-humo-gen-structures-uselessglobal` |
+-------------+---------------------------------------------------------------------------------------------+


.. _useless-instructions:

Useless Instructions
++++++++++++++++++++

 Those instructions are useless, or contains useless parts. 

For example, an addition whose result is not stored in a variable, or immediately used, does nothing : it is actually performed, and the result is lost. Just plain lost. In fact, PHP might detect it, and optimize it away. 

Here the useless instructions that are spotted : 

.. code-block:: php

   <?php
   
   // Concatenating with an empty string is useless.
   $string = 'This part '.$is.' useful but '.$not.'';
   
   // This is a typo, that PHP turns into a constant, then a string, then nothing.
   continue;
   
   // Empty string in a concatenation
   $a = 'abc' . '';
   
   // Returning expression, whose result is not used (additions, comparisons, properties, closures, new without =, ...)
   1 + 2;
   
   // Returning post-incrementation
   function foo($a) {
       return $a++;
   }
   
   // array_replace() with only one argument
   $replaced = array_replace($array);
   // array_replace() is OK with ... 
   $replaced = array_replace(...$array);
   
   // @ operator on source array, in foreach, or when assigning literals
   $array = @array(1,2,3);
   
   // Multiple comparisons in a for loop : only the last is actually used.
   for($i = 0; $j = 0; $j < 10, $i < 20; ++$j, ++$i) {
       print $i.' '.$j.PHP_EOL;
   }
   
   // Counting the keys and counting the array is the same.
   $c = count(array_keys($array))
   
   //array_keys already provides an array with only unique values, as they were keys in a previous array
   $d = array_unique(array_keys($file['messages']))
   
   // No need for assignation inside the ternary operator
   $closeQuote = $openQuote[3] === "'" ? substr($openQuote, 4, -2) : $closeQuote = substr($openQuote, 3);
   
   ?>




Suggestions
^^^^^^^^^^^

* Remove the extra semi-colon
* Remove the useless instruction
* Assign this expression to a variable and make use of it

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/UselessInstruction                                                                               |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                                 |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                       |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                         |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                       |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                             |
+-------------+-------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                        |
+-------------+-------------------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-useless-instruction <https://github.com/dseguy/clearPHP/tree/master/rules/no-useless-instruction.md>`__ |
+-------------+-------------------------------------------------------------------------------------------------------------+


.. _useless-parenthesis:

Useless Parenthesis
+++++++++++++++++++

 Situations where parenthesis are not necessary, and may be removed.

Parenthesis group several elements together, and allows for a more readable expression. They are used with logical and mathematical expressions. They are necessary when the precedence of the operators are not the intended execution order : for example, when an addition must be performed before the multiplication.

Sometimes, the parenthesis provide the same execution order than the default order : they are deemed useless. 

.. code-block:: php

   <?php
   
       if ( ($condition) ) {}
       while( ($condition) ) {}
       do $a++; while ( ($condition) );
       
       switch ( ($a) ) {}
       $y = (1);
       ($y) == (1);
       
       f(($x));
   
       // = has precedence over == 
       ($a = $b) == $c;
       
       ($a++);
       
       // No need for parenthesis in default values
       function foo($c = ( 1 + 2) ) {}
   ?>


See also `Operators Precedence <https://www.php.net/manual/en/language.operators.precedence.php>`_.


Suggestions
^^^^^^^^^^^

* Remove useless parenthesis, unless they are important for readability.

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------+
| Short name  | Structures/UselessParenthesis                                                                           |
+-------------+---------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                             |
+-------------+---------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                   |
+-------------+---------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                     |
+-------------+---------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                   |
+-------------+---------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                        |
+-------------+---------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                    |
+-------------+---------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-mautic-structures-uselessparenthesis`, :ref:`case-woocommerce-structures-uselessparenthesis` |
+-------------+---------------------------------------------------------------------------------------------------------+


.. _useless-switch:

Useless Switch
++++++++++++++

 This switch has only one case. It may very well be replaced by a ifthen structure.

.. code-block:: php

   <?php
   switch($a) {
       case 1:
           doSomething();
           break;
   }
   
   // Same as 
   
   if ($a == 1) {
       doSomething();
   }
   ?>





Suggestions
^^^^^^^^^^^

* Turn the switch into a if/then for better readability
* Add other cases to the switch, making it adapted to the situation

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------------+
| Short name  | Structures/UselessSwitch                                                                         |
+-------------+--------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                   |
+-------------+--------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                            |
+-------------+--------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                              |
+-------------+--------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                            |
+-------------+--------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                 |
+-------------+--------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                             |
+-------------+--------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-phpdocumentor-structures-uselessswitch`, :ref:`case-dolphin-structures-uselessswitch` |
+-------------+--------------------------------------------------------------------------------------------------+


.. _useless-unset:

Useless Unset
+++++++++++++

 There are situations where trying to remove a variable is actually useless. 

PHP ignores any command that tries to unset a global variable, a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ variable, or a blind variable from a foreach loop. 

This is different from the garbage collector, which is run on its own schedule. It is also different from an explicit unset, aimed at freeing memory early : those are useful.

.. code-block:: php

   <?php
   
   function foo($a) {
       // unsetting arguments is useless
       unset($a);
       
       global $b;
       // unsetting global variable has no effect 
       unset($b);
   
       static $c;
       // unsetting static variable has no effect 
       unset($c);
       
       foreach($d as &$e){
           // unsetting a blind variable is useless
           (unset) $e;
       }
       // Unsetting a blind variable AFTER the loop is good.
       unset($e);
   }
   
   ?>


See also `unset <https://www.php.net/unset>`_.


Suggestions
^^^^^^^^^^^

* Remove the unset
* Set the variable to null : the effect is the same on memory, but the variable keeps its existence.
* Omit unsetting variables, and wait for the end of the scope. That way, PHP free memory en mass.

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------+
| Short name  | Structures/UselessUnset                                                                         |
+-------------+-------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                     |
+-------------+-------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                           |
+-------------+-------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                             |
+-------------+-------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                           |
+-------------+-------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                 |
+-------------+-------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                            |
+-------------+-------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-useless-unset <https://github.com/dseguy/clearPHP/tree/master/rules/no-useless-unset.md>`__ |
+-------------+-------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-tine20-structures-uselessunset`, :ref:`case-typo3-structures-uselessunset`           |
+-------------+-------------------------------------------------------------------------------------------------+


.. _use-list-with-foreach:

Use List With Foreach
+++++++++++++++++++++

 `Foreach() <https://www.php.net/manual/en/control-structures.foreach.php>`_ structures accepts `list() <https://www.php.net/list>`_ as blind key. If the loop-value is an array with a fixed structure, it is possible to extract the values directly into variables with explicit names.

.. code-block:: php

   <?php
   
   // Short way to assign variables
   // Works on PHP 7.1, where list() accepts keys.
   foreach($names as list('first' => $first, 'last' => $last)) {
       doSomething($first, $last);
   }
   
   // Short way to assign variables
   // Works on all PHP versions with numerically indexed arrays.
   foreach($names as list($first, $last)) {
       doSomething($first, $last);
   }
   
   // Long way to assign variables
   foreach($names as $name) {
       $first = $name['first'];
       $last = $name['last'];
       
       doSomething($first, $last);
   }
   
   ?>


See also `list <https://www.php.net/manual/en/function.list.php>`_ and `foreach <https://www.php.net/manual/en/control-structures.foreach.php>`_.


Suggestions
^^^^^^^^^^^

* Use the list keyword (or the short syntax), and simplify the array calls in the loop.

Specs
^^^^^
+-------------+-----------------------------------------------------+
| Short name  | Structures/UseListWithForeach                       |
+-------------+-----------------------------------------------------+
| Rulesets    | :ref:`Suggestions`, :ref:`Top10`                    |
+-------------+-----------------------------------------------------+
| Exakt since | 1.0.4                                               |
+-------------+-----------------------------------------------------+
| Php Version | All                                                 |
+-------------+-----------------------------------------------------+
| Severity    | Minor                                               |
+-------------+-----------------------------------------------------+
| Time To Fix | Quick (30 mins)                                     |
+-------------+-----------------------------------------------------+
| Precision   | Very high                                           |
+-------------+-----------------------------------------------------+
| Examples    | :ref:`case-mediawiki-structures-uselistwithforeach` |
+-------------+-----------------------------------------------------+


.. _use-positive-condition:

Use Positive Condition
++++++++++++++++++++++

 Whenever possible, use a positive condition. 

Positive conditions are easier to understand, and lead to less understanding problems.
Negative conditions are not reported when else is not present. 

.. code-block:: php

   <?php
   
   // This is a positive condition
   if ($a == 'b') {
       doSomething();
   } else {
       doSomethingElse();
   }
   
   if (!empty($a)) {
       doSomething();
   } else {
       doSomethingElse();
   }
   
   // This is a negative condition
   if ($a == 'b') {
       doSomethingElse();
   } else {
       doSomething();
   }
   
   // No need to force $a == 'b' with empty else
   if ($a != 'b') {
       doSomethingElse();
   } 
   
   
   ?>



Suggestions
^^^^^^^^^^^

* Invert the code in the if branches, and the condition

Specs
^^^^^
+-------------+----------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/UsePositiveCondition                                                                                |
+-------------+----------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                                 |
+-------------+----------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.6                                                                                                          |
+-------------+----------------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                            |
+-------------+----------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                          |
+-------------+----------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                                |
+-------------+----------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                           |
+-------------+----------------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-spip-structures-usepositivecondition`, :ref:`case-expressionengine-structures-usepositivecondition` |
+-------------+----------------------------------------------------------------------------------------------------------------+


.. _use-system-tmp:

Use System Tmp
++++++++++++++

 It is recommended to avoid hardcoding the temporary file. It is better to rely on the system's temporary folder, which is accessible with `sys_get_temp_dir() <https://www.php.net/sys_get_temp_dir>`_.

.. code-block:: php

   <?php
   
   // Where the tmp is : 
   file_put_contents(sys_get_temp_dir().'/tempFile.txt', $content);
   
   
   // Avoid hard-coding tmp folder : 
   // On Linux-like systems
   file_put_contents('/tmp/tempFile.txt', $content);
   
   // On Windows systems
   file_put_contents('C:\WINDOWS\TEMP\tempFile.txt', $content);
   
   ?>


See also `PHP: When is /tmp not /tmp? <https://www.the-art-of-web.com/php/where-is-tmp/>`_.


Suggestions
^^^^^^^^^^^

* Do not hardcode the temporary file, use the system's

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Structures/UseSystemTmp                     |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 0.8.4                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Major                                       |
+-------------+---------------------------------------------+
| Time To Fix | Slow (1 hour)                               |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _use-url-query-functions:

Use Url Query Functions
+++++++++++++++++++++++

 PHP features several functions dedicated to processing URL's query string. 

+ `parse_str() <https://www.php.net/parse_str>`_
+ `parse_url() <https://www.php.net/parse_url>`_
+ `http_build_query() <https://www.php.net/http_build_query>`_

Those functions include extra checks : for example, `http_build_query() <https://www.php.net/http_build_query>`_ adds `urlencode() <https://www.php.net/urlencode>`_ call on the values, and allow for choosing the separator and the Query string format.

.. code-block:: php

   <?php
   $data = array(
       'foo' => 'bar',
       'baz' => 'boom',
       'cow' => 'milk',
       'php' => 'hypertext processor'
   );
   
   // safe and efficient way to build a query string
   echo http_build_query($data, '', '&') . PHP_EOL;
   
   // slow way to produce a query string
   foreach($data as $name => &$value) {
       $value = $name.'='.$value;
   }
   echo implode('&', $data) . PHP_EOL;
   
   ?>




Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+---------------------------------+
| Short name  | Structures/UseUrlQueryFunctions |
+-------------+---------------------------------+
| Rulesets    | :ref:`Suggestions`              |
+-------------+---------------------------------+
| Exakt since | 1.9.7                           |
+-------------+---------------------------------+
| Php Version | All                             |
+-------------+---------------------------------+
| Severity    | Minor                           |
+-------------+---------------------------------+
| Time To Fix | Quick (30 mins)                 |
+-------------+---------------------------------+
| Precision   | High                            |
+-------------+---------------------------------+


.. _var\_dump()...-usage:

var_dump()... Usage
+++++++++++++++++++

 `var_dump() <https://www.php.net/var_dump>`_, print_r() or `var_export() <https://www.php.net/var_export>`_ should not be left in any production code. They are debugging functions.

.. code-block:: php

   <?php
   
   if ($error) {
       // Debugging usage of var_dump
       // And major security problem 
       var_dump($query);
       
       // This is OK : the $query is logged, and not displayed
       $this->log(print_r($query, true));
   }
   
   ?>


They may be tolerated during development time, but must be removed so as not to have any chance to be run in production.


Suggestions
^^^^^^^^^^^

* Remove usage of var_dump(), print_r(), var_export() without 2nd argument, and other debug functions.
* Push all logging to an external file, instead of the browser.

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------+
| Short name  | Structures/VardumpUsage                                                                   |
+-------------+-------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Security`                              |
+-------------+-------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                     |
+-------------+-------------------------------------------------------------------------------------------+
| Php Version | All                                                                                       |
+-------------+-------------------------------------------------------------------------------------------+
| Severity    | Critical                                                                                  |
+-------------+-------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                          |
+-------------+-------------------------------------------------------------------------------------------+
| Precision   | High                                                                                      |
+-------------+-------------------------------------------------------------------------------------------+
| ClearPHP    | `no-debug-code <https://github.com/dseguy/clearPHP/tree/master/rules/no-debug-code.md>`__ |
+-------------+-------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-tine20-structures-vardumpusage`, :ref:`case-piwigo-structures-vardumpusage`    |
+-------------+-------------------------------------------------------------------------------------------+


.. _variable-global:

Variable Global
+++++++++++++++

 Variable global such are valid in PHP 5.6, but no in PHP 7.0. They should be replaced with ${$foo->bar}.

.. code-block:: php

   <?php
   
   // Forbidden in PHP 7
   global $normalGlobal;
   
   // Forbidden in PHP 7
   global $$variable->global ;
   
   // Tolerated in PHP 7
   global ${$variable->global};
   
   ?>

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------+
| Short name  | Structures/VariableGlobal                                                                                  |
+-------------+------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56` |
+-------------+------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.3                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Php Version | 7.0-                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                            |
+-------------+------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+


.. _variable-may-be-non-global:

Variable May Be Non-Global
++++++++++++++++++++++++++

 `Static <https://www.php.net/manual/en/language.oop5.static.php>`_ and global keywords should be used as early as possible in a method. 

Performance wise, it is better to call ``global`` or ``static`` only before using the variable. 

Human-wise, it is recommended to put ``global`` or ``static`` at the beginning of the method, for better readability.

.. code-block:: php

   <?php 
   
   function foo() {
       // $a is not global yet. It is a local variable
       $a = 1;
       // Same for static variables
       $s = 5;
   
       // Now $a is global
       global $a;
       $a = 3;
   
       // Now $s is static
       static $s;
       $s = 55;
   }
   
   ?>


See also `Using `static <https://www.php.net/manual/en/language.oop5.static.php>`_ variables <https://www.php.net/manual/en/language.variables.scope.php#language.variables.scope.`static <https://www.php.net/manual/en/language.oop5.static.php>`_>`_ and `The global keyword <https://www.php.net/manual/en/language.variables.scope.php#language.variables.scope.global>`_.


Suggestions
^^^^^^^^^^^

* Use static and global at the beginning of the method
* Move static and global to the first usage of the variable
* Remove any access to the variable before static and global

Specs
^^^^^
+-------------+-----------------------------------+
| Short name  | Structures/VariableMayBeNonGlobal |
+-------------+-----------------------------------+
| Rulesets    | none                              |
+-------------+-----------------------------------+
| Exakt since | 1.5.3                             |
+-------------+-----------------------------------+
| Php Version | All                               |
+-------------+-----------------------------------+
| Severity    | Minor                             |
+-------------+-----------------------------------+
| Time To Fix | Instant (5 mins)                  |
+-------------+-----------------------------------+
| Precision   | High                              |
+-------------+-----------------------------------+


.. _while(list()-=-each()):

While(List() = Each())
++++++++++++++++++++++

 This code structure is quite old : it should be replace by the more modern and efficient foreach.

This structure is deprecated since PHP 7.2. It may disappear in the future.

.. code-block:: php

   <?php
   
       while(list($key, $value) = each($array)) {
           doSomethingWith($key) and $value();
       }
   
       foreach($array as $key => $value) {
           doSomethingWith($key) and $value();
       }
   ?>
 

See also `PHP RFC: Deprecations for PHP 7.2 : `Each() <https://www.php.net/each>`_ <https://wiki.php.net/rfc/deprecations_php_7_2#each>`_.


Suggestions
^^^^^^^^^^^

* Change this loop with foreach
* Change this loop with an array_* function with a callback

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------+
| Short name  | Structures/WhileListEach                                                                   |
+-------------+--------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Performances`, :ref:`Suggestions`       |
+-------------+--------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                      |
+-------------+--------------------------------------------------------------------------------------------+
| Php Version | All                                                                                        |
+-------------+--------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                      |
+-------------+--------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                           |
+-------------+--------------------------------------------------------------------------------------------+
| Precision   | High                                                                                       |
+-------------+--------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-openemr-structures-whilelisteach`, :ref:`case-dolphin-structures-whilelisteach` |
+-------------+--------------------------------------------------------------------------------------------+


.. _wrong-range-check:

Wrong Range Check
+++++++++++++++++

 The interval check should use && and not ||. 

.. code-block:: php

   <?php
   
   //interval correctly checked a is between 2 and 999
   if ($a > 1 && $a < 1000) {}
   
   //interval incorrectly checked : a is 2 or more ($a < 1000 is never checked)
   if ($a > 1 || $a < 1000) {}
   
   ?>



Suggestions
^^^^^^^^^^^

* Make the interval easy to read and understand
* Check the truth table for the logical operation

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------+
| Short name  | Structures/WrongRange                                                                   |
+-------------+-----------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                          |
+-------------+-----------------------------------------------------------------------------------------+
| Exakt since | 1.2.5                                                                                   |
+-------------+-----------------------------------------------------------------------------------------+
| Php Version | All                                                                                     |
+-------------+-----------------------------------------------------------------------------------------+
| Severity    | Major                                                                                   |
+-------------+-----------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                        |
+-------------+-----------------------------------------------------------------------------------------+
| Precision   | High                                                                                    |
+-------------+-----------------------------------------------------------------------------------------+
| Examples    | :ref:`case-dolibarr-structures-wrongrange`, :ref:`case-wordpress-structures-wrongrange` |
+-------------+-----------------------------------------------------------------------------------------+


.. _yoda-comparison:

Yoda Comparison
+++++++++++++++

 Yoda comparison is a way to write conditions which places literal values on the left side. 

.. code-block:: php

   <?php
     if (1 == $a) {
       // Then condition
     } 
   ?>


The objective is to avoid mistaking a comparison to an assignation. If the comparison operator is mistaken, but the literal is on the left, then an error will be triggered, instead of a silent bug. 

.. code-block:: php

   <?php
       // error in comparison! 
       if ($a = 1) {
           // Then condition
       } 
   ?>


See also `Yoda Conditions <https://en.wikipedia.org/wiki/Yoda_conditions>`_, `Yoda Conditions: To Yoda or Not to Yoda <https://knowthecode.io/yoda-conditions-yoda-not-yoda>`_.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Structures/YodaComparison |
+-------------+---------------------------+
| Rulesets    | none                      |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _already-parents-trait:

Already Parents Trait
+++++++++++++++++++++

 Trait is already used a `parent <https://www.php.net/manual/en/language.oop5.paamayim-nekudotayim.php>`_'s class or trait. There is no use to include it a second time.

.. code-block:: php

   <?php
   
   trait ta {
       use tb;
   }
   
   trait t1 {
       use ta;
       use tb; // also used by ta
   }
   
   class b {
       use t1; // also required by class c
       use ta; // also required by trait t1
   }
   
   class c extends b {
       use t1;
   }
   
   ?>


See also `Traits <https://www.php.net/manual/en/language.oop5.traits.php>`_.


Suggestions
^^^^^^^^^^^

* Eliminate one of the trait request

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Traits/AlreadyParentsTrait |
+-------------+----------------------------+
| Rulesets    | :ref:`Analyze`             |
+-------------+----------------------------+
| Exakt since | 1.8.0                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Quick (30 mins)            |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _could-use-trait:

Could Use Trait
+++++++++++++++

 The following classes have been found implementing all of a trait's methods : it could use this trait, and remove duplicated code.

.. code-block:: php

   <?php
   
   trait t {
       function t1() {}
       function t2() {}
       function t3() {}
   }
   
   // t1, t2, t3 method could be dropped, and replaced with 'use t'
   class foo1 {
       function t1() {}
       function t2() {}
       function t3() {}
   
       function j() {}
   }
   
   // foo2 is just the same as foo1
   class foo2 {
       use t;
   
       function j() {}
   }
   
   ?>


The comparison between the class methods' and the trait's methods are based on token. They may yield some false-positives.

See also :ref:`forgotten-interface`. 
 

Suggestions
^^^^^^^^^^^

* Use trait, and remove duplicated code

Specs
^^^^^
+-------------+----------------------+
| Short name  | Traits/CouldUseTrait |
+-------------+----------------------+
| Rulesets    | none                 |
+-------------+----------------------+
| Exakt since | 1.8.5                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Quick (30 mins)      |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _dependant-trait:

Dependant Trait
+++++++++++++++

 Traits should be autonomous. It is recommended to avoid depending on methods or properties that should be in the using class.

The following traits make usage of methods and properties, `static <https://www.php.net/manual/en/language.oop5.static.php>`_ or not, that are not defined in the trait. This means the host class must provide those methods and properties, but there is no way to enforce this. 

This may also lead to dead code : when the trait is removed, the host class have unused properties and methods.

.. code-block:: php

   <?php
   
   // autonomous trait : all it needs is within the trait
   trait t {
       private $p = 0;
       
       function foo() {
           return ++$this->p;
       }
   }
   
   // dependant trait : the host class needs to provide some properties or methods
   trait t2 {
       function foo() {
           return ++$this->p;
       }
   }
   
   class x {
       use t2;
       
       private $p = 0;
   }
   ?>


See also :ref:`dependant-abstract-classes`. 


Suggestions
^^^^^^^^^^^

* Add local property definitions to make the trait independent
* Make the trait only use its own resources
* Split the trait in autonomous traits

Specs
^^^^^
+-------------+-------------------------------------------+
| Short name  | Traits/DependantTrait                     |
+-------------+-------------------------------------------+
| Rulesets    | :ref:`Analyze`                            |
+-------------+-------------------------------------------+
| Exakt since | 0.8.4                                     |
+-------------+-------------------------------------------+
| Php Version | All                                       |
+-------------+-------------------------------------------+
| Severity    | Minor                                     |
+-------------+-------------------------------------------+
| Time To Fix | Slow (1 hour)                             |
+-------------+-------------------------------------------+
| Precision   | High                                      |
+-------------+-------------------------------------------+
| Examples    | :ref:`case-zencart-traits-dependanttrait` |
+-------------+-------------------------------------------+


.. _empty-traits:

Empty Traits
++++++++++++

 List of all empty trait defined in the code. 

.. code-block:: php

   <?php
   
   // empty trait
   trait t { }
   
   // Another empty trait
   trait t2 {
       use t; 
   }
   
   ?>


Such traits may be reserved for future use. They may also be forgotten, and dead code.



Suggestions
^^^^^^^^^^^

* Add some code to the trait
* Remove the trait

Specs
^^^^^
+-------------+-------------------+
| Short name  | Traits/EmptyTrait |
+-------------+-------------------+
| Rulesets    | :ref:`Analyze`    |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Instant (5 mins)  |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _is-extension-trait:

Is Extension Trait
++++++++++++++++++

 Indicates if this trait is defined in an extension or not.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Traits/IsExtTrait |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _locally-used-property-in-trait:

Locally Used Property In Trait
++++++++++++++++++++++++++++++

 Properties that are used in the class where they are defined. 

.. code-block:: php

   <?php
   
   trait foo {
       public $unused, $used;// property $unused is never used in this class
       
       function bar() {
           $this->used++; // property $used is used in this method
       }
   }
   
   class X {
       use foo;
   }
   
   $foo = new X();
   $foo->unused = 'here'; // property $unused is used outside the trait definition
   ?>

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Traits/LocallyUsedProperty |
+-------------+----------------------------+
| Rulesets    | none                       |
+-------------+----------------------------+
| Exakt since | 1.3.5                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Slow (1 hour)              |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _method-collision-traits:

Method Collision Traits
+++++++++++++++++++++++

 Two or more traits are included in the same class, and they have methods collisions. 

Those collisions should be solved with a ``use`` expression. When they are not, PHP stops execution with a fatal error : ``Trait method M has not been applied, because there are collisions with other trait methods on C``.

.. code-block:: php

   <?php
   
   trait A {
       public function A() {}
       public function M() {}
   }
   
   trait B {
       public function B() {}
       public function M() {}
   }
   
   class C {
       use  A, B;
   }
   
   class D {
       use  A, B{
           B::M insteadof A;
       };
   }
   
   ?>


The code above lints, but doesn't execute.

See also `Traits <https://www.php.net/manual/en/language.oop5.traits.php>`_.

Specs
^^^^^
+-------------+----------------------------------------+
| Short name  | Traits/MethodCollisionTraits           |
+-------------+----------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`LintButWontExec` |
+-------------+----------------------------------------+
| Exakt since | 1.4.2                                  |
+-------------+----------------------------------------+
| Php Version | All                                    |
+-------------+----------------------------------------+
| Severity    | Critical                               |
+-------------+----------------------------------------+
| Time To Fix | Quick (30 mins)                        |
+-------------+----------------------------------------+
| Precision   | High                                   |
+-------------+----------------------------------------+


.. _multiple-usage-of-same-trait:

Multiple Usage Of Same Trait
++++++++++++++++++++++++++++

 The same trait is used several times. One trait usage is sufficient.

.. code-block:: php

   <?php
   
   // C is used twice, and could be dropped from B
   trait A { use B, C;}
   trait B { use C;}
   
   ?>


PHP doesn't raise any error when traits are included multiple times.

See also `Traits <https://www.php.net/manual/en/language.oop5.traits.php>`_.


Suggestions
^^^^^^^^^^^

* Remove any multiple traits from use expressions
* Review the class tree, and remove any trait mentioned multiple times

Specs
^^^^^
+-------------+--------------------------------------------+
| Short name  | Traits/MultipleUsage                       |
+-------------+--------------------------------------------+
| Rulesets    | :ref:`Suggestions`                         |
+-------------+--------------------------------------------+
| Exakt since | 1.5.7                                      |
+-------------+--------------------------------------------+
| Php Version | All                                        |
+-------------+--------------------------------------------+
| Severity    | Minor                                      |
+-------------+--------------------------------------------+
| Time To Fix | Instant (5 mins)                           |
+-------------+--------------------------------------------+
| Precision   | High                                       |
+-------------+--------------------------------------------+
| Examples    | :ref:`case-nextcloud-traits-multipleusage` |
+-------------+--------------------------------------------+


.. _redefined-php-traits:

Redefined PHP Traits
++++++++++++++++++++

 List of all traits that bears name of a PHP trait. Although, at the moment, there are no PHP trait defined.

Specs
^^^^^
+-------------+---------------+
| Short name  | Traits/Php    |
+-------------+---------------+
| Rulesets    | :ref:`CE`     |
+-------------+---------------+
| Exakt since | 0.8.4         |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _self-using-trait:

Self Using Trait
++++++++++++++++

 Trait uses itself : this is unnecessary. Traits may use themselves, or be used by other traits, that are using the initial trait itself. 

PHP handles the situation quietly, by ignoring all extra use of the same trait, keeping only one valid version.

.. code-block:: php

   <?php
   
   // empty, but valid
   trait a {} 
   
   // obvious self usage
   trait b { use b; }
   
   // less obvious self usage
   trait c { use d, e, f, g, h, c; }
   
   // level 2 self usage
   trait i { use j; }
   trait j { use i; }
   
   ?>


See also `Traits <https://www.php.net/manual/en/language.oop5.traits.php>`_.


Suggestions
^^^^^^^^^^^

* Remove the extra usage of the trait.

Specs
^^^^^
+-------------+--------------------------------------------------+
| Short name  | Traits/SelfUsingTrait                            |
+-------------+--------------------------------------------------+
| Rulesets    | :ref:`ClassReview`, :ref:`Dead code <dead-code>` |
+-------------+--------------------------------------------------+
| Exakt since | 1.5.7                                            |
+-------------+--------------------------------------------------+
| Php Version | All                                              |
+-------------+--------------------------------------------------+
| Severity    | Minor                                            |
+-------------+--------------------------------------------------+
| Time To Fix | Slow (1 hour)                                    |
+-------------+--------------------------------------------------+
| Precision   | High                                             |
+-------------+--------------------------------------------------+


.. _trait-methods:

Trait Methods
+++++++++++++

 List the names of the methods in a trait. 

.. code-block:: php

   <?php
   
   trait t {
       private $property = 1;
       
       // This is an interface method name
       function foo() {
           // This is not a trait method 
           return function($a) { return $a + 1; }
       }
   }
   
   ?>

Specs
^^^^^
+-------------+--------------------+
| Short name  | Traits/TraitMethod |
+-------------+--------------------+
| Rulesets    | none               |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _trait-names:

Trait Names
+++++++++++

 List all the traits names in the code.

.. code-block:: php

   <?php
   
   // This trait is called 't'
   trait t {}
   
   ?>


See also `Traits <https://www.php.net/manual/en/language.oop5.traits.php>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Traits/Traitnames |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _trait-not-found:

Trait Not Found
+++++++++++++++

 A unknown trait is mentioned in the use expression. 

The used traits all exist, but in the configuration block, some unmentioned trait is called.

Be aware that the traits used in any configuration block may originate in any use expression. PHP will check the configuration block at instantiation only, and after compiling : at that moment, it will know all the used traits across the class.

.. code-block:: php

   <?php
   class x  { 
       // c is not a used trait
       use a, b { c::d insteadof e;}
   
       // e is a used trait, even if is not in the use above.
       use e;
   }
   ?>


See also `Traits <https://www.php.net/manual/en/language.oop5.traits.php>`_.



Suggestions
^^^^^^^^^^^

* Switch the name of the trait to an existing and used trait
* Drop the expression that rely on the non-existent trait

Specs
^^^^^
+-------------+----------------------------------------+
| Short name  | Traits/TraitNotFound                   |
+-------------+----------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`LintButWontExec` |
+-------------+----------------------------------------+
| Exakt since | 1.7.9                                  |
+-------------+----------------------------------------+
| Php Version | All                                    |
+-------------+----------------------------------------+
| Severity    | Minor                                  |
+-------------+----------------------------------------+
| Time To Fix | Quick (30 mins)                        |
+-------------+----------------------------------------+
| Precision   | High                                   |
+-------------+----------------------------------------+


.. _traits-usage:

Traits Usage
++++++++++++

 Usage of traits in the code.

.. code-block:: php

   <?php
   
   trait t {
       function t() {
           echo 'I\'m in t';
       }
   }
   
   class foo {
       use t;
   }
   
   $x = new foo();
   $x->t();
   
   ?>


See also `Traits <https://www.php.net/manual/en/language.oop5.traits.php>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Traits/TraitUsage |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _undefined-insteadof:

Undefined Insteadof
+++++++++++++++++++

 ``Insteadof`` tries to replace a method with another, but it doesn't exists. This happens when the replacing class is refactored, and some of its definition are dropped. 

``Insteadof`` may replace a non-existing method with an existing one, but not the contrary. 

.. code-block:: php

   <?php
   
   trait A {
       function C (){}
   }
   
   trait B {
       function C (){}
   }
   
   class Talker {
       use A, B {
           B::C insteadof A;
           B::D insteadof A;
       }
   }
   
   new Talker();
   ?>


This error is not linted : it only appears at execution time. 

See also `Traits <https://www.php.net/manual/en/language.oop5.traits.php>`_.


Suggestions
^^^^^^^^^^^

* Remove the insteadof expression
* Fix the original method and replace it with an existing method

Specs
^^^^^
+-------------+---------------------------------------------------------------------+
| Short name  | Traits/UndefinedInsteadof                                           |
+-------------+---------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`LintButWontExec` |
+-------------+---------------------------------------------------------------------+
| Exakt since | 1.4.2                                                               |
+-------------+---------------------------------------------------------------------+
| Php Version | All                                                                 |
+-------------+---------------------------------------------------------------------+
| Severity    | Major                                                               |
+-------------+---------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                    |
+-------------+---------------------------------------------------------------------+
| Precision   | High                                                                |
+-------------+---------------------------------------------------------------------+


.. _undefined-trait:

Undefined Trait
+++++++++++++++

 Those are undefined, traits . 

When the using class or trait is instantiated, PHP emits a a fatal error.

.. code-block:: php

   <?php
   
   use Composer/Component/someTrait as externalTrait;
   
   trait t {
       function foo() {}
   }
   
   // This class uses trait that are all known
   class hasOnlyDefinedTrait {
       use t, externalTrait;
   }
   
   // This class uses trait that are unknown
   class hasUndefinedTrait {
       use unknownTrait, t, externalTrait;
   }
   ?>


Trait which are referenced in a `use` expression are omitted: they are considered part of code that is probably outside the current code, either omitted or in external component. 



Suggestions
^^^^^^^^^^^

* Define the missing trait
* Remove usage of the missing trait

Specs
^^^^^
+-------------+---------------------------------------------------------------------+
| Short name  | Traits/UndefinedTrait                                               |
+-------------+---------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`LintButWontExec` |
+-------------+---------------------------------------------------------------------+
| Exakt since | 0.8.4                                                               |
+-------------+---------------------------------------------------------------------+
| Php Version | All                                                                 |
+-------------+---------------------------------------------------------------------+
| Severity    | Critical                                                            |
+-------------+---------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                     |
+-------------+---------------------------------------------------------------------+
| Precision   | High                                                                |
+-------------+---------------------------------------------------------------------+


.. _unused-trait-in-class:

Unused Trait In Class
+++++++++++++++++++++

 A trait has been summoned in a class, but is not used. Traits may be used as a copy/paste of code, bringing a batch of methods and properties to a class. In the current case, the imported trait is never called. As such, it may be removed. 

Currently, the analysis covers only traits that are used in the class where they are imported. Also, the properties are not covered yet. 

.. code-block:: php

   <?php
   
   trait t {
       function foo() { return 1;}
   }
   
   // this class imports and uses the trait
   class UsingTrait {
       use t;
       
       function bar() {
           return $this->foo() + 1;
       }
   }
   
   // this class imports but doesn't uses the trait
   class UsingTrait {
       use t;
       
       function bar() {
           return 1;
       }
   }
   
   ?>


There are some sneaky situations, where a trait falls into decay : for example, creating a method in the importing class, with the name of a trait class, will exclude the trait method, as the class method has priority. Other precedence rules may lead to the same effect.

See also `Traits <https://www.php.net/manual/en/language.oop5.traits.php>`_.


Suggestions
^^^^^^^^^^^

* Remove the trait from the class
* Actually use the trait, at least in the importing class
* Use conflict resolution to make the trait accessible

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Traits/UnusedClassTrait |
+-------------+-------------------------+
| Rulesets    | :ref:`ClassReview`      |
+-------------+-------------------------+
| Exakt since | 2.1.1                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Quick (30 mins)         |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _unused-traits:

Unused Traits
+++++++++++++

 Those traits are not used in a class or another trait. They may be dead code.

.. code-block:: php

   <?php
   
   // unused trait
   trait unusedTrait { /**/ }
   
   // used trait
   trait tUsedInTrait { /**/ }
   
   trait tUsedInClass { 
       use tUsedInTrait;
       /**/ 
       }
   
   class foo {
       use tUsedInClass;
   }
   ?>

Specs
^^^^^
+-------------+--------------------+
| Short name  | Traits/UnusedTrait |
+-------------+--------------------+
| Rulesets    | none               |
+-------------+--------------------+
| Exakt since | 0.8.4              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _used-trait:

Used Trait
++++++++++

 Mark a trait as being used by a class.

.. code-block:: php

   <?php
   
   // One used trait
   trait usedTrait {}
   
   // One unused trait
   trait unusedTrait {}
   
   class foo {
       use usedTrait; 
   }
   
   ?>

Specs
^^^^^
+-------------+------------------+
| Short name  | Traits/UsedTrait |
+-------------+------------------+
| Rulesets    | none             |
+-------------+------------------+
| Exakt since | 0.8.4            |
+-------------+------------------+
| Php Version | All              |
+-------------+------------------+
| Severity    | Minor            |
+-------------+------------------+
| Time To Fix | Slow (1 hour)    |
+-------------+------------------+
| Precision   | High             |
+-------------+------------------+


.. _useless-alias:

Useless Alias
+++++++++++++

 It is not possible to declare an alias of a method with the same name. 

PHP reports that ``Trait method f has not been applied, because there are collisions with other trait methods on x``, which is a way to say that the alias will be in conflict with the method name. 

When the method is the only one bearing a name, and being imported, there is no need to alias it. When the method is imported in several traits, the keyword ``insteadof`` is available to solve the conflict.

.. code-block:: php

   <?php
   
   trait t {
       function h() {}
   }
   
   class x {
       use t { 
           // This is possible
           t::f as g; 
   
           // This is not possible, as the alias is in conflict with itself
           // alias are case insensitive
           t::f as f; 
       }
   }
   
   ?>



This code lints but doesn't execute.

See also `Conflict resolution <https://www.php.net/manual/en/language.oop5.traits.php#language.oop5.traits.conflict>`_.



Suggestions
^^^^^^^^^^^

* Remove the alias
* Fix the alias or the origin method name
* Switch to insteadof, and avoid as keyword

Specs
^^^^^
+-------------+---------------------------------------------------------------------+
| Short name  | Traits/UselessAlias                                                 |
+-------------+---------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`LintButWontExec` |
+-------------+---------------------------------------------------------------------+
| Exakt since | 1.5.6                                                               |
+-------------+---------------------------------------------------------------------+
| Php Version | All                                                                 |
+-------------+---------------------------------------------------------------------+
| Severity    | Major                                                               |
+-------------+---------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                    |
+-------------+---------------------------------------------------------------------+
| Precision   | High                                                                |
+-------------+---------------------------------------------------------------------+


.. _type-array-index:

Type Array Index
++++++++++++++++

 All literal index used in the code. 

.. code-block:: php

   <?php
   
   // index is an index. it is read
   $array['index'] = 1;
   
   // another_index and second_level are read
   $array[] = $array['another_index']['second_level'];
   
   // variables index are not reported
   $array[$variable] = 1;
   
   ?>

Specs
^^^^^
+-------------+-----------------+
| Short name  | Type/ArrayIndex |
+-------------+-----------------+
| Rulesets    | :ref:`CE`       |
+-------------+-----------------+
| Exakt since | 1.0.4           |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Slow (1 hour)   |
+-------------+-----------------+
| Precision   | High            |
+-------------+-----------------+


.. _binary-glossary:

Binary Glossary
+++++++++++++++

 List of all the integer values using the binary format.

.. code-block:: php

   <?php
   
   $a = 0b10;
   $b = 0B0101;
   
   ?>

Specs
^^^^^
+-------------+--------------------------------------+
| Short name  | Type/Binary                          |
+-------------+--------------------------------------+
| Rulesets    | :ref:`CE`, :ref:`CompatibilityPHP53` |
+-------------+--------------------------------------+
| Exakt since | 0.8.4                                |
+-------------+--------------------------------------+
| Php Version | 5.4+                                 |
+-------------+--------------------------------------+
| Severity    | Major                                |
+-------------+--------------------------------------+
| Time To Fix | Quick (30 mins)                      |
+-------------+--------------------------------------+
| Precision   | High                                 |
+-------------+--------------------------------------+


.. _all-strings:

All strings
+++++++++++

 Strings and heredocs in one place.

.. code-block:: php

   <?php
   
   $string = 'string';
   
   $query = <<<SQL
   Heredoc
   SQL;
   
   ?>

Specs
^^^^^
+-------------+-----------------+
| Short name  | Type/CharString |
+-------------+-----------------+
| Rulesets    | none            |
+-------------+-----------------+
| Exakt since | 0.10.1          |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Slow (1 hour)   |
+-------------+-----------------+
| Precision   | High            |
+-------------+-----------------+


.. _continents:

Continents
++++++++++

 List of all the continents mentioned in the code.

Specs
^^^^^
+-------------+-----------------+
| Short name  | Type/Continents |
+-------------+-----------------+
| Rulesets    | none            |
+-------------+-----------------+
| Exakt since | 0.8.4           |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Slow (1 hour)   |
+-------------+-----------------+
| Precision   | High            |
+-------------+-----------------+


.. _duplicate-literal:

Duplicate Literal
+++++++++++++++++

 Report literals that are repeated across the code. The minimum replication is 5, and is configurable with ``maxDuplicate``.

Repeated literals should be considered a prime candidate for constants.

Integer, reals and strings are considered here. Boolean, Null and Arrays are omitted. 0, 1, 2, 10 and the empty string are all omitted, as too common. This list of omitted constants may be configured with the ignoreList parameter : a comma separated list of values.

.. code-block:: php

   <?php
       // array index are omitted
       $x[3] = 'b';
   
       // constanst are omitted
       const X = 11;
       define('Y', 'string')
   
       // 0, 1, 2, 10 are omitted
       $x = 0; 
       
   ?>




Suggestions
^^^^^^^^^^^

* Create a constant and use it in place of the literal
* Create a class constant and use it in place of the literal

+--------------+----------+---------+---------------------------------------------------------------+
| Name         | Default  | Type    | Description                                                   |
+--------------+----------+---------+---------------------------------------------------------------+
| minDuplicate | 15       | integer | Minimal number of duplication before the literal is reported. |
+--------------+----------+---------+---------------------------------------------------------------+
| ignoreList   | 0,1,2,10 | array   | Common values that have to be ignored. Comma separated list.  |
+--------------+----------+---------+---------------------------------------------------------------+



Specs
^^^^^
+-------------+-----------------------+
| Short name  | Type/DuplicateLiteral |
+-------------+-----------------------+
| Rulesets    | :ref:`Semantics`      |
+-------------+-----------------------+
| Exakt since | 1.9.6                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Quick (30 mins)       |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _email-addresses:

Email Addresses
+++++++++++++++

 List of all the email addresses that were found in the code.

Emails are detected with regex : ``[_A-Za-z0-9-]+(\\.[_A-Za-z0-9-]+)*`@ <https://www.php.net/manual/en/language.operators.errorcontrol.php>`_[A-Za-z0-9]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})``

.. code-block:: php

   <?php
   
   $email = 'contact@exakat.io';
   
   ?>

Specs
^^^^^
+-------------+---------------+
| Short name  | Type/Email    |
+-------------+---------------+
| Rulesets    | :ref:`CE`     |
+-------------+---------------+
| Exakt since | 0.8.4         |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _incoming-variable-index-inventory:

Incoming Variable Index Inventory
+++++++++++++++++++++++++++++++++

 This collects all the index used in incoming variables : `$_GET <https://www.php.net/manual/en/reserved.variables.get.php>`_, `$_POST <https://www.php.net/manual/en/reserved.variables.post.php>`_, `$_REQUEST <https://www.php.net/manual/en/reserved.variables.request.php>`_, $_COOKIE.

.. code-block:: php

   <?php
   
   // x is collected
   echo $_GET['x'];
   
   // y is collected, but no z. 
   echo $_POST['y']['z'];
   
   // a is not collected
   echo $_ENV['s'];
   
   ?>

Specs
^^^^^
+-------------+---------------+
| Short name  | Type/GPCIndex |
+-------------+---------------+
| Rulesets    | :ref:`CE`     |
+-------------+---------------+
| Exakt since | 1.0.4         |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _heredoc-delimiter-glossary:

Heredoc Delimiter Glossary
++++++++++++++++++++++++++

 List of all the delimiters used to build a Heredoc string. 

In the example below, ``EOD`` is the delimiter.

.. code-block:: php

   <?php
   
   $a = <<<EOD
   heredoc
   EOD;
   
   ?>


See also `Heredoc <https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc>`_.

Specs
^^^^^
+-------------+---------------+
| Short name  | Type/Heredoc  |
+-------------+---------------+
| Rulesets    | :ref:`CE`     |
+-------------+---------------+
| Exakt since | 0.8.4         |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _hexadecimal-glossary:

Hexadecimal Glossary
++++++++++++++++++++

 List of all the integer values using the hexadecimal format.

.. code-block:: php

   <?php
   
   $hexadecimal = 0x10;
   
   $anotherHexadecimal =0XAF;
   
   ?>


See also `Integer Syntax <https://www.php.net/manual/en/language.types.integer.php#language.types.integer.syntax>`_.

Specs
^^^^^
+-------------+------------------+
| Short name  | Type/Hexadecimal |
+-------------+------------------+
| Rulesets    | :ref:`CE`        |
+-------------+------------------+
| Exakt since | 0.8.4            |
+-------------+------------------+
| Php Version | All              |
+-------------+------------------+
| Severity    | Minor            |
+-------------+------------------+
| Time To Fix | Slow (1 hour)    |
+-------------+------------------+
| Precision   | High             |
+-------------+------------------+


.. _hexadecimal-in-string:

Hexadecimal In String
+++++++++++++++++++++

 Mark strings that may be confused with hexadecimal. 

Until PHP 7.0, PHP recognizes hexadecimal numbers inside strings, and converts them accordingly. 

PHP 7.0 and until 7.1, converts the string to 0, silently. 

PHP 7.1 and later, emits a 'A non-numeric value encountered' warning, and convert the string to 0. 

.. code-block:: php

   <?php
       $a = '0x0030';
       print $a + 1;
       // Print 49
   
       $c = '0x0030zyc';
       print $c + 1;
       // Print 49
   
       $b = 'b0x0030';
       print $b + 1;
       // Print 0
   ?>

Specs
^^^^^
+-------------+------------------------------------------------------+
| Short name  | Type/HexadecimalString                               |
+-------------+------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP70`, :ref:`CompatibilityPHP71` |
+-------------+------------------------------------------------------+
| Exakt since | 0.8.4                                                |
+-------------+------------------------------------------------------+
| Php Version | All                                                  |
+-------------+------------------------------------------------------+
| Severity    | Major                                                |
+-------------+------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                        |
+-------------+------------------------------------------------------+
| Precision   | High                                                 |
+-------------+------------------------------------------------------+


.. _http-headers:

Http Headers
++++++++++++

 List of HTTP headers use in the code. 

.. code-block:: php

   <?php
   
   header('Location: http://www.example.com/');
   
   // Parseable headers are also reported
   header('Location: http://www.example.com/');
   
   // UnParseable headers are not reported
   header('GarbagexxxxXXXXxxxGarbagexxxxXXXXxxx');
   header($header);
   
   ?>


Those headers are mostly used with `header() <https://www.php.net/header>`_ function to send to browser.

See also `List of HTTP header fields <https://en.wikipedia.org/wiki/List_of_HTTP_header_fields>`_.

Specs
^^^^^
+-------------+-----------------+
| Short name  | Type/HttpHeader |
+-------------+-----------------+
| Rulesets    | none            |
+-------------+-----------------+
| Exakt since | 0.8.4           |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Slow (1 hour)   |
+-------------+-----------------+
| Precision   | High            |
+-------------+-----------------+


.. _http-status-code:

HTTP Status Code
++++++++++++++++

 List of all the HTTP status codes mentioned in the code.

.. code-block:: php

   <?php
   
   http_response_code(418);
   
   header('HTTP/1.1 418 I\'m a teapot');
   
   ?>


See also `List of HTTP status codes <https://en.wikipedia.org/wiki/List_of_HTTP_status_codes>`_.

Specs
^^^^^
+-------------+-----------------+
| Short name  | Type/HttpStatus |
+-------------+-----------------+
| Rulesets    | none            |
+-------------+-----------------+
| Exakt since | 0.8.4           |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Slow (1 hour)   |
+-------------+-----------------+
| Precision   | High            |
+-------------+-----------------+


.. _malformed-octal:

Malformed Octal
+++++++++++++++

 Those numbers starts with a 0, so they are using the PHP octal convention. Therefore, one can't use 8 or 9 figures in those numbers, as they don't belong to the octal base. The resulting number will be truncated at the first erroneous figure. For example, 090 is actually 0, and 02689 is actually 22. 

.. code-block:: php

   <?php
   
   // A long way to write 0 in PHP 5
   $a = 0890; 
   
   // A fatal error since PHP 7
   
   ?>


Also, note that very large octal, usually with more than 21 figures, will be turned into a real number and undergo a reduction in precision.

See also `Integers <https://www.php.net/manual/en/language.types.integer.php>`_.

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------+
| Short name  | Type/MalformedOctal                                                                                        |
+-------------+------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56` |
+-------------+------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Php Version | 7.0-                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                           |
+-------------+------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+


.. _md5-strings:

Md5 Strings
+++++++++++

 List of all the MD5 values hard coded in the application.

MD5 values are detected as hexadecimal strings, of length 32. No attempt at recognizing the origin value is made, so any such strings, including dummy '11111111111111111111111111111111' are reported.

.. code-block:: php

   <?php
       // 32 
      $a = '0cc175b9c0f1b6a831c399e269771111';
   
   ?>


See also `MD5 <https://www.php.net/md5>`_.

Specs
^^^^^
+-------------+----------------+
| Short name  | Type/Md5String |
+-------------+----------------+
| Rulesets    | :ref:`CE`      |
+-------------+----------------+
| Exakt since | 0.8.4          |
+-------------+----------------+
| Php Version | All            |
+-------------+----------------+
| Severity    | Minor          |
+-------------+----------------+
| Time To Fix | Slow (1 hour)  |
+-------------+----------------+
| Precision   | High           |
+-------------+----------------+


.. _mime-types:

Mime Types
++++++++++

 List of Mime Types that are mentioned in the code. 

.. code-block:: php

   <?php
   
   $mimeType = 'multipart/form-data';
   $mimeType = 'image/jpeg';
   $mimeType = 'application/zip';
   
   header('Content-Type: '.$mimeType);
   
   ?>


See also `Media Type <https://en.wikipedia.org/wiki/Media_type>`_ and `MIME <https://en.wikipedia.org/wiki/MIME>`_.

Specs
^^^^^
+-------------+---------------+
| Short name  | Type/MimeType |
+-------------+---------------+
| Rulesets    | none          |
+-------------+---------------+
| Exakt since | 0.8.4         |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _no-real-comparison:

No Real Comparison
++++++++++++++++++

 Avoid comparing decimal numbers with ==, ===, !==, !=. Real numbers have an error margin which is random, and makes it very difficult to match even if the compared value is a literal. 

PHP uses an internal representation in base 2 : any number difficult to represent with this base (like 0.1 or 0.7) will have a margin of error.

.. code-block:: php

   <?php
   
   $a = 1/7;
   $b = 2.0;
   
   // 7 * $a is a real, not an integer
   var_dump( 7 * $a === 1);
   
   // rounding error leads to wrong comparison
   var_dump( (0.1 + 0.7) * 10 == 8);
   // although
   var_dump( (0.1 + 0.7) * 10);
   // displays 8
   
   // precision formula to use with reals. Adapt 0.0001 to your precision needs
   var_dump( abs(((0.1 + 0.7) * 10) - 8) < 0.0001); 
   
   ?>


Use precision formulas with `abs() <https://www.php.net/abs>`_ to approximate values with a given precision, or avoid reals altogether. 

See also `Floating point numbers <https://www.php.net/manual/en/language.types.float.php#language.types.float>`_.


Suggestions
^^^^^^^^^^^

* Cast the values to integer before comparing
* Compute the difference, and keep it below a threshold
* Use the gmp or the bc extension to handle high precision numbers
* Change the 'precision' directive of PHP : ini_set('precision', 30) to make number larger
* Multiply by a power of ten, before casting to integer for the comparison
* Use floor(), ceil() or round() to compare the numbers, with a specific precision

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------------+
| Short name  | Type/NoRealComparison                                                                               |
+-------------+-----------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`, :ref:`Top10`                                           |
+-------------+-----------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                               |
+-------------+-----------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                 |
+-------------+-----------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                               |
+-------------+-----------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                     |
+-------------+-----------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                |
+-------------+-----------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-real-comparison <https://github.com/dseguy/clearPHP/tree/master/rules/no-real-comparison.md>`__ |
+-------------+-----------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-magento-type-norealcomparison`, :ref:`case-spip-type-norealcomparison`                   |
+-------------+-----------------------------------------------------------------------------------------------------+


.. _nowdoc-delimiter-glossary:

Nowdoc Delimiter Glossary
+++++++++++++++++++++++++

 List of all the delimiters used to build a Nowdoc string. 

.. code-block:: php

   <?php
   $nowdoc = <<<'EOD'
   
   EOD;
   
   ?>


See also `Nowdoc <https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.nowdoc>`_ and `Heredoc <https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc>`_.

Specs
^^^^^
+-------------+---------------+
| Short name  | Type/Nowdoc   |
+-------------+---------------+
| Rulesets    | :ref:`CE`     |
+-------------+---------------+
| Exakt since | 0.8.4         |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _octal-glossary:

Octal Glossary
++++++++++++++

 List of all the integer values using the octal format : an integer starting with an initial 0. 

.. code-block:: php

   <?php
   
     $a = 1234; // decimal number
     $a = 0123; // octal number (equivalent to 83 decimal)
   
     // silently valid for PHP 5.x
     $a = 01283; // octal number (equivalent to 10 decimal)
   
   ?>


Putting an initial 0 is often innocuous, but in PHP, 0755 and 755 are not the same. The second is actually 1363 in octal, and will not provide the expected privileges.

See also `Integers <https://www.php.net/manual/en/language.types.integer.php>`_.

Specs
^^^^^
+-------------+---------------+
| Short name  | Type/Octal    |
+-------------+---------------+
| Rulesets    | :ref:`CE`     |
+-------------+---------------+
| Exakt since | 0.8.4         |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _invalid-octal-in-string:

Invalid Octal In String
+++++++++++++++++++++++

 Any octal sequence inside a string can't be go \377. Those will be a fatal error at parsing time. 

The check is applied to the string, starting with PHP 7.1. In PHP 7.0 and older, those sequences were silently adapted (modulo/% \400).

.. code-block:: php

   <?php
   
   // A valid octal in a PHP string
   echo \100; // @
   
   // Emit a warning in PHP 7.1
   //Octal escape sequence overflow \500 is greater than \377
   echo \500; // @
   
   // Silent conversion
   echo \478; // 8
   
   ?>


See also `Integers <https://www.php.net/manual/en/language.types.integer.php>`_.


Suggestions
^^^^^^^^^^^

* Use a double slash to avoid the sequence to be an octal sequence
* Use a function call, such as decoct() to convert larger number to octal notation

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Type/OctalInString        |
+-------------+---------------------------+
| Rulesets    | :ref:`CompatibilityPHP71` |
+-------------+---------------------------+
| Exakt since | 0.9.1                     |
+-------------+---------------------------+
| Php Version | 7.1-                      |
+-------------+---------------------------+
| Severity    | Major                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _one-variable-string:

One Variable String
+++++++++++++++++++

 These strings only contains one variable or property or array. 

.. code-block:: php

   <?php
   
   $a = 0;
   $b = "$a"; // This is a one-variable string
   
   // Better way to write the above
   $b = (string) $a;
   
   // Alternatives : 
   $b2 = "$a[1]"; // This is a one-variable string
   $b3 = "$a->b"; // This is a one-variable string
   $c = "d";
   $d = "D";
   $b4 = "{$$c}";
   $b5 = "{$a->foo()}";
   
   ?>


When the goal is to convert a variable to a string, it is recommended to use the type casting (string) operator : it is then clearer to understand the conversion. It is also marginally faster, though very little. 

See also `Strings <https://www.php.net/manual/en/language.types.string.php>`_ and `Type Juggling <https://www.php.net/manual/en/language.types.type-juggling.php>`_.


Suggestions
^^^^^^^^^^^

* Drop the surrounding string, keep the variable (or property...)
* Include in the string any concatenation that comes unconditionaly after or before
* Convert the variable to a string with the (type) operator

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------+
| Short name  | Type/OneVariableStrings                                                                     |
+-------------+---------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                 |
+-------------+---------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                       |
+-------------+---------------------------------------------------------------------------------------------+
| Php Version | All                                                                                         |
+-------------+---------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                       |
+-------------+---------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                            |
+-------------+---------------------------------------------------------------------------------------------+
| Precision   | High                                                                                        |
+-------------+---------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-tikiwiki-type-onevariablestrings`, :ref:`case-nextcloud-type-onevariablestrings` |
+-------------+---------------------------------------------------------------------------------------------+


.. _openssl-ciphers-used:

OpenSSL Ciphers Used
++++++++++++++++++++

 List of all the OpenSSL ciphers used in the code. 

It is important to always use valid cipher modes for SSL. In case of non-existent cipher, the crypting or decrypting will not happen. Ciphers are marked as weak after their security is breached, and shall be removed from OpenSSL, and later, from PHP. 

By reviewing this inventory, it is possible to detect forgotten ciphers, and fix them.

The full list of available ciphers for the PHP installation is available with the function `openssl_get_cipher_methods() <https://www.php.net/openssl_get_cipher_methods>`_. 

.. code-block:: php

   <?php
   // PHP documentation example, for PHP 7.1 and more recent
   //$key should have been previously generated in a cryptographically safe way, like openssl_random_pseudo_bytes
   $plaintext = message to be encrypted;
   $cipher = aes-128-gcm;
   if (in_array($cipher, openssl_get_cipher_methods()))
   {
       $ivlen = openssl_cipher_iv_length($cipher);
       $iv = openssl_random_pseudo_bytes($ivlen);
       $ciphertext = openssl_encrypt($plaintext, $cipher, $key, $options=0, $iv, $tag);
       //store $cipher, $iv, and $tag for decryption later
       $original_plaintext = openssl_decrypt($ciphertext, $cipher, $key, $options=0, $iv, $tag);
       echo $original_plaintext.\n;
   }
   ?>


See also `openssl_encrypt() <https://www.php.net/openssl_encrypt>`_ and `OpennSSL [PHP manual] <https://www.php.net/manual/en/book.openssl.php>`_.


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+--------------------+
| Short name  | Type/OpensslCipher |
+-------------+--------------------+
| Rulesets    | none               |
+-------------+--------------------+
| Exakt since | 2.1.1              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Quick (30 mins)    |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _pack-format-inventory:

Pack Format Inventory
+++++++++++++++++++++

 All format used in the code with `pack() <https://www.php.net/pack>`_ and `unpack() <https://www.php.net/unpack>`_.

.. code-block:: php

   <?php
   
   $binarydata = "\x04\x00\xa0\x00";
   $array = unpack("cn", $binarydata);
   $initial = pack("cn", ...$array);
   
   ?>

Specs
^^^^^
+-------------+---------------+
| Short name  | Type/Pack     |
+-------------+---------------+
| Rulesets    | :ref:`CE`     |
+-------------+---------------+
| Exakt since | 1.5.0         |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _path-lists:

Path lists
++++++++++

 List of all paths that were found in the code.

Path are identified with this regex : ``^(.*/)([^/]*)\.\w+$``. In particular, the directory delimiter is ``/`` : Windows delimiter ``\`` are not detected. 

.. code-block:: php

   <?php
   
   // the first argument is recognized as an URL
   fopen('/tmp/my/file.txt', 'r+');
   
   // the string argument  is recognized as an URL
   $source = 'https://www.other-example.com/';
   
   ?>


URL are ignored when the protocol is present in the literal : ``http://www.example.com`` is not mistaken with a file. 

See also `Dir predefined constants <https://www.php.net/manual/en/dir.constants.php>`_ and `Supported Protocols and Wrappers <https://www.php.net/manual/en/wrappers.php>`_.

Specs
^^^^^
+-------------+-----------------+
| Short name  | Type/Path       |
+-------------+-----------------+
| Rulesets    | :ref:`CE`       |
+-------------+-----------------+
| Exakt since | 1.5.8           |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Quick (30 mins) |
+-------------+-----------------+
| Precision   | High            |
+-------------+-----------------+


.. _perl-regex:

Perl Regex
++++++++++

 List of all the Perl Regex (Pcre-style).

.. code-block:: php

   <?php
   
   preg_match('/[abc]/', $haystack);
   
   preg_replace('#[0-9A-Z]+#is', $y, $z);
   
   ?>


Regex are spotted when they are literals : dynamically built regex, (including /$x/) are not reported.

Specs
^^^^^
+-------------+---------------+
| Short name  | Type/Pcre     |
+-------------+---------------+
| Rulesets    | none          |
+-------------+---------------+
| Exakt since | 0.8.4         |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _internet-ports:

Internet Ports
++++++++++++++

 List of all the Internet ports mentioned in the code. 

Ports are recognized based on a internal database of port. They are found in Integers.

.. code-block:: php

   <?php
   
   // 21 is the default port for FTP
   $ftp = ftp_connect($host, 21, $timeout = 90);
   
   ?>


See also `List of TCP and UDP port numbers <https://en.wikipedia.org/wiki/List_of_TCP_and_UDP_port_numbers>`_.

Specs
^^^^^
+-------------+---------------+
| Short name  | Type/Ports    |
+-------------+---------------+
| Rulesets    | none          |
+-------------+---------------+
| Exakt since | 0.8.4         |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _printf-format-inventory:

Printf Format Inventory
+++++++++++++++++++++++

 All format used in the code with `printf() <https://www.php.net/printf>`_, `vprintf() <https://www.php.net/vprintf>`_, `sprintf() <https://www.php.net/sprintf>`_, scanf() and `fscanf() <https://www.php.net/fscanf>`_.

.. code-block:: php

   <?php
   
   // Display a number with 2 digits
   echo printf("%'.2d\n", 123);
   
   ?>

Specs
^^^^^
+-------------+---------------+
| Short name  | Type/Printf   |
+-------------+---------------+
| Rulesets    | :ref:`CE`     |
+-------------+---------------+
| Exakt since | 1.5.0         |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _protocol-lists:

Protocol lists
++++++++++++++

 List of all protocols that were found in the code.

From the manual : PHP comes with many built-in wrappers for various URL-style protocols for use with the filesystem functions such as `fopen() <https://www.php.net/fopen>`_, `copy() <https://www.php.net/copy>`_, `file_exists() <https://www.php.net/file_exists>`_ and `filesize() <https://www.php.net/filesize>`_. 

.. code-block:: php

   <?php
   // Example from the PHP manual, with the glob:// wrapper
   
   // Loop over all *.php files in ext/spl/examples/ directory
   // and print the filename and its size
   $it = new DirectoryIterator(glob://ext/spl/examples/*.php);
   foreach($it as $f) {
       printf(%s: %.1FK\n, $f->getFilename(), $f->getSize()/1024);
   }
   ?>


See also `Supported Protocols and Wrappers <https://www.php.net/manual/en/wrappers.php>`_.

Specs
^^^^^
+-------------+-----------------+
| Short name  | Type/Protocols  |
+-------------+-----------------+
| Rulesets    | :ref:`CE`       |
+-------------+-----------------+
| Exakt since | 2.1.3           |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Quick (30 mins) |
+-------------+-----------------+
| Precision   | High            |
+-------------+-----------------+


.. _regex-inventory:

Regex Inventory
+++++++++++++++

 All regex used in the code. PHP has the PCRE extension that handles all regex : `preg_match() <https://www.php.net/preg_match>`_, `preg_replace() <https://www.php.net/preg_replace>`_, etc. 

.. code-block:: php

   <?php
   
   // PCRE regex used with preg_match
   preg_match('/[abc]+/', $string);
   
   // Mbstring regex, in the arabic range
   if(mb_ereg('[\x{0600}-\x{06FF}]', $text))
   
   ?>


mbstring regexes are also collected. Pre-PHP 7.0 POSIX regex are not listed. 

See also `ext/mbstring <http://www.php.net/manual/en/book.mbstring.php> `_ and `ext/pcre <http://www.php.net/manual/en/book.pcre.php> `_.

Specs
^^^^^
+-------------+---------------+
| Short name  | Type/Regex    |
+-------------+---------------+
| Rulesets    | :ref:`CE`     |
+-------------+---------------+
| Exakt since | 0.12.14       |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _php-sapi:

PHP Sapi
++++++++

 List of PHP SAPI mentioned in the code. When those SAPI are mentioned in strings, they are usually checked to take advantage of special characteristics. Check the code for portability.

.. code-block:: php

   <?php
   
   require __DIR__.'/phpdbg.php';
   
   $Phpdbg = new phpdbg();
   
   ?>

Specs
^^^^^
+-------------+---------------+
| Short name  | Type/Sapi     |
+-------------+---------------+
| Rulesets    | none          |
+-------------+---------------+
| Exakt since | 0.8.4         |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _shell-commands:

Shell commands
++++++++++++++

 Shell commands, called from PHP. 

Shell commands are detected with the italic quotes, and using `shell_exec() <https://www.php.net/shell_exec>`_, `system() <https://www.php.net/system>`_, `exec() <https://www.php.net/exec>`_ and `proc_open() <https://www.php.net/proc_open>`_.

.. code-block:: php

   <?php
   
   // Shell command in a shell_exec() call
   shell_exec('ls -1');
   
   // Shell command with backtick operator
   `ls -1 $path`;
   
   ?>

Specs
^^^^^
+-------------+--------------------+
| Short name  | Type/Shellcommands |
+-------------+--------------------+
| Rulesets    | :ref:`CE`          |
+-------------+--------------------+
| Exakt since | 1.9.9              |
+-------------+--------------------+
| Php Version | All                |
+-------------+--------------------+
| Severity    | Minor              |
+-------------+--------------------+
| Time To Fix | Slow (1 hour)      |
+-------------+--------------------+
| Precision   | High               |
+-------------+--------------------+


.. _should-be-single-quote:

Should Be Single Quote
++++++++++++++++++++++

 Use single quote for simple strings.

`Static <https://www.php.net/manual/en/language.oop5.static.php>`_ content inside a string, that has no single quotes nor escape sequence (such as \n or \t), should be using single quote delimiter, instead of double quote. 

.. code-block:: php

   <?php
   
   $a = abc;
   
   // This one is using a special sequence
   $b = cde\n;
   
   // This one is using two special sequences
   $b = \x03\u{1F418};
   
   ?>


If you have too many of them, don't loose your time switching them all. If you have a few of them, it may be good for consistence.

Specs
^^^^^
+-------------+-----------------------------------------------------------------------------------------------+
| Short name  | Type/ShouldBeSingleQuote                                                                      |
+-------------+-----------------------------------------------------------------------------------------------+
| Rulesets    | none                                                                                          |
+-------------+-----------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------+
| Php Version | All                                                                                           |
+-------------+-----------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                         |
+-------------+-----------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                              |
+-------------+-----------------------------------------------------------------------------------------------+
| Precision   | High                                                                                          |
+-------------+-----------------------------------------------------------------------------------------------+
| ClearPHP    | `no-double-quote <https://github.com/dseguy/clearPHP/tree/master/rules/no-double-quote.md>`__ |
+-------------+-----------------------------------------------------------------------------------------------+


.. _should-typecast:

Should Typecast
+++++++++++++++

 When typecasting, it is better to use the casting operator, such as ``(int)`` or ``(bool)``.

Functions such as `intval() <https://www.php.net/intval>`_ or `settype() <https://www.php.net/settype>`_ are always slower.

.. code-block:: php

   <?php
   
   // Fast version
   $int = (int) $X;
   
   // Slow version
   $int = intval($X);
   
   // Convert to base 8 : can't use (int) for that
   $int = intval($X, 8);
   
   
   ?>


This is a micro-optimisation, although such conversion may be use multiple time, leading to a larger performance increase.  

Note that `intval() <https://www.php.net/intval>`_ may also be used to convert an integer to another base.


Suggestions
^^^^^^^^^^^

* Use a typecast, instead of a functioncall.

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------+
| Short name  | Type/ShouldTypecast                                                                |
+-------------+------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                        |
+-------------+------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                              |
+-------------+------------------------------------------------------------------------------------+
| Php Version | All                                                                                |
+-------------+------------------------------------------------------------------------------------+
| Severity    | Minor                                                                              |
+-------------+------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                    |
+-------------+------------------------------------------------------------------------------------+
| Precision   | High                                                                               |
+-------------+------------------------------------------------------------------------------------+
| Examples    | :ref:`case-xataface-type-shouldtypecast`, :ref:`case-openconf-type-shouldtypecast` |
+-------------+------------------------------------------------------------------------------------+


.. _silently-cast-integer:

Silently Cast Integer
+++++++++++++++++++++

 Those are integer literals that are cast to a float when running PHP. They are too big for the current PHP version, and PHP resorts to cast them into a float, which has a much larger capacity but a lower precision.

Compare your literals to ``PHP_MAX_INT`` (typically ``9223372036854775807``) and ``PHP_MIN_INT`` (typically ``-9223372036854775808``).
This applies to binary (``0b10101``...), octal (``0123123``...) and hexadecimal (``0xfffff``...) too. 

.. code-block:: php

   <?php
   
   echo 0b1010101101010110101011010101011010101011010101011010101011010111;
   //6173123008118052203
   echo 0b10101011010101101010110101010110101010110101010110101010110101111;
   //1.2346246016236E+19
   
   echo 0123123123123123123123;
   //1498121094048818771
   echo 01231231231231231231231;
   //1.1984968752391E+19
   
   echo 0x12309812311230;
   //5119979279159856
   echo 0x12309812311230fed;
   //2.0971435127439E+19
   
   echo 9223372036854775807; //PHP_MAX_INT
   //9223372036854775807
   echo 9223372036854775808;
   9.2233720368548E+18
   
   ?>


See also `Integer overflow <https://www.php.net/manual/en/language.types.integer.php#language.types.integer.overflow>`_.



Suggestions
^^^^^^^^^^^

* Make sure hexadecimal numbers have the right number of digits : generally, it is 15, but it may depends on your PHP version.

Specs
^^^^^
+-------------+------------------------------------------------+
| Short name  | Type/SilentlyCastInteger                       |
+-------------+------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`    |
+-------------+------------------------------------------------+
| Exakt since | 0.8.4                                          |
+-------------+------------------------------------------------+
| Php Version | All                                            |
+-------------+------------------------------------------------+
| Severity    | Minor                                          |
+-------------+------------------------------------------------+
| Time To Fix | Quick (30 mins)                                |
+-------------+------------------------------------------------+
| Precision   | High                                           |
+-------------+------------------------------------------------+
| Examples    | :ref:`case-mediawiki-type-silentlycastinteger` |
+-------------+------------------------------------------------+


.. _similar-integers:

Similar Integers
++++++++++++++++

 This analysis reports all integer values that are expressed in different format. 

.. code-block:: php

   <?php
   
   // Three ways to write 10 (more available)
   $a = 10;
   $b = 012;
   $x = 0xA;
   
   // 7 is expressed in one way only
   $d = 7;
   $d = 7;
   
   // Four ways to write 11 (more available)
   $a = 11;
   $b = 013;
   $x = 0xB;
   $x = -+-11;
   
   // Expressions are not counted
   
   ?>



Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+----------------------+
| Short name  | Type/SimilarIntegers |
+-------------+----------------------+
| Rulesets    | :ref:`Semantics`     |
+-------------+----------------------+
| Exakt since | 1.9.0                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Quick (30 mins)      |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _special-integers:

Special Integers
++++++++++++++++

 Short and incomplete list of integers that may hold special values. 

.. code-block:: php

   <?php
   
   // 86400 is the number of seconds in a day
   $day = 86400;
   
   // 1400 is the number of minutes in a day
   $day = 1440;
   
   ?>


The list includes powers of 2, duration in various units, factorial, ASCII codes and years.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Type/SpecialIntegers |
+-------------+----------------------+
| Rulesets    | none                 |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _sql-queries:

SQL queries
+++++++++++

 SQL queries, detected in literal strings. 

SQL queries are detected with keywords, inside literals or concatenations. 

.. code-block:: php

   <?php
   
   // SQL in a string
   $query = 'SELECT name FROM users WHERE id = 1';
   
   // SQL in a concatenation
   $query = 'SELECT name FROM '.$table_users.' WHERE id = 1';
   
   // SQL in a Heredoc
   $query = <<<SQL
   SELECT name FROM $table_users WHERE id = 1
   SQL;
   
   ?>

Specs
^^^^^
+-------------+---------------+
| Short name  | Type/Sql      |
+-------------+---------------+
| Rulesets    | :ref:`CE`     |
+-------------+---------------+
| Exakt since | 0.10.1        |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _string-may-hold-a-variable:

String May Hold A Variable
++++++++++++++++++++++++++

 Those strings looks like holding a variable. 

Single quotes and Nowdoc syntax may include $ signs that are treated as literals, and not replaced with a variable value. 

However, there are some potential variables in those strings, making it possible for an error : the variable was forgotten and will be published as such. It is worth checking the content and make sure those strings are not variables.

.. code-block:: php

   <?php
   
   $a = 2;
   
   // Explicit variable, but literal effect is needed
   echo '$a is '.$a;
   
   // One of the variable has been forgotten
   echo '$a is $a';
   
   // $CAD is not a variable, rather a currency unit
   $total = 12;
   echo $total.' $CAD';
   
   // $CAD is not a variable, rather a currency unit
   $total = 12;
   
   // Here, $total has been forgotten
   echo <<<'TEXT'
   $total $CAD
   TEXT;
   
   ?>

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Type/StringHoldAVariable |
+-------------+--------------------------+
| Rulesets    | :ref:`Analyze`           |
+-------------+--------------------------+
| Exakt since | 0.8.4                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Instant (5 mins)         |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _interpolation:

Interpolation
+++++++++++++

 The following strings contain variables that are will be replaced. However, the following characters are ambiguous, and may lead to confusion. 

.. code-block:: php

   <?php
   
   class b { 
       public $b = 'c';
       function __toString() { return __CLASS__; }
   }
   $x = array(1 => new B());
   
   // -> after the $x[1] looks like a 2nd dereferencing, but it is not. 
   print $x[1]->b;
   // displays : b->b
   
   print {$x[1]->b};
   // displays : c
   
   ?>


It is advised to add curly brackets around those structures to make them non-ambiguous.

See also `Double quoted <https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.double>`_.

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Type/StringInterpolation |
+-------------+--------------------------+
| Rulesets    | none                     |
+-------------+--------------------------+
| Exakt since | 0.8.4                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Quick (30 mins)          |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _strings-with-strange-space:

Strings With Strange Space
++++++++++++++++++++++++++

 An invisible space may be mistaken for a normal space. 

However, PHP does straight comparisons, and may fail at recognizing. This analysis reports when it finds such strange spaces inside strings.

PHP doesn't mistake space and tables for whitespace when tokenizing the code.

This analysis doesn't report Unicode Codepoint Notation : those are visible in the code.

.. code-block:: php

   <?php
   
   // PHP 7 notation, 
   $a = \u{3000};
   $b = ;
   
   // Displays false
   var_dump($a === $b);
   
   ?>


See also `Unicode spaces <https://www.cs.tut.fi/~jkorpela/chars/spaces.html>`_, and `disallow irregular whitespace (no-irregular-whitespace) <http://eslint.org/docs/rules/no-irregular-whitespace>`_.


Suggestions
^^^^^^^^^^^

* Replace the odd spaces with a normal space
* If unsecable spaces are important for presentation, add them at the templating level.

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------+
| Short name  | Type/StringWithStrangeSpace                                                                     |
+-------------+-------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks`                                                     |
+-------------+-------------------------------------------------------------------------------------------------+
| Exakt since | 0.11.0                                                                                          |
+-------------+-------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                             |
+-------------+-------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                           |
+-------------+-------------------------------------------------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                                                                 |
+-------------+-------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                            |
+-------------+-------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-openemr-type-stringwithstrangespace`, :ref:`case-thelia-type-stringwithstrangespace` |
+-------------+-------------------------------------------------------------------------------------------------+


.. _internet-domains:

Internet Domains
++++++++++++++++

 List all internet domain used

Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+-----------------+
| Short name  | Type/UdpDomains |
+-------------+-----------------+
| Rulesets    | none            |
+-------------+-----------------+
| Exakt since | 1.9.6           |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Quick (30 mins) |
+-------------+-----------------+
| Precision   | High            |
+-------------+-----------------+


.. _unicode-blocks:

Unicode Blocks
++++++++++++++

 List of the Unicode blocks used in string literals.

This is the kind of characters that can be found in the applications strings.

.. code-block:: php

   <?php
   
   $a = zoo; 
   
   $b = ఒ; // Telugu character
   $b = \u{0C12}; Same as above
   
   $b = 人; // Chinese Mandarin character
   $b = \u{4EBA}; Same as above
   
   ?>


Note that Exakat only analyze PHP scripts : any translation available in a ``.po`` or external resource is not parsed and will not show.

See also `Unicode block <https://en.wikipedia.org/wiki/Unicode_block>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Type/UnicodeBlock |
+-------------+-------------------+
| Rulesets    | none              |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _url-list:

URL List
++++++++

 List of all the URL addresses that were found in the code.

.. code-block:: php

   <?php
   
   // the first argument is recognized as an URL
   ftp_connect('http://www.example.com/', $port, $timeout);
   
   // the string argument  is recognized as an URL
   $source = 'https://www.other-example.com/';
   
   ?>


See also `Uniform Resource Identifier <https://en.wikipedia.org/wiki/Uniform_Resource_Identifier>`_.


Suggestions
^^^^^^^^^^^

*

Specs
^^^^^
+-------------+---------------+
| Short name  | Type/Url      |
+-------------+---------------+
| Rulesets    | :ref:`CE`     |
+-------------+---------------+
| Exakt since | 0.8.4         |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _could-be-array-typehint:

Could Be Array Typehint
+++++++++++++++++++++++

 This rule spots arguments, properties or return values that may be labeled with the ``array`` scalar typehint. 

.. code-block:: php

   <?php
   
   // $arg is used as an array in this function, so it may be typed : array
   functions foo($arg) {
   
       // the returned value is always an array, so this function might be typed as : array
       return array($arg[3]);
   }
   
   ?>


See also `Type declarations  <https://www.php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration>`_.



Suggestions
^^^^^^^^^^^

* Add `array` typehint to the code.

Specs
^^^^^
+-------------+------------------------+
| Short name  | Typehints/CouldBeArray |
+-------------+------------------------+
| Rulesets    | :ref:`CE`              |
+-------------+------------------------+
| Exakt since | 2.1.2                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Quick (30 mins)        |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _could-be-boolean:

Could Be Boolean
++++++++++++++++

 Mark arguments and return types that can be set to boolean.

.. code-block:: php

   <?php
   
   // Accept a boolean as input 
   function foo($b) {
       // Returns a boolean
       return $b === true;
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Add `bool` typehint to the code.

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Typehints/CouldBeBoolean |
+-------------+--------------------------+
| Rulesets    | :ref:`CE`                |
+-------------+--------------------------+
| Exakt since | 2.1.2                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Major                    |
+-------------+--------------------------+
| Time To Fix | Quick (30 mins)          |
+-------------+--------------------------+
| Precision   | High                     |
+-------------+--------------------------+


.. _could-be-callable:

Could Be Callable
+++++++++++++++++

 Mark arguments and return types that can be set to ``callable``.

The analysis also reports properties that could be 'callable', although PHP doesn't allow that configuration.

.. code-block:: php

   <?php
   
   // Accept a callable as input 
   function foo($b) {
       // Returns value as return
       return $b();
   }
   
   ?>


Note that properties cannot be callable. It reports a compilation error.

See also `Callbacks / callables <https://www.php.net/manual/en/language.types.callable.php>`_.



Suggestions
^^^^^^^^^^^

* Add `callable` typehint to arguments or returntypes.

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Typehints/CouldBeCallable |
+-------------+---------------------------+
| Rulesets    | :ref:`Typechecks`         |
+-------------+---------------------------+
| Exakt since | 2.1.2                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Major                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _could-be-cit:

Could Be CIT
++++++++++++

 Mark arguments and return types that can be set to a class, interface definition.

.. code-block:: php

   <?php
   
   // Accept an object as input 
   function foo($b) {
       // Returns new object
       return new ($b->classname);
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Add the class or interface typehint to the code.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Typehints/CouldBeCIT |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 2.1.2                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Major                |
+-------------+----------------------+
| Time To Fix | Quick (30 mins)      |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _could-be-float:

Could Be Float
++++++++++++++

 Mark arguments, properties and return types that can be set to ``float``.

.. code-block:: php

   <?php
   
   // Accept an int as input 
   function foo($b) {
       // Returns a float (cubic root of $b);
       return pow($b, 1 / 3);
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Add `float` typehint to the code.

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Typehints/CouldBeFloat       |
+-------------+------------------------------+
| Rulesets    | :ref:`CE`, :ref:`Typechecks` |
+-------------+------------------------------+
| Exakt since | 2.1.4                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Major                        |
+-------------+------------------------------+
| Time To Fix | Quick (30 mins)              |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _could-be-generator:

Could Be Generator
++++++++++++++++++

 Return value may be typed ``generator``.

.. code-block:: php

   <?php
   
   // Yield makes foo() a generator
   function foo() {
       yield 1; 
       // Returns an int
       return $b + 8;
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Add `\Generator` typehint to the method.

Specs
^^^^^
+-------------+----------------------------+
| Short name  | Typehints/CouldBeGenerator |
+-------------+----------------------------+
| Rulesets    | :ref:`Typechecks`          |
+-------------+----------------------------+
| Exakt since | 2.2.2                      |
+-------------+----------------------------+
| Php Version | All                        |
+-------------+----------------------------+
| Severity    | Minor                      |
+-------------+----------------------------+
| Time To Fix | Quick (30 mins)            |
+-------------+----------------------------+
| Precision   | High                       |
+-------------+----------------------------+


.. _could-be-integer:

Could Be Integer
++++++++++++++++

 Mark arguments, properties and return types that can be set to ``int``.

.. code-block:: php

   <?php
   
   // Accept an int as input 
   function foo($b) {
       // Returns an int
       return $b + 8;
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Add `int` typehint to the code.

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Typehints/CouldBeInt         |
+-------------+------------------------------+
| Rulesets    | :ref:`CE`, :ref:`Typechecks` |
+-------------+------------------------------+
| Exakt since | 2.1.4                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Major                        |
+-------------+------------------------------+
| Time To Fix | Quick (30 mins)              |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _could-be-iterable:

Could Be Iterable
+++++++++++++++++

 Mark arguments, properties and return types that can be set to ``iterable``.

.. code-block:: php

   <?php
   
   // Accept an array or a traversable Object as input 
   function foo($b) {
       foreach($b as $c) {
       
       }
   
       // Returns an array
       return [$b];
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Add `iterable` typehint to the code (PHP 8.0+).

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Typehints/CouldBeIterable |
+-------------+---------------------------+
| Rulesets    | :ref:`Typechecks`         |
+-------------+---------------------------+
| Exakt since | 2.1.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Major                     |
+-------------+---------------------------+
| Time To Fix | Quick (30 mins)           |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _could-be-null:

Could Be Null
+++++++++++++

 Mark arguments and return types that can be null.

.. code-block:: php

   <?php
   
   // Accept null as input, when used as third argument of file_get_contents
   function foo($b) {
       $s = file_get_contents(URL, false, $b);
   
       // Returns a string
       return shell_exec($s);
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Add `null` typehint to the code (PHP 8.0+).
* Add `?` typehint to the code.

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Typehints/CouldBeNull        |
+-------------+------------------------------+
| Rulesets    | :ref:`CE`, :ref:`Typechecks` |
+-------------+------------------------------+
| Exakt since | 2.1.2                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Major                        |
+-------------+------------------------------+
| Time To Fix | Quick (30 mins)              |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _could-be-parent:

Could Be Parent
+++++++++++++++

 Mark arguments, return types and properties that can be set to ``parent``.

This analysis works when typehints have already been configured.

.. code-block:: php

   <?php
   
   class x extends w {
       // Accept a w object as input 
       function foo(w $b) : w {
           // Returns a w object
           return $b;
       }   
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Add `parent` typehint to the code.
* Add the literal class/type typehint to the code.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Typehints/CouldBeParent |
+-------------+-------------------------+
| Rulesets    | :ref:`Typechecks`       |
+-------------+-------------------------+
| Exakt since | 2.1.2                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Major                   |
+-------------+-------------------------+
| Time To Fix | Quick (30 mins)         |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _could-be-self:

Could Be Self
+++++++++++++

 Mark arguments, return types and properties that can be set to ``self``. This applies only to methods. 

This analysis works when typehints have already been configured.

.. code-block:: php

   <?php
   
   class x {
       // Accept a x object as input 
       function foo(x $b) : x {
           // Returns a x object
           return $b;
       }   
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Add `self` typehint to the code.
* Add the literal class/type typehint to the code.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Typehints/CouldBeSelf |
+-------------+-----------------------+
| Rulesets    | :ref:`Typechecks`     |
+-------------+-----------------------+
| Exakt since | 2.1.2                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Major                 |
+-------------+-----------------------+
| Time To Fix | Quick (30 mins)       |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _could-be-string:

Could Be String
+++++++++++++++

 Mark arguments and return types that can be set to string.

.. code-block:: php

   <?php
   
   // Accept a string as input 
   function foo($a) {
       // Returns a string
       return $a . 'string';
   }
   
   ?>



Suggestions
^^^^^^^^^^^

* Choose the string typehint, and add it to the code.

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Typehints/CouldBeString      |
+-------------+------------------------------+
| Rulesets    | :ref:`CE`, :ref:`Typechecks` |
+-------------+------------------------------+
| Exakt since | 2.1.2                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Major                        |
+-------------+------------------------------+
| Time To Fix | Quick (30 mins)              |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _could-be-void:

Could Be Void
+++++++++++++

 Mark return types that can be set to void.

.. code-block:: php

   <?php
   
   // No return, this should be void.
   function foo() {
       ++$a; // Not useful
   }
   
   ?>


All abstract methods (in classes or in interfaces) are omitted here.


Suggestions
^^^^^^^^^^^

* Add the void typehint to the code.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Typehints/CouldBeVoid |
+-------------+-----------------------+
| Rulesets    | :ref:`Typechecks`     |
+-------------+-----------------------+
| Exakt since | 2.1.2                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Major                 |
+-------------+-----------------------+
| Time To Fix | Quick (30 mins)       |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _could-not-type:

Could Not Type
++++++++++++++

 Mark arguments, return types and properties that could not be typed.


Arguments, return types and properties that have no explicit typehint, and that could yield no guess from the following analysis, are deemed unable to receive a type. 

+ Typehints/CouldBeCIT
+ Typehints/CouldBeString
+ Typehints/CouldBeArray
+ Typehints/CouldBeBoolean
+ Typehints/CouldBeVoid
+ Typehints/CouldBeCallable

``mixed`` typehint, which acts as the universal typehint, is not processed here.

There are situation which cannot be typed, and legit : the example below is an illustration. ``array_fill`` is a native PHP example, where the second argument may be of any type. ``__get``and ``__set`` are also notoriously difficult to type, given the broad usage of arguments. 

.. code-block:: php

   <?php
   
   // Accepts any input, and returns any input
   // This may be used, but not typed.
   function foo($b) {
       return $b;
   }
   
   ?>

Specs
^^^^^
+-------------+------------------------+
| Short name  | Typehints/CouldNotType |
+-------------+------------------------+
| Rulesets    | none                   |
+-------------+------------------------+
| Exakt since | 2.1.2                  |
+-------------+------------------------+
| Php Version | 7.4-                   |
+-------------+------------------------+
| Severity    | Major                  |
+-------------+------------------------+
| Time To Fix | Quick (30 mins)        |
+-------------+------------------------+
| Precision   | Medium                 |
+-------------+------------------------+


.. _missing-some-returntype:

Missing Some Returntype
+++++++++++++++++++++++

 The specified typehints are not compatible with the returned values. 

The code of the method may return other types, which are not specified and will lead to a PHP fatal error. It is the case for insufficient typehints, when a typehint is missing, or inconsistent typehints, when the method returns varied types. 

.. code-block:: php

   <?php
   
   // correct return typehint
   function fooSN() : ?string  {
       return shell_exec('ls -hla');
   }
   
   // insufficient return typehint
   // shell_exec() may return null or string. Here, only string in specified for fooS, and that may lead to a Fatal error
   function fooS() : string  {
       return shell_exec('ls -hla');
   }
   
   // inconsistent return typehint
   function bar() : int {
       return rand(0, 10) ? 1 : b;
   }
   
   ?>


The analysis reports a method when it finds other return types than the one expected. In the case of multiple typehints, as for the last example, the PHP code may require an upgrade to PHP 8.0.



Suggestions
^^^^^^^^^^^

* Update the typehint to accept more types
* Update the code of the method to fit the expected returntype

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Typehints/MissingReturntype                 |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 2.1.7                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | Very high                                   |
+-------------+---------------------------------------------+


.. _selector:

Selector
++++++++

 Makes a selection of atoms in the code, based on the selector parameter.

+----------+---------+--------+------------------------------------------------------+
| Name     | Default | Type   | Description                                          |
+----------+---------+--------+------------------------------------------------------+
| selector |         | string | A selector expression to identify atoms in the code. |
+----------+---------+--------+------------------------------------------------------+



Specs
^^^^^
+-------------+-----------------+
| Short name  | Utils/Selector  |
+-------------+-----------------+
| Rulesets    | none            |
+-------------+-----------------+
| Exakt since | 2.2.2           |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Quick (30 mins) |
+-------------+-----------------+
| Precision   | Unknown         |
+-------------+-----------------+


.. _assigned-twice:

Assigned Twice
++++++++++++++

 The same variable is assigned twice in the same function.

While this is possible and quite common, it is also a good practice to avoid changing a value from one literal to another. It is far better to assign the new value to 

Incremental changes to a variables are not reported here.

.. code-block:: php

   <?php
   
   function foo() {
       // incremental changes of $a;
       $a = 'a';
       $a++;
       $a = uppercase($a);
       
       $b = 1;
       $c = bar($b);
       // B changed its purpose. Why not call it $d? 
       $b = array(1,2,3);
       
       // This is some forgotten debug
       $e = $config->getSomeList();
       $e = array('OneElement');
   }
   
   ?>

Specs
^^^^^
+-------------+-------------------------------+
| Short name  | Variables/AssignedTwiceOrMore |
+-------------+-------------------------------+
| Rulesets    | :ref:`Analyze`                |
+-------------+-------------------------------+
| Exakt since | 0.9.8                         |
+-------------+-------------------------------+
| Php Version | All                           |
+-------------+-------------------------------+
| Severity    | Minor                         |
+-------------+-------------------------------+
| Time To Fix | Quick (30 mins)               |
+-------------+-------------------------------+
| Precision   | High                          |
+-------------+-------------------------------+


.. _blind-variables:

Blind Variables
+++++++++++++++

 Variables that are used in foreach or for structure, for their managing the loop itself. 

.. code-block:: php

   <?php
       foreach($array as $key => $value) {
           // $key and $value are blind values
       }
   
   ?>

Specs
^^^^^
+-------------+-----------------+
| Short name  | Variables/Blind |
+-------------+-----------------+
| Rulesets    | none            |
+-------------+-----------------+
| Exakt since | 0.8.4           |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Slow (1 hour)   |
+-------------+-----------------+
| Precision   | High            |
+-------------+-----------------+


.. _confusing-names:

Confusing Names
+++++++++++++++

 The following variables's name are very close and may lead to confusion.

Variables are 3 letters long (at least). Variables names build with an extra ``s`` are omitted.
Variables may be scattered across the code, or close to each other. 

Variables which differ only by case, or by punctuation or by numbers are reported here.

.. code-block:: php

   <?php
   
       // Variable names with one letter difference
       $fWScale = 1;
       $fHScale = 1;
       $fScale = 2;
       
       $oFrame = 3;
       $iFrame = new Foo();
       
       $v2_norm = array();
       $v1_norm = 'string';
       
       $exept11 = 1;
       $exept10 = 2;
       $exept8 = 3;
       
       // Variables that differ by punctation
       $locale = 'fr';
       $_locate = 'en';
   
       // Variables that differ by numbers
       $x11 = 'a';
       $x12 = 'b';
   
       // Variables that differ by numbers
       $songMP3 = 'a';
       $Songmp3 = 'b';
       
       // This even looks like a typo
       $privileges  = 1;
       $privilieges = true;
       
       // This is not reported : Adding extra s is tolerated.
       $rows[] = $row;
       
   ?>


See also `How to pick bad function and variable names <http://mojones.net/how-to-pick-bad-function-and-variable-names.html>`_.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Variables/CloseNaming |
+-------------+-----------------------+
| Rulesets    | none                  |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _complex-dynamic-names:

Complex Dynamic Names
+++++++++++++++++++++

 Avoid using expressions as names for variables or methods. 

There are no place for checks or flow control, leading to any rogue value to be used as is. Besides, the expression is often overlooked, and not expected there : this makes the code less readable.

It is recommended to build the name in a separate variable, apply the usual checks for existence and validity, and then use the name.

.. code-block:: php

   <?php
   
   $a = new foo();
   
   // Code is more readable
   $name = strolower($string);
   if (!property_exists($a, $name)) {
       throw new missingPropertyexception($name);
   }
   echo $a->$name;
   
   // This is not check
   echo $a->{strtolower($string)};
   
   ?>


This analysis only accept simple containers, such as variables, properties. 

See also `Dynamically Access PHP Object Properties with `$this <https://www.php.net/manual/en/language.oop5.basic.php>`_ <https://drupalize.me/blog/201508/dynamically-access-php-object-properties>`_.



Suggestions
^^^^^^^^^^^

* Extract the expression from the variable syntax, and make it a separate variable.

Specs
^^^^^
+-------------+-------------------------------+
| Short name  | Variables/ComplexDynamicNames |
+-------------+-------------------------------+
| Rulesets    | :ref:`Suggestions`            |
+-------------+-------------------------------+
| Exakt since | 1.8.4                         |
+-------------+-------------------------------+
| Php Version | All                           |
+-------------+-------------------------------+
| Severity    | Minor                         |
+-------------+-------------------------------+
| Time To Fix | Quick (30 mins)               |
+-------------+-------------------------------+
| Precision   | High                          |
+-------------+-------------------------------+


.. _constant-typo-looks-like-a-variable:

Constant Typo Looks Like A Variable
+++++++++++++++++++++++++++++++++++

 A constant bears the same name as a variable. This might be a typo.

When the constant doesn't exist, PHP 8.0 yields a Fatal Error and stops execution. PHP 7.4 turns the undefined constant into its string equivalent. 

.. code-block:: php

   <?php
   
   // Get an object or null
   $object = foo(); 
   
   // PHP 8.0 stops here, with a Fatal Error
   // PHP 7.4 makes this a string, and the condition is always true
   if (!empty(object)) {
       // In PHP 7.4, this is not protected by the condition, and may yield an error.
       $object->doSomething();
   }
   
   ?>


This analysis is case sensitive. 


Suggestions
^^^^^^^^^^^

* Add a $ sign to the constant
* Use a different name for the variable, or the constant

Specs
^^^^^
+-------------+------------------------+
| Short name  | Variables/ConstantTypo |
+-------------+------------------------+
| Rulesets    | :ref:`Analyze`         |
+-------------+------------------------+
| Exakt since | 2.2.0                  |
+-------------+------------------------+
| Php Version | 8.0-                   |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Quick (30 mins)        |
+-------------+------------------------+
| Precision   | Medium                 |
+-------------+------------------------+


.. _globals:

Globals
+++++++

 Global variables.

.. code-block:: php

   <?php
   
   // global via global keyword
   global $a, $b;
   
   // global via $GLOBALS variable
   $GLOBALS['c'] = 1;
   
   ?>

Specs
^^^^^
+-------------+-------------------+
| Short name  | Variables/Globals |
+-------------+-------------------+
| Rulesets    | none              |
+-------------+-------------------+
| Exakt since | 0.8.4             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _inconsistent-variable-usage:

Inconsistent Variable Usage
+++++++++++++++++++++++++++

 Those variables are used in various and inconsistent ways. It is difficult to understand if they are an array, an object or a scalar variable.

.. code-block:: php

   <?php
   
   // $a is an array, then $b is a string.
   $a = ['a', 'b', 'c'];
   $b = implode('-', $a);
   
   // $a is an array, then it is a string.
   $a = ['a', 'b', 'c'];
   $a = implode('-', $a);
   
   ?>



Suggestions
^^^^^^^^^^^

* Keep one type for each variable. This keeps the code readable. 
* Give different names to variables with different types.

Specs
^^^^^
+-------------+---------------------------------------------------+
| Short name  | Variables/InconsistentUsage                       |
+-------------+---------------------------------------------------+
| Rulesets    | none                                              |
+-------------+---------------------------------------------------+
| Exakt since | 1.6.9                                             |
+-------------+---------------------------------------------------+
| Php Version | All                                               |
+-------------+---------------------------------------------------+
| Severity    | Minor                                             |
+-------------+---------------------------------------------------+
| Time To Fix | Slow (1 hour)                                     |
+-------------+---------------------------------------------------+
| Precision   | High                                              |
+-------------+---------------------------------------------------+
| Examples    | :ref:`case-wordpress-variables-inconsistentusage` |
+-------------+---------------------------------------------------+


.. _interface-arguments:

Interface Arguments
+++++++++++++++++++

 Variables that are arguments in an interface. 

.. code-block:: php

   <?php
   
   interface i {
       function interfaceMethod($interfaceArgument) ;
   }
   
   class foo extends i {
       // Save function as above, but the variable is not reported
       function interfaceMethod($notAnInterfaceArgument) {}
   }
   
   ?>

Specs
^^^^^
+-------------+------------------------------+
| Short name  | Variables/InterfaceArguments |
+-------------+------------------------------+
| Rulesets    | none                         |
+-------------+------------------------------+
| Exakt since | 0.8.4                        |
+-------------+------------------------------+
| Php Version | All                          |
+-------------+------------------------------+
| Severity    | Minor                        |
+-------------+------------------------------+
| Time To Fix | Slow (1 hour)                |
+-------------+------------------------------+
| Precision   | High                         |
+-------------+------------------------------+


.. _local-globals:

Local Globals
+++++++++++++

 A global variable is used locally in a method. 

Either the global keyword has been forgotten, or the local variable should be renamed in a less ambiguous manner.

Having both a global and a local variable with the same name is legit. PHP keeps the contexts separated, and it processes them independently.

However, in the mind of the coder, it is easy to mistake the local variable $x and the global variable $x. May they be given different meaning, and this is an error-prone situation. 

It is recommended to keep the global variables's name distinct from the local variables. 

.. code-block:: php

   <?php
   
   // This is actualy a global variable
   $variable = 1;
   $globalVariable = 2;
   
   function foo() {
       global $globalVariable2;
       
       $variable = 4;
       $localVariable = 3;
       
       // This always displays 423, instead of 123
       echo $variable .' ' . $globalVariable . ' ' . $localVariable;
   }
   
   ?>

Specs
^^^^^
+-------------+------------------------+
| Short name  | Variables/LocalGlobals |
+-------------+------------------------+
| Rulesets    | none                   |
+-------------+------------------------+
| Exakt since | 1.1.2                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Slow (1 hour)          |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _lost-references:

Lost References
+++++++++++++++

 Either avoid references, or propagate them correctly.

When assigning a referenced variable with another reference, the initial reference is lost, while the intend was to transfer the content. 

.. code-block:: php

   <?php
   
   function foo(&$lostReference, &$keptReference)
   {
       $c = 'c';
   
       // $lostReference was a reference, but now, it is another
       $lostReference =& $c;
       // $keptReference was a reference : now it contains the actual value
       $keptReference = $c;
   }
   
   $bar = 'bar';
   $bar2 = 'bar';
   foo($bar, $bar2); 
   
   //displays bar c, instead of bar bar
   print $bar. ' '.$bar2;
   
   ?>


Do not reassign a reference with another reference. Assign new content to the reference to change its value.

Suggestions
^^^^^^^^^^^

* Always assign new value to an referenced argument, and don't reassign a new reference

Specs
^^^^^
+-------------+------------------------------------------------+
| Short name  | Variables/LostReferences                       |
+-------------+------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                 |
+-------------+------------------------------------------------+
| Exakt since | 0.8.4                                          |
+-------------+------------------------------------------------+
| Php Version | All                                            |
+-------------+------------------------------------------------+
| Severity    | Major                                          |
+-------------+------------------------------------------------+
| Time To Fix | Quick (30 mins)                                |
+-------------+------------------------------------------------+
| Precision   | High                                           |
+-------------+------------------------------------------------+
| Examples    | :ref:`case-wordpress-variables-lostreferences` |
+-------------+------------------------------------------------+


.. _no-static-variable-in-a-method:

No Static Variable In A Method
++++++++++++++++++++++++++++++

 Refactor `static <https://www.php.net/manual/en/language.oop5.static.php>`_ variables into (`static) <https://www.php.net/manual/en/language.oop5.static.php>`_ properties. 

Inside a class, it is recommended to use the class properties, `static <https://www.php.net/manual/en/language.oop5.static.php>`_ or not, to hold values between calls to the method. Inside a function, or a closure, no such container is available, so `static <https://www.php.net/manual/en/language.oop5.static.php>`_ variables may be useful. Although, a refactoring to a class is also recommended here. 

Properties have clear definitions, and are less suprising than `static <https://www.php.net/manual/en/language.oop5.static.php>`_ variables.

.. code-block:: php

   <?php
   
   class barbar {
       function foo() {
           static $counter = 0;
           
           // count the number of calls of this method
           return ++$counter;
       }
   }
   
   class bar {
       static $counter = 0;
   
       function foo() {
           // count the number of calls of this method
           return ++self::$counter;
       }
   }
   
   ?>


The `static <https://www.php.net/manual/en/language.oop5.static.php>`_ variable is easier to refactor as a `static <https://www.php.net/manual/en/language.oop5.static.php>`_ property. It is also possible to refactor it as a property, although it may impact the behavior of the previous code, or require extra work.



Suggestions
^^^^^^^^^^^

* Refactor the variable into a static property
* Refactor the variable into a property and dependency injection

Specs
^^^^^
+-------------+----------------------------------------+
| Short name  | Variables/NoStaticVarInMethod          |
+-------------+----------------------------------------+
| Rulesets    | :ref:`ClassReview`, :ref:`Suggestions` |
+-------------+----------------------------------------+
| Exakt since | 2.2.1                                  |
+-------------+----------------------------------------+
| Php Version | All                                    |
+-------------+----------------------------------------+
| Severity    | Minor                                  |
+-------------+----------------------------------------+
| Time To Fix | Quick (30 mins)                        |
+-------------+----------------------------------------+
| Precision   | Very high                              |
+-------------+----------------------------------------+


.. _overwriting-variable:

Overwriting Variable
++++++++++++++++++++

 Replacing the content of a variable by something different is prone to errors. For example, it is not obvious if the $text variable is plain text or HTML text. 

.. code-block:: php

   <?php
   
   // Confusing
   $text = htmlentities($text);
   
   // Better
   $textHTML = htmlentities($text);
   
   ?>


Besides, it is possible that the source is needed later, for extra processing. 

Note that accumulators, like += .=  or [] etc., that are meant to collect lots of values with consistent type are OK.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Variables/Overwriting |
+-------------+-----------------------+
| Rulesets    | none                  |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Major                 |
+-------------+-----------------------+
| Time To Fix | Quick (30 mins)       |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _overwritten-literals:

Overwritten Literals
++++++++++++++++++++

 The same variable is assigned a literal twice. It is possible that one of the assignation is too much.

This analysis doesn't take into account the distance between two assignations : it may report false positives when the variable is actually used for several purposes, and, as such, assigned twice with different values.

.. code-block:: php

   <?php
   
   function foo() {
       // Two assignations in a short sequence : one is too many.
       $a = 1;
       $a = 2;
       
       for($i = 0; $i < 10; $i++) {
           $a += $i;
       }
       $b = $a;
       
       // New assignation. $a is now used as an array. 
       $a = array(0);
   }
   
   ?>

Specs
^^^^^
+-------------+-------------------------------+
| Short name  | Variables/OverwrittenLiterals |
+-------------+-------------------------------+
| Rulesets    | :ref:`Analyze`                |
+-------------+-------------------------------+
| Exakt since | 0.8.4                         |
+-------------+-------------------------------+
| Php Version | All                           |
+-------------+-------------------------------+
| Severity    | Major                         |
+-------------+-------------------------------+
| Time To Fix | Instant (5 mins)              |
+-------------+-------------------------------+
| Precision   | High                          |
+-------------+-------------------------------+


.. _php5-indirect-variable-expression:

PHP5 Indirect Variable Expression
+++++++++++++++++++++++++++++++++

 Indirect variable expressions changes between PHP 5 an 7.

The following structures are evaluated differently in PHP 5 and 7. It is recommended to review them or switch to a less ambiguous syntax.

.. code-block:: php

   <?php
   
   // PHP 7 
   $foo = 'bar';
   $bar['bar']['baz'] = 'foobarbarbaz';
   echo $$foo['bar']['baz'];
   echo ($$foo)['bar']['baz'];
   
   // PHP 5
   $foo['bar']['baz'] = 'bar';
   $bar = 'foobarbazbar';
   echo $$foo['bar']['baz'];
   echo ${$foo['bar']['baz']};
   
   ?>


See `Backward incompatible changes PHP 7.0 <https://www.php.net/manual/en/migration70.incompatible.php>`_

+-----------------------+-------------------------+-------------------------+
| Expression            | PHP 5 interpretation    | PHP 7 interpretation    |
+-----------------------+-------------------------+-------------------------+
|$$foo['bar']['baz']    |${$foo['bar']['baz']}    |($$foo)['bar']['baz']    |
|$foo->$bar['baz']      |$foo->{$bar['baz']}      |($foo->$bar)['baz']      |
|$foo->$bar['baz']`() <https://www.php.net/>`_    |$foo->{$bar['baz']}`() <https://www.php.net/>`_    |($foo->$bar)['baz']`() <https://www.php.net/>`_    |
|Foo\:\:$bar['baz']`() <https://www.php.net/>`_   |Foo\:\:{$bar['baz']}`() <https://www.php.net/>`_   |(Foo\:\:$bar)['baz']`() <https://www.php.net/>`_   |
+-----------------------+-------------------------+-------------------------+



Suggestions
^^^^^^^^^^^

* Avoid using complex expressions, mixing ``$$\``, ``[0]`` and ``->`` in the same expression
* Add curly braces {} to ensure that the precedence is the same between PHP 5 and 7. For example, ``$$v`` becomes ``${$v}``

Specs
^^^^^
+-------------+------------------------------------------------------------------------------------------------------------+
| Short name  | Variables/Php5IndirectExpression                                                                           |
+-------------+------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56` |
+-------------+------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Php Version | 7.0-                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                      |
+-------------+------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                              |
+-------------+------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                       |
+-------------+------------------------------------------------------------------------------------------------------------+


.. _php-7-indirect-expression:

Php 7 Indirect Expression
+++++++++++++++++++++++++

 Those are variable indirect expressions that are interpreted differently in PHP 5 and PHP 7. 

You should check them so they don't behave strangely.

.. code-block:: php

   <?php
   
   // Ambiguous expression : 
   $b = $$foo['bar']['baz'];
   echo $b;
   
   $foo = array('bar' => array('baz' => 'bat'));
   $bat = 'PHP 5.6';
   
   // In PHP 5, the expression above means : 
   $b = $\{$foo['bar']['baz']};
   $b = 'PHP 5.6';
   
   $foo = 'a';
   $a = array('bar' => array('baz' => 'bat'));
   
   // In PHP 7, the expression above means : 
   $b = ($$foo)['bar']['baz'];
   $b = 'bat';
   
   ?>


See also `Changes to variable handling <https://www.php.net/manual/en/migration70.incompatible.php>`_.


Suggestions
^^^^^^^^^^^

* Avoid using complex expressions, mixing $$, [0] and -> in the same expression
* Add curly braces {} to ensure that the precedence is the same between PHP 5 and 7. For example, ``$$v`` becomes ``${$v}``

Specs
^^^^^
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Short name  | Variables/Php7IndirectExpression                                                                                                      |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`CompatibilityPHP53`, :ref:`CompatibilityPHP54`, :ref:`CompatibilityPHP55`, :ref:`CompatibilityPHP56`, :ref:`CompatibilityPHP70` |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                                                 |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Php Version | 7.0+                                                                                                                                  |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Severity    | Major                                                                                                                                 |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                                                         |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                                                  |
+-------------+---------------------------------------------------------------------------------------------------------------------------------------+


.. _real-variables:

Real Variables
++++++++++++++

 Inventory of real variables. Global, `Static <https://www.php.net/manual/en/language.oop5.static.php>`_ and property declarations are skipped here. 

.. code-block:: php

   <?php
   
   $realVariable = 1;
   
   class foo {
       private $property;        // not a variable
       
       private function bar() {
           global $global;       // not a variable
           static $static;       // not a variable
           
       }
   }
   
   ?>


This is a refined version of a search on ``T_VARIABLE`` token.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Variables/RealVariables |
+-------------+-------------------------+
| Rulesets    | none                    |
+-------------+-------------------------+
| Exakt since | 0.8.4                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Slow (1 hour)           |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _variable-references:

Variable References
+++++++++++++++++++

 Variables that are references. 

.. code-block:: php

   <?php
   
   $a = '1'; // not a reference
   $b = &$a; // a reference
   
   ?>


See also `References <https://www.php.net/references>`_.

Specs
^^^^^
+-------------+----------------------+
| Short name  | Variables/References |
+-------------+----------------------+
| Rulesets    | :ref:`CE`            |
+-------------+----------------------+
| Exakt since | 0.8.4                |
+-------------+----------------------+
| Php Version | All                  |
+-------------+----------------------+
| Severity    | Minor                |
+-------------+----------------------+
| Time To Fix | Slow (1 hour)        |
+-------------+----------------------+
| Precision   | High                 |
+-------------+----------------------+


.. _self-transforming-variables:

Self-Transforming Variables
+++++++++++++++++++++++++++

 Variables that are assigned to themselves after transformation. 

.. code-block:: php

   <?php
   
   $s = strtolower($s);
   
   // filtering one element AND dropping all that not 1
   $a = array_filter('foo', $a[1]);
   
   $o->m = foo($o->m);
   
   ?>




Suggestions
^^^^^^^^^^^

* Try to use new variables to hold new values.

Specs
^^^^^
+-------------+-------------------------+
| Short name  | Variables/SelfTransform |
+-------------+-------------------------+
| Rulesets    | :ref:`CE`               |
+-------------+-------------------------+
| Exakt since | 1.7.0                   |
+-------------+-------------------------+
| Php Version | All                     |
+-------------+-------------------------+
| Severity    | Minor                   |
+-------------+-------------------------+
| Time To Fix | Quick (30 mins)         |
+-------------+-------------------------+
| Precision   | High                    |
+-------------+-------------------------+


.. _static-variables:

Static Variables
++++++++++++++++

 In PHP, variables may be `static <https://www.php.net/manual/en/language.oop5.static.php>`_. They will survive after the function execution end, and will be available at the next function run. They are distinct from globals, which are available application wide, and from `static <https://www.php.net/manual/en/language.oop5.static.php>`_ properties, which are tied to a class of objects. 

.. code-block:: php

   <?php
   
   function foo() {
       // static variable
       static $count = 0;
       
       echo ++$count;
   }
   
   class bar {
       // This is not a static variable : 
       // it is a static property
       static $property = 1;
   }
   
   ?>

Specs
^^^^^
+-------------+---------------------------+
| Short name  | Variables/StaticVariables |
+-------------+---------------------------+
| Rulesets    | :ref:`CE`                 |
+-------------+---------------------------+
| Exakt since | 0.8.4                     |
+-------------+---------------------------+
| Php Version | All                       |
+-------------+---------------------------+
| Severity    | Minor                     |
+-------------+---------------------------+
| Time To Fix | Slow (1 hour)             |
+-------------+---------------------------+
| Precision   | High                      |
+-------------+---------------------------+


.. _strange-name-for-variables:

Strange Name For Variables
++++++++++++++++++++++++++

 Variables with strange names. They might be a typo, or bear strange patterns.

Any variable with three identical letter in a row are considered as strange. 2 letters in a row is classic, and while three letters may happen, it is rare enough. 

A list of classic typo is also used to find such variables.

This analysis is case-sensitive.

.. code-block:: php

   <?php
   
   class foo {
       function bar() {
           // Strange name $tihs
           return $tihs;
       }
       
       function barbar() {
           // variables with blocks of 3 times the same character are reported
           // Based on Alexandre Joly's tweet
           $aaa = $bab + $www; 
       }
   }
   
   ?>


See also `#QuandLeDevALaFleme <https://twitter.com/bsmt_nevers/status/949238391769653249>`_.



Suggestions
^^^^^^^^^^^

* Fix the name of the variable
* Rename the variable to something better
* Drop the variable

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------+
| Short name  | Variables/StrangeName                                                                |
+-------------+--------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                       |
+-------------+--------------------------------------------------------------------------------------+
| Exakt since | 0.10.5                                                                               |
+-------------+--------------------------------------------------------------------------------------+
| Php Version | All                                                                                  |
+-------------+--------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                |
+-------------+--------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                        |
+-------------+--------------------------------------------------------------------------------------+
| Precision   | High                                                                                 |
+-------------+--------------------------------------------------------------------------------------+
| Examples    | :ref:`case-fuelcms-variables-strangename`, :ref:`case-phpipam-variables-strangename` |
+-------------+--------------------------------------------------------------------------------------+


.. _environment-variables:

Environment Variables
+++++++++++++++++++++

 Environment variables are used to interact with the hosting system. 

They often provides configuration parameter that are set by the host of the application to be used. 
That way, information is not hardcoded in the application, and may be changed at production.

.. code-block:: php

   <?php
   
   //ENVIRONMENT set the production context
   if (getenv('ENVIRONMENT') === 'Production') {
       $sshKey = getenv('HOST_KEY');
   } elseif (getenv('ENVIRONMENT') === 'Developper') {
       $sshKey = 'NO KEY';
   } else {
       header('No website here.');
       die();
   }
   
   ?>


See also `$_ENV <https://www.php.net/reserved.variables.environment.php>`_.

Specs
^^^^^
+-------------+--------------------------+
| Short name  | Variables/UncommonEnvVar |
+-------------+--------------------------+
| Rulesets    | :ref:`CE`                |
+-------------+--------------------------+
| Exakt since | 1.0.5                    |
+-------------+--------------------------+
| Php Version | All                      |
+-------------+--------------------------+
| Severity    | Minor                    |
+-------------+--------------------------+
| Time To Fix | Slow (1 hour)            |
+-------------+--------------------------+
| Precision   | Medium                   |
+-------------+--------------------------+


.. _undefined-constant-name:

Undefined Constant Name
+++++++++++++++++++++++

 When using the `` syntax for variable, the name used must be a defined constant. It is not a simple string, like 'x', it is an actual constant name.

Interestingly, it is possible to use a qualified name within ``, full or partial. PHP will lint such code, and will collect the value of the constant immediately. Since there is no fallback mechanism for fully qualified names, this ends with a Fatal error.

.. code-block:: php

   <?php
   
   const x = a;
   $a = Hello;
   
   // Display 'Hello'  -> $a -> Hello
   echo ;
   
   // Yield a PHP Warning 
   // Use of undefined constant y - assumed 'y' (this will throw an Error in a future version of PHP)
   echo ;
   
   // Yield a PHP Fatal error as PHP first checks that the constant exists 
   //Undefined constant 'y'
   echo ;
   ?>




Suggestions
^^^^^^^^^^^

* Define the constant
* Turn the dynamic syntax into a normal variable syntax
* Use a fully qualified name (at least one \ ) to turn this syntax into a Fatal error when the constant is not found. This doesn't fix the problem, but may make it more obvious during the diagnostic.

Specs
^^^^^
+-------------+---------------------------------+
| Short name  | Variables/UndefinedConstantName |
+-------------+---------------------------------+
| Rulesets    | :ref:`Analyze`                  |
+-------------+---------------------------------+
| Exakt since | 2.1.1                           |
+-------------+---------------------------------+
| Php Version | All                             |
+-------------+---------------------------------+
| Severity    | Minor                           |
+-------------+---------------------------------+
| Time To Fix | Quick (30 mins)                 |
+-------------+---------------------------------+
| Precision   | High                            |
+-------------+---------------------------------+


.. _undefined-variable:

Undefined Variable
++++++++++++++++++

 Variable that is used before any creation. 

It is recommended to use a default value for every variable used. When not specified, the default value is set to ``NULL`` by PHP.

.. code-block:: php

   <?php
   
   // Adapted from the PHP manual
   $var = 'Bob';
   $Var = 'Joe';
   // The following line may emit a warning : Undefined variable: $undefined
   echo $var, $Var, $undefined;      // outputs Bob, Joe,
   
   
   ?>


Variable may be created in various ways : assignation, arguments, foreach blind variables, `static <https://www.php.net/manual/en/language.oop5.static.php>`_ and global variables.

This analysis doesn't handle dynamic variables, such as ``$$x``. It also doesn't handle variables outside a method or function.

See also `Variable basics <https://www.php.net/manual/en/language.variables.basics.php>`_.


Suggestions
^^^^^^^^^^^

* Remove the expression that is using the undefined variable
* Fix the variable name
* Define the variable by assigning a value to it, before using it

Specs
^^^^^
+-------------+---------------------------------------------+
| Short name  | Variables/UndefinedVariable                 |
+-------------+---------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`, :ref:`CI-checks` |
+-------------+---------------------------------------------+
| Exakt since | 1.4.2                                       |
+-------------+---------------------------------------------+
| Php Version | All                                         |
+-------------+---------------------------------------------+
| Severity    | Minor                                       |
+-------------+---------------------------------------------+
| Time To Fix | Quick (30 mins)                             |
+-------------+---------------------------------------------+
| Precision   | High                                        |
+-------------+---------------------------------------------+


.. _single-use-variables:

Single Use Variables
++++++++++++++++++++

 Variables that are written, then read. Only used once.

Single-use variables may be trimmed down, and the initial expression may be used instead.

Single-use variables may improve readability, when the final expression grows too much with the extra expression. 

.. code-block:: php

   <?php
   
   function foo($d) {
       $a = 1;     // $a is used twice
       $b = $a + 2;  // $b is used once
       $c = $a + $b + $d; // $c is also used once
       // $d is an argument, so it's OK.
       
       retrun $c;
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Merge the two expressions into one larger
* Make a second use of the variable

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Variables/UniqueUsage |
+-------------+-----------------------+
| Rulesets    | none                  |
+-------------+-----------------------+
| Exakt since | 1.3.0                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Quick (30 mins)       |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _variables-with-long-names:

Variables With Long Names
+++++++++++++++++++++++++

 VariablesLong collect all variables with more than 20 characters longs.

.. code-block:: php

   <?php
   
   // Quite a long variable name
   $There_is nothing_wrong_with_long_variable_names_They_tend_to_be_rare_and_that_make_them_noteworthy = 1;
   
   ?>


There is nothing wrong with long variable names. They tend to be rare, and that make them noteworthy.

See also `Basics <https://www.php.net/manual/en/language.variables.basics.php>`_.

+----------------+---------+---------+----------------------------------------------------------------+
| Name           | Default | Type    | Description                                                    |
+----------------+---------+---------+----------------------------------------------------------------+
| variableLength | 20      | integer | Minimum size of a long variable name, including the initial $. |
+----------------+---------+---------+----------------------------------------------------------------+



Specs
^^^^^
+-------------+------------------------+
| Short name  | Variables/VariableLong |
+-------------+------------------------+
| Rulesets    | :ref:`CE`              |
+-------------+------------------------+
| Exakt since | 0.8.4                  |
+-------------+------------------------+
| Php Version | All                    |
+-------------+------------------------+
| Severity    | Minor                  |
+-------------+------------------------+
| Time To Fix | Slow (1 hour)          |
+-------------+------------------------+
| Precision   | High                   |
+-------------+------------------------+


.. _non-ascii-variables:

Non Ascii Variables
+++++++++++++++++++

 PHP allows certain characters in variable names. The variable name must only include letters, figures, underscores and ASCII characters from 128 to 255. 

In practice, letters outside the scope of ``a-zA-Z0-9`` are rare, and require more care when editing the code or passing it from OS to OS. 

.. code-block:: php

   <?php
   
   class 人 {
       // An actual working class in PHP.
       public function __construct() {
           echo __CLASS__;
       }
   }
   
   $人民 = new 人();
   
   ?>


See also `Variables <https://www.php.net/manual/en/language.variables.basics.php>`_.


Suggestions
^^^^^^^^^^^

* Make sure those special chars have actual meaning.

Specs
^^^^^
+-------------+------------------------------------------------+
| Short name  | Variables/VariableNonascii                     |
+-------------+------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                 |
+-------------+------------------------------------------------+
| Exakt since | 0.8.4                                          |
+-------------+------------------------------------------------+
| Php Version | All                                            |
+-------------+------------------------------------------------+
| Severity    | Minor                                          |
+-------------+------------------------------------------------+
| Time To Fix | Slow (1 hour)                                  |
+-------------+------------------------------------------------+
| Precision   | High                                           |
+-------------+------------------------------------------------+
| Examples    | :ref:`case-magento-variables-variablenonascii` |
+-------------+------------------------------------------------+


.. _variables-with-one-letter-names:

Variables With One Letter Names
+++++++++++++++++++++++++++++++

 Variables with one letter name are the shortest name for variables. They also bear very little meaning : what does contain the variable ``$w`` ? 

Some one-letter variables have meaning : ``$x`` and ``$y`` for coordinates, ``$i``, ``$j``, ``$k`` for blind variables. Others tend to be an easy way to give a name to a variable, without thinking too hard a good name.

.. code-block:: php

   <?php
   
   // $a is reported as a one-letter variable
   $a = 0;
   
   // $i is considered a false positive. 
   for($i = 0; $i < 10; ++$i) {
       $a += doSomething($i);
   }
   
   ?>


See also `Using single characters for variable names in loops/exceptions <https://softwareengineering.stackexchange.com/questions/71710/using-single-characters-for-variable-names-in-loops-exceptions?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa/>`_ and `Single Letter Variable Names Still Considered Harmful <https://odetocode.com/blogs/scott/archive/2008/11/17/single-letter-variable-names-still-considered-harmful.aspx>`_.



Suggestions
^^^^^^^^^^^

* Make the variable more meaningful, with full words

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Variables/VariableOneLetter |
+-------------+-----------------------------+
| Rulesets    | :ref:`Semantics`            |
+-------------+-----------------------------+
| Exakt since | 0.8.4                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Slow (1 hour)               |
+-------------+-----------------------------+
| Precision   | Very high                   |
+-------------+-----------------------------+


.. _php-variables:

PHP Variables
+++++++++++++

 This is the list of PHP predefined variables that are used in the application. 

.. code-block:: php

   <?php
   
   // Reading an incoming email, with sanitation
   $email = filter_var($_GET['email'], FILTER_SANITIZE_EMAIL);
   
   ?>


The web variables (``$\_GET``, ``$\_COOKIE``, ``$\_FILES``) are quite commonly used, though sometimes replaced by some special accessors. Others are rarely used.

Specs
^^^^^
+-------------+-----------------------+
| Short name  | Variables/VariablePhp |
+-------------+-----------------------+
| Rulesets    | none                  |
+-------------+-----------------------+
| Exakt since | 0.8.4                 |
+-------------+-----------------------+
| Php Version | All                   |
+-------------+-----------------------+
| Severity    | Minor                 |
+-------------+-----------------------+
| Time To Fix | Slow (1 hour)         |
+-------------+-----------------------+
| Precision   | High                  |
+-------------+-----------------------+


.. _all-uppercase-variables:

All Uppercase Variables
+++++++++++++++++++++++

 Usually, global variables are all in uppercase, so as to differentiate them easily. Though, this is not always the case, with examples like $argc, $argv or $http_response_header.

When using custom variables, try to use lowercase ``$variables``, ``$camelCase``, ``$sturdyCase`` or ``$snake_case``.

.. code-block:: php

   <?php
   
   // PHP super global, also identified by the initial _
   $localVariable = $_POST;
   
   // PHP globals
   $localVariable = $GLOBALS['HTTPS'];
   
   ?>


See also `Predefined Variables <https://www.php.net/manual/en/reserved.variables.php>`_.

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Variables/VariableUppercase |
+-------------+-----------------------------+
| Rulesets    | none                        |
+-------------+-----------------------------+
| Exakt since | 0.8.4                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Slow (1 hour)               |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _used-once-variables:

Used Once Variables
+++++++++++++++++++

 This is the list of used once variables. 

.. code-block:: php

   <?php
   
   // The variables below never appear again in the code
   $writtenOnce = 1;
   
   foo($readOnce);
   
   ?>


Such variables are useless. Variables must be used at least twice : once for writing, once for reading, at least. It is recommended to remove them.

In special situations, variables may be used once : 

+ PHP predefined variables, as they are already initialized. They are omitted in this analyze.
+ Interface function's arguments, since the function has no body; They are omitted in this analyze.
+ Dynamically created variables ($$x, ${`$this <https://www.php.net/manual/en/language.oop5.basic.php>`_->y} or also using extract), as they are runtime values and can't be determined at `static <https://www.php.net/manual/en/language.oop5.static.php>`_ code time. They are reported for manual review.
+ Dynamically included files will provide in-scope extra variables.

This rule counts variables at the application level, and not at a method scope level. 


Suggestions
^^^^^^^^^^^

* Remove the variable
* Fix the name of variable
* Use the variable a second time, at least

Specs
^^^^^
+-------------+-------------------------------------------------------------------------------------------------+
| Short name  | Variables/VariableUsedOnce                                                                      |
+-------------+-------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`Top10`                                                                    |
+-------------+-------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                           |
+-------------+-------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                             |
+-------------+-------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                           |
+-------------+-------------------------------------------------------------------------------------------------+
| Time To Fix | Instant (5 mins)                                                                                |
+-------------+-------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                            |
+-------------+-------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-shopware-variables-variableusedonce`, :ref:`case-vanilla-variables-variableusedonce` |
+-------------+-------------------------------------------------------------------------------------------------+


.. _used-once-variables-(in-scope):

Used Once Variables (In Scope)
++++++++++++++++++++++++++++++

 This is the list of used once variables, scope by scope. Those variables are used once in a function, a method, a class or a namespace. In any case, this means the variable is read or written, while it should be used at least twice. 

.. code-block:: php

   <?php
   
   function foo() {
       // The variables below never appear twice, inside foo()
       $writtenOnce = 1;
   
       foo($readOnce);
       // They do appear again in other functions, or in global space. 
   }
   
   function bar() {
       $writtenOnce = 1;
       foo($readOnce);
   }
   
   ?>




Suggestions
^^^^^^^^^^^

* Remove the variable
* Fix the name of variable
* Use the variable a second time in the current scope, at least

Specs
^^^^^
+-------------+----------------------------------------------------------+
| Short name  | Variables/VariableUsedOnceByContext                      |
+-------------+----------------------------------------------------------+
| Rulesets    | :ref:`Analyze`, :ref:`CE`                                |
+-------------+----------------------------------------------------------+
| Exakt since | 0.8.4                                                    |
+-------------+----------------------------------------------------------+
| Php Version | All                                                      |
+-------------+----------------------------------------------------------+
| Severity    | Minor                                                    |
+-------------+----------------------------------------------------------+
| Time To Fix | Quick (30 mins)                                          |
+-------------+----------------------------------------------------------+
| Precision   | High                                                     |
+-------------+----------------------------------------------------------+
| Examples    | :ref:`case-shopware-variables-variableusedoncebycontext` |
+-------------+----------------------------------------------------------+


.. _variable-variables:

Variable Variables
++++++++++++++++++

 A variable variable takes the value of a variable and treats that as the name of a variable.

PHP has the ability to dynamically use a variable. 

.. code-block:: php

   <?php
   
   // Normal variable
   $a = 'b';
   $b = 'c';
   
   // Variable variable
   $d = $$b;
   
   // Variable variable in string
   $d = "$\{$b\}";
   
   ?>


They are also called 'dynamic variable'.

See also `Variable variables <https://www.php.net/manual/en/language.variables.variable.php>`_.

Specs
^^^^^
+-------------+-----------------------------+
| Short name  | Variables/VariableVariables |
+-------------+-----------------------------+
| Rulesets    | :ref:`CE`                   |
+-------------+-----------------------------+
| Exakt since | 0.8.4                       |
+-------------+-----------------------------+
| Php Version | All                         |
+-------------+-----------------------------+
| Severity    | Minor                       |
+-------------+-----------------------------+
| Time To Fix | Slow (1 hour)               |
+-------------+-----------------------------+
| Precision   | High                        |
+-------------+-----------------------------+


.. _written-only-variables:

Written Only Variables
++++++++++++++++++++++

 Those variables are being written, but never read. This way, they are useless and should be removed, or read at some point.

.. code-block:: php

   <?php
   
   // $a is used multiple times, but never read
   $a = 'a';
   $a .= 'b';
   
   $b = 3; 
   //$b is actually read once
   $a .= $b + 3; 
   
   ?>



Suggestions
^^^^^^^^^^^

* Check that variables are written AND read in each context
* Remove variables that are only read
* Use the variable that are only read

Specs
^^^^^
+-------------+--------------------------------------------------------------------------------------------------------+
| Short name  | Variables/WrittenOnlyVariable                                                                          |
+-------------+--------------------------------------------------------------------------------------------------------+
| Rulesets    | :ref:`Analyze`                                                                                         |
+-------------+--------------------------------------------------------------------------------------------------------+
| Exakt since | 0.8.4                                                                                                  |
+-------------+--------------------------------------------------------------------------------------------------------+
| Php Version | All                                                                                                    |
+-------------+--------------------------------------------------------------------------------------------------------+
| Severity    | Minor                                                                                                  |
+-------------+--------------------------------------------------------------------------------------------------------+
| Time To Fix | Slow (1 hour)                                                                                          |
+-------------+--------------------------------------------------------------------------------------------------------+
| Precision   | High                                                                                                   |
+-------------+--------------------------------------------------------------------------------------------------------+
| ClearPHP    | `no-unused-variable <https://github.com/dseguy/clearPHP/tree/master/rules/no-unused-variable.md>`__    |
+-------------+--------------------------------------------------------------------------------------------------------+
| Examples    | :ref:`case-dolibarr-variables-writtenonlyvariable`, :ref:`case-suitecrm-variables-writtenonlyvariable` |
+-------------+--------------------------------------------------------------------------------------------------------+


.. _codeigniter-usage:

Codeigniter usage
+++++++++++++++++

 This analysis reports usage of the Codeigniter framework.

.. code-block:: php

   <?php
   
   // A code igniter controller
   class Blog extends CI_Controller {
   
           public function index()
           {
                   echo 'Hello World!';
           }
   }
   
   ?>


See also `Codeigniter <https://codeigniter.com/>`_.

Specs
^^^^^
+-------------+---------------------+
| Short name  | Vendors/Codeigniter |
+-------------+---------------------+
| Rulesets    | :ref:`CE`           |
+-------------+---------------------+
| Exakt since | 0.11.8              |
+-------------+---------------------+
| Php Version | All                 |
+-------------+---------------------+
| Severity    | Minor               |
+-------------+---------------------+
| Time To Fix | Slow (1 hour)       |
+-------------+---------------------+
| Precision   | High                |
+-------------+---------------------+


.. _concrete-usage:

Concrete usage
++++++++++++++

 This analysis reports usage of the Concrete 5 framework.

.. code-block:: php

   <?php
   namespace Application\Controller\PageType;
   
   use Concrete\Core\Page\Controller\PageTypeController;
   
   class BlogEntry extends PageTypeController
   {
   
       public function view()
       {
       }
   }
   ?>


See also `Concrete 5 <https://www.concrete5.org/>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Vendors/Concrete5 |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 1.9.9             |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _drupal-usage:

Drupal Usage
++++++++++++

 This analysis reports usage of the Drupal CMS. The report is based on the usage of Drupal namespace.

.. code-block:: php

   <?php
   
   namespace Drupal\example\Controller;
   
   use Drupal\Core\Controller\ControllerBase;
   
   /**
    * An example controller.
    */
   class ExampleController extends ControllerBase {
   
     /**
      * {@inheritdoc}
      */
     public function content() {
       $build = array(
         '#type' => 'markup',
         '#markup' => t('Hello World!'),
       );
       return $build;
     }
   
   }
   
   ?>


See also `Drupal <http://www.drupal.org/>`_.

Specs
^^^^^
+-------------+----------------+
| Short name  | Vendors/Drupal |
+-------------+----------------+
| Rulesets    | :ref:`CE`      |
+-------------+----------------+
| Exakt since | 1.0.3          |
+-------------+----------------+
| Php Version | All            |
+-------------+----------------+
| Severity    | Minor          |
+-------------+----------------+
| Time To Fix | Slow (1 hour)  |
+-------------+----------------+
| Precision   | High           |
+-------------+----------------+


.. _ez-cms-usage:

Ez cms usage
++++++++++++

 This analysis reports usage of the Ez cms.

.. code-block:: php

   <?php
   namespace My\Bundle\With\Controller;
   
   use eZ\Bundle\EzPublishCoreBundle\Controller;
   use Symfony\Component\HttpFoundation\Request;
   
   class DemoController extends Controller {
       public function demoCreateContentAction(Request $request) {
           //
       }
   }
   
   ?>


See also `Ez <https://ez.no/>`_.

Specs
^^^^^
+-------------+---------------+
| Short name  | Vendors/Ez    |
+-------------+---------------+
| Rulesets    | :ref:`CE`     |
+-------------+---------------+
| Exakt since | 0.11.8        |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _fuelphp-usage:

FuelPHP Usage
+++++++++++++

 This analysis reports usage of the Fuel PHP Framework. The report is based on the usage of Fuel namespace.

.. code-block:: php

   <?php
   // file located in APPPATH/classes/presenter.php
   class Presenter extends \Fuel\Core\Presenter
   {
       // namespace prefix
       protected static $ns_prefix = 'Presenter\';
   }
   ?>


See also `FuelPHP <https://fuelphp.com>`_.

Specs
^^^^^
+-------------+---------------+
| Short name  | Vendors/Fuel  |
+-------------+---------------+
| Rulesets    | :ref:`CE`     |
+-------------+---------------+
| Exakt since | 1.0.3         |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _joomla-usage:

Joomla usage
++++++++++++

 This analysis reports usage of the Joomla CMS.

.. code-block:: php

   <?php
   
   // no direct access
   defined('_JEXEC') or die('Restricted access');
   
   jimport('joomla.application.component.controller');
   JLoader::import('KBIntegrator', JPATH_PLUGINS . DS . 'kbi');
   
   class MyController extends JController {
   	function display($message) {
           echo $message;
       }
   }
   
   ?>


See also `Joomla <http://www.joomla.org/>`_.

Specs
^^^^^
+-------------+----------------+
| Short name  | Vendors/Joomla |
+-------------+----------------+
| Rulesets    | :ref:`CE`      |
+-------------+----------------+
| Exakt since | 0.11.8         |
+-------------+----------------+
| Php Version | All            |
+-------------+----------------+
| Severity    | Minor          |
+-------------+----------------+
| Time To Fix | Slow (1 hour)  |
+-------------+----------------+
| Precision   | High           |
+-------------+----------------+


.. _laravel-usage:

Laravel usage
+++++++++++++

 This analysis reports usage of the Laravel framework.

.. code-block:: php

   <?php
   
   namespace App\Http\Controllers;
   
   use App\User;
   use App\Http\Controllers\Controller;
   
   class UserController extends Controller
   {
       /**
        * Show the profile for the given user.
        *
        * @param  int  $id
        * @return Response
        */
       public function show($id)
       {
           return view('user.profile', ['user' => User::findOrFail($id)]);
       }
   }
   
   ?>


See also `Laravel <http://www.lavarel.com/>`_.

Specs
^^^^^
+-------------+-----------------+
| Short name  | Vendors/Laravel |
+-------------+-----------------+
| Rulesets    | :ref:`CE`       |
+-------------+-----------------+
| Exakt since | 0.11.8          |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Slow (1 hour)   |
+-------------+-----------------+
| Precision   | High            |
+-------------+-----------------+


.. _phalcon-usage:

Phalcon Usage
+++++++++++++

 This analysis reports usage of the Phalcon Framework. The report is based on the usage of Phalcon namespace, which may be provided by PHP code inclusion or the PHP extension.

.. code-block:: php

   <?php
   
   use Phalcon\Mvc\Application;
   
   // Register autoloaders
   
   // Register services
   
   // Handle the request
   $application = new Application($di);
   
   try {
       $response = $application->handle();
   
       $response->send();
   } catch (\Exception $e) {
       echo 'Exception: ', $e->getMessage();
   }
   
   ?>


See also `Phalcon <https://phalconphp.com/>`_.

Specs
^^^^^
+-------------+-----------------+
| Short name  | Vendors/Phalcon |
+-------------+-----------------+
| Rulesets    | :ref:`CE`       |
+-------------+-----------------+
| Exakt since | 1.0.3           |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Slow (1 hour)   |
+-------------+-----------------+
| Precision   | High            |
+-------------+-----------------+


.. _symfony-usage:

Symfony usage
+++++++++++++

 This analysis reports usage of the Symfony framework.

.. code-block:: php

   <?php
   
   // src/AppBundle/Controller/LuckyController.php
   namespace AppBundle\Controller;
   
   use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
   use Symfony\Component\HttpFoundation\Response;
   
   class LuckyController
   {
       /**
        * @Route(/lucky/number)
        */
       public function numberAction()
       {
           $number = mt_rand(0, 100);
   
           return new Response(
               '<html><body>Lucky number: '.$number.'</body></html>'
           );
       }
   }
   
   ?>


See also `Symfony <http://www.symfony.com/>`_.

Specs
^^^^^
+-------------+-----------------+
| Short name  | Vendors/Symfony |
+-------------+-----------------+
| Rulesets    | :ref:`CE`       |
+-------------+-----------------+
| Exakt since | 0.11.8          |
+-------------+-----------------+
| Php Version | All             |
+-------------+-----------------+
| Severity    | Minor           |
+-------------+-----------------+
| Time To Fix | Slow (1 hour)   |
+-------------+-----------------+
| Precision   | High            |
+-------------+-----------------+


.. _typo-3-usage:

Typo 3 usage
++++++++++++

 This analysis reports usage of the Typo 3 CMS.

.. code-block:: php

   <?php
   
   namespace MyVendor\SjrOffers\Controller;
   
   use TYPO3\CMS\Extbase\Mvc\Controller\ActionController;
   
   class OfferController extends ActionController
   {
      // Action methods will be following here
   }
   ?>


See also `Typo3 <https://typo3.org/>`_.

Specs
^^^^^
+-------------+---------------+
| Short name  | Vendors/Typo3 |
+-------------+---------------+
| Rulesets    | :ref:`CE`     |
+-------------+---------------+
| Exakt since | 1.9.9         |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+


.. _wordpress-usage:

Wordpress usage
+++++++++++++++

 This analysis reports usage of the Wordpress platform.

.. code-block:: php

   <?php
   
   //Usage of the WP_http class from Wordpress
   $rags = array(
      'x' => '1',
      'y' => '2'
   );
   $url = 'http://www.example.com/';
   $request = new WP_Http();
   $result = $request->request( $url, array( 'method' => 'POST', 'body' => $body) );
   
   ?>


See also `Wordpress <https://www.wordpress.org/>`_.

Specs
^^^^^
+-------------+-------------------+
| Short name  | Vendors/Wordpress |
+-------------+-------------------+
| Rulesets    | :ref:`CE`         |
+-------------+-------------------+
| Exakt since | 0.11.8            |
+-------------+-------------------+
| Php Version | All               |
+-------------+-------------------+
| Severity    | Minor             |
+-------------+-------------------+
| Time To Fix | Slow (1 hour)     |
+-------------+-------------------+
| Precision   | High              |
+-------------+-------------------+


.. _yii-usage:

Yii usage
+++++++++

 This analysis reports usage of the Yii framework.

.. code-block:: php

   <?php
   
   // A Yii controller
   class SiteController extends CController
   {
       public function actionIndex()
       {
           // ...
       }
    
       public function actionContact()
       {
           // ...
       }
   }
   
   ?>


See also `Yii <http://www.yiiframework.com/>`_.

Specs
^^^^^
+-------------+---------------+
| Short name  | Vendors/Yii   |
+-------------+---------------+
| Rulesets    | :ref:`CE`     |
+-------------+---------------+
| Exakt since | 0.11.8        |
+-------------+---------------+
| Php Version | All           |
+-------------+---------------+
| Severity    | Minor         |
+-------------+---------------+
| Time To Fix | Slow (1 hour) |
+-------------+---------------+
| Precision   | High          |
+-------------+---------------+





Directory by Exakat version
-----------------------------

List of analyzers, by version of introduction, newest to oldest. In parenthesis, the first element is the analyzer name, used with 'analyze -P' command, and the seconds, if any, are the ruleset, used with the -T option. Rulesets are separated by commas, as the same analysis may be used in several rulesets.


* 2.2.2

  * :ref:`Cannot Use Static For Closure <cannot-use-static-for-closure>`
  * :ref:`Could Be Generator <could-be-generator>`
  * :ref:`Could Use Match <could-use-match>`
  * :ref:`Multiple Property Declaration On One Line <multiple-property-declaration-on-one-line>`
  * :ref:`Selector <selector>`

* 2.2.1

  * :ref:`Avoid get_object_vars() <avoid-get\_object\_vars()>`
  * :ref:`Declare Static Once <declare-static-once>`
  * :ref:`No Static Variable In A Method <no-static-variable-in-a-method>`
  * :ref:`Reserved Match Keyword <reserved-match-keyword>`

* 2.2.0

  * :ref:`Array_Map() Passes By Value <array\_map()-passes-by-value>`
  * :ref:`Cancelled Parameter <cancelled-parameter>`
  * :ref:`Collect Block Size <collect-block-size>`
  * :ref:`Constant Typo Looks Like A Variable <constant-typo-looks-like-a-variable>`
  * :ref:`Final Private Methods <final-private-methods>`
  * :ref:`Long Preparation For Throw <long-preparation-for-throw>`
  * :ref:`Missing __isset() Method <missing-\_\_isset()-method>`
  * :ref:`Modify Immutable <modify-immutable>`
  * :ref:`Only Container For Reference <only-container-for-reference>`
  * :ref:`PHP 80 Named Parameter Variadic <php-80-named-parameter-variadic>`
  * :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`
  * :ref:`Searching For Multiple Keys <searching-for-multiple-keys>`
  * :ref:`Unused Exception Variable <unused-exception-variable>`
  * :ref:`Use str_contains() <use-str\_contains()>`
  * :ref:`Wrong Attribute Configuration <wrong-attribute-configuration>`

* 2.1.9

  * :ref:`Array_Fill() With Objects <array\_fill()-with-objects>`
  * :ref:`Assumptions <assumptions>`
  * :ref:`Collect Use Counts <collect-use-counts>`
  * :ref:`Complete/PhpExtStubPropertyMethod <complete-phpextstubpropertymethod>`
  * :ref:`Could Be Stringable <could-be-stringable>`
  * :ref:`Could Use Promoted Properties <could-use-promoted-properties>`
  * :ref:`Modified Typed Parameter <modified-typed-parameter>`
  * :ref:`Negative Start Index In Array <negative-start-index-in-array>`
  * :ref:`Nullable With Constant <nullable-with-constant>`
  * :ref:`Optimize Explode() <optimize-explode()>`
  * :ref:`PHP 8.0 Removed Directives <php-8.0-removed-directives>`
  * :ref:`Unsupported Types With Operators <unsupported-types-with-operators>`
  * :ref:`Use get_debug_type() <use-get\_debug\_type()>`
  * :ref:`Useless Typehint <useless-typehint>`

* 2.1.8

  * :ref:`$php_errormsg Usage <$php\_errormsg-usage>`
  * :ref:`Cancel Common Method <cancel-common-method>`
  * :ref:`Cast Unset Usage <cast-unset-usage>`
  * :ref:`Collect Atom Counts <collect-atom-counts>`
  * :ref:`Collect Classes Dependencies <collect-classes-dependencies>`
  * :ref:`Collect Files Dependencies <collect-files-dependencies>`
  * :ref:`Collect Php Structures <collect-php-structures>`
  * :ref:`Function With Dynamic Code <function-with-dynamic-code>`
  * :ref:`Mismatch Parameter And Type <mismatch-parameter-and-type>`
  * :ref:`Mismatch Parameter Name <mismatch-parameter-name>`
  * :ref:`Multiple Declaration Of Strict_types <multiple-declaration-of-strict\_types>`

* 2.1.7

  * :ref:`Collect Class Traits Counts <collect-class-traits-counts>`
  * :ref:`Collect Native Calls Per Expressions <collect-native-calls-per-expressions>`
  * :ref:`Collect Readability <collect-readability>`
  * :ref:`Collect Variables <collect-variables>`
  * :ref:`Could Be Parent Method <could-be-parent-method>`
  * :ref:`Don't Pollute Global Space <don't-pollute-global-space>`
  * :ref:`Dump/CollectDefinitionsStats <dump-collectdefinitionsstats>`
  * :ref:`Dump/CollectGlobalVariables <dump-collectglobalvariables>`
  * :ref:`Missing Some Returntype <missing-some-returntype>`

* 2.1.6

  * :ref:`Different Argument Counts <different-argument-counts>`
  * :ref:`GLOB_BRACE Usage <glob\_brace-usage>`
  * :ref:`Iconv With Translit <iconv-with-translit>`
  * :ref:`Unknown Parameter Name <unknown-parameter-name>`
  * :ref:`Use Closure Trailing Comma <use-closure-trailing-comma>`
  * :ref:`Use NullSafe Operator <use-nullsafe-operator>`
  * :ref:`Use PHP Attributes <use-php-attributes>`

* 2.1.5

  * :ref:`Abstract Away <abstract-away>`
  * :ref:`Catch Undefined Variable <catch-undefined-variable>`
  * :ref:`Collect Parameter Names <collect-parameter-names>`
  * :ref:`Dont Compare Typed Boolean <dont-compare-typed-boolean>`
  * :ref:`Dump/CollectClassChanges <dump-collectclasschanges>`
  * :ref:`Dump/FossilizedMethods <dump-fossilizedmethods>`
  * :ref:`Large Try Block <large-try-block>`
  * :ref:`Swapped Arguments <swapped-arguments>`
  * :ref:`Wrong Type For Native PHP Function <wrong-type-for-native-php-function>`

* 2.1.4

  * :ref:`Array_merge Needs Array Of Arrays <array\_merge-needs-array-of-arrays>`
  * :ref:`Call Order <call-order>`
  * :ref:`Could Be Float <could-be-float>`
  * :ref:`Could Be Integer <could-be-integer>`
  * :ref:`Could Be Iterable <could-be-iterable>`
  * :ref:`Extended Typehints <extended-typehints>`
  * :ref:`Mismatch Properties Typehints <mismatch-properties-typehints>`
  * :ref:`No Need For Triple Equal <no-need-for-triple-equal>`
  * :ref:`Uses PHP 8 Match() <uses-php-8-match()>`

* 2.1.3

  * :ref:`Cyclic References <cyclic-references>`
  * :ref:`Protocol lists <protocol-lists>`
  * :ref:`Wrong Argument Type <wrong-argument-type>`

* 2.1.2

  * :ref:`Collect Class Constant Counts <collect-class-constant-counts>`
  * :ref:`Collect Local Variable Counts <collect-local-variable-counts>`
  * :ref:`Collect Method Counts <collect-method-counts>`
  * :ref:`Collect Property Counts <collect-property-counts>`
  * :ref:`Could Be Array Typehint <could-be-array-typehint>`
  * :ref:`Could Be Boolean <could-be-boolean>`
  * :ref:`Could Be CIT <could-be-cit>`
  * :ref:`Could Be Callable <could-be-callable>`
  * :ref:`Could Be Null <could-be-null>`
  * :ref:`Could Be Parent <could-be-parent>`
  * :ref:`Could Be Self <could-be-self>`
  * :ref:`Could Be String <could-be-string>`
  * :ref:`Could Be Void <could-be-void>`
  * :ref:`Could Not Type <could-not-type>`
  * :ref:`Double Object Assignation <double-object-assignation>`
  * :ref:`Possible Alias Confusion <possible-alias-confusion>`
  * :ref:`Safe Phpvariables <safe-phpvariables>`
  * :ref:`Static Global Variables Confusion <static-global-variables-confusion>`
  * :ref:`Too Long A Block <too-long-a-block>`
  * :ref:`Too Much Indented <too-much-indented>`
  * :ref:`Using Deprecated Method <using-deprecated-method>`

* 2.1.1

  * :ref:`Check Crypto Key Length <check-crypto-key-length>`
  * :ref:`Dynamic Self Calls <dynamic-self-calls>`
  * :ref:`Keep Files Access Restricted <keep-files-access-restricted>`
  * :ref:`OpenSSL Ciphers Used <openssl-ciphers-used>`
  * :ref:`Prefix And Suffixes With Typehint <prefix-and-suffixes-with-typehint>`
  * :ref:`Throw Was An Expression <throw-was-an-expression>`
  * :ref:`Undefined Constant Name <undefined-constant-name>`
  * :ref:`Unused Trait In Class <unused-trait-in-class>`

* 2.1.0

  * :ref:`Fn Argument Variable Confusion <fn-argument-variable-confusion>`
  * :ref:`Hidden Nullable <hidden-nullable>`
  * :ref:`Missing Abstract Method <missing-abstract-method>`
  * :ref:`Signature Trailing Comma <signature-trailing-comma>`

* 2.0.9

  * :ref:`Dont Collect Void <dont-collect-void>`
  * :ref:`Php 8.0 Only TypeHints <php-8.0-only-typehints>`
  * :ref:`Uninitialized Property <uninitialized-property>`
  * :ref:`Union Typehint <union-typehint>`
  * :ref:`Wrong Typed Property Default <wrong-typed-property-default>`

* 2.0.8

  * :ref:`New Functions In PHP 8.0 <new-functions-in-php-8.0>`
  * :ref:`Php 8.0 Variable Syntax Tweaks <php-8.0-variable-syntax-tweaks>`

* 2.0.7

  * :ref:`Constant Order <constant-order>`

* 2.0.6

  * :ref:`Fossilized Method <fossilized-method>`
  * :ref:`Links Between Parameter And Argument <links-between-parameter-and-argument>`
  * :ref:`Not Equal Is Not !== <not-equal-is-not-!==>`
  * :ref:`Possible Interfaces <possible-interfaces>`

* 2.0.5

  * :ref:`Missing Typehint <missing-typehint>`
  * :ref:`Semantic Typing <semantic-typing>`

* 2.0.4

  * :ref:`Coalesce Equal <coalesce-equal>`

* 2.0.3

  * :ref:`Collect Class Children Count <collect-class-children-count>`
  * :ref:`Collect Class Depth <collect-class-depth>`
  * :ref:`Collect Class Interface Counts <collect-class-interface-counts>`
  * :ref:`Exceeding Typehint <exceeding-typehint>`

* 2.0.2

  * :ref:`Dump/Inclusions <dump-inclusions>`
  * :ref:`Insufficient Property Typehint <insufficient-property-typehint>`
  * :ref:`New Order <new-order>`
  * :ref:`Nullable Without Check <nullable-without-check>`
  * :ref:`Typehint Order <typehint-order>`
  * :ref:`Wrong Typehinted Name <wrong-typehinted-name>`

* 1.9.9

  * :ref:`Collect Mbstring Encodings <collect-mbstring-encodings>`
  * :ref:`Complete/CreateForeachDefault <complete-createforeachdefault>`
  * :ref:`Concrete usage <concrete-usage>`
  * :ref:`Could Type With Array <could-type-with-array>`
  * :ref:`Could Type With Boolean <could-type-with-boolean>`
  * :ref:`Could Type With Int <could-type-with-int>`
  * :ref:`Could Type With Iterable <could-type-with-iterable>`
  * :ref:`Could Type With String <could-type-with-string>`
  * :ref:`Filter To add_slashes() <filter-to-add\_slashes()>`
  * :ref:`Immutable Signature <immutable-signature>`
  * :ref:`Is_A() With String <is\_a()-with-string>`
  * :ref:`Mbstring Third Arg <mbstring-third-arg>`
  * :ref:`Mbstring Unknown Encoding <mbstring-unknown-encoding>`
  * :ref:`Merge If Then <merge-if-then>`
  * :ref:`Shell commands <shell-commands>`
  * :ref:`Typehinting Stats <typehinting-stats>`
  * :ref:`Typo 3 usage <typo-3-usage>`
  * :ref:`Weird Array Index <weird-array-index>`
  * :ref:`Wrong Case Namespaces <wrong-case-namespaces>`
  * :ref:`Wrong Type With Call <wrong-type-with-call>`

* 1.9.8

  * :ref:`Cant Implement Traversable <cant-implement-traversable>`
  * :ref:`Parameter Hiding <parameter-hiding>`
  * :ref:`Propagate Calls <propagate-calls>`

* 1.9.7

  * :ref:`Foreach() Favorite <foreach()-favorite>`
  * :ref:`Make Functioncall With Reference <make-functioncall-with-reference>`
  * :ref:`Too Many Dereferencing <too-many-dereferencing>`
  * :ref:`Use Url Query Functions <use-url-query-functions>`

* 1.9.6

  * :ref:`Collect Parameter Counts <collect-parameter-counts>`
  * :ref:`Dump/DereferencingLevels <dump-dereferencinglevels>`
  * :ref:`Duplicate Literal <duplicate-literal>`
  * :ref:`Internet Domains <internet-domains>`
  * :ref:`No Weak SSL Crypto <no-weak-ssl-crypto>`
  * :ref:`No mb_substr In Loop <no-mb\_substr-in-loop>`
  * :ref:`Non Nullable Getters <non-nullable-getters>`
  * :ref:`Use Case Value <use-case-value>`

* 1.9.5

  * :ref:`Collect Literals <collect-literals>`
  * :ref:`Environment Variable Usage <environment-variable-usage>`
  * :ref:`Interfaces Don't Ensure Properties <interfaces-don't-ensure-properties>`
  * :ref:`Interfaces Is Not Implemented <interfaces-is-not-implemented>`
  * :ref:`Magic Properties <magic-properties>`
  * :ref:`No Literal For Reference <no-literal-for-reference>`
  * :ref:`Use array_slice() <use-array\_slice()>`

* 1.9.4

  * :ref:`Coalesce And Concat <coalesce-and-concat>`
  * :ref:`Comparison Is Always True <comparison-is-always-true>`
  * :ref:`Cyclomatic Complexity <cyclomatic-complexity>`
  * :ref:`Nested Ternary Without Parenthesis <nested-ternary-without-parenthesis>`
  * :ref:`PHP 74 New Directives <php-74-new-directives>`
  * :ref:`Should Use Explode Args <should-use-explode-args>`
  * :ref:`Spread Operator For Array <spread-operator-for-array>`
  * :ref:`Too Many Array Dimensions <too-many-array-dimensions>`
  * :ref:`Use Arrow Functions <use-arrow-functions>`

* 1.9.3

  * :ref:`Complete/SetClassRemoteDefinitionWithParenthesis <complete-setclassremotedefinitionwithparenthesis>`
  * :ref:`Complete/SetClassRemoteDefinitionWithTypehint <complete-setclassremotedefinitionwithtypehint>`
  * :ref:`Indentation Levels <indentation-levels>`
  * :ref:`Max Level Of Nesting <max-level-of-nesting>`
  * :ref:`No Spread For Hash <no-spread-for-hash>`
  * :ref:`PHP 7.4 Constant Deprecation <php-7.4-constant-deprecation>`
  * :ref:`PHP 7.4 Removed Directives <php-7.4-removed-directives>`
  * :ref:`Set Class Method Remote Definition <set-class-method-remote-definition>`
  * :ref:`Set Class Property Definition With Typehint <set-class-property-definition-with-typehint>`
  * :ref:`Set Class Remote Definition With Global <set-class-remote-definition-with-global>`
  * :ref:`Set Class Remote Definition With Local New <set-class-remote-definition-with-local-new>`
  * :ref:`Set Class Remote Definition With Return Typehint <set-class-remote-definition-with-return-typehint>`
  * :ref:`Set String Method Definition <set-string-method-definition>`
  * :ref:`SetA rray Class Definition <seta-rray-class-definition>`
  * :ref:`Use Contravariance <use-contravariance>`
  * :ref:`Use Covariance <use-covariance>`
  * :ref:`openssl_random_pseudo_byte() Second Argument <openssl\_random\_pseudo\_byte()-second-argument>`
  * :ref:`strip_tags Skips Closed Tag <strip\_tags-skips-closed-tag>`

* 1.9.2

  * :ref:`Complete/SetClassRemoteDefinitionWithInjection <complete-setclassremotedefinitionwithinjection>`
  * :ref:`Create Compact Variables <create-compact-variables>`
  * :ref:`Create Default Values <create-default-values>`
  * :ref:`Create Magic Property <create-magic-property>`
  * :ref:`Follow Closure Definition <follow-closure-definition>`
  * :ref:`Implode() Arguments Order <implode()-arguments-order>`
  * :ref:`Make Class Constant Definition <make-class-constant-definition>`
  * :ref:`Make Class Method Definition <make-class-method-definition>`
  * :ref:`No ENT_IGNORE <no-ent\_ignore>`
  * :ref:`No More Curly Arrays <no-more-curly-arrays>`
  * :ref:`Overwritten Constant <overwritten-constant>`
  * :ref:`Overwritten Methods <overwritten-methods>`
  * :ref:`Overwritten Properties <overwritten-properties>`
  * :ref:`PHP 7.4 Reserved Keyword <php-7.4-reserved-keyword>`
  * :ref:`Propagate Constants <propagate-constants>`
  * :ref:`Set Class_Alias Definition <set-class\_alias-definition>`
  * :ref:`Set Clone Link <set-clone-link>`
  * :ref:`Set Parent Definition <set-parent-definition>`
  * :ref:`Solve Trait Methods <solve-trait-methods>`
  * :ref:`array_merge() And Variadic <array\_merge()-and-variadic>`

* 1.9.1

  * :ref:`Complete/PhpNativeReference <complete-phpnativereference>`

* 1.9.0

  * :ref:`Class Without Parent <class-without-parent>`
  * :ref:`Numeric Literal Separator <numeric-literal-separator>`
  * :ref:`PHP 7.4 Removed Functions <php-7.4-removed-functions>`
  * :ref:`Reflection Export() Is Deprecated <reflection-export()-is-deprecated>`
  * :ref:`Scalar Are Not Arrays <scalar-are-not-arrays>`
  * :ref:`Serialize Magic Method <serialize-magic-method>`
  * :ref:`Similar Integers <similar-integers>`
  * :ref:`Unbinding Closures <unbinding-closures>`
  * :ref:`array_key_exists() Works On Arrays <array\_key\_exists()-works-on-arrays>`

* 1.8.9

  * :ref:`Avoid mb_dectect_encoding() <avoid-mb\_dectect\_encoding()>`
  * :ref:`Disconnected Classes <disconnected-classes>`
  * :ref:`Not Or Tilde <not-or-tilde>`
  * :ref:`Overwritten Source And Value <overwritten-source-and-value>`
  * :ref:`Useless Type Check <useless-type-check>`
  * :ref:`mb_strrpos() Third Argument <mb\_strrpos()-third-argument>`

* 1.8.8

  * :ref:`Set Aside Code <set-aside-code>`
  * :ref:`Use Array Functions <use-array-functions>`

* 1.8.7

  * :ref:`Cant Use Function <cant-use-function>`
  * :ref:`Generator Cannot Return <generator-cannot-return>`
  * :ref:`Use DateTimeImmutable Class <use-datetimeimmutable-class>`
  * :ref:`Wrong Type Returned <wrong-type-returned>`

* 1.8.6

  * :ref:`Dependant Abstract Classes <dependant-abstract-classes>`
  * :ref:`Infinite Recursion <infinite-recursion>`
  * :ref:`Modules/IncomingData <modules-incomingdata>`
  * :ref:`Modules/NativeReplacement <modules-nativereplacement>`
  * :ref:`Null Or Boolean Arrays <null-or-boolean-arrays>`

* 1.8.5

  * :ref:`Could Use Trait <could-use-trait>`

* 1.8.4

  * :ref:`Always Use Function With array_key_exists() <always-use-function-with-array\_key\_exists()>`
  * :ref:`Complex Dynamic Names <complex-dynamic-names>`
  * :ref:`Could Be Constant <could-be-constant>`
  * :ref:`New Constants In PHP 7.4 <new-constants-in-php-7.4>`
  * :ref:`Regex On Arrays <regex-on-arrays>`
  * :ref:`Unused Class Constant <unused-class-constant>`
  * :ref:`curl_version() Has No Argument <curl\_version()-has-no-argument>`

* 1.8.3

  * :ref:`Autoappend <autoappend>`
  * :ref:`Make Magic Concrete <make-magic-concrete>`
  * :ref:`Memoize MagicCall <memoize-magiccall>`
  * :ref:`Substr To Trim <substr-to-trim>`

* 1.8.2

  * :ref:`Identical Methods <identical-methods>`
  * :ref:`No Append On Source <no-append-on-source>`

* 1.8.1

  * :ref:`No Need For get_class() <no-need-for-get\_class()>`

* 1.8.0

  * :ref:`Already Parents Trait <already-parents-trait>`
  * :ref:`Casting Ternary <casting-ternary>`
  * :ref:`Concat And Addition <concat-and-addition>`
  * :ref:`Concat Empty String <concat-empty-string>`
  * :ref:`Minus One On Error <minus-one-on-error>`
  * :ref:`New Functions In PHP 7.4 <new-functions-in-php-7.4>`
  * :ref:`Unpacking Inside Arrays <unpacking-inside-arrays>`
  * :ref:`Useless Argument <useless-argument>`

* 1.7.9

  * :ref:`Avoid option arrays in constructors <avoid-option-arrays-in-constructors>`
  * :ref:`Trait Not Found <trait-not-found>`
  * :ref:`Useless Default Argument <useless-default-argument>`
  * :ref:`ext/ffi <ext-ffi>`
  * :ref:`ext/uuid <ext-uuid>`
  * :ref:`ext/zend_monitor <ext-zend\_monitor>`

* 1.7.8

  * :ref:`ext/svm <ext-svm>`

* 1.7.7

  * :ref:`Implode One Arg <implode-one-arg>`
  * :ref:`Incoming Values <incoming-values>`
  * :ref:`Integer Conversion <integer-conversion>`

* 1.7.6

  * :ref:`Caught Variable <caught-variable>`
  * :ref:`Multiple Unset() <multiple-unset()>`
  * :ref:`PHP Overridden Function <php-overridden-function>`

* 1.7.2

  * :ref:`Check On __Call Usage <check-on-\_\_call-usage>`

* 1.7.0

  * :ref:`Clone With Non-Object <clone-with-non-object>`
  * :ref:`Self-Transforming Variables <self-transforming-variables>`
  * :ref:`Should Deep Clone <should-deep-clone>`

* 1.6.9

  * :ref:`Inconsistent Variable Usage <inconsistent-variable-usage>`
  * :ref:`Typehint Must Be Returned <typehint-must-be-returned>`

* 1.6.8

  * :ref:`PHP 8.0 Removed Constants <php-8.0-removed-constants>`
  * :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

* 1.6.7

  * :ref:`An OOP Factory <an-oop-factory>`
  * :ref:`Constant Dynamic Creation <constant-dynamic-creation>`
  * :ref:`Law of Demeter <law-of-demeter>`

* 1.6.6

  * :ref:`Bad Typehint Relay <bad-typehint-relay>`
  * :ref:`Insufficient Typehint <insufficient-typehint>`

* 1.6.5

  * :ref:`String Initialization <string-initialization>`
  * :ref:`Variable Is Not A Condition <variable-is-not-a-condition>`
  * :ref:`ext/pcov <ext-pcov>`
  * :ref:`ext/weakref <ext-weakref>`

* 1.6.4

  * :ref:`Don't Be Too Manual <don't-be-too-manual>`

* 1.6.3

  * :ref:`Assign And Compare <assign-and-compare>`

* 1.6.2

  * :ref:`Typed Property Usage <typed-property-usage>`

* 1.6.1

  * :ref:`Possible Missing Subpattern <possible-missing-subpattern>`
  * :ref:`array_key_exists() Speedup <array\_key\_exists()-speedup>`

* 1.5.8

  * :ref:`Multiple Identical Closure <multiple-identical-closure>`
  * :ref:`Path lists <path-lists>`

* 1.5.7

  * :ref:`Method Could Be Static <method-could-be-static>`
  * :ref:`Multiple Usage Of Same Trait <multiple-usage-of-same-trait>`
  * :ref:`Self Using Trait <self-using-trait>`
  * :ref:`ext/wasm <ext-wasm>`

* 1.5.6

  * :ref:`Isset() On The Whole Array <isset()-on-the-whole-array>`
  * :ref:`Useless Alias <useless-alias>`
  * :ref:`ext/async <ext-async>`
  * :ref:`ext/sdl <ext-sdl>`

* 1.5.5

  * :ref:`Directly Use File <directly-use-file>`
  * :ref:`Safe HTTP Headers <safe-http-headers>`
  * :ref:`fputcsv() In Loops <fputcsv()-in-loops>`

* 1.5.4

  * :ref:`Avoid Self In Interface <avoid-self-in-interface>`
  * :ref:`Should Have Destructor <should-have-destructor>`
  * :ref:`Unreachable Class Constant <unreachable-class-constant>`

* 1.5.3

  * :ref:`Don't Loop On Yield <don't-loop-on-yield>`
  * :ref:`Variable May Be Non-Global <variable-may-be-non-global>`

* 1.5.2

  * :ref:`PHP Exception <php-exception>`
  * :ref:`Should Yield With Key <should-yield-with-key>`
  * :ref:`ext/decimal <ext-decimal>`
  * :ref:`ext/psr <ext-psr>`

* 1.5.1

  * :ref:`Use Basename Suffix <use-basename-suffix>`

* 1.5.0

  * :ref:`Could Use Try <could-use-try>`
  * :ref:`Pack Format Inventory <pack-format-inventory>`
  * :ref:`Printf Format Inventory <printf-format-inventory>`
  * :ref:`idn_to_ascii() New Default <idn\_to\_ascii()-new-default>`

* 1.4.9

  * :ref:`Don't Read And Write In One Expression <don't-read-and-write-in-one-expression>`
  * :ref:`Invalid Pack Format <invalid-pack-format>`
  * :ref:`Named Regex <named-regex>`
  * :ref:`No Reference For Static Property <no-reference-for-static-property>`
  * :ref:`No Return For Generator <no-return-for-generator>`
  * :ref:`Repeated Interface <repeated-interface>`
  * :ref:`Wrong Access Style to Property <wrong-access-style-to-property>`

* 1.4.8

  * :ref:`Direct Call To __clone() <direct-call-to-\_\_clone()>`
  * :ref:`filter_input() As A Source <filter\_input()-as-a-source>`

* 1.4.6

  * :ref:`Only Variable For Reference <only-variable-for-reference>`

* 1.4.5

  * :ref:`Add Default Value <add-default-value>`

* 1.4.4

  * :ref:`ext/seaslog <ext-seaslog>`

* 1.4.3

  * :ref:`Class Could Be Final <class-could-be-final>`
  * :ref:`Closure Could Be A Callback <closure-could-be-a-callback>`
  * :ref:`Inconsistent Elseif <inconsistent-elseif>`
  * :ref:`Use json_decode() Options <use-json\_decode()-options>`

* 1.4.2

  * :ref:`Method Collision Traits <method-collision-traits>`
  * :ref:`Undefined Insteadof <undefined-insteadof>`
  * :ref:`Undefined Variable <undefined-variable>`

* 1.4.1

  * :ref:`Must Call Parent Constructor <must-call-parent-constructor>`

* 1.4.0

  * :ref:`PHP 7.3 Removed Functions <php-7.3-removed-functions>`
  * :ref:`Trailing Comma In Calls <trailing-comma-in-calls>`

* 1.3.9

  * :ref:`Assert Function Is Reserved <assert-function-is-reserved>`
  * :ref:`Avoid Real <avoid-real>`
  * :ref:`Case Insensitive Constants <case-insensitive-constants>`
  * :ref:`Const Or Define Preference <const-or-define-preference>`
  * :ref:`Continue Is For Loop <continue-is-for-loop>`
  * :ref:`Could Be Abstract Class <could-be-abstract-class>`

* 1.3.8

  * :ref:`Constant Case Preference <constant-case-preference>`
  * :ref:`Detect Current Class <detect-current-class>`
  * :ref:`Use is_countable <use-is\_countable>`

* 1.3.7

  * :ref:`Handle Arrays With Callback <handle-arrays-with-callback>`

* 1.3.5

  * :ref:`Locally Used Property In Trait <locally-used-property-in-trait>`
  * :ref:`PHP 7.0 Scalar Typehints <php-7.0-scalar-typehints>`
  * :ref:`PHP 7.1 Scalar Typehints <php-7.1-scalar-typehints>`
  * :ref:`PHP 7.2 Scalar Typehints <php-7.2-scalar-typehints>`
  * :ref:`Undefined \:\:class <undefined-class>`
  * :ref:`ext/lzf <ext-lzf>`
  * :ref:`ext/msgpack <ext-msgpack>`

* 1.3.4

  * :ref:`Ambiguous Visibilities <ambiguous-visibilities>`
  * :ref:`Hash Algorithms Incompatible With PHP 7.1- <hash-algorithms-incompatible-with-php-7.1->`
  * :ref:`Hash Algorithms Incompatible With PHP 7.4- <hash-algorithms-incompatible-with-php-7.4->`
  * :ref:`ext/csprng <ext-csprng>`

* 1.3.3

  * :ref:`Abstract Or Implements <abstract-or-implements>`
  * :ref:`Can't Throw Throwable <can't-throw-throwable>`
  * :ref:`Incompatible Signature Methods <incompatible-signature-methods>`
  * :ref:`Incompatible Signature Methods With Covariance <incompatible-signature-methods-with-covariance>`
  * :ref:`ext/eio <ext-eio>`

* 1.3.2

  * :ref:`Compared But Not Assigned Strings <compared-but-not-assigned-strings>`
  * :ref:`Comparisons Orientation <comparisons-orientation>`
  * :ref:`Could Be Static Closure <could-be-static-closure>`
  * :ref:`Dont Mix ++ <dont-mix-++>`
  * :ref:`Strict Or Relaxed Comparison <strict-or-relaxed-comparison>`
  * :ref:`move_uploaded_file Instead Of copy <move\_uploaded\_file-instead-of-copy>`

* 1.3.0

  * :ref:`Check JSON <check-json>`
  * :ref:`Const Visibility Usage <const-visibility-usage>`
  * :ref:`Should Use Operator <should-use-operator>`
  * :ref:`Single Use Variables <single-use-variables>`

* 1.2.9

  * :ref:`Compact Inexistant Variable <compact-inexistant-variable>`
  * :ref:`Configure Extract <configure-extract>`
  * :ref:`Flexible Heredoc <flexible-heredoc>`
  * :ref:`Method Signature Must Be Compatible <method-signature-must-be-compatible>`
  * :ref:`Mismatch Type And Default <mismatch-type-and-default>`
  * :ref:`Use The Blind Var <use-the-blind-var>`

* 1.2.8

  * :ref:`Cache Variable Outside Loop <cache-variable-outside-loop>`
  * :ref:`Cant Instantiate Class <cant-instantiate-class>`
  * :ref:`Do In Base <do-in-base>`
  * :ref:`Php/FailingAnalysis <php-failinganalysis>`
  * :ref:`Typehinted References <typehinted-references>`
  * :ref:`Weak Typing <weak-typing>`
  * :ref:`strpos() Too Much <strpos()-too-much>`

* 1.2.7

  * :ref:`ext/cmark <ext-cmark>`

* 1.2.6

  * :ref:`Callback Function Needs Return <callback-function-needs-return>`
  * :ref:`Could Use array_unique <could-use-array\_unique>`
  * :ref:`Missing Parenthesis <missing-parenthesis>`
  * :ref:`One If Is Sufficient <one-if-is-sufficient>`

* 1.2.5

  * :ref:`Wrong Range Check <wrong-range-check>`
  * :ref:`ext/zookeeper <ext-zookeeper>`

* 1.2.4

  * :ref:`Processing Collector <processing-collector>`

* 1.2.3

  * :ref:`Don't Unset Properties <don't-unset-properties>`
  * :ref:`Redefined Private Property <redefined-private-property>`
  * :ref:`Strtr Arguments <strtr-arguments>`

* 1.2.2

  * :ref:`Drop Substr Last Arg <drop-substr-last-arg>`

* 1.2.1

  * :ref:`Possible Increment <possible-increment>`
  * :ref:`Properties Declaration Consistence <properties-declaration-consistence>`

* 1.1.10

  * :ref:`Too Many Native Calls <too-many-native-calls>`

* 1.1.9

  * :ref:`Should Preprocess Chr() <should-preprocess-chr()>`
  * :ref:`Too Many Parameters <too-many-parameters>`

* 1.1.8

  * :ref:`Mass Creation Of Arrays <mass-creation-of-arrays>`
  * :ref:`ext/db2 <ext-db2>`

* 1.1.7

  * :ref:`Could Use array_fill_keys <could-use-array\_fill\_keys>`
  * :ref:`Dynamic Library Loading <dynamic-library-loading>`
  * :ref:`PHP 7.3 Last Empty Argument <php-7.3-last-empty-argument>`
  * :ref:`Property Could Be Local <property-could-be-local>`
  * :ref:`Use Count Recursive <use-count-recursive>`
  * :ref:`ext/leveldb <ext-leveldb>`
  * :ref:`ext/opencensus <ext-opencensus>`
  * :ref:`ext/uopz <ext-uopz>`
  * :ref:`ext/varnish <ext-varnish>`
  * :ref:`ext/xxtea <ext-xxtea>`

* 1.1.6

  * :ref:`Could Use Compact <could-use-compact>`
  * :ref:`Foreach On Object <foreach-on-object>`
  * :ref:`List With Reference <list-with-reference>`
  * :ref:`Test Then Cast <test-then-cast>`

* 1.1.5

  * :ref:`Possible Infinite Loop <possible-infinite-loop>`
  * :ref:`Should Use Math <should-use-math>`
  * :ref:`ext/hrtime <ext-hrtime>`

* 1.1.4

  * :ref:`Double array_flip() <double-array\_flip()>`
  * :ref:`Fallback Function <fallback-function>`
  * :ref:`Find Key Directly <find-key-directly>`
  * :ref:`Reuse Variable <reuse-variable>`
  * :ref:`Useless Catch <useless-catch>`

* 1.1.3

  * :ref:`Useless Referenced Argument <useless-referenced-argument>`

* 1.1.2

  * :ref:`Local Globals <local-globals>`
  * :ref:`Missing Include <missing-include>`

* 1.1.1

  * :ref:`Inclusion Wrong Case <inclusion-wrong-case>`

* 1.0.11

  * :ref:`No Net For Xml Load <no-net-for-xml-load>`
  * :ref:`Unused Inherited Variable In Closure <unused-inherited-variable-in-closure>`

* 1.0.10

  * :ref:`Sqlite3 Requires Single Quotes <sqlite3-requires-single-quotes>`

* 1.0.8

  * :ref:`Identical Consecutive Expression <identical-consecutive-expression>`
  * :ref:`Identical On Both Sides <identical-on-both-sides>`
  * :ref:`Mistaken Concatenation <mistaken-concatenation>`
  * :ref:`No Reference For Ternary <no-reference-for-ternary>`

* 1.0.7

  * :ref:`Not A Scalar Type <not-a-scalar-type>`
  * :ref:`Should Use array_filter() <should-use-array\_filter()>`

* 1.0.6

  * :ref:`Never Used Parameter <never-used-parameter>`
  * :ref:`Use Named Boolean In Argument Definition <use-named-boolean-in-argument-definition>`
  * :ref:`ext/igbinary <ext-igbinary>`

* 1.0.5

  * :ref:`Assigned In One Branch <assigned-in-one-branch>`
  * :ref:`Environment Variables <environment-variables>`
  * :ref:`Invalid Regex <invalid-regex>`
  * :ref:`Parent First <parent-first>`
  * :ref:`Same Variable Foreach <same-variable-foreach>`

* 1.0.4

  * :ref:`Argon2 Usage <argon2-usage>`
  * :ref:`Avoid set_error_handler $context Argument <avoid-set\_error\_handler-$context-argument>`
  * :ref:`Can't Count Non-Countable <can't-count-non-countable>`
  * :ref:`Crypto Usage <crypto-usage>`
  * :ref:`Dl() Usage <dl()-usage>`
  * :ref:`Don't Send $this In Constructor <don't-send-$this-in-constructor>`
  * :ref:`Hash Will Use Objects <hash-will-use-objects>`
  * :ref:`Incoming Variable Index Inventory <incoming-variable-index-inventory>`
  * :ref:`Integer As Property <integer-as-property>`
  * :ref:`Maybe Missing New <maybe-missing-new>`
  * :ref:`No get_class() With Null <no-get\_class()-with-null>`
  * :ref:`Php 7.2 New Class <php-7.2-new-class>`
  * :ref:`Php 7.4 New Class <php-7.4-new-class>`
  * :ref:`Slice Arrays First <slice-arrays-first>`
  * :ref:`Type Array Index <type-array-index>`
  * :ref:`Unknown Pcre2 Option <unknown-pcre2-option>`
  * :ref:`Use List With Foreach <use-list-with-foreach>`
  * :ref:`Use PHP7 Encapsed Strings <use-php7-encapsed-strings>`
  * :ref:`ext/vips <ext-vips>`

* 1.0.3

  * :ref:`Ambiguous Static <ambiguous-static>`
  * :ref:`Drupal Usage <drupal-usage>`
  * :ref:`FuelPHP Usage <fuelphp-usage>`
  * :ref:`Phalcon Usage <phalcon-usage>`

* 1.0.1

  * :ref:`Could Be Else <could-be-else>`
  * :ref:`Next Month Trap <next-month-trap>`
  * :ref:`Printf Number Of Arguments <printf-number-of-arguments>`
  * :ref:`Simple Switch <simple-switch>`
  * :ref:`Substring First <substring-first>`

* 0.12.17

  * :ref:`Is A PHP Magic Property <is-a-php-magic-property>`

* 0.12.16

  * :ref:`Cookies Variables <cookies-variables>`
  * :ref:`Date Formats <date-formats>`
  * :ref:`Incoming Variables <incoming-variables>`
  * :ref:`Session Variables <session-variables>`
  * :ref:`Too Complex Expression <too-complex-expression>`
  * :ref:`Unconditional Break In Loop <unconditional-break-in-loop>`

* 0.12.15

  * :ref:`Always Anchor Regex <always-anchor-regex>`
  * :ref:`Is Actually Zero <is-actually-zero>`
  * :ref:`Multiple Type Variable <multiple-type-variable>`
  * :ref:`Session Lazy Write <session-lazy-write>`

* 0.12.14

  * :ref:`Regex Inventory <regex-inventory>`
  * :ref:`Switch Fallthrough <switch-fallthrough>`
  * :ref:`Upload Filename Injection <upload-filename-injection>`

* 0.12.12

  * :ref:`Use pathinfo() Arguments <use-pathinfo()-arguments>`
  * :ref:`ext/parle <ext-parle>`

* 0.12.11

  * :ref:`Could Be Protected Class Constant <could-be-protected-class-constant>`
  * :ref:`Could Be Protected Method <could-be-protected-method>`
  * :ref:`Method Could Be Private Method <method-could-be-private-method>`
  * :ref:`Method Used Below <method-used-below>`
  * :ref:`Pathinfo() Returns May Vary <pathinfo()-returns-may-vary>`

* 0.12.10

  * :ref:`Constant Used Below <constant-used-below>`
  * :ref:`Could Be Private Class Constant <could-be-private-class-constant>`

* 0.12.9

  * :ref:`Shell Favorite <shell-favorite>`

* 0.12.8

  * :ref:`ext/fam <ext-fam>`
  * :ref:`ext/rdkafka <ext-rdkafka>`

* 0.12.7

  * :ref:`Should Use Foreach <should-use-foreach>`

* 0.12.5

  * :ref:`Logical To in_array <logical-to-in\_array>`
  * :ref:`No Substr Minus One <no-substr-minus-one>`

* 0.12.4

  * :ref:`Assign With And Precedence <assign-with-and-precedence>`
  * :ref:`Avoid Concat In Loop <avoid-concat-in-loop>`
  * :ref:`Child Class Removes Typehint <child-class-removes-typehint>`
  * :ref:`Isset Multiple Arguments <isset-multiple-arguments>`
  * :ref:`Logical Operators Favorite <logical-operators-favorite>`
  * :ref:`No Magic Method With Array <no-magic-method-with-array>`
  * :ref:`Optional Parameter <optional-parameter>`
  * :ref:`PHP 7.2 Object Keyword <php-7.2-object-keyword>`
  * :ref:`ext/xattr <ext-xattr>`

* 0.12.3

  * :ref:`Group Use Trailing Comma <group-use-trailing-comma>`
  * :ref:`Mismatched Default Arguments <mismatched-default-arguments>`
  * :ref:`Mismatched Typehint <mismatched-typehint>`
  * :ref:`Scalar Or Object Property <scalar-or-object-property>`

* 0.12.2

  * :ref:`Mkdir Default <mkdir-default>`
  * :ref:`ext/lapack <ext-lapack>`
  * :ref:`strict_types Preference <strict\_types-preference>`

* 0.12.1

  * :ref:`Const Or Define <const-or-define>`
  * :ref:`Declare strict_types Usage <declare-strict\_types-usage>`
  * :ref:`Encoding Usage <encoding-usage>`
  * :ref:`Mismatched Ternary Alternatives <mismatched-ternary-alternatives>`
  * :ref:`No Return Or Throw In Finally <no-return-or-throw-in-finally>`
  * :ref:`Ticks Usage <ticks-usage>`

* 0.12.0

  * :ref:`Avoid Optional Properties <avoid-optional-properties>`
  * :ref:`Heredoc Delimiter <heredoc-delimiter>`
  * :ref:`Multiple Functions Declarations <multiple-functions-declarations>`
  * :ref:`Non Breakable Space In Names <non-breakable-space-in-names>`
  * :ref:`ext/swoole <ext-swoole>`

* 0.11.8

  * :ref:`Cant Inherit Abstract Method <cant-inherit-abstract-method>`
  * :ref:`Codeigniter usage <codeigniter-usage>`
  * :ref:`Ez cms usage <ez-cms-usage>`
  * :ref:`Joomla usage <joomla-usage>`
  * :ref:`Laravel usage <laravel-usage>`
  * :ref:`Symfony usage <symfony-usage>`
  * :ref:`Use session_start() Options <use-session\_start()-options>`
  * :ref:`Wordpress usage <wordpress-usage>`
  * :ref:`Yii usage <yii-usage>`

* 0.11.7

  * :ref:`Forgotten Interface <forgotten-interface>`
  * :ref:`Order Of Declaration <order-of-declaration>`

* 0.11.6

  * :ref:`Concatenation Interpolation Consistence <concatenation-interpolation-consistence>`
  * :ref:`Could Make A Function <could-make-a-function>`
  * :ref:`Courier Anti-Pattern <courier-anti-pattern>`
  * :ref:`DI Cyclic Dependencies <di-cyclic-dependencies>`
  * :ref:`Dependency Injection <dependency-injection>`
  * :ref:`PSR-13 Usage <psr-13-usage>`
  * :ref:`PSR-16 Usage <psr-16-usage>`
  * :ref:`PSR-3 Usage <psr-3-usage>`
  * :ref:`PSR-6 Usage <psr-6-usage>`
  * :ref:`PSR-7 Usage <psr-7-usage>`
  * :ref:`Too Many Injections <too-many-injections>`
  * :ref:`ext/gender <ext-gender>`
  * :ref:`ext/judy <ext-judy>`

* 0.11.5

  * :ref:`Could Typehint <could-typehint>`
  * :ref:`Implemented Methods Are Public <implemented-methods-are-public>`
  * :ref:`Mixed Concat And Interpolation <mixed-concat-and-interpolation>`
  * :ref:`No Reference On Left Side <no-reference-on-left-side>`
  * :ref:`PSR-11 Usage <psr-11-usage>`
  * :ref:`ext/stats <ext-stats>`

* 0.11.4

  * :ref:`No Class As Typehint <no-class-as-typehint>`
  * :ref:`Use Browscap <use-browscap>`
  * :ref:`Use Debug <use-debug>`

* 0.11.3

  * :ref:`No Return Used <no-return-used>`
  * :ref:`Only Variable Passed By Reference <only-variable-passed-by-reference>`
  * :ref:`Try With Multiple Catch <try-with-multiple-catch>`
  * :ref:`ext/grpc <ext-grpc>`
  * :ref:`ext/sphinx <ext-sphinx>`

* 0.11.2

  * :ref:`Alternative Syntax Consistence <alternative-syntax-consistence>`
  * :ref:`Randomly Sorted Arrays <randomly-sorted-arrays>`

* 0.11.1

  * :ref:`Difference Consistence <difference-consistence>`
  * :ref:`No Empty Regex <no-empty-regex>`

* 0.11.0

  * :ref:`Could Use str_repeat() <could-use-str\_repeat()>`
  * :ref:`Crc32() Might Be Negative <crc32()-might-be-negative>`
  * :ref:`Empty Final Element <empty-final-element>`
  * :ref:`Strings With Strange Space <strings-with-strange-space>`
  * :ref:`Suspicious Comparison <suspicious-comparison>`

* 0.10.9

  * :ref:`Displays Text <displays-text>`
  * :ref:`Method Is Overwritten <method-is-overwritten>`
  * :ref:`No Class In Global <no-class-in-global>`
  * :ref:`Repeated Regex <repeated-regex>`

* 0.10.7

  * :ref:`Group Use Declaration <group-use-declaration>`
  * :ref:`Missing Cases In Switch <missing-cases-in-switch>`
  * :ref:`New Constants In PHP 7.2 <new-constants-in-php-7.2>`
  * :ref:`New Functions In PHP 7.2 <new-functions-in-php-7.2>`
  * :ref:`New Functions In PHP 7.3 <new-functions-in-php-7.3>`

* 0.10.6

  * :ref:`Check All Types <check-all-types>`
  * :ref:`Manipulates INF <manipulates-inf>`
  * :ref:`Manipulates NaN <manipulates-nan>`
  * :ref:`Set Cookie Safe Arguments <set-cookie-safe-arguments>`
  * :ref:`Should Use SetCookie() <should-use-setcookie()>`
  * :ref:`Use Cookies <use-cookies>`

* 0.10.5

  * :ref:`Could Be Typehinted Callable <could-be-typehinted-callable>`
  * :ref:`Encoded Simple Letters <encoded-simple-letters>`
  * :ref:`Regex Delimiter <regex-delimiter>`
  * :ref:`Strange Name For Constants <strange-name-for-constants>`
  * :ref:`Strange Name For Variables <strange-name-for-variables>`
  * :ref:`Too Many Finds <too-many-finds>`

* 0.10.4

  * :ref:`No Need For Else <no-need-for-else>`
  * :ref:`Should Use session_regenerateid() <should-use-session\_regenerateid()>`
  * :ref:`ext/ds <ext-ds>`

* 0.10.3

  * :ref:`Multiple Alias Definitions Per File <multiple-alias-definitions-per-file>`
  * :ref:`Property Used In One Method Only <property-used-in-one-method-only>`
  * :ref:`Used Once Property <used-once-property>`
  * :ref:`__DIR__ Then Slash <\_\_dir\_\_-then-slash>`
  * :ref:`self, parent, static Outside Class <self,-parent,-static-outside-class>`

* 0.10.2

  * :ref:`Class Function Confusion <class-function-confusion>`
  * :ref:`Forgotten Thrown <forgotten-thrown>`
  * :ref:`Should Use array_column() <should-use-array\_column()>`
  * :ref:`ext/libsodium <ext-libsodium>`

* 0.10.1

  * :ref:`All strings <all-strings>`
  * :ref:`SQL queries <sql-queries>`
  * :ref:`Strange Names For Methods <strange-names-for-methods>`

* 0.10.0

  * :ref:`Error_Log() Usage <error\_log()-usage>`
  * :ref:`No Boolean As Default <no-boolean-as-default>`
  * :ref:`Raised Access Level <raised-access-level>`

* 0.9.9

  * :ref:`PHP 7.2 Deprecations <php-7.2-deprecations>`
  * :ref:`PHP 7.2 Removed Functions <php-7.2-removed-functions>`

* 0.9.8

  * :ref:`Assigned Twice <assigned-twice>`
  * :ref:`New Line Style <new-line-style>`
  * :ref:`New On Functioncall Or Identifier <new-on-functioncall-or-identifier>`

* 0.9.7

  * :ref:`Avoid Large Array Assignation <avoid-large-array-assignation>`
  * :ref:`Could Be Protected Property <could-be-protected-property>`
  * :ref:`Long Arguments <long-arguments>`

* 0.9.6

  * :ref:`Avoid glob() Usage <avoid-glob()-usage>`
  * :ref:`Fetch One Row Format <fetch-one-row-format>`

* 0.9.5

  * :ref:`One Expression Brackets Consistency <one-expression-brackets-consistency>`
  * :ref:`Should Use Function <should-use-function>`
  * :ref:`ext/mongodb <ext-mongodb>`
  * :ref:`ext/zbarcode <ext-zbarcode>`

* 0.9.4

  * :ref:`Class Should Be Final By Ocramius <class-should-be-final-by-ocramius>`
  * :ref:`String <string>`
  * :ref:`ext/mhash <ext-mhash>`

* 0.9.3

  * :ref:`Close Tags Consistency <close-tags-consistency>`
  * :ref:`Unset() Or (unset) <unset()-or-(unset)>`

* 0.9.2

  * :ref:`$GLOBALS Or global <$globals-or-global>`
  * :ref:`Illegal Name For Method <illegal-name-for-method>`
  * :ref:`Too Many Local Variables <too-many-local-variables>`
  * :ref:`Use Composer Lock <use-composer-lock>`
  * :ref:`ext/ncurses <ext-ncurses>`
  * :ref:`ext/newt <ext-newt>`
  * :ref:`ext/nsapi <ext-nsapi>`

* 0.9.1

  * :ref:`Avoid Using stdClass <avoid-using-stdclass>`
  * :ref:`Avoid array_push() <avoid-array\_push()>`
  * :ref:`Invalid Octal In String <invalid-octal-in-string>`

* 0.9.0

  * :ref:`Getting Last Element <getting-last-element>`
  * :ref:`Rethrown Exceptions <rethrown-exceptions>`

* 0.8.9

  * :ref:`Array() / [  ] Consistence <array()---[--]-consistence>`
  * :ref:`Bail Out Early <bail-out-early>`
  * :ref:`Die Exit Consistence <die-exit-consistence>`
  * :ref:`Dont Change The Blind Var <dont-change-the-blind-var>`
  * :ref:`More Than One Level Of Indentation <more-than-one-level-of-indentation>`
  * :ref:`One Dot Or Object Operator Per Line <one-dot-or-object-operator-per-line>`
  * :ref:`PHP 7.1 Microseconds <php-7.1-microseconds>`
  * :ref:`Unitialized Properties <unitialized-properties>`
  * :ref:`Useless Check <useless-check>`

* 0.8.7

  * :ref:`Don't Echo Error <don't-echo-error>`
  * :ref:`No isset() With empty() <no-isset()-with-empty()>`
  * :ref:`Use \:\:Class Operator <use-class-operator>`
  * :ref:`Useless Type Casting <useless-type-casting>`
  * :ref:`ext/rar <ext-rar>`
  * :ref:`time() Vs strtotime() <time()-vs-strtotime()>`

* 0.8.6

  * :ref:`Drop Else After Return <drop-else-after-return>`
  * :ref:`Modernize Empty With Expression <modernize-empty-with-expression>`
  * :ref:`Use Positive Condition <use-positive-condition>`

* 0.8.5

  * :ref:`Should Make Ternary <should-make-ternary>`
  * :ref:`Unused Returned Value <unused-returned-value>`

* 0.8.4

  * :ref:`$HTTP_RAW_POST_DATA Usage <$http\_raw\_post\_data-usage>`
  * :ref:`$this Belongs To Classes Or Traits <$this-belongs-to-classes-or-traits>`
  * :ref:`$this Is Not An Array <$this-is-not-an-array>`
  * :ref:`$this Is Not For Static Methods <$this-is-not-for-static-methods>`
  * :ref:`** For Exponent <**-for-exponent>`
  * :ref:`<?= Usage <I?=-usage>`
  * :ref:`@ Operator <@-operator>`
  * :ref:`Abstract Class Usage <abstract-class-usage>`
  * :ref:`Abstract Methods Usage <abstract-methods-usage>`
  * :ref:`Abstract Static Methods <abstract-static-methods>`
  * :ref:`Access Protected Structures <access-protected-structures>`
  * :ref:`Accessing Private <accessing-private>`
  * :ref:`Adding Zero <adding-zero>`
  * :ref:`Aliases <aliases>`
  * :ref:`Aliases Usage <aliases-usage>`
  * :ref:`All Uppercase Variables <all-uppercase-variables>`
  * :ref:`Already Parents Interface <already-parents-interface>`
  * :ref:`Altering Foreach Without Reference <altering-foreach-without-reference>`
  * :ref:`Always Positive Comparison <always-positive-comparison>`
  * :ref:`Ambiguous Array Index <ambiguous-array-index>`
  * :ref:`Anonymous Classes <anonymous-classes>`
  * :ref:`Argument Should Be Typehinted <argument-should-be-typehinted>`
  * :ref:`Array Index <array-index>`
  * :ref:`Assertions <assertions>`
  * :ref:`Assign Default To Properties <assign-default-to-properties>`
  * :ref:`Autoloading <autoloading>`
  * :ref:`Avoid Parenthesis <avoid-parenthesis>`
  * :ref:`Avoid Substr() One <avoid-substr()-one>`
  * :ref:`Avoid Those Hash Functions <avoid-those-hash-functions>`
  * :ref:`Avoid array_unique() <avoid-array\_unique()>`
  * :ref:`Avoid get_class() <avoid-get\_class()>`
  * :ref:`Avoid sleep()/usleep() <avoid-sleep()-usleep()>`
  * :ref:`Bad Constants Names <bad-constants-names>`
  * :ref:`Binary Glossary <binary-glossary>`
  * :ref:`Blind Variables <blind-variables>`
  * :ref:`Bracketless Blocks <bracketless-blocks>`
  * :ref:`Break Outside Loop <break-outside-loop>`
  * :ref:`Break With 0 <break-with-0>`
  * :ref:`Break With Non Integer <break-with-non-integer>`
  * :ref:`Buried Assignation <buried-assignation>`
  * :ref:`Calltime Pass By Reference <calltime-pass-by-reference>`
  * :ref:`Can't Disable Class <can't-disable-class>`
  * :ref:`Can't Disable Function <can't-disable-function>`
  * :ref:`Can't Extend Final <can't-extend-final>`
  * :ref:`Cant Use Return Value In Write Context <cant-use-return-value-in-write-context>`
  * :ref:`Cast To Boolean <cast-to-boolean>`
  * :ref:`Cast Usage <cast-usage>`
  * :ref:`Catch Overwrite Variable <catch-overwrite-variable>`
  * :ref:`Caught Exceptions <caught-exceptions>`
  * :ref:`Caught Expressions <caught-expressions>`
  * :ref:`Class Const With Array <class-const-with-array>`
  * :ref:`Class Has Fluent Interface <class-has-fluent-interface>`
  * :ref:`Class Usage <class-usage>`
  * :ref:`Class, Interface Or Trait With Identical Names <class,-interface-or-trait-with-identical-names>`
  * :ref:`Classes Mutually Extending Each Other <classes-mutually-extending-each-other>`
  * :ref:`Classes Names <classes-names>`
  * :ref:`Clone Usage <clone-usage>`
  * :ref:`Close Tags <close-tags>`
  * :ref:`Closure May Use $this <closure-may-use-$this>`
  * :ref:`Closures Glossary <closures-glossary>`
  * :ref:`Coalesce <coalesce>`
  * :ref:`Common Alternatives <common-alternatives>`
  * :ref:`Compare Hash <compare-hash>`
  * :ref:`Compared Comparison <compared-comparison>`
  * :ref:`Composer Namespace <composer-namespace>`
  * :ref:`Composer Usage <composer-usage>`
  * :ref:`Composer's autoload <composer's-autoload>`
  * :ref:`Concrete Visibility <concrete-visibility>`
  * :ref:`Conditional Structures <conditional-structures>`
  * :ref:`Conditioned Constants <conditioned-constants>`
  * :ref:`Conditioned Function <conditioned-function>`
  * :ref:`Confusing Names <confusing-names>`
  * :ref:`Const With Array <const-with-array>`
  * :ref:`Constant Class <constant-class>`
  * :ref:`Constant Comparison <constant-comparison>`
  * :ref:`Constant Conditions <constant-conditions>`
  * :ref:`Constant Definition <constant-definition>`
  * :ref:`Constant Scalar Expressions <constant-scalar-expressions>`
  * :ref:`Constants Created Outside Its Namespace <constants-created-outside-its-namespace>`
  * :ref:`Constants Names <constants-names>`
  * :ref:`Constants Usage <constants-usage>`
  * :ref:`Constants With Strange Names <constants-with-strange-names>`
  * :ref:`Constructors <constructors>`
  * :ref:`Continents <continents>`
  * :ref:`Could Be Class Constant <could-be-class-constant>`
  * :ref:`Could Be Static <could-be-static>`
  * :ref:`Could Use Alias <could-use-alias>`
  * :ref:`Could Use Short Assignation <could-use-short-assignation>`
  * :ref:`Could Use __DIR__ <could-use-\_\_dir\_\_>`
  * :ref:`Could Use self <could-use-self>`
  * :ref:`Custom Class Usage <custom-class-usage>`
  * :ref:`Custom Constant Usage <custom-constant-usage>`
  * :ref:`Dangling Array References <dangling-array-references>`
  * :ref:`Deep Definitions <deep-definitions>`
  * :ref:`Define With Array <define-with-array>`
  * :ref:`Defined Class Constants <defined-class-constants>`
  * :ref:`Defined Exceptions <defined-exceptions>`
  * :ref:`Defined Parent MP <defined-parent-mp>`
  * :ref:`Defined Properties <defined-properties>`
  * :ref:`Defined static\:\: Or self\:\: <defined-static-or-self>`
  * :ref:`Definitions Only <definitions-only>`
  * :ref:`Dependant Trait <dependant-trait>`
  * :ref:`Deprecated PHP Functions <deprecated-php-functions>`
  * :ref:`Dereferencing String And Arrays <dereferencing-string-and-arrays>`
  * :ref:`Direct Injection <direct-injection>`
  * :ref:`Directives Usage <directives-usage>`
  * :ref:`Don't Change Incomings <don't-change-incomings>`
  * :ref:`Double Assignation <double-assignation>`
  * :ref:`Double Instructions <double-instructions>`
  * :ref:`Duplicate Calls <duplicate-calls>`
  * :ref:`Dynamic Calls <dynamic-calls>`
  * :ref:`Dynamic Class Constant <dynamic-class-constant>`
  * :ref:`Dynamic Classes <dynamic-classes>`
  * :ref:`Dynamic Code <dynamic-code>`
  * :ref:`Dynamic Function Call <dynamic-function-call>`
  * :ref:`Dynamic Methodcall <dynamic-methodcall>`
  * :ref:`Dynamic New <dynamic-new>`
  * :ref:`Dynamic Property <dynamic-property>`
  * :ref:`Dynamically Called Classes <dynamically-called-classes>`
  * :ref:`Echo Or Print <echo-or-print>`
  * :ref:`Echo With Concat <echo-with-concat>`
  * :ref:`Ellipsis Usage <ellipsis-usage>`
  * :ref:`Else If Versus Elseif <else-if-versus-elseif>`
  * :ref:`Else Usage <else-usage>`
  * :ref:`Email Addresses <email-addresses>`
  * :ref:`Empty Blocks <empty-blocks>`
  * :ref:`Empty Classes <empty-classes>`
  * :ref:`Empty Function <empty-function>`
  * :ref:`Empty Instructions <empty-instructions>`
  * :ref:`Empty Interfaces <empty-interfaces>`
  * :ref:`Empty List <empty-list>`
  * :ref:`Empty Namespace <empty-namespace>`
  * :ref:`Empty Slots In Arrays <empty-slots-in-arrays>`
  * :ref:`Empty Traits <empty-traits>`
  * :ref:`Empty Try Catch <empty-try-catch>`
  * :ref:`Empty With Expression <empty-with-expression>`
  * :ref:`Error Messages <error-messages>`
  * :ref:`Eval() Usage <eval()-usage>`
  * :ref:`Exception Order <exception-order>`
  * :ref:`Exit() Usage <exit()-usage>`
  * :ref:`Exit-like Methods <exit-like-methods>`
  * :ref:`Exponent Usage <exponent-usage>`
  * :ref:`External Config Files <external-config-files>`
  * :ref:`Failed Substr Comparison <failed-substr-comparison>`
  * :ref:`File Is Component <file-is-component>`
  * :ref:`File Uploads <file-uploads>`
  * :ref:`File Usage <file-usage>`
  * :ref:`Final Class Usage <final-class-usage>`
  * :ref:`Final Methods Usage <final-methods-usage>`
  * :ref:`Fopen Binary Mode <fopen-binary-mode>`
  * :ref:`For Using Functioncall <for-using-functioncall>`
  * :ref:`Foreach Don't Change Pointer <foreach-don't-change-pointer>`
  * :ref:`Foreach Needs Reference Array <foreach-needs-reference-array>`
  * :ref:`Foreach Reference Is Not Modified <foreach-reference-is-not-modified>`
  * :ref:`Foreach With list() <foreach-with-list()>`
  * :ref:`Forgotten Visibility <forgotten-visibility>`
  * :ref:`Forgotten Whitespace <forgotten-whitespace>`
  * :ref:`Fully Qualified Constants <fully-qualified-constants>`
  * :ref:`Function Called With Other Case Than Defined <function-called-with-other-case-than-defined>`
  * :ref:`Function Subscripting <function-subscripting>`
  * :ref:`Function Subscripting, Old Style <function-subscripting,-old-style>`
  * :ref:`Functioncall Is Global <functioncall-is-global>`
  * :ref:`Functions Glossary <functions-glossary>`
  * :ref:`Functions In Loop Calls <functions-in-loop-calls>`
  * :ref:`Functions Removed In PHP 5.4 <functions-removed-in-php-5.4>`
  * :ref:`Functions Removed In PHP 5.5 <functions-removed-in-php-5.5>`
  * :ref:`Functions Using Reference <functions-using-reference>`
  * :ref:`GPRC Aliases <gprc-aliases>`
  * :ref:`Global Code Only <global-code-only>`
  * :ref:`Global Import <global-import>`
  * :ref:`Global In Global <global-in-global>`
  * :ref:`Global Inside Loop <global-inside-loop>`
  * :ref:`Global Usage <global-usage>`
  * :ref:`Globals <globals>`
  * :ref:`Goto Names <goto-names>`
  * :ref:`HTTP Status Code <http-status-code>`
  * :ref:`Hardcoded Passwords <hardcoded-passwords>`
  * :ref:`Has Magic Property <has-magic-property>`
  * :ref:`Has Variable Arguments <has-variable-arguments>`
  * :ref:`Hash Algorithms <hash-algorithms>`
  * :ref:`Hash Algorithms Incompatible With PHP 5.3 <hash-algorithms-incompatible-with-php-5.3>`
  * :ref:`Hash Algorithms Incompatible With PHP 5.4/5.5 <hash-algorithms-incompatible-with-php-5.4-5.5>`
  * :ref:`Heredoc Delimiter Glossary <heredoc-delimiter-glossary>`
  * :ref:`Hexadecimal Glossary <hexadecimal-glossary>`
  * :ref:`Hexadecimal In String <hexadecimal-in-string>`
  * :ref:`Hidden Use Expression <hidden-use-expression>`
  * :ref:`Htmlentities Calls <htmlentities-calls>`
  * :ref:`Http Headers <http-headers>`
  * :ref:`Identical Conditions <identical-conditions>`
  * :ref:`If With Same Conditions <if-with-same-conditions>`
  * :ref:`Iffectations <iffectations>`
  * :ref:`Implement Is For Interface <implement-is-for-interface>`
  * :ref:`Implicit Global <implicit-global>`
  * :ref:`Implied If <implied-if>`
  * :ref:`Inclusions <inclusions>`
  * :ref:`Incompilable Files <incompilable-files>`
  * :ref:`Inconsistent Concatenation <inconsistent-concatenation>`
  * :ref:`Indices Are Int Or String <indices-are-int-or-string>`
  * :ref:`Indirect Injection <indirect-injection>`
  * :ref:`Instantiating Abstract Class <instantiating-abstract-class>`
  * :ref:`Interface Arguments <interface-arguments>`
  * :ref:`Interface Methods <interface-methods>`
  * :ref:`Interfaces Glossary <interfaces-glossary>`
  * :ref:`Interfaces Usage <interfaces-usage>`
  * :ref:`Internally Used Properties <internally-used-properties>`
  * :ref:`Internet Ports <internet-ports>`
  * :ref:`Interpolation <interpolation>`
  * :ref:`Invalid Constant Name <invalid-constant-name>`
  * :ref:`Is An Extension Class <is-an-extension-class>`
  * :ref:`Is An Extension Constant <is-an-extension-constant>`
  * :ref:`Is An Extension Function <is-an-extension-function>`
  * :ref:`Is An Extension Interface <is-an-extension-interface>`
  * :ref:`Is CLI Script <is-cli-script>`
  * :ref:`Is Composer Class <is-composer-class>`
  * :ref:`Is Composer Interface <is-composer-interface>`
  * :ref:`Is Extension Trait <is-extension-trait>`
  * :ref:`Is Generator <is-generator>`
  * :ref:`Is Global Constant <is-global-constant>`
  * :ref:`Is Interface Method <is-interface-method>`
  * :ref:`Is Not Class Family <is-not-class-family>`
  * :ref:`Is PHP Constant <is-php-constant>`
  * :ref:`Is Upper Family <is-upper-family>`
  * :ref:`Joining file() <joining-file()>`
  * :ref:`Labels <labels>`
  * :ref:`Linux Only Files <linux-only-files>`
  * :ref:`List Short Syntax <list-short-syntax>`
  * :ref:`List With Appends <list-with-appends>`
  * :ref:`List With Keys <list-with-keys>`
  * :ref:`Locally Unused Property <locally-unused-property>`
  * :ref:`Locally Used Property <locally-used-property>`
  * :ref:`Logical Mistakes <logical-mistakes>`
  * :ref:`Logical Should Use Symbolic Operators <logical-should-use-symbolic-operators>`
  * :ref:`Lone Blocks <lone-blocks>`
  * :ref:`Lost References <lost-references>`
  * :ref:`Magic Constant Usage <magic-constant-usage>`
  * :ref:`Magic Methods <magic-methods>`
  * :ref:`Magic Visibility <magic-visibility>`
  * :ref:`Mail Usage <mail-usage>`
  * :ref:`Make Global A Property <make-global-a-property>`
  * :ref:`Make One Call With Array <make-one-call-with-array>`
  * :ref:`Malformed Octal <malformed-octal>`
  * :ref:`Mark Callable <mark-callable>`
  * :ref:`Md5 Strings <md5-strings>`
  * :ref:`Method Has Fluent Interface <method-has-fluent-interface>`
  * :ref:`Method Has No Fluent Interface <method-has-no-fluent-interface>`
  * :ref:`Methodcall On New <methodcall-on-new>`
  * :ref:`Methods Without Return <methods-without-return>`
  * :ref:`Mime Types <mime-types>`
  * :ref:`Mixed Keys Arrays <mixed-keys-arrays>`
  * :ref:`Multidimensional Arrays <multidimensional-arrays>`
  * :ref:`Multiple Alias Definitions <multiple-alias-definitions>`
  * :ref:`Multiple Catch <multiple-catch>`
  * :ref:`Multiple Class Declarations <multiple-class-declarations>`
  * :ref:`Multiple Classes In One File <multiple-classes-in-one-file>`
  * :ref:`Multiple Constant Definition <multiple-constant-definition>`
  * :ref:`Multiple Definition Of The Same Argument <multiple-definition-of-the-same-argument>`
  * :ref:`Multiple Exceptions Catch() <multiple-exceptions-catch()>`
  * :ref:`Multiple Identical Trait Or Interface <multiple-identical-trait-or-interface>`
  * :ref:`Multiple Index Definition <multiple-index-definition>`
  * :ref:`Multiple Returns <multiple-returns>`
  * :ref:`Multiples Identical Case <multiples-identical-case>`
  * :ref:`Multiply By One <multiply-by-one>`
  * :ref:`Must Return Methods <must-return-methods>`
  * :ref:`Namespaces <namespaces>`
  * :ref:`Namespaces Glossary <namespaces-glossary>`
  * :ref:`Negative Power <negative-power>`
  * :ref:`Nested Ifthen <nested-ifthen>`
  * :ref:`Nested Loops <nested-loops>`
  * :ref:`Nested Ternary <nested-ternary>`
  * :ref:`Never Used Properties <never-used-properties>`
  * :ref:`New Functions In PHP 5.4 <new-functions-in-php-5.4>`
  * :ref:`New Functions In PHP 5.5 <new-functions-in-php-5.5>`
  * :ref:`New Functions In PHP 5.6 <new-functions-in-php-5.6>`
  * :ref:`New Functions In PHP 7.0 <new-functions-in-php-7.0>`
  * :ref:`New Functions In PHP 7.1 <new-functions-in-php-7.1>`
  * :ref:`No Choice <no-choice>`
  * :ref:`No Count With 0 <no-count-with-0>`
  * :ref:`No Direct Access <no-direct-access>`
  * :ref:`No Direct Call To Magic Method <no-direct-call-to-magic-method>`
  * :ref:`No Direct Usage <no-direct-usage>`
  * :ref:`No Hardcoded Hash <no-hardcoded-hash>`
  * :ref:`No Hardcoded Ip <no-hardcoded-ip>`
  * :ref:`No Hardcoded Path <no-hardcoded-path>`
  * :ref:`No Hardcoded Port <no-hardcoded-port>`
  * :ref:`No List With String <no-list-with-string>`
  * :ref:`No Parenthesis For Language Construct <no-parenthesis-for-language-construct>`
  * :ref:`No Plus One <no-plus-one>`
  * :ref:`No Public Access <no-public-access>`
  * :ref:`No Real Comparison <no-real-comparison>`
  * :ref:`No Self Referencing Constant <no-self-referencing-constant>`
  * :ref:`No String With Append <no-string-with-append>`
  * :ref:`No array_merge() In Loops <no-array\_merge()-in-loops>`
  * :ref:`Non Ascii Variables <non-ascii-variables>`
  * :ref:`Non Static Methods Called In A Static <non-static-methods-called-in-a-static>`
  * :ref:`Non-constant Index In Array <non-constant-index-in-array>`
  * :ref:`Non-lowercase Keywords <non-lowercase-keywords>`
  * :ref:`Normal Methods <normal-methods>`
  * :ref:`Not Definitions Only <not-definitions-only>`
  * :ref:`Not Not <not-not>`
  * :ref:`Not Same Name As File <not-same-name-as-file>`
  * :ref:`Nowdoc Delimiter Glossary <nowdoc-delimiter-glossary>`
  * :ref:`Null On New <null-on-new>`
  * :ref:`Objects Don't Need References <objects-don't-need-references>`
  * :ref:`Octal Glossary <octal-glossary>`
  * :ref:`Old Style Constructor <old-style-constructor>`
  * :ref:`Old Style __autoload() <old-style-\_\_autoload()>`
  * :ref:`One Letter Functions <one-letter-functions>`
  * :ref:`One Object Operator Per Line <one-object-operator-per-line>`
  * :ref:`One Variable String <one-variable-string>`
  * :ref:`Only Static Methods <only-static-methods>`
  * :ref:`Only Variable Returned By Reference <only-variable-returned-by-reference>`
  * :ref:`Or Die <or-die>`
  * :ref:`Overwriting Variable <overwriting-variable>`
  * :ref:`Overwritten Class Const <overwritten-class-const>`
  * :ref:`Overwritten Exceptions <overwritten-exceptions>`
  * :ref:`Overwritten Literals <overwritten-literals>`
  * :ref:`PHP 7.0 New Classes <php-7.0-new-classes>`
  * :ref:`PHP 7.0 New Interfaces <php-7.0-new-interfaces>`
  * :ref:`PHP 7.0 Removed Directives <php-7.0-removed-directives>`
  * :ref:`PHP 7.0 Removed Functions <php-7.0-removed-functions>`
  * :ref:`PHP 7.1 Removed Directives <php-7.1-removed-directives>`
  * :ref:`PHP Alternative Syntax <php-alternative-syntax>`
  * :ref:`PHP Arrays Index <php-arrays-index>`
  * :ref:`PHP Bugfixes <php-bugfixes>`
  * :ref:`PHP Constant Usage <php-constant-usage>`
  * :ref:`PHP Handlers Usage <php-handlers-usage>`
  * :ref:`PHP Interfaces <php-interfaces>`
  * :ref:`PHP Keywords As Names <php-keywords-as-names>`
  * :ref:`PHP Sapi <php-sapi>`
  * :ref:`PHP Variables <php-variables>`
  * :ref:`PHP5 Indirect Variable Expression <php5-indirect-variable-expression>`
  * :ref:`PHP7 Dirname <php7-dirname>`
  * :ref:`Parent, Static Or Self Outside Class <parent,-static-or-self-outside-class>`
  * :ref:`Parenthesis As Parameter <parenthesis-as-parameter>`
  * :ref:`Pear Usage <pear-usage>`
  * :ref:`Perl Regex <perl-regex>`
  * :ref:`Php 7 Indirect Expression <php-7-indirect-expression>`
  * :ref:`Php 7.1 New Class <php-7.1-new-class>`
  * :ref:`Php7 Relaxed Keyword <php7-relaxed-keyword>`
  * :ref:`Phpinfo <phpinfo>`
  * :ref:`Pre-increment <pre-increment>`
  * :ref:`Preprocess Arrays <preprocess-arrays>`
  * :ref:`Preprocessable <preprocessable>`
  * :ref:`Print And Die <print-and-die>`
  * :ref:`Property Could Be Private Property <property-could-be-private-property>`
  * :ref:`Property Names <property-names>`
  * :ref:`Property Used Above <property-used-above>`
  * :ref:`Property Used Below <property-used-below>`
  * :ref:`Property Variable Confusion <property-variable-confusion>`
  * :ref:`Queries In Loops <queries-in-loops>`
  * :ref:`Random Without Try <random-without-try>`
  * :ref:`Real Functions <real-functions>`
  * :ref:`Real Variables <real-variables>`
  * :ref:`Recursive Functions <recursive-functions>`
  * :ref:`Redeclared PHP Functions <redeclared-php-functions>`
  * :ref:`Redefined Class Constants <redefined-class-constants>`
  * :ref:`Redefined Default <redefined-default>`
  * :ref:`Redefined Methods <redefined-methods>`
  * :ref:`Redefined PHP Traits <redefined-php-traits>`
  * :ref:`Redefined Property <redefined-property>`
  * :ref:`Register Globals <register-globals>`
  * :ref:`Relay Function <relay-function>`
  * :ref:`Repeated print() <repeated-print()>`
  * :ref:`Reserved Keywords In PHP 7 <reserved-keywords-in-php-7>`
  * :ref:`Resources Usage <resources-usage>`
  * :ref:`Results May Be Missing <results-may-be-missing>`
  * :ref:`Return True False <return-true-false>`
  * :ref:`Return Typehint Usage <return-typehint-usage>`
  * :ref:`Return With Parenthesis <return-with-parenthesis>`
  * :ref:`Return void  <return-void->`
  * :ref:`Safe Curl Options <safe-curl-options>`
  * :ref:`Same Conditions In Condition <same-conditions-in-condition>`
  * :ref:`Scalar Typehint Usage <scalar-typehint-usage>`
  * :ref:`Sensitive Argument <sensitive-argument>`
  * :ref:`Sequences In For <sequences-in-for>`
  * :ref:`Setlocale() Uses Constants <setlocale()-uses-constants>`
  * :ref:`Several Instructions On The Same Line <several-instructions-on-the-same-line>`
  * :ref:`Shell Usage <shell-usage>`
  * :ref:`Short Open Tags <short-open-tags>`
  * :ref:`Short Syntax For Arrays <short-syntax-for-arrays>`
  * :ref:`Should Be Single Quote <should-be-single-quote>`
  * :ref:`Should Chain Exception <should-chain-exception>`
  * :ref:`Should Make Alias <should-make-alias>`
  * :ref:`Should Typecast <should-typecast>`
  * :ref:`Should Use Coalesce <should-use-coalesce>`
  * :ref:`Should Use Constants <should-use-constants>`
  * :ref:`Should Use Local Class <should-use-local-class>`
  * :ref:`Should Use Prepared Statement <should-use-prepared-statement>`
  * :ref:`Silently Cast Integer <silently-cast-integer>`
  * :ref:`Simple Global Variable <simple-global-variable>`
  * :ref:`Simplify Regex <simplify-regex>`
  * :ref:`Slow Functions <slow-functions>`
  * :ref:`Special Integers <special-integers>`
  * :ref:`Static Loop <static-loop>`
  * :ref:`Static Methods <static-methods>`
  * :ref:`Static Methods Called From Object <static-methods-called-from-object>`
  * :ref:`Static Methods Can't Contain $this <static-methods-can't-contain-$this>`
  * :ref:`Static Properties <static-properties>`
  * :ref:`Static Variables <static-variables>`
  * :ref:`Strict Comparison With Booleans <strict-comparison-with-booleans>`
  * :ref:`String May Hold A Variable <string-may-hold-a-variable>`
  * :ref:`Strpos()-like Comparison <strpos()-like-comparison>`
  * :ref:`Super Global Usage <super-global-usage>`
  * :ref:`Super Globals Contagion <super-globals-contagion>`
  * :ref:`Switch To Switch <switch-to-switch>`
  * :ref:`Switch With Too Many Default <switch-with-too-many-default>`
  * :ref:`Switch Without Default <switch-without-default>`
  * :ref:`Ternary In Concat <ternary-in-concat>`
  * :ref:`Test Class <test-class>`
  * :ref:`Throw <throw>`
  * :ref:`Throw Functioncall <throw-functioncall>`
  * :ref:`Throw In Destruct <throw-in-destruct>`
  * :ref:`Thrown Exceptions <thrown-exceptions>`
  * :ref:`Throws An Assignement <throws-an-assignement>`
  * :ref:`Timestamp Difference <timestamp-difference>`
  * :ref:`Too Many Children <too-many-children>`
  * :ref:`Trait Methods <trait-methods>`
  * :ref:`Trait Names <trait-names>`
  * :ref:`Traits Usage <traits-usage>`
  * :ref:`Trigger Errors <trigger-errors>`
  * :ref:`True False Inconsistant Case <true-false-inconsistant-case>`
  * :ref:`Try With Finally <try-with-finally>`
  * :ref:`Typehints <typehints>`
  * :ref:`URL List <url-list>`
  * :ref:`Uncaught Exceptions <uncaught-exceptions>`
  * :ref:`Unchecked Resources <unchecked-resources>`
  * :ref:`Undefined Caught Exceptions <undefined-caught-exceptions>`
  * :ref:`Undefined Class Constants <undefined-class-constants>`
  * :ref:`Undefined Classes <undefined-classes>`
  * :ref:`Undefined Constants <undefined-constants>`
  * :ref:`Undefined Functions <undefined-functions>`
  * :ref:`Undefined Interfaces <undefined-interfaces>`
  * :ref:`Undefined Parent <undefined-parent>`
  * :ref:`Undefined Properties <undefined-properties>`
  * :ref:`Undefined Trait <undefined-trait>`
  * :ref:`Undefined static\:\: Or self\:\: <undefined-static-or-self>`
  * :ref:`Unicode Blocks <unicode-blocks>`
  * :ref:`Unicode Escape Partial <unicode-escape-partial>`
  * :ref:`Unicode Escape Syntax <unicode-escape-syntax>`
  * :ref:`Unknown Directive Name <unknown-directive-name>`
  * :ref:`Unkown Regex Options <unkown-regex-options>`
  * :ref:`Unpreprocessed Values <unpreprocessed-values>`
  * :ref:`Unreachable Code <unreachable-code>`
  * :ref:`Unresolved Catch <unresolved-catch>`
  * :ref:`Unresolved Classes <unresolved-classes>`
  * :ref:`Unresolved Instanceof <unresolved-instanceof>`
  * :ref:`Unresolved Use <unresolved-use>`
  * :ref:`Unserialize Second Arg <unserialize-second-arg>`
  * :ref:`Unset Arguments <unset-arguments>`
  * :ref:`Unset In Foreach <unset-in-foreach>`
  * :ref:`Unthrown Exception <unthrown-exception>`
  * :ref:`Unused Arguments <unused-arguments>`
  * :ref:`Unused Classes <unused-classes>`
  * :ref:`Unused Constants <unused-constants>`
  * :ref:`Unused Functions <unused-functions>`
  * :ref:`Unused Global <unused-global>`
  * :ref:`Unused Interfaces <unused-interfaces>`
  * :ref:`Unused Label <unused-label>`
  * :ref:`Unused Methods <unused-methods>`
  * :ref:`Unused Private Methods <unused-private-methods>`
  * :ref:`Unused Private Properties <unused-private-properties>`
  * :ref:`Unused Protected Methods <unused-protected-methods>`
  * :ref:`Unused Traits <unused-traits>`
  * :ref:`Unused Use <unused-use>`
  * :ref:`Unusual Case For PHP Functions <unusual-case-for-php-functions>`
  * :ref:`Usage Of class_alias() <usage-of-class\_alias()>`
  * :ref:`Use === null <use-===-null>`
  * :ref:`Use Cli <use-cli>`
  * :ref:`Use Const And Functions <use-const-and-functions>`
  * :ref:`Use Constant <use-constant>`
  * :ref:`Use Constant As Arguments <use-constant-as-arguments>`
  * :ref:`Use Instanceof <use-instanceof>`
  * :ref:`Use Lower Case For Parent, Static And Self <use-lower-case-for-parent,-static-and-self>`
  * :ref:`Use Nullable Type <use-nullable-type>`
  * :ref:`Use PHP Object API <use-php-object-api>`
  * :ref:`Use Pathinfo <use-pathinfo>`
  * :ref:`Use System Tmp <use-system-tmp>`
  * :ref:`Use This <use-this>`
  * :ref:`Use Web <use-web>`
  * :ref:`Use With Fully Qualified Name <use-with-fully-qualified-name>`
  * :ref:`Use const <use-const>`
  * :ref:`Use password_hash() <use-password\_hash()>`
  * :ref:`Use random_int() <use-random\_int()>`
  * :ref:`Used Classes <used-classes>`
  * :ref:`Used Functions <used-functions>`
  * :ref:`Used Interfaces <used-interfaces>`
  * :ref:`Used Methods <used-methods>`
  * :ref:`Used Once Variables (In Scope) <used-once-variables-(in-scope)>`
  * :ref:`Used Once Variables <used-once-variables>`
  * :ref:`Used Private Methods <used-private-methods>`
  * :ref:`Used Protected Method <used-protected-method>`
  * :ref:`Used Static Properties <used-static-properties>`
  * :ref:`Used Trait <used-trait>`
  * :ref:`Used Use <used-use>`
  * :ref:`Useless Abstract Class <useless-abstract-class>`
  * :ref:`Useless Brackets <useless-brackets>`
  * :ref:`Useless Constructor <useless-constructor>`
  * :ref:`Useless Final <useless-final>`
  * :ref:`Useless Global <useless-global>`
  * :ref:`Useless Instructions <useless-instructions>`
  * :ref:`Useless Interfaces <useless-interfaces>`
  * :ref:`Useless Parenthesis <useless-parenthesis>`
  * :ref:`Useless Return <useless-return>`
  * :ref:`Useless Switch <useless-switch>`
  * :ref:`Useless Unset <useless-unset>`
  * :ref:`Uses Default Values <uses-default-values>`
  * :ref:`Uses Environment <uses-environment>`
  * :ref:`Using $this Outside A Class <using-$this-outside-a-class>`
  * :ref:`Using Short Tags <using-short-tags>`
  * :ref:`Usort Sorting In PHP 7.0 <usort-sorting-in-php-7.0>`
  * :ref:`Var Keyword <var-keyword>`
  * :ref:`Variable Constants <variable-constants>`
  * :ref:`Variable References <variable-references>`
  * :ref:`Variable Variables <variable-variables>`
  * :ref:`Variables With Long Names <variables-with-long-names>`
  * :ref:`Variables With One Letter Names <variables-with-one-letter-names>`
  * :ref:`While(List() = Each()) <while(list()-=-each())>`
  * :ref:`Written Only Variables <written-only-variables>`
  * :ref:`Wrong Class Name Case <wrong-class-name-case>`
  * :ref:`Wrong Function Name Case <wrong-function-name-case>`
  * :ref:`Wrong Number Of Arguments <wrong-number-of-arguments>`
  * :ref:`Wrong Number Of Arguments In Methods <wrong-number-of-arguments-in-methods>`
  * :ref:`Wrong Optional Parameter <wrong-optional-parameter>`
  * :ref:`Wrong Parameter Type <wrong-parameter-type>`
  * :ref:`Wrong fopen() Mode <wrong-fopen()-mode>`
  * :ref:`Yield From Usage <yield-from-usage>`
  * :ref:`Yield Usage <yield-usage>`
  * :ref:`Yoda Comparison <yoda-comparison>`
  * :ref:`\:\:class <class>`
  * :ref:`__debugInfo() Usage <\_\_debuginfo()-usage>`
  * :ref:`__halt_compiler <\_\_halt\_compiler>`
  * :ref:`__toString() Throws Exception <\_\_tostring()-throws-exception>`
  * :ref:`crypt() Without Salt <crypt()-without-salt>`
  * :ref:`error_reporting() With Integers <error\_reporting()-with-integers>`
  * :ref:`eval() Without Try <eval()-without-try>`
  * :ref:`ext/0mq <ext-0mq>`
  * :ref:`ext/amqp <ext-amqp>`
  * :ref:`ext/apache <ext-apache>`
  * :ref:`ext/apc <ext-apc>`
  * :ref:`ext/apcu <ext-apcu>`
  * :ref:`ext/array <ext-array>`
  * :ref:`ext/bcmath <ext-bcmath>`
  * :ref:`ext/bzip2 <ext-bzip2>`
  * :ref:`ext/cairo <ext-cairo>`
  * :ref:`ext/calendar <ext-calendar>`
  * :ref:`ext/com <ext-com>`
  * :ref:`ext/crypto <ext-crypto>`
  * :ref:`ext/ctype <ext-ctype>`
  * :ref:`ext/curl <ext-curl>`
  * :ref:`ext/cyrus <ext-cyrus>`
  * :ref:`ext/date <ext-date>`
  * :ref:`ext/dba <ext-dba>`
  * :ref:`ext/dio <ext-dio>`
  * :ref:`ext/dom <ext-dom>`
  * :ref:`ext/eaccelerator <ext-eaccelerator>`
  * :ref:`ext/enchant <ext-enchant>`
  * :ref:`ext/ereg <ext-ereg>`
  * :ref:`ext/ev <ext-ev>`
  * :ref:`ext/event <ext-event>`
  * :ref:`ext/exif <ext-exif>`
  * :ref:`ext/expect <ext-expect>`
  * :ref:`ext/fann <ext-fann>`
  * :ref:`ext/fdf <ext-fdf>`
  * :ref:`ext/ffmpeg <ext-ffmpeg>`
  * :ref:`ext/file <ext-file>`
  * :ref:`ext/fileinfo <ext-fileinfo>`
  * :ref:`ext/filter <ext-filter>`
  * :ref:`ext/fpm <ext-fpm>`
  * :ref:`ext/ftp <ext-ftp>`
  * :ref:`ext/gd <ext-gd>`
  * :ref:`ext/gearman <ext-gearman>`
  * :ref:`ext/geoip <ext-geoip>`
  * :ref:`ext/gettext <ext-gettext>`
  * :ref:`ext/gmagick <ext-gmagick>`
  * :ref:`ext/gmp <ext-gmp>`
  * :ref:`ext/gnupgp <ext-gnupgp>`
  * :ref:`ext/hash <ext-hash>`
  * :ref:`ext/ibase <ext-ibase>`
  * :ref:`ext/iconv <ext-iconv>`
  * :ref:`ext/iis <ext-iis>`
  * :ref:`ext/imagick <ext-imagick>`
  * :ref:`ext/imap <ext-imap>`
  * :ref:`ext/info <ext-info>`
  * :ref:`ext/inotify <ext-inotify>`
  * :ref:`ext/intl <ext-intl>`
  * :ref:`ext/json <ext-json>`
  * :ref:`ext/kdm5 <ext-kdm5>`
  * :ref:`ext/ldap <ext-ldap>`
  * :ref:`ext/libevent <ext-libevent>`
  * :ref:`ext/libxml <ext-libxml>`
  * :ref:`ext/lua <ext-lua>`
  * :ref:`ext/mail <ext-mail>`
  * :ref:`ext/mailparse <ext-mailparse>`
  * :ref:`ext/math <ext-math>`
  * :ref:`ext/mbstring <ext-mbstring>`
  * :ref:`ext/mcrypt <ext-mcrypt>`
  * :ref:`ext/memcache <ext-memcache>`
  * :ref:`ext/memcached <ext-memcached>`
  * :ref:`ext/ming <ext-ming>`
  * :ref:`ext/mongo <ext-mongo>`
  * :ref:`ext/mssql <ext-mssql>`
  * :ref:`ext/mysql <ext-mysql>`
  * :ref:`ext/mysqli <ext-mysqli>`
  * :ref:`ext/ob <ext-ob>`
  * :ref:`ext/oci8 <ext-oci8>`
  * :ref:`ext/odbc <ext-odbc>`
  * :ref:`ext/opcache <ext-opcache>`
  * :ref:`ext/openssl <ext-openssl>`
  * :ref:`ext/parsekit <ext-parsekit>`
  * :ref:`ext/password <ext-password>`
  * :ref:`ext/pcntl <ext-pcntl>`
  * :ref:`ext/pcre <ext-pcre>`
  * :ref:`ext/pdo <ext-pdo>`
  * :ref:`ext/pecl_http <ext-pecl\_http>`
  * :ref:`ext/pgsql <ext-pgsql>`
  * :ref:`ext/phalcon <ext-phalcon>`
  * :ref:`ext/phar <ext-phar>`
  * :ref:`ext/php-ast <ext-php-ast>`
  * :ref:`ext/posix <ext-posix>`
  * :ref:`ext/proctitle <ext-proctitle>`
  * :ref:`ext/pspell <ext-pspell>`
  * :ref:`ext/readline <ext-readline>`
  * :ref:`ext/recode <ext-recode>`
  * :ref:`ext/redis <ext-redis>`
  * :ref:`ext/reflection <ext-reflection>`
  * :ref:`ext/runkit <ext-runkit>`
  * :ref:`ext/sem <ext-sem>`
  * :ref:`ext/session <ext-session>`
  * :ref:`ext/shmop <ext-shmop>`
  * :ref:`ext/simplexml <ext-simplexml>`
  * :ref:`ext/snmp <ext-snmp>`
  * :ref:`ext/soap <ext-soap>`
  * :ref:`ext/sockets <ext-sockets>`
  * :ref:`ext/spl <ext-spl>`
  * :ref:`ext/sqlite <ext-sqlite>`
  * :ref:`ext/sqlite3 <ext-sqlite3>`
  * :ref:`ext/sqlsrv <ext-sqlsrv>`
  * :ref:`ext/ssh2 <ext-ssh2>`
  * :ref:`ext/standard <ext-standard>`
  * :ref:`ext/suhosin <ext-suhosin>`
  * :ref:`ext/tidy <ext-tidy>`
  * :ref:`ext/tokenizer <ext-tokenizer>`
  * :ref:`ext/tokyotyrant <ext-tokyotyrant>`
  * :ref:`ext/trader <ext-trader>`
  * :ref:`ext/v8js <ext-v8js>`
  * :ref:`ext/wddx <ext-wddx>`
  * :ref:`ext/wikidiff2 <ext-wikidiff2>`
  * :ref:`ext/wincache <ext-wincache>`
  * :ref:`ext/xcache <ext-xcache>`
  * :ref:`ext/xdebug <ext-xdebug>`
  * :ref:`ext/xdiff <ext-xdiff>`
  * :ref:`ext/xhprof <ext-xhprof>`
  * :ref:`ext/xml <ext-xml>`
  * :ref:`ext/xmlreader <ext-xmlreader>`
  * :ref:`ext/xmlrpc <ext-xmlrpc>`
  * :ref:`ext/xmlwriter <ext-xmlwriter>`
  * :ref:`ext/xsl <ext-xsl>`
  * :ref:`ext/yaml <ext-yaml>`
  * :ref:`ext/yis <ext-yis>`
  * :ref:`ext/zip <ext-zip>`
  * :ref:`ext/zlib <ext-zlib>`
  * :ref:`func_get_arg() Modified <func\_get\_arg()-modified>`
  * :ref:`include_once() Usage <include\_once()-usage>`
  * :ref:`isset() With Constant <isset()-with-constant>`
  * :ref:`list() May Omit Variables <list()-may-omit-variables>`
  * :ref:`mcrypt_create_iv() With Default Values <mcrypt\_create\_iv()-with-default-values>`
  * :ref:`parse_str() Warning <parse\_str()-warning>`
  * :ref:`preg_match_all() Flag <preg\_match\_all()-flag>`
  * :ref:`preg_replace With Option e <preg\_replace-with-option-e>`
  * :ref:`set_exception_handler() Warning <set\_exception\_handler()-warning>`
  * :ref:`var_dump()... Usage <var\_dump()...-usage>`

* 0.8.3

  * :ref:`Variable Global <variable-global>`




Directory by PHP Function
-------------------------

+ ` `
    + ` xmlwriter_open_memory()`

      + :ref:`ext/xmlwriter <ext-xmlwriter>`


+ `$`
    + `$HTTP_RAW_POST_DATA`

      + :ref:`$HTTP_RAW_POST_DATA Usage <$http\_raw\_post\_data-usage>`

    + `$_ENV`

      + :ref:`Incoming Variables <incoming-variables>`
      + :ref:`Uses Environment <uses-environment>`
      + :ref:`No Hardcoded Port <no-hardcoded-port>`
      + :ref:`Useless Global <useless-global>`
      + :ref:`Incoming Variable Index Inventory <incoming-variable-index-inventory>`

    + `$_GET`

      + :ref:`ext/gd <ext-gd>`
      + :ref:`ext/pcre <ext-pcre>`
      + :ref:`Avoid mb_dectect_encoding() <avoid-mb\_dectect\_encoding()>`
      + :ref:`Cast Usage <cast-usage>`
      + :ref:`Incoming Values <incoming-values>`
      + :ref:`Incoming Variables <incoming-variables>`
      + :ref:`Safe Phpvariables <safe-phpvariables>`
      + :ref:`Should Use Coalesce <should-use-coalesce>`
      + :ref:`Super Global Usage <super-global-usage>`
      + :ref:`Use Web <use-web>`
      + :ref:`Always Anchor Regex <always-anchor-regex>`
      + :ref:`Direct Injection <direct-injection>`
      + :ref:`filter_input() As A Source <filter\_input()-as-a-source>`
      + :ref:`GPRC Aliases <gprc-aliases>`
      + :ref:`Indirect Injection <indirect-injection>`
      + :ref:`Integer Conversion <integer-conversion>`
      + :ref:`Eval() Usage <eval()-usage>`
      + :ref:`Implied If <implied-if>`
      + :ref:`Don't Change Incomings <don't-change-incomings>`
      + :ref:`Repeated Regex <repeated-regex>`
      + :ref:`Useless Global <useless-global>`
      + :ref:`Incoming Variable Index Inventory <incoming-variable-index-inventory>`
      + :ref:`PHP Variables <php-variables>`

    + `$_POST`

      + :ref:`Crypto Usage <crypto-usage>`
      + :ref:`PHP Keywords As Names <php-keywords-as-names>`
      + :ref:`Super Global Usage <super-global-usage>`
      + :ref:`GPRC Aliases <gprc-aliases>`
      + :ref:`Indirect Injection <indirect-injection>`
      + :ref:`Register Globals <register-globals>`
      + :ref:`Don't Change Incomings <don't-change-incomings>`
      + :ref:`Useless Global <useless-global>`
      + :ref:`Incoming Variable Index Inventory <incoming-variable-index-inventory>`
      + :ref:`All Uppercase Variables <all-uppercase-variables>`

    + `$_REQUEST`

      + :ref:`Super Global Usage <super-global-usage>`
      + :ref:`GPRC Aliases <gprc-aliases>`
      + :ref:`Indirect Injection <indirect-injection>`
      + :ref:`Register Globals <register-globals>`
      + :ref:`Useless Global <useless-global>`
      + :ref:`Incoming Variable Index Inventory <incoming-variable-index-inventory>`

    + `$this`

      + :ref:`Accessing Private <accessing-private>`
      + :ref:`Avoid Optional Properties <avoid-optional-properties>`
      + :ref:`Avoid option arrays in constructors <avoid-option-arrays-in-constructors>`
      + :ref:`Check On __Call Usage <check-on-\_\_call-usage>`
      + :ref:`Could Be Class Constant <could-be-class-constant>`
      + :ref:`Property Could Be Private Property <property-could-be-private-property>`
      + :ref:`Method Could Be Private Method <method-could-be-private-method>`
      + :ref:`Could Be Protected Method <could-be-protected-method>`
      + :ref:`Could Be Protected Property <could-be-protected-property>`
      + :ref:`Method Could Be Static <method-could-be-static>`
      + :ref:`Cyclic References <cyclic-references>`
      + :ref:`Law of Demeter <law-of-demeter>`
      + :ref:`Dependant Abstract Classes <dependant-abstract-classes>`
      + :ref:`No Direct Call To Magic Method <no-direct-call-to-magic-method>`
      + :ref:`Disconnected Classes <disconnected-classes>`
      + :ref:`Don't Send $this In Constructor <don't-send-$this-in-constructor>`
      + :ref:`Dynamic Self Calls <dynamic-self-calls>`
      + :ref:`Class Has Fluent Interface <class-has-fluent-interface>`
      + :ref:`Insufficient Property Typehint <insufficient-property-typehint>`
      + :ref:`Is A PHP Magic Property <is-a-php-magic-property>`
      + :ref:`Locally Unused Property <locally-unused-property>`
      + :ref:`Locally Used Property <locally-used-property>`
      + :ref:`Assign Default To Properties <assign-default-to-properties>`
      + :ref:`Make Global A Property <make-global-a-property>`
      + :ref:`Make Magic Concrete <make-magic-concrete>`
      + :ref:`Method Used Below <method-used-below>`
      + :ref:`No Magic Method With Array <no-magic-method-with-array>`
      + :ref:`Non Nullable Getters <non-nullable-getters>`
      + :ref:`Non Static Methods Called In A Static <non-static-methods-called-in-a-static>`
      + :ref:`Parent First <parent-first>`
      + :ref:`Property Could Be Local <property-could-be-local>`
      + :ref:`Never Used Properties <never-used-properties>`
      + :ref:`Property Used Above <property-used-above>`
      + :ref:`Property Used Below <property-used-below>`
      + :ref:`Property Used In One Method Only <property-used-in-one-method-only>`
      + :ref:`Internally Used Properties <internally-used-properties>`
      + :ref:`Redefined Default <redefined-default>`
      + :ref:`Scalar Or Object Property <scalar-or-object-property>`
      + :ref:`Should Deep Clone <should-deep-clone>`
      + :ref:`Should Have Destructor <should-have-destructor>`
      + :ref:`Should Use Local Class <should-use-local-class>`
      + :ref:`Static Methods Can't Contain $this <static-methods-can't-contain-$this>`
      + :ref:`Static Methods Called From Object <static-methods-called-from-object>`
      + :ref:`$this Belongs To Classes Or Traits <$this-belongs-to-classes-or-traits>`
      + :ref:`$this Is Not An Array <$this-is-not-an-array>`
      + :ref:`$this Is Not For Static Methods <$this-is-not-for-static-methods>`
      + :ref:`Throw In Destruct <throw-in-destruct>`
      + :ref:`Too Many Injections <too-many-injections>`
      + :ref:`DI Cyclic Dependencies <di-cyclic-dependencies>`
      + :ref:`Wrong Access Style to Property <wrong-access-style-to-property>`
      + :ref:`Undefined Properties <undefined-properties>`
      + :ref:`Uninitialized Property <uninitialized-property>`
      + :ref:`Unitialized Properties <unitialized-properties>`
      + :ref:`Unused Methods <unused-methods>`
      + :ref:`Unused Private Methods <unused-private-methods>`
      + :ref:`Unused Private Properties <unused-private-properties>`
      + :ref:`Unused Protected Methods <unused-protected-methods>`
      + :ref:`Used Methods <used-methods>`
      + :ref:`Used Once Property <used-once-property>`
      + :ref:`Used Private Methods <used-private-methods>`
      + :ref:`Used Static Properties <used-static-properties>`
      + :ref:`Used Protected Method <used-protected-method>`
      + :ref:`Useless Typehint <useless-typehint>`
      + :ref:`Use This <use-this>`
      + :ref:`Using $this Outside A Class <using-$this-outside-a-class>`
      + :ref:`Wrong Typed Property Default <wrong-typed-property-default>`
      + :ref:`Create Default Values <create-default-values>`
      + :ref:`Create Magic Property <create-magic-property>`
      + :ref:`Make Class Method Definition <make-class-method-definition>`
      + :ref:`Set Class Property Definition With Typehint <set-class-property-definition-with-typehint>`
      + :ref:`Set Clone Link <set-clone-link>`
      + :ref:`Solve Trait Methods <solve-trait-methods>`
      + :ref:`Long Preparation For Throw <long-preparation-for-throw>`
      + :ref:`Cannot Use Static For Closure <cannot-use-static-for-closure>`
      + :ref:`Could Be Static Closure <could-be-static-closure>`
      + :ref:`Method Has Fluent Interface <method-has-fluent-interface>`
      + :ref:`Method Has No Fluent Interface <method-has-no-fluent-interface>`
      + :ref:`Must Return Methods <must-return-methods>`
      + :ref:`Unbinding Closures <unbinding-closures>`
      + :ref:`Wrong Number Of Arguments In Methods <wrong-number-of-arguments-in-methods>`
      + :ref:`Interfaces Don't Ensure Properties <interfaces-don't-ensure-properties>`
      + :ref:`Courier Anti-Pattern <courier-anti-pattern>`
      + :ref:`Dependency Injection <dependency-injection>`
      + :ref:`Memoize MagicCall <memoize-magiccall>`
      + :ref:`Closure May Use $this <closure-may-use-$this>`
      + :ref:`Could Use Promoted Properties <could-use-promoted-properties>`
      + :ref:`__debugInfo() Usage <\_\_debuginfo()-usage>`
      + :ref:`Union Typehint <union-typehint>`
      + :ref:`Typed Property Usage <typed-property-usage>`
      + :ref:`Minus One On Error <minus-one-on-error>`
      + :ref:`Too Complex Expression <too-complex-expression>`
      + :ref:`Avoid Large Array Assignation <avoid-large-array-assignation>`
      + :ref:`More Than One Level Of Indentation <more-than-one-level-of-indentation>`
      + :ref:`Property Variable Confusion <property-variable-confusion>`
      + :ref:`Set Aside Code <set-aside-code>`
      + :ref:`__toString() Throws Exception <\_\_tostring()-throws-exception>`
      + :ref:`var_dump()... Usage <var\_dump()...-usage>`
      + :ref:`Dependant Trait <dependant-trait>`
      + :ref:`Locally Used Property In Trait <locally-used-property-in-trait>`
      + :ref:`Unused Trait In Class <unused-trait-in-class>`
      + :ref:`Complex Dynamic Names <complex-dynamic-names>`
      + :ref:`Used Once Variables <used-once-variables>`


+ `(`
    + `()`

      + :ref:`Could Be Parent Method <could-be-parent-method>`
      + :ref:`Property Could Be Private Property <property-could-be-private-property>`
      + :ref:`Method Could Be Private Method <method-could-be-private-method>`
      + :ref:`Defined Parent MP <defined-parent-mp>`
      + :ref:`Law of Demeter <law-of-demeter>`
      + :ref:`Class Should Be Final By Ocramius <class-should-be-final-by-ocramius>`
      + :ref:`Fossilized Method <fossilized-method>`
      + :ref:`Insufficient Property Typehint <insufficient-property-typehint>`
      + :ref:`Is Interface Method <is-interface-method>`
      + :ref:`Non Static Methods Called In A Static <non-static-methods-called-in-a-static>`
      + :ref:`Order Of Declaration <order-of-declaration>`
      + :ref:`Never Used Properties <never-used-properties>`
      + :ref:`Property Used In One Method Only <property-used-in-one-method-only>`
      + :ref:`Unused Protected Methods <unused-protected-methods>`
      + :ref:`Useless Typehint <useless-typehint>`
      + :ref:`Follow Closure Definition <follow-closure-definition>`
      + :ref:`Solve Trait Methods <solve-trait-methods>`
      + :ref:`ext/async <ext-async>`
      + :ref:`ext/ev <ext-ev>`
      + :ref:`ext/newt <ext-newt>`
      + :ref:`ext/reflection <ext-reflection>`
      + :ref:`Callback Function Needs Return <callback-function-needs-return>`
      + :ref:`Cannot Use Static For Closure <cannot-use-static-for-closure>`
      + :ref:`Exceeding Typehint <exceeding-typehint>`
      + :ref:`Fallback Function <fallback-function>`
      + :ref:`Is Generator <is-generator>`
      + :ref:`No Literal For Reference <no-literal-for-reference>`
      + :ref:`No Return Used <no-return-used>`
      + :ref:`Real Functions <real-functions>`
      + :ref:`Should Yield With Key <should-yield-with-key>`
      + :ref:`Too Many Local Variables <too-many-local-variables>`
      + :ref:`Too Much Indented <too-much-indented>`
      + :ref:`Unbinding Closures <unbinding-closures>`
      + :ref:`Wrong Function Name Case <wrong-function-name-case>`
      + :ref:`Interfaces Don't Ensure Properties <interfaces-don't-ensure-properties>`
      + :ref:`Possible Interfaces <possible-interfaces>`
      + :ref:`Memoize MagicCall <memoize-magiccall>`
      + :ref:`Crc32() Might Be Negative <crc32()-might-be-negative>`
      + :ref:`idn_to_ascii() New Default <idn\_to\_ascii()-new-default>`
      + :ref:`PHP 7.1 Scalar Typehints <php-7.1-scalar-typehints>`
      + :ref:`Wrong Attribute Configuration <wrong-attribute-configuration>`
      + :ref:`Directly Use File <directly-use-file>`
      + :ref:`Don't Loop On Yield <don't-loop-on-yield>`
      + :ref:`Max Level Of Nesting <max-level-of-nesting>`
      + :ref:`Could Use Trait <could-use-trait>`
      + :ref:`Undefined Insteadof <undefined-insteadof>`
      + :ref:`PHP5 Indirect Variable Expression <php5-indirect-variable-expression>`
      + :ref:`Non Ascii Variables <non-ascii-variables>`


+ `*`
    + `**`

      + :ref:`Modify Immutable <modify-immutable>`
      + :ref:`Composer Namespace <composer-namespace>`
      + :ref:`ext/bcmath <ext-bcmath>`
      + :ref:`ext/decimal <ext-decimal>`
      + :ref:`ext/reflection <ext-reflection>`
      + :ref:`ext/sdl <ext-sdl>`
      + :ref:`Mismatch Type And Default <mismatch-type-and-default>`
      + :ref:`Only Variable Passed By Reference <only-variable-passed-by-reference>`
      + :ref:`Using Deprecated Method <using-deprecated-method>`
      + :ref:`Exponent Usage <exponent-usage>`
      + :ref:`** For Exponent <**-for-exponent>`
      + :ref:`Constant Scalar Expressions <constant-scalar-expressions>`
      + :ref:`Negative Power <negative-power>`
      + :ref:`Unused Traits <unused-traits>`
      + :ref:`Drupal Usage <drupal-usage>`
      + :ref:`Laravel usage <laravel-usage>`
      + :ref:`Symfony usage <symfony-usage>`


+ `.`
    + `...`

      + :ref:`No Spread For Hash <no-spread-for-hash>`
      + :ref:`Ambiguous Static <ambiguous-static>`
      + :ref:`Check On __Call Usage <check-on-\_\_call-usage>`
      + :ref:`Static Properties <static-properties>`
      + :ref:`Used Once Property <used-once-property>`
      + :ref:`Constant Dynamic Creation <constant-dynamic-creation>`
      + :ref:`ext/ffi <ext-ffi>`
      + :ref:`ext/ldap <ext-ldap>`
      + :ref:`ext/phalcon <ext-phalcon>`
      + :ref:`ext/sockets <ext-sockets>`
      + :ref:`ext/xattr <ext-xattr>`
      + :ref:`Method Has Fluent Interface <method-has-fluent-interface>`
      + :ref:`Mismatch Parameter Name <mismatch-parameter-name>`
      + :ref:`Multiple Definition Of The Same Argument <multiple-definition-of-the-same-argument>`
      + :ref:`Must Return Methods <must-return-methods>`
      + :ref:`Unknown Parameter Name <unknown-parameter-name>`
      + :ref:`No array_merge() In Loops <no-array\_merge()-in-loops>`
      + :ref:`Ellipsis Usage <ellipsis-usage>`
      + :ref:`PHP 80 Named Parameter Variadic <php-80-named-parameter-variadic>`
      + :ref:`Reserved Keywords In PHP 7 <reserved-keywords-in-php-7>`
      + :ref:`Signature Trailing Comma <signature-trailing-comma>`
      + :ref:`Spread Operator For Array <spread-operator-for-array>`
      + :ref:`Unpacking Inside Arrays <unpacking-inside-arrays>`
      + :ref:`array_merge() And Variadic <array\_merge()-and-variadic>`
      + :ref:`File Usage <file-usage>`
      + :ref:`Iffectations <iffectations>`
      + :ref:`Repeated Regex <repeated-regex>`
      + :ref:`Should Use Operator <should-use-operator>`
      + :ref:`Useless Instructions <useless-instructions>`
      + :ref:`Pack Format Inventory <pack-format-inventory>`
      + :ref:`Yii usage <yii-usage>`


+ `@`
    + `@`

      + :ref:`ext/mssql <ext-mssql>`
      + :ref:`ext/yaml <ext-yaml>`
      + :ref:`Use PHP Attributes <use-php-attributes>`
      + :ref:`Too Complex Expression <too-complex-expression>`
      + :ref:`@ Operator <@-operator>`
      + :ref:`Useless Instructions <useless-instructions>`
      + :ref:`Email Addresses <email-addresses>`
      + :ref:`Invalid Octal In String <invalid-octal-in-string>`
      + :ref:`Remove Noscream @ <remove-noscream-@>`


+ `A`
    + `AF_INET`

      + :ref:`ext/sockets <ext-sockets>`

    + `AMQPChannel`

      + :ref:`ext/amqp <ext-amqp>`

    + `AMQPConnection`

      + :ref:`ext/amqp <ext-amqp>`

    + `ArrayAccess`

      + :ref:`$this Is Not An Array <$this-is-not-an-array>`
      + :ref:`Is An Extension Interface <is-an-extension-interface>`

    + `ArrayIterator`

      + :ref:`PHP 7.1 Scalar Typehints <php-7.1-scalar-typehints>`

    + `ArrayObject`

      + :ref:`Avoid get_object_vars() <avoid-get\_object\_vars()>`

    + `Array_search()`

      + :ref:`Find Key Directly <find-key-directly>`

    + `abs()`

      + :ref:`Always Positive Comparison <always-positive-comparison>`
      + :ref:`No Real Comparison <no-real-comparison>`

    + `addslashes()`

      + :ref:`Filter To add_slashes() <filter-to-add\_slashes()>`

    + `array()`

      + :ref:`Array() / [  ] Consistence <array()---[--]-consistence>`
      + :ref:`Short Syntax For Arrays <short-syntax-for-arrays>`
      + :ref:`Empty Final Element <empty-final-element>`
      + :ref:`Preprocess Arrays <preprocess-arrays>`
      + :ref:`String Initialization <string-initialization>`
      + :ref:`Too Many Array Dimensions <too-many-array-dimensions>`
      + :ref:`Could Be Class Constant <could-be-class-constant>`
      + :ref:`Don't Send $this In Constructor <don't-send-$this-in-constructor>`
      + :ref:`No Magic Method With Array <no-magic-method-with-array>`
      + :ref:`Useless Typehint <useless-typehint>`
      + :ref:`ext/xml <ext-xml>`
      + :ref:`Mismatched Default Arguments <mismatched-default-arguments>`
      + :ref:`Mismatch Type And Default <mismatch-type-and-default>`
      + :ref:`No array_merge() In Loops <no-array\_merge()-in-loops>`
      + :ref:`Memoize MagicCall <memoize-magiccall>`
      + :ref:`Avoid Concat In Loop <avoid-concat-in-loop>`
      + :ref:`Group Use Trailing Comma <group-use-trailing-comma>`
      + :ref:`List With Appends <list-with-appends>`
      + :ref:`Should Use array_column() <should-use-array\_column()>`
      + :ref:`Should Use array_filter() <should-use-array\_filter()>`
      + :ref:`Too Many Native Calls <too-many-native-calls>`
      + :ref:`PSR-3 Usage <psr-3-usage>`
      + :ref:`array_merge() And Variadic <array\_merge()-and-variadic>`
      + :ref:`Array_merge Needs Array Of Arrays <array\_merge-needs-array-of-arrays>`
      + :ref:`Constant Scalar Expressions <constant-scalar-expressions>`
      + :ref:`Could Use array_unique <could-use-array\_unique>`
      + :ref:`More Than One Level Of Indentation <more-than-one-level-of-indentation>`
      + :ref:`Confusing Names <confusing-names>`

    + `array_change_key_case()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `array_chunk()`

      + :ref:`Use Array Functions <use-array-functions>`

    + `array_column()`

      + :ref:`Should Use array_column() <should-use-array\_column()>`
      + :ref:`Use Array Functions <use-array-functions>`

    + `array_count_values()`

      + :ref:`Slow Functions <slow-functions>`
      + :ref:`Avoid array_unique() <avoid-array\_unique()>`

    + `array_diff()`

      + :ref:`Slow Functions <slow-functions>`

    + `array_fill()`

      + :ref:`Array_Fill() With Objects <array\_fill()-with-objects>`

    + `array_fill_keys()`

      + :ref:`Array_Fill() With Objects <array\_fill()-with-objects>`
      + :ref:`Could Use array_fill_keys <could-use-array\_fill\_keys>`

    + `array_filter()`

      + :ref:`Should Use array_filter() <should-use-array\_filter()>`
      + :ref:`Use Array Functions <use-array-functions>`

    + `array_flip()`

      + :ref:`Double array_flip() <double-array\_flip()>`
      + :ref:`Slow Functions <slow-functions>`
      + :ref:`Avoid array_unique() <avoid-array\_unique()>`

    + `array_intersect()`

      + :ref:`Slow Functions <slow-functions>`

    + `array_key_exists()`

      + :ref:`array_key_exists() Speedup <array\_key\_exists()-speedup>`
      + :ref:`Always Use Function With array_key_exists() <always-use-function-with-array\_key\_exists()>`
      + :ref:`Slow Functions <slow-functions>`
      + :ref:`array_key_exists() Works On Arrays <array\_key\_exists()-works-on-arrays>`

    + `array_keys()`

      + :ref:`Slow Functions <slow-functions>`
      + :ref:`Searching For Multiple Keys <searching-for-multiple-keys>`
      + :ref:`Find Key Directly <find-key-directly>`
      + :ref:`Avoid array_unique() <avoid-array\_unique()>`

    + `array_map()`

      + :ref:`Handle Arrays With Callback <handle-arrays-with-callback>`
      + :ref:`Callback Function Needs Return <callback-function-needs-return>`
      + :ref:`Could Be Typehinted Callable <could-be-typehinted-callable>`
      + :ref:`Slow Functions <slow-functions>`
      + :ref:`Altering Foreach Without Reference <altering-foreach-without-reference>`
      + :ref:`Array_Map() Passes By Value <array\_map()-passes-by-value>`

    + `array_merge()`

      + :ref:`No array_merge() In Loops <no-array\_merge()-in-loops>`
      + :ref:`Unpacking Inside Arrays <unpacking-inside-arrays>`
      + :ref:`array_merge() And Variadic <array\_merge()-and-variadic>`
      + :ref:`Array_merge Needs Array Of Arrays <array\_merge-needs-array-of-arrays>`
      + :ref:`Use Array Functions <use-array-functions>`

    + `array_merge_recursive()`

      + :ref:`No array_merge() In Loops <no-array\_merge()-in-loops>`
      + :ref:`array_merge() And Variadic <array\_merge()-and-variadic>`

    + `array_multisort()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `array_pad()`

      + :ref:`Array_Fill() With Objects <array\_fill()-with-objects>`

    + `array_product()`

      + :ref:`Use Array Functions <use-array-functions>`

    + `array_push()`

      + :ref:`Avoid array_push() <avoid-array\_push()>`
      + :ref:`Should Use Operator <should-use-operator>`
      + :ref:`Use Array Functions <use-array-functions>`

    + `array_replace()`

      + :ref:`Useless Instructions <useless-instructions>`

    + `array_search()`

      + :ref:`Slow Functions <slow-functions>`
      + :ref:`Searching For Multiple Keys <searching-for-multiple-keys>`
      + :ref:`Find Key Directly <find-key-directly>`
      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `array_shift()`

      + :ref:`Should Use Foreach <should-use-foreach>`

    + `array_slice()`

      + :ref:`Use Array Functions <use-array-functions>`

    + `array_splice()`

      + :ref:`Use array_slice() <use-array\_slice()>`

    + `array_sum()`

      + :ref:`Callback Function Needs Return <callback-function-needs-return>`
      + :ref:`Avoid Concat In Loop <avoid-concat-in-loop>`
      + :ref:`For Using Functioncall <for-using-functioncall>`
      + :ref:`Static Loop <static-loop>`
      + :ref:`Use Array Functions <use-array-functions>`

    + `array_udiff()`

      + :ref:`Slow Functions <slow-functions>`

    + `array_uintersect()`

      + :ref:`Slow Functions <slow-functions>`

    + `array_unique()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`Slow Functions <slow-functions>`
      + :ref:`Could Use array_unique <could-use-array\_unique>`
      + :ref:`Avoid array_unique() <avoid-array\_unique()>`

    + `array_unshift()`

      + :ref:`Slow Functions <slow-functions>`

    + `array_values()`

      + :ref:`Pathinfo() Returns May Vary <pathinfo()-returns-may-vary>`

    + `array_walk()`

      + :ref:`Slow Functions <slow-functions>`
      + :ref:`Altering Foreach Without Reference <altering-foreach-without-reference>`
      + :ref:`Array_Map() Passes By Value <array\_map()-passes-by-value>`

    + `arrayaccess`

      + :ref:`$this Is Not An Array <$this-is-not-an-array>`

    + `arrayobject`

      + :ref:`$this Is Not An Array <$this-is-not-an-array>`

    + `arsort()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `asort()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `assert()`

      + :ref:`Assert Function Is Reserved <assert-function-is-reserved>`
      + :ref:`PHP 7.2 Deprecations <php-7.2-deprecations>`


+ `B`
    + `Break`

      + :ref:`Break With 0 <break-with-0>`
      + :ref:`Switch Fallthrough <switch-fallthrough>`

    + `basename()`

      + :ref:`Use pathinfo() Arguments <use-pathinfo()-arguments>`
      + :ref:`Use Basename Suffix <use-basename-suffix>`

    + `break`

      + :ref:`Negative Start Index In Array <negative-start-index-in-array>`
      + :ref:`Long Preparation For Throw <long-preparation-for-throw>`
      + :ref:`ext/expect <ext-expect>`
      + :ref:`ext/gearman <ext-gearman>`
      + :ref:`ext/gender <ext-gender>`
      + :ref:`ext/libxml <ext-libxml>`
      + :ref:`ext/pcntl <ext-pcntl>`
      + :ref:`ext/tokenizer <ext-tokenizer>`
      + :ref:`Simple Switch <simple-switch>`
      + :ref:`PHP Handlers Usage <php-handlers-usage>`
      + :ref:`Break With 0 <break-with-0>`
      + :ref:`Break With Non Integer <break-with-non-integer>`
      + :ref:`Break Outside Loop <break-outside-loop>`
      + :ref:`Continue Is For Loop <continue-is-for-loop>`
      + :ref:`Could Use Match <could-use-match>`
      + :ref:`Exit() Usage <exit()-usage>`
      + :ref:`Switch Fallthrough <switch-fallthrough>`
      + :ref:`Long Arguments <long-arguments>`
      + :ref:`Missing Cases In Switch <missing-cases-in-switch>`
      + :ref:`Multiples Identical Case <multiples-identical-case>`
      + :ref:`No Need For Else <no-need-for-else>`
      + :ref:`No Return Or Throw In Finally <no-return-or-throw-in-finally>`
      + :ref:`Several Instructions On The Same Line <several-instructions-on-the-same-line>`
      + :ref:`Switch To Switch <switch-to-switch>`
      + :ref:`Switch With Too Many Default <switch-with-too-many-default>`
      + :ref:`Switch Without Default <switch-without-default>`
      + :ref:`Unconditional Break In Loop <unconditional-break-in-loop>`
      + :ref:`Unreachable Code <unreachable-code>`
      + :ref:`Use Case Value <use-case-value>`
      + :ref:`Useless Switch <useless-switch>`


+ `C`
    + `CAL_GREGORIAN`

      + :ref:`ext/calendar <ext-calendar>`

    + `COM`

      + :ref:`ext/com <ext-com>`

    + `COUNT_NORMAL`

      + :ref:`Use Count Recursive <use-count-recursive>`

    + `COUNT_RECURSIVE`

      + :ref:`Use Count Recursive <use-count-recursive>`

    + `CURLOPT_FILE`

      + :ref:`ext/curl <ext-curl>`

    + `CURLOPT_HEADER`

      + :ref:`ext/curl <ext-curl>`

    + `CURLOPT_SSL_VERIFYPEER`

      + :ref:`Safe Curl Options <safe-curl-options>`

    + `CURLOPT_URL`

      + :ref:`Safe Curl Options <safe-curl-options>`

    + `CURLPIPE_HTTP1`

      + :ref:`PHP 7.4 Constant Deprecation <php-7.4-constant-deprecation>`

    + `CURLVERSION_NOW`

      + :ref:`curl_version() Has No Argument <curl\_version()-has-no-argument>`

    + `Cairo`

      + :ref:`ext/cairo <ext-cairo>`

    + `CairoContext`

      + :ref:`ext/cairo <ext-cairo>`

    + `CairoPSSurface`

      + :ref:`ext/cairo <ext-cairo>`

    + `Closure`

      + :ref:`Follow Closure Definition <follow-closure-definition>`
      + :ref:`Closure Could Be A Callback <closure-could-be-a-callback>`
      + :ref:`Closures Glossary <closures-glossary>`
      + :ref:`Could Be Static Closure <could-be-static-closure>`
      + :ref:`Argument Should Be Typehinted <argument-should-be-typehinted>`
      + :ref:`Unused Inherited Variable In Closure <unused-inherited-variable-in-closure>`
      + :ref:`Use Closure Trailing Comma <use-closure-trailing-comma>`

    + `Collator`

      + :ref:`ext/intl <ext-intl>`

    + `Compact()`

      + :ref:`Compact Inexistant Variable <compact-inexistant-variable>`
      + :ref:`Could Use Compact <could-use-compact>`

    + `Concurrent Task`

      + :ref:`ext/async <ext-async>`

    + `Count()`

      + :ref:`Uses Default Values <uses-default-values>`
      + :ref:`Can't Count Non-Countable <can't-count-non-countable>`

    + `Countable`

      + :ref:`PHP Interfaces <php-interfaces>`
      + :ref:`Use is_countable <use-is\_countable>`
      + :ref:`Can't Count Non-Countable <can't-count-non-countable>`

    + `cairo`

      + :ref:`ext/cairo <ext-cairo>`
      + :ref:`Use PHP Object API <use-php-object-api>`

    + `call_user_func()`

      + :ref:`Should Use Operator <should-use-operator>`

    + `call_user_method()`

      + :ref:`PHP 7.0 Removed Functions <php-7.0-removed-functions>`

    + `call_user_method_array()`

      + :ref:`PHP 7.0 Removed Functions <php-7.0-removed-functions>`

    + `chdir()`

      + :ref:`No Hardcoded Path <no-hardcoded-path>`

    + `chmod()`

      + :ref:`Keep Files Access Restricted <keep-files-access-restricted>`

    + `chr()`

      + :ref:`Should Preprocess Chr() <should-preprocess-chr()>`
      + :ref:`Should Use Operator <should-use-operator>`

    + `chroot()`

      + :ref:`No Hardcoded Path <no-hardcoded-path>`

    + `class_alias()`

      + :ref:`Set Class_Alias Definition <set-class\_alias-definition>`

    + `class_exists()`

      + :ref:`Undefined ::class <undefined-class>`

    + `closure`

      + :ref:`Parent, Static Or Self Outside Class <parent,-static-or-self-outside-class>`
      + :ref:`Should Use Local Class <should-use-local-class>`
      + :ref:`Using $this Outside A Class <using-$this-outside-a-class>`
      + :ref:`Follow Closure Definition <follow-closure-definition>`
      + :ref:`Propagate Calls <propagate-calls>`
      + :ref:`Collect Parameter Counts <collect-parameter-counts>`
      + :ref:`Cannot Use Static For Closure <cannot-use-static-for-closure>`
      + :ref:`Closure Could Be A Callback <closure-could-be-a-callback>`
      + :ref:`Closures Glossary <closures-glossary>`
      + :ref:`Could Be Typehinted Callable <could-be-typehinted-callable>`
      + :ref:`Could Be Static Closure <could-be-static-closure>`
      + :ref:`Function With Dynamic Code <function-with-dynamic-code>`
      + :ref:`Functions Glossary <functions-glossary>`
      + :ref:`Multiple Identical Closure <multiple-identical-closure>`
      + :ref:`Multiple Definition Of The Same Argument <multiple-definition-of-the-same-argument>`
      + :ref:`Real Functions <real-functions>`
      + :ref:`Semantic Typing <semantic-typing>`
      + :ref:`Unbinding Closures <unbinding-closures>`
      + :ref:`Unused Inherited Variable In Closure <unused-inherited-variable-in-closure>`
      + :ref:`Hidden Use Expression <hidden-use-expression>`
      + :ref:`Avoid set_error_handler $context Argument <avoid-set\_error\_handler-$context-argument>`
      + :ref:`Closure May Use $this <closure-may-use-$this>`
      + :ref:`Should Use array_filter() <should-use-array\_filter()>`
      + :ref:`Use Closure Trailing Comma <use-closure-trailing-comma>`
      + :ref:`preg_replace With Option e <preg\_replace-with-option-e>`
      + :ref:`No Static Variable In A Method <no-static-variable-in-a-method>`

    + `collator_compare()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `collator_get_sort_key()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `com`

      + :ref:`Empty Final Element <empty-final-element>`
      + :ref:`Multidimensional Arrays <multidimensional-arrays>`
      + :ref:`Null Or Boolean Arrays <null-or-boolean-arrays>`
      + :ref:`Modify Immutable <modify-immutable>`
      + :ref:`Abstract Static Methods <abstract-static-methods>`
      + :ref:`Avoid Optional Properties <avoid-optional-properties>`
      + :ref:`Avoid option arrays in constructors <avoid-option-arrays-in-constructors>`
      + :ref:`Cant Instantiate Class <cant-instantiate-class>`
      + :ref:`Check On __Call Usage <check-on-\_\_call-usage>`
      + :ref:`Constant Class <constant-class>`
      + :ref:`Could Be Abstract Class <could-be-abstract-class>`
      + :ref:`Cyclic References <cyclic-references>`
      + :ref:`No Direct Call To Magic Method <no-direct-call-to-magic-method>`
      + :ref:`Don't Send $this In Constructor <don't-send-$this-in-constructor>`
      + :ref:`Don't Unset Properties <don't-unset-properties>`
      + :ref:`Class Has Fluent Interface <class-has-fluent-interface>`
      + :ref:`Immutable Signature <immutable-signature>`
      + :ref:`Implemented Methods Are Public <implemented-methods-are-public>`
      + :ref:`Multiple Classes In One File <multiple-classes-in-one-file>`
      + :ref:`Scalar Or Object Property <scalar-or-object-property>`
      + :ref:`Should Deep Clone <should-deep-clone>`
      + :ref:`Should Have Destructor <should-have-destructor>`
      + :ref:`Too Many Children <too-many-children>`
      + :ref:`Unused Methods <unused-methods>`
      + :ref:`Weak Typing <weak-typing>`
      + :ref:`Wrong Class Name Case <wrong-class-name-case>`
      + :ref:`Long Preparation For Throw <long-preparation-for-throw>`
      + :ref:`Rethrown Exceptions <rethrown-exceptions>`
      + :ref:`Uncaught Exceptions <uncaught-exceptions>`
      + :ref:`Useless Catch <useless-catch>`
      + :ref:`ext/amqp <ext-amqp>`
      + :ref:`ext/apcu <ext-apcu>`
      + :ref:`ext/php-ast <ext-php-ast>`
      + :ref:`ext/async <ext-async>`
      + :ref:`ext/cairo <ext-cairo>`
      + :ref:`ext/cmark <ext-cmark>`
      + :ref:`ext/com <ext-com>`
      + :ref:`ext/crypto <ext-crypto>`
      + :ref:`ext/curl <ext-curl>`
      + :ref:`ext/ds <ext-ds>`
      + :ref:`ext/eaccelerator <ext-eaccelerator>`
      + :ref:`ext/eio <ext-eio>`
      + :ref:`ext/enchant <ext-enchant>`
      + :ref:`ext/event <ext-event>`
      + :ref:`ext/fam <ext-fam>`
      + :ref:`ext/fann <ext-fann>`
      + :ref:`ext/fdf <ext-fdf>`
      + :ref:`ext/ffi <ext-ffi>`
      + :ref:`ext/filter <ext-filter>`
      + :ref:`ext/gender <ext-gender>`
      + :ref:`ext/geoip <ext-geoip>`
      + :ref:`ext/grpc <ext-grpc>`
      + :ref:`ext/pecl_http <ext-pecl\_http>`
      + :ref:`ext/igbinary <ext-igbinary>`
      + :ref:`ext/judy <ext-judy>`
      + :ref:`ext/lapack <ext-lapack>`
      + :ref:`ext/leveldb <ext-leveldb>`
      + :ref:`ext/libsodium <ext-libsodium>`
      + :ref:`ext/mail <ext-mail>`
      + :ref:`ext/mongo <ext-mongo>`
      + :ref:`ext/mongodb <ext-mongodb>`
      + :ref:`ext/msgpack <ext-msgpack>`
      + :ref:`ext/mssql <ext-mssql>`
      + :ref:`ext/mysql <ext-mysql>`
      + :ref:`ext/mysqli <ext-mysqli>`
      + :ref:`ext/newt <ext-newt>`
      + :ref:`ext/oci8 <ext-oci8>`
      + :ref:`ext/opencensus <ext-opencensus>`
      + :ref:`ext/pcov <ext-pcov>`
      + :ref:`ext/phalcon <ext-phalcon>`
      + :ref:`ext/psr <ext-psr>`
      + :ref:`ext/rar <ext-rar>`
      + :ref:`ext/rdkafka <ext-rdkafka>`
      + :ref:`ext/recode <ext-recode>`
      + :ref:`ext/redis <ext-redis>`
      + :ref:`ext/sdl <ext-sdl>`
      + :ref:`ext/seaslog <ext-seaslog>`
      + :ref:`ext/sockets <ext-sockets>`
      + :ref:`ext/sphinx <ext-sphinx>`
      + :ref:`ext/sqlsrv <ext-sqlsrv>`
      + :ref:`ext/ssh2 <ext-ssh2>`
      + :ref:`ext/svm <ext-svm>`
      + :ref:`ext/swoole <ext-swoole>`
      + :ref:`ext/tokyotyrant <ext-tokyotyrant>`
      + :ref:`ext/uopz <ext-uopz>`
      + :ref:`ext/uuid <ext-uuid>`
      + :ref:`ext/v8js <ext-v8js>`
      + :ref:`ext/vips <ext-vips>`
      + :ref:`ext/wasm <ext-wasm>`
      + :ref:`ext/weakref <ext-weakref>`
      + :ref:`ext/wikidiff2 <ext-wikidiff2>`
      + :ref:`ext/xmlrpc <ext-xmlrpc>`
      + :ref:`ext/xxtea <ext-xxtea>`
      + :ref:`ext/zbarcode <ext-zbarcode>`
      + :ref:`ext/zend_monitor <ext-zend\_monitor>`
      + :ref:`ext/0mq <ext-0mq>`
      + :ref:`Use Named Boolean In Argument Definition <use-named-boolean-in-argument-definition>`
      + :ref:`Could Be Static Closure <could-be-static-closure>`
      + :ref:`Hardcoded Passwords <hardcoded-passwords>`
      + :ref:`Method Has Fluent Interface <method-has-fluent-interface>`
      + :ref:`Insufficient Typehint <insufficient-typehint>`
      + :ref:`Exit-like Methods <exit-like-methods>`
      + :ref:`Mismatch Parameter Name <mismatch-parameter-name>`
      + :ref:`Multiple Returns <multiple-returns>`
      + :ref:`No Boolean As Default <no-boolean-as-default>`
      + :ref:`No Class As Typehint <no-class-as-typehint>`
      + :ref:`Nullable With Constant <nullable-with-constant>`
      + :ref:`Should Use Constants <should-use-constants>`
      + :ref:`Should Yield With Key <should-yield-with-key>`
      + :ref:`Too Many Parameters <too-many-parameters>`
      + :ref:`Wrong Function Name Case <wrong-function-name-case>`
      + :ref:`Empty Interfaces <empty-interfaces>`
      + :ref:`Abstract Away <abstract-away>`
      + :ref:`An OOP Factory <an-oop-factory>`
      + :ref:`array_key_exists() Speedup <array\_key\_exists()-speedup>`
      + :ref:`No mb_substr In Loop <no-mb\_substr-in-loop>`
      + :ref:`Memoize MagicCall <memoize-magiccall>`
      + :ref:`Avoid glob() Usage <avoid-glob()-usage>`
      + :ref:`Slow Functions <slow-functions>`
      + :ref:`Assumptions <assumptions>`
      + :ref:`Avoid mb_dectect_encoding() <avoid-mb\_dectect\_encoding()>`
      + :ref:`Cant Use Return Value In Write Context <cant-use-return-value-in-write-context>`
      + :ref:`Group Use Trailing Comma <group-use-trailing-comma>`
      + :ref:`Must Call Parent Constructor <must-call-parent-constructor>`
      + :ref:`No Reference For Static Property <no-reference-for-static-property>`
      + :ref:`Not A Scalar Type <not-a-scalar-type>`
      + :ref:`PHP 7.0 Scalar Typehints <php-7.0-scalar-typehints>`
      + :ref:`PHP 7.1 Scalar Typehints <php-7.1-scalar-typehints>`
      + :ref:`PHP 7.3 Last Empty Argument <php-7.3-last-empty-argument>`
      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`
      + :ref:`Php 8.0 Variable Syntax Tweaks <php-8.0-variable-syntax-tweaks>`
      + :ref:`Return With Parenthesis <return-with-parenthesis>`
      + :ref:`Should Use array_column() <should-use-array\_column()>`
      + :ref:`Should Use Function <should-use-function>`
      + :ref:`Use Cookies <use-cookies>`
      + :ref:`Use DateTimeImmutable Class <use-datetimeimmutable-class>`
      + :ref:`Yield Usage <yield-usage>`
      + :ref:`GLOB_BRACE Usage <glob\_brace-usage>`
      + :ref:`PSR-11 Usage <psr-11-usage>`
      + :ref:`Compare Hash <compare-hash>`
      + :ref:`Check Crypto Key Length <check-crypto-key-length>`
      + :ref:`Safe Curl Options <safe-curl-options>`
      + :ref:`filter_input() As A Source <filter\_input()-as-a-source>`
      + :ref:`Integer Conversion <integer-conversion>`
      + :ref:`Minus One On Error <minus-one-on-error>`
      + :ref:`move_uploaded_file Instead Of copy <move\_uploaded\_file-instead-of-copy>`
      + :ref:`No Net For Xml Load <no-net-for-xml-load>`
      + :ref:`No Weak SSL Crypto <no-weak-ssl-crypto>`
      + :ref:`Safe HTTP Headers <safe-http-headers>`
      + :ref:`Session Lazy Write <session-lazy-write>`
      + :ref:`Set Cookie Safe Arguments <set-cookie-safe-arguments>`
      + :ref:`Should Use Prepared Statement <should-use-prepared-statement>`
      + :ref:`Unserialize Second Arg <unserialize-second-arg>`
      + :ref:`Upload Filename Injection <upload-filename-injection>`
      + :ref:`Bail Out Early <bail-out-early>`
      + :ref:`Concat Empty String <concat-empty-string>`
      + :ref:`Dangling Array References <dangling-array-references>`
      + :ref:`Don't Read And Write In One Expression <don't-read-and-write-in-one-expression>`
      + :ref:`Else Usage <else-usage>`
      + :ref:`Empty Try Catch <empty-try-catch>`
      + :ref:`Foreach With list() <foreach-with-list()>`
      + :ref:`Forgotten Whitespace <forgotten-whitespace>`
      + :ref:`Logical Mistakes <logical-mistakes>`
      + :ref:`Mail Usage <mail-usage>`
      + :ref:`Nested Ternary <nested-ternary>`
      + :ref:`Next Month Trap <next-month-trap>`
      + :ref:`No Append On Source <no-append-on-source>`
      + :ref:`No Hardcoded Hash <no-hardcoded-hash>`
      + :ref:`No Hardcoded Ip <no-hardcoded-ip>`
      + :ref:`No Hardcoded Port <no-hardcoded-port>`
      + :ref:`Regex Delimiter <regex-delimiter>`
      + :ref:`Should Chain Exception <should-chain-exception>`
      + :ref:`Suspicious Comparison <suspicious-comparison>`
      + :ref:`Timestamp Difference <timestamp-difference>`
      + :ref:`Use Constant <use-constant>`
      + :ref:`Use Debug <use-debug>`
      + :ref:`Use System Tmp <use-system-tmp>`
      + :ref:`Http Headers <http-headers>`
      + :ref:`Path lists <path-lists>`
      + :ref:`URL List <url-list>`
      + :ref:`Strange Name For Variables <strange-name-for-variables>`
      + :ref:`Variables With One Letter Names <variables-with-one-letter-names>`
      + :ref:`Codeigniter usage <codeigniter-usage>`
      + :ref:`FuelPHP Usage <fuelphp-usage>`
      + :ref:`Laravel usage <laravel-usage>`
      + :ref:`Phalcon Usage <phalcon-usage>`
      + :ref:`Symfony usage <symfony-usage>`
      + :ref:`Wordpress usage <wordpress-usage>`
      + :ref:`Yii usage <yii-usage>`
      + :ref:`php-cs-fixable <php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`
      + :ref:`report-php-cs-fixable <report-php-cs-fixable>`

    + `compact()`

      + :ref:`Create Compact Variables <create-compact-variables>`
      + :ref:`Compact Inexistant Variable <compact-inexistant-variable>`

    + `constant()`

      + :ref:`Dynamic Class Constant <dynamic-class-constant>`
      + :ref:`Variable Constants <variable-constants>`
      + :ref:`Fully Qualified Constants <fully-qualified-constants>`
      + :ref:`PHP 7.4 Reserved Keyword <php-7.4-reserved-keyword>`

    + `continue`

      + :ref:`Upload Filename Injection <upload-filename-injection>`
      + :ref:`Bail Out Early <bail-out-early>`
      + :ref:`Break Outside Loop <break-outside-loop>`
      + :ref:`Continue Is For Loop <continue-is-for-loop>`
      + :ref:`No Need For Else <no-need-for-else>`
      + :ref:`No Return Or Throw In Finally <no-return-or-throw-in-finally>`
      + :ref:`More Than One Level Of Indentation <more-than-one-level-of-indentation>`
      + :ref:`Unconditional Break In Loop <unconditional-break-in-loop>`
      + :ref:`Unreachable Code <unreachable-code>`
      + :ref:`Useless Instructions <useless-instructions>`

    + `convert_cyr_string()`

      + :ref:`PHP 7.4 Removed Functions <php-7.4-removed-functions>`
      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `copy()`

      + :ref:`Protocol lists <protocol-lists>`

    + `count()`

      + :ref:`$this Is Not For Static Methods <$this-is-not-for-static-methods>`
      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`Uses Default Values <uses-default-values>`
      + :ref:`PHP Interfaces <php-interfaces>`
      + :ref:`Cache Variable Outside Loop <cache-variable-outside-loop>`
      + :ref:`No Count With 0 <no-count-with-0>`
      + :ref:`Use is_countable <use-is\_countable>`
      + :ref:`Always Positive Comparison <always-positive-comparison>`
      + :ref:`Useless Check <useless-check>`

    + `countable`

      + :ref:`Use is_countable <use-is\_countable>`
      + :ref:`Can't Count Non-Countable <can't-count-non-countable>`

    + `create_function()`

      + :ref:`PHP 7.2 Deprecations <php-7.2-deprecations>`
      + :ref:`PHP 7.2 Removed Functions <php-7.2-removed-functions>`
      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `crypt()`

      + :ref:`ext/password <ext-password>`
      + :ref:`Use password_hash() <use-password\_hash()>`
      + :ref:`crypt() Without Salt <crypt()-without-salt>`

    + `curl_exec()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `curl_init()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`
      + :ref:`Safe Curl Options <safe-curl-options>`

    + `curl_multi_errno()`

      + :ref:`New Functions In PHP 7.1 <new-functions-in-php-7.1>`

    + `curl_multi_init()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `curl_setopt()`

      + :ref:`No Weak SSL Crypto <no-weak-ssl-crypto>`

    + `curl_share_errno()`

      + :ref:`New Functions In PHP 7.1 <new-functions-in-php-7.1>`

    + `curl_share_init()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `curl_share_strerror()`

      + :ref:`New Functions In PHP 7.1 <new-functions-in-php-7.1>`

    + `curl_version()`

      + :ref:`curl_version() Has No Argument <curl\_version()-has-no-argument>`

    + `curlopt_ssl_verifypeer`

      + :ref:`Safe Curl Options <safe-curl-options>`

    + `current()`

      + :ref:`Foreach Don't Change Pointer <foreach-don't-change-pointer>`
      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`


+ `D`
    + `DB2_AUTOCOMMIT_OFF`

      + :ref:`ext/db2 <ext-db2>`

    + `DIRECTORY_SEPARATOR`

      + :ref:`Strange Name For Constants <strange-name-for-constants>`

    + `DNS_NS`

      + :ref:`Is Global Constant <is-global-constant>`

    + `DOMDocument`

      + :ref:`ext/dom <ext-dom>`
      + :ref:`ext/xsl <ext-xsl>`
      + :ref:`No Net For Xml Load <no-net-for-xml-load>`

    + `DateInterval`

      + :ref:`ext/date <ext-date>`

    + `DateTime`

      + :ref:`Clone Usage <clone-usage>`
      + :ref:`ext/date <ext-date>`
      + :ref:`PHP 7.1 Microseconds <php-7.1-microseconds>`
      + :ref:`Use DateTimeImmutable Class <use-datetimeimmutable-class>`
      + :ref:`Timestamp Difference <timestamp-difference>`

    + `DateTimeImmutable`

      + :ref:`Use DateTimeImmutable Class <use-datetimeimmutable-class>`

    + `DateTimeZone`

      + :ref:`ext/date <ext-date>`

    + `Datetime`

      + :ref:`Use DateTimeImmutable Class <use-datetimeimmutable-class>`

    + `Define()`

      + :ref:`Constant Case Preference <constant-case-preference>`

    + `Die`

      + :ref:`Die Exit Consistence <die-exit-consistence>`

    + `Die()`

      + :ref:`Print And Die <print-and-die>`

    + `Directory`

      + :ref:`ext/ldap <ext-ldap>`

    + `DirectoryIterator`

      + :ref:`Protocol lists <protocol-lists>`

    + `DivisionByZeroError`

      + :ref:`Throw <throw>`

    + `date()`

      + :ref:`Abstract Away <abstract-away>`

    + `dateTime`

      + :ref:`Clone Usage <clone-usage>`

    + `date_create()`

      + :ref:`PHP 7.1 Microseconds <php-7.1-microseconds>`

    + `datetime`

      + :ref:`ext/date <ext-date>`
      + :ref:`Date Formats <date-formats>`
      + :ref:`Use DateTimeImmutable Class <use-datetimeimmutable-class>`
      + :ref:`Timestamp Difference <timestamp-difference>`

    + `datetimeimmutable`

      + :ref:`Use DateTimeImmutable Class <use-datetimeimmutable-class>`

    + `debug_backtrace()`

      + :ref:`Use Debug <use-debug>`

    + `debug_zval_dump()`

      + :ref:`Use Debug <use-debug>`

    + `define()`

      + :ref:`Non-constant Index In Array <non-constant-index-in-array>`
      + :ref:`Propagate Constants <propagate-constants>`
      + :ref:`Case Insensitive Constants <case-insensitive-constants>`
      + :ref:`Constants Names <constants-names>`
      + :ref:`Const Or Define Preference <const-or-define-preference>`
      + :ref:`Use const <use-const>`
      + :ref:`Constants Created Outside Its Namespace <constants-created-outside-its-namespace>`
      + :ref:`Constant Case Preference <constant-case-preference>`
      + :ref:`Invalid Constant Name <invalid-constant-name>`
      + :ref:`Fully Qualified Constants <fully-qualified-constants>`
      + :ref:`Define With Array <define-with-array>`
      + :ref:`PHP 7.4 Reserved Keyword <php-7.4-reserved-keyword>`

    + `die`

      + :ref:`ext/bzip2 <ext-bzip2>`
      + :ref:`ext/crypto <ext-crypto>`
      + :ref:`ext/expect <ext-expect>`
      + :ref:`ext/ibase <ext-ibase>`
      + :ref:`ext/imap <ext-imap>`
      + :ref:`ext/memcache <ext-memcache>`
      + :ref:`ext/mssql <ext-mssql>`
      + :ref:`ext/mysql <ext-mysql>`
      + :ref:`ext/pcntl <ext-pcntl>`
      + :ref:`ext/rar <ext-rar>`
      + :ref:`ext/shmop <ext-shmop>`
      + :ref:`ext/sqlite <ext-sqlite>`
      + :ref:`ext/sqlsrv <ext-sqlsrv>`
      + :ref:`ext/ssh2 <ext-ssh2>`
      + :ref:`ext/uuid <ext-uuid>`
      + :ref:`ext/xml <ext-xml>`
      + :ref:`Exit-like Methods <exit-like-methods>`
      + :ref:`Don't Echo Error <don't-echo-error>`
      + :ref:`Check JSON <check-json>`
      + :ref:`Die Exit Consistence <die-exit-consistence>`
      + :ref:`Error Messages <error-messages>`
      + :ref:`Exit() Usage <exit()-usage>`
      + :ref:`Implied If <implied-if>`
      + :ref:`No Direct Access <no-direct-access>`
      + :ref:`No Hardcoded Port <no-hardcoded-port>`
      + :ref:`openssl_random_pseudo_byte() Second Argument <openssl\_random\_pseudo\_byte()-second-argument>`
      + :ref:`Print And Die <print-and-die>`
      + :ref:`Joomla usage <joomla-usage>`

    + `die()`

      + :ref:`Exit-like Methods <exit-like-methods>`
      + :ref:`Die Exit Consistence <die-exit-consistence>`
      + :ref:`Exit() Usage <exit()-usage>`
      + :ref:`Implied If <implied-if>`
      + :ref:`No Parenthesis For Language Construct <no-parenthesis-for-language-construct>`
      + :ref:`Or Die <or-die>`
      + :ref:`Print And Die <print-and-die>`
      + :ref:`Unreachable Code <unreachable-code>`
      + :ref:`Environment Variables <environment-variables>`

    + `directory`

      + :ref:`Avoid glob() Usage <avoid-glob()-usage>`
      + :ref:`Keep Files Access Restricted <keep-files-access-restricted>`
      + :ref:`Could Use __DIR__ <could-use-\_\_dir\_\_>`
      + :ref:`__DIR__ Then Slash <\_\_dir\_\_-then-slash>`
      + :ref:`No Hardcoded Path <no-hardcoded-path>`
      + :ref:`Unchecked Resources <unchecked-resources>`
      + :ref:`Path lists <path-lists>`
      + :ref:`Protocol lists <protocol-lists>`

    + `dirname()`

      + :ref:`Use pathinfo() Arguments <use-pathinfo()-arguments>`
      + :ref:`Could Use __DIR__ <could-use-\_\_dir\_\_>`
      + :ref:`PHP7 Dirname <php7-dirname>`

    + `dl()`

      + :ref:`Dl() Usage <dl()-usage>`


+ `E`
    + `ENT_IGNORE`

      + :ref:`No ENT_IGNORE <no-ent\_ignore>`

    + `ENT_QUOTES`

      + :ref:`ext/oci8 <ext-oci8>`
      + :ref:`No ENT_IGNORE <no-ent\_ignore>`
      + :ref:`Htmlentities Calls <htmlentities-calls>`

    + `EV_PERSIST`

      + :ref:`ext/libevent <ext-libevent>`

    + `EV_READ`

      + :ref:`ext/libevent <ext-libevent>`

    + `EXTR_OVERWRITE`

      + :ref:`Configure Extract <configure-extract>`

    + `EXTR_PREFIX_ALL`

      + :ref:`Configure Extract <configure-extract>`

    + `EXTR_SKIP`

      + :ref:`Configure Extract <configure-extract>`

    + `E_ALL`

      + :ref:`Dynamic Class Constant <dynamic-class-constant>`
      + :ref:`Is Global Constant <is-global-constant>`
      + :ref:`ext/sockets <ext-sockets>`
      + :ref:`error_reporting() With Integers <error\_reporting()-with-integers>`

    + `E_DEPRECATED`

      + :ref:`error_reporting() With Integers <error\_reporting()-with-integers>`

    + `E_ERROR`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `E_NOTICE`

      + :ref:`crypt() Without Salt <crypt()-without-salt>`
      + :ref:`error_reporting() With Integers <error\_reporting()-with-integers>`

    + `E_PARSE`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `E_STRICT`

      + :ref:`error_reporting() With Integers <error\_reporting()-with-integers>`

    + `E_USER_ERROR`

      + :ref:`ext/oci8 <ext-oci8>`
      + :ref:`PHP Handlers Usage <php-handlers-usage>`
      + :ref:`Trigger Errors <trigger-errors>`

    + `E_USER_NOTICE`

      + :ref:`PHP Handlers Usage <php-handlers-usage>`

    + `E_USER_WARNING`

      + :ref:`PHP Handlers Usage <php-handlers-usage>`

    + `E_WARNING`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`error_reporting() With Integers <error\_reporting()-with-integers>`

    + `Each()`

      + :ref:`While(List() = Each()) <while(list()-=-each())>`

    + `Ev`

      + :ref:`ext/ev <ext-ev>`

    + `EvTimer`

      + :ref:`ext/ev <ext-ev>`

    + `Event`

      + :ref:`ext/event <ext-event>`

    + `EventBase`

      + :ref:`ext/event <ext-event>`

    + `EventBufferEvent`

      + :ref:`ext/event <ext-event>`

    + `EventDnsBase`

      + :ref:`ext/event <ext-event>`

    + `EventUtil`

      + :ref:`ext/event <ext-event>`

    + `Exit`

      + :ref:`Multiple Returns <multiple-returns>`
      + :ref:`Die Exit Consistence <die-exit-consistence>`

    + `each()`

      + :ref:`PHP 7.2 Deprecations <php-7.2-deprecations>`
      + :ref:`PHP 7.2 Removed Functions <php-7.2-removed-functions>`
      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `easter_days()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `eio_event_loop()`

      + :ref:`ext/eio <ext-eio>`

    + `empty()`

      + :ref:`No Count With 0 <no-count-with-0>`
      + :ref:`Cant Use Return Value In Write Context <cant-use-return-value-in-write-context>`
      + :ref:`Missing __isset() Method <missing-\_\_isset()-method>`
      + :ref:`Empty With Expression <empty-with-expression>`
      + :ref:`Modernize Empty With Expression <modernize-empty-with-expression>`
      + :ref:`No isset() With empty() <no-isset()-with-empty()>`
      + :ref:`Variable Is Not A Condition <variable-is-not-a-condition>`
      + :ref:`Useless Check <useless-check>`

    + `enchant_broker_init()`

      + :ref:`ext/enchant <ext-enchant>`
      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `enchant_broker_request_dict()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `enchant_broker_request_pwl_dict()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `ereg()`

      + :ref:`PHP 7.0 Removed Functions <php-7.0-removed-functions>`

    + `ereg_replace()`

      + :ref:`PHP 7.0 Removed Functions <php-7.0-removed-functions>`

    + `eregi()`

      + :ref:`PHP 7.0 Removed Functions <php-7.0-removed-functions>`

    + `eregi_replace()`

      + :ref:`PHP 7.0 Removed Functions <php-7.0-removed-functions>`

    + `error_clear_last()`

      + :ref:`New Functions In PHP 7.0 <new-functions-in-php-7.0>`

    + `error_get_last()`

      + :ref:`$php_errormsg Usage <$php\_errormsg-usage>`

    + `error_log()`

      + :ref:`Error_Log() Usage <error\_log()-usage>`

    + `error_reporting()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`PHP Handlers Usage <php-handlers-usage>`

    + `ev`

      + :ref:`ext/ev <ext-ev>`
      + :ref:`Encoded Simple Letters <encoded-simple-letters>`

    + `eval()`

      + :ref:`Function With Dynamic Code <function-with-dynamic-code>`
      + :ref:`Can't Disable Function <can't-disable-function>`
      + :ref:`Eval() Usage <eval()-usage>`
      + :ref:`preg_replace With Option e <preg\_replace-with-option-e>`

    + `event`

      + :ref:`ext/ev <ext-ev>`
      + :ref:`ext/event <ext-event>`
      + :ref:`ext/inotify <ext-inotify>`
      + :ref:`ext/libevent <ext-libevent>`
      + :ref:`ext/swoole <ext-swoole>`
      + :ref:`Minus One On Error <minus-one-on-error>`
      + :ref:`Empty Try Catch <empty-try-catch>`

    + `event_base_new()`

      + :ref:`ext/libevent <ext-libevent>`

    + `event_new()`

      + :ref:`ext/libevent <ext-libevent>`

    + `exec()`

      + :ref:`Shell Favorite <shell-favorite>`
      + :ref:`Can't Disable Function <can't-disable-function>`
      + :ref:`Shell commands <shell-commands>`

    + `exit`

      + :ref:`ext/dba <ext-dba>`
      + :ref:`ext/event <ext-event>`
      + :ref:`ext/ftp <ext-ftp>`
      + :ref:`ext/gearman <ext-gearman>`
      + :ref:`ext/libevent <ext-libevent>`
      + :ref:`ext/pcntl <ext-pcntl>`
      + :ref:`ext/zip <ext-zip>`
      + :ref:`Exit-like Methods <exit-like-methods>`
      + :ref:`PHP Handlers Usage <php-handlers-usage>`
      + :ref:`Don't Echo Error <don't-echo-error>`
      + :ref:`Die Exit Consistence <die-exit-consistence>`
      + :ref:`Else Usage <else-usage>`
      + :ref:`Error Messages <error-messages>`
      + :ref:`Exit() Usage <exit()-usage>`
      + :ref:`Print And Die <print-and-die>`

    + `exit()`

      + :ref:`ext/event <ext-event>`
      + :ref:`ext/mysqli <ext-mysqli>`
      + :ref:`ext/pcntl <ext-pcntl>`
      + :ref:`Exit-like Methods <exit-like-methods>`
      + :ref:`Use PHP Object API <use-php-object-api>`
      + :ref:`Unreachable Code <unreachable-code>`

    + `explode()`

      + :ref:`Optimize Explode() <optimize-explode()>`
      + :ref:`Implode One Arg <implode-one-arg>`
      + :ref:`Should Use Explode Args <should-use-explode-args>`

    + `extract()`

      + :ref:`$this Belongs To Classes Or Traits <$this-belongs-to-classes-or-traits>`
      + :ref:`Function With Dynamic Code <function-with-dynamic-code>`
      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`Configure Extract <configure-extract>`
      + :ref:`Register Globals <register-globals>`
      + :ref:`Foreach With list() <foreach-with-list()>`

    + `ezmlm_hash()`

      + :ref:`PHP 7.4 Removed Functions <php-7.4-removed-functions>`
      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`


+ `F`
    + `FANN_SIGMOID_SYMMETRIC`

      + :ref:`ext/fann <ext-fann>`

    + `FFI`

      + :ref:`ext/ffi <ext-ffi>`

    + `FILEINFO_MIME_TYPE`

      + :ref:`ext/fileinfo <ext-fileinfo>`

    + `FILE_IGNORE_NEW_LINES`

      + :ref:`Should Use Constants <should-use-constants>`

    + `FILTER_SANITIZE_EMAIL`

      + :ref:`PHP Variables <php-variables>`

    + `FILTER_SANITIZE_MAGIC_QUOTES`

      + :ref:`Filter To add_slashes() <filter-to-add\_slashes()>`

    + `FILTER_SANITIZE_SPECIAL_CHARS`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `FILTER_UNSAFE_RAW`

      + :ref:`filter_input() As A Source <filter\_input()-as-a-source>`

    + `FILTER_VALIDATE_EMAIL`

      + :ref:`ext/filter <ext-filter>`

    + `FTP_BINARY`

      + :ref:`ext/ftp <ext-ftp>`

    + `FilesystemIterator`

      + :ref:`ext/spl <ext-spl>`

    + `For()`

      + :ref:`Sequences In For <sequences-in-for>`

    + `Foreach()`

      + :ref:`Altering Foreach Without Reference <altering-foreach-without-reference>`
      + :ref:`Should Use Foreach <should-use-foreach>`
      + :ref:`Useless Check <useless-check>`
      + :ref:`Use List With Foreach <use-list-with-foreach>`

    + `fdf_create()`

      + :ref:`ext/fdf <ext-fdf>`

    + `feof()`

      + :ref:`Possible Infinite Loop <possible-infinite-loop>`

    + `ffi`

      + :ref:`ext/ffi <ext-ffi>`

    + `ffmpeg_movie`

      + :ref:`ext/ffmpeg <ext-ffmpeg>`

    + `fgetc()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `fgetcsv()`

      + :ref:`Possible Infinite Loop <possible-infinite-loop>`

    + `fgets()`

      + :ref:`Possible Infinite Loop <possible-infinite-loop>`

    + `fgetss()`

      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`
      + :ref:`Possible Infinite Loop <possible-infinite-loop>`

    + `file()`

      + :ref:`Joining file() <joining-file()>`

    + `file_exists()`

      + :ref:`Protocol lists <protocol-lists>`

    + `file_get_contents()`

      + :ref:`Joining file() <joining-file()>`
      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `file_put_contents()`

      + :ref:`No array_merge() In Loops <no-array\_merge()-in-loops>`
      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `filesize()`

      + :ref:`Protocol lists <protocol-lists>`

    + `filter_input()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`filter_input() As A Source <filter\_input()-as-a-source>`

    + `filter_input_array()`

      + :ref:`filter_input() As A Source <filter\_input()-as-a-source>`

    + `filter_var()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `fopen()`

      + :ref:`Wrong fopen() Mode <wrong-fopen()-mode>`
      + :ref:`Fopen Binary Mode <fopen-binary-mode>`
      + :ref:`@ Operator <@-operator>`
      + :ref:`Possible Infinite Loop <possible-infinite-loop>`
      + :ref:`Protocol lists <protocol-lists>`

    + `for()`

      + :ref:`Bracketless Blocks <bracketless-blocks>`
      + :ref:`Constant Conditions <constant-conditions>`
      + :ref:`For Using Functioncall <for-using-functioncall>`

    + `foreach()`

      + :ref:`Foreach() Favorite <foreach()-favorite>`
      + :ref:`Should Yield With Key <should-yield-with-key>`
      + :ref:`Useless Referenced Argument <useless-referenced-argument>`
      + :ref:`Slow Functions <slow-functions>`
      + :ref:`Foreach Don't Change Pointer <foreach-don't-change-pointer>`
      + :ref:`preg_match_all() Flag <preg\_match\_all()-flag>`
      + :ref:`Should Use array_column() <should-use-array\_column()>`
      + :ref:`Should Use array_filter() <should-use-array\_filter()>`
      + :ref:`Bracketless Blocks <bracketless-blocks>`
      + :ref:`Break Outside Loop <break-outside-loop>`
      + :ref:`Dont Change The Blind Var <dont-change-the-blind-var>`
      + :ref:`Overwritten Source And Value <overwritten-source-and-value>`
      + :ref:`Foreach With list() <foreach-with-list()>`
      + :ref:`Find Key Directly <find-key-directly>`
      + :ref:`Avoid array_unique() <avoid-array\_unique()>`
      + :ref:`No Direct Usage <no-direct-usage>`

    + `forward_static_call()`

      + :ref:`Callback Function Needs Return <callback-function-needs-return>`

    + `forward_static_call_array()`

      + :ref:`Callback Function Needs Return <callback-function-needs-return>`

    + `fputcsv()`

      + :ref:`fputcsv() In Loops <fputcsv()-in-loops>`

    + `fread()`

      + :ref:`Possible Infinite Loop <possible-infinite-loop>`
      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `fscanf()`

      + :ref:`Printf Format Inventory <printf-format-inventory>`

    + `fseek()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `ftp_connect()`

      + :ref:`Can't Disable Class <can't-disable-class>`
      + :ref:`Can't Disable Function <can't-disable-function>`

    + `func_get_arg()`

      + :ref:`func_get_arg() Modified <func\_get\_arg()-modified>`
      + :ref:`Has Variable Arguments <has-variable-arguments>`

    + `func_get_args()`

      + :ref:`func_get_arg() Modified <func\_get\_arg()-modified>`
      + :ref:`Has Variable Arguments <has-variable-arguments>`
      + :ref:`Wrong Number Of Arguments <wrong-number-of-arguments>`
      + :ref:`Wrong Number Of Arguments In Methods <wrong-number-of-arguments-in-methods>`
      + :ref:`Ellipsis Usage <ellipsis-usage>`
      + :ref:`PHP 7.3 Last Empty Argument <php-7.3-last-empty-argument>`

    + `func_num_args()`

      + :ref:`Has Variable Arguments <has-variable-arguments>`


+ `G`
    + `GEARMAN_SUCCESS`

      + :ref:`ext/gearman <ext-gearman>`

    + `GEARMAN_WORK_DATA`

      + :ref:`ext/gearman <ext-gearman>`

    + `GEARMAN_WORK_FAIL`

      + :ref:`ext/gearman <ext-gearman>`

    + `GEARMAN_WORK_STATUS`

      + :ref:`ext/gearman <ext-gearman>`

    + `GLOB_BRACE`

      + :ref:`GLOB_BRACE Usage <glob\_brace-usage>`

    + `GLOB_NOSORT`

      + :ref:`Avoid glob() Usage <avoid-glob()-usage>`

    + `GNUPG_SIG_MODE_CLEAR`

      + :ref:`ext/gnupgp <ext-gnupgp>`

    + `GearmanClient`

      + :ref:`ext/gearman <ext-gearman>`

    + `Generator`

      + :ref:`Should Yield With Key <should-yield-with-key>`

    + `Gmagick`

      + :ref:`ext/gmagick <ext-gmagick>`

    + `GnuPG`

      + :ref:`ext/gnupgp <ext-gnupgp>`

    + `gc_mem_caches()`

      + :ref:`New Functions In PHP 7.0 <new-functions-in-php-7.0>`

    + `generator`

      + :ref:`ext/csprng <ext-csprng>`
      + :ref:`Generator Cannot Return <generator-cannot-return>`
      + :ref:`Is Generator <is-generator>`
      + :ref:`No Return For Generator <no-return-for-generator>`
      + :ref:`PHP 7.1 Scalar Typehints <php-7.1-scalar-typehints>`
      + :ref:`Yield From Usage <yield-from-usage>`
      + :ref:`Don't Loop On Yield <don't-loop-on-yield>`
      + :ref:`Could Be Generator <could-be-generator>`

    + `getType()`

      + :ref:`ext/judy <ext-judy>`

    + `get_browser()`

      + :ref:`Use Browscap <use-browscap>`

    + `get_called_class()`

      + :ref:`Detect Current Class <detect-current-class>`

    + `get_class()`

      + :ref:`No get_class() With Null <no-get\_class()-with-null>`
      + :ref:`No Need For get_class() <no-need-for-get\_class()>`

    + `get_html_translation_table()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `get_magic_quotes_gpc()`

      + :ref:`PHP 7.4 Removed Functions <php-7.4-removed-functions>`
      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `get_magic_quotes_gpc_runtime()`

      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `get_magic_quotes_runtime()`

      + :ref:`PHP 7.4 Removed Functions <php-7.4-removed-functions>`

    + `get_object_vars()`

      + :ref:`Avoid get_object_vars() <avoid-get\_object\_vars()>`

    + `getenv()`

      + :ref:`Uses Environment <uses-environment>`

    + `gettext()`

      + :ref:`ext/gettext <ext-gettext>`

    + `glob()`

      + :ref:`Avoid glob() Usage <avoid-glob()-usage>`
      + :ref:`No Direct Usage <no-direct-usage>`
      + :ref:`No Hardcoded Path <no-hardcoded-path>`

    + `gmagick`

      + :ref:`ext/gmagick <ext-gmagick>`

    + `gmp_div_q()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `gmp_div_qr()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `gmp_div_r()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `gmp_random()`

      + :ref:`PHP 7.2 Deprecations <php-7.2-deprecations>`
      + :ref:`PHP 7.2 Removed Functions <php-7.2-removed-functions>`
      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `gnupg`

      + :ref:`ext/gnupgp <ext-gnupgp>`

    + `gnupg_init()`

      + :ref:`ext/gnupgp <ext-gnupgp>`

    + `gzgetss()`

      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`


+ `H`
    + `HTML_ENTITIES`

      + :ref:`Is PHP Constant <is-php-constant>`

    + `hash()`

      + :ref:`Directly Use File <directly-use-file>`

    + `hash_algos()`

      + :ref:`Hash Algorithms <hash-algorithms>`

    + `hash_equals()`

      + :ref:`Compare Hash <compare-hash>`

    + `hash_file()`

      + :ref:`Directly Use File <directly-use-file>`

    + `hash_hmac()`

      + :ref:`Directly Use File <directly-use-file>`

    + `hash_update()`

      + :ref:`Directly Use File <directly-use-file>`

    + `hash_update_file()`

      + :ref:`Directly Use File <directly-use-file>`

    + `header()`

      + :ref:`Use Cookies <use-cookies>`
      + :ref:`Should Use SetCookie() <should-use-setcookie()>`
      + :ref:`Http Headers <http-headers>`

    + `hebrevc()`

      + :ref:`PHP 7.4 Removed Functions <php-7.4-removed-functions>`
      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `highlight_file()`

      + :ref:`Directly Use File <directly-use-file>`

    + `highlight_string()`

      + :ref:`Directly Use File <directly-use-file>`

    + `html_entity_decode()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `htmlentities()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`Uses Default Values <uses-default-values>`
      + :ref:`Htmlentities Calls <htmlentities-calls>`

    + `htmlspecialchars()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`No ENT_IGNORE <no-ent\_ignore>`
      + :ref:`Htmlentities Calls <htmlentities-calls>`

    + `htmlspecialchars_decode()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `http_build_query()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`Use Url Query Functions <use-url-query-functions>`

    + `http_build_url()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `http_parse_cookie()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `http_parse_params()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `http_redirect()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `http_support()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`


+ `I`
    + `INF`

      + :ref:`Manipulates INF <manipulates-inf>`

    + `INTL_IDNA_VARIANT_2003`

      + :ref:`idn_to_ascii() New Default <idn\_to\_ascii()-new-default>`
      + :ref:`PHP 8.0 Removed Constants <php-8.0-removed-constants>`

    + `INTL_IDNA_VARIANT_UTS46`

      + :ref:`idn_to_ascii() New Default <idn\_to\_ascii()-new-default>`

    + `IN_ATTRIB`

      + :ref:`ext/inotify <ext-inotify>`

    + `Imagick`

      + :ref:`ext/imagick <ext-imagick>`

    + `Isset`

      + :ref:`Isset() On The Whole Array <isset()-on-the-whole-array>`

    + `ibase_errmsg()`

      + :ref:`ext/ibase <ext-ibase>`

    + `iconv()`

      + :ref:`Substring First <substring-first>`
      + :ref:`Iconv With Translit <iconv-with-translit>`

    + `iconv_strpos()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `iconv_strrpos()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `idn_to_ascii()`

      + :ref:`idn_to_ascii() New Default <idn\_to\_ascii()-new-default>`

    + `image2wbmp()`

      + :ref:`PHP 7.3 Removed Functions <php-7.3-removed-functions>`
      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `imagecolorallocate()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `imagecolorallocatealpha()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `imagepsbbox()`

      + :ref:`PHP 7.0 Removed Functions <php-7.0-removed-functions>`

    + `imagepsencodefont()`

      + :ref:`PHP 7.0 Removed Functions <php-7.0-removed-functions>`

    + `imagepsextendfont()`

      + :ref:`PHP 7.0 Removed Functions <php-7.0-removed-functions>`

    + `imagepsfreefont()`

      + :ref:`PHP 7.0 Removed Functions <php-7.0-removed-functions>`

    + `imagepsloadfont()`

      + :ref:`PHP 7.0 Removed Functions <php-7.0-removed-functions>`

    + `imagepsslantfont()`

      + :ref:`PHP 7.0 Removed Functions <php-7.0-removed-functions>`

    + `imagepstext()`

      + :ref:`PHP 7.0 Removed Functions <php-7.0-removed-functions>`

    + `imagick`

      + :ref:`ext/imagick <ext-imagick>`

    + `imap_last_error()`

      + :ref:`ext/imap <ext-imap>`

    + `imap_open()`

      + :ref:`Can't Disable Function <can't-disable-function>`

    + `implode()`

      + :ref:`Joining file() <joining-file()>`
      + :ref:`Avoid Concat In Loop <avoid-concat-in-loop>`
      + :ref:`Implode One Arg <implode-one-arg>`
      + :ref:`Implode() Arguments Order <implode()-arguments-order>`
      + :ref:`Use Array Functions <use-array-functions>`

    + `import_request_variables()`

      + :ref:`Register Globals <register-globals>`

    + `in_array()`

      + :ref:`Logical To in_array <logical-to-in\_array>`
      + :ref:`Processing Collector <processing-collector>`
      + :ref:`Slow Functions <slow-functions>`
      + :ref:`Strict Comparison With Booleans <strict-comparison-with-booleans>`

    + `ini_get()`

      + :ref:`PHP 8.0 Removed Directives <php-8.0-removed-directives>`

    + `ini_set()`

      + :ref:`Definitions Only <definitions-only>`

    + `inotify_init()`

      + :ref:`ext/inotify <ext-inotify>`

    + `inotify_queue_len()`

      + :ref:`ext/inotify <ext-inotify>`

    + `inotify_read()`

      + :ref:`ext/inotify <ext-inotify>`

    + `instanceof`

      + :ref:`Usage Of class_alias() <usage-of-class\_alias()>`
      + :ref:`Class Usage <class-usage>`
      + :ref:`self, parent, static Outside Class <self,-parent,-static-outside-class>`
      + :ref:`Scalar Or Object Property <scalar-or-object-property>`
      + :ref:`Undefined Classes <undefined-classes>`
      + :ref:`Undefined ::class <undefined-class>`
      + :ref:`Unresolved Instanceof <unresolved-instanceof>`
      + :ref:`Use Instanceof <use-instanceof>`
      + :ref:`ext/psr <ext-psr>`
      + :ref:`Could Typehint <could-typehint>`
      + :ref:`Already Parents Interface <already-parents-interface>`
      + :ref:`Cant Implement Traversable <cant-implement-traversable>`
      + :ref:`Interfaces Usage <interfaces-usage>`
      + :ref:`Is An Extension Interface <is-an-extension-interface>`
      + :ref:`Undefined Interfaces <undefined-interfaces>`
      + :ref:`Unused Interfaces <unused-interfaces>`
      + :ref:`Used Interfaces <used-interfaces>`
      + :ref:`Useless Interfaces <useless-interfaces>`
      + :ref:`Should Make Alias <should-make-alias>`
      + :ref:`Use is_countable <use-is\_countable>`
      + :ref:`Php 8.0 Variable Syntax Tweaks <php-8.0-variable-syntax-tweaks>`
      + :ref:`Reserved Match Keyword <reserved-match-keyword>`
      + :ref:`Missing Parenthesis <missing-parenthesis>`
      + :ref:`Not Equal Is Not !== <not-equal-is-not-!==>`
      + :ref:`Should Use Operator <should-use-operator>`
      + :ref:`Avoid get_class() <avoid-get\_class()>`

    + `insteadof`

      + :ref:`Method Collision Traits <method-collision-traits>`
      + :ref:`Trait Not Found <trait-not-found>`
      + :ref:`Undefined Insteadof <undefined-insteadof>`

    + `intdiv()`

      + :ref:`Could Use Try <could-use-try>`
      + :ref:`New Functions In PHP 7.0 <new-functions-in-php-7.0>`

    + `intl_idna_variant_2003`

      + :ref:`PHP 8.0 Removed Constants <php-8.0-removed-constants>`

    + `intval()`

      + :ref:`Should Typecast <should-typecast>`

    + `is_a()`

      + :ref:`Is_A() With String <is\_a()-with-string>`

    + `is_array()`

      + :ref:`Assumptions <assumptions>`
      + :ref:`Should Use Operator <should-use-operator>`

    + `is_callable()`

      + :ref:`Check All Types <check-all-types>`

    + `is_int()`

      + :ref:`Should Use Operator <should-use-operator>`

    + `is_integer()`

      + :ref:`Use Instanceof <use-instanceof>`

    + `is_iterable()`

      + :ref:`New Functions In PHP 7.1 <new-functions-in-php-7.1>`
      + :ref:`Check All Types <check-all-types>`

    + `is_null()`

      + :ref:`Use === null <use-===-null>`
      + :ref:`Should Use Operator <should-use-operator>`

    + `is_object()`

      + :ref:`Use Instanceof <use-instanceof>`
      + :ref:`Should Use Operator <should-use-operator>`

    + `is_real()`

      + :ref:`Avoid Real <avoid-real>`

    + `is_resource()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `is_scalar()`

      + :ref:`Use Instanceof <use-instanceof>`

    + `is_string()`

      + :ref:`Use Instanceof <use-instanceof>`
      + :ref:`Check All Types <check-all-types>`

    + `isset`

      + :ref:`Use Instanceof <use-instanceof>`
      + :ref:`ext/session <ext-session>`
      + :ref:`ext/xml <ext-xml>`
      + :ref:`Must Return Methods <must-return-methods>`
      + :ref:`array_key_exists() Speedup <array\_key\_exists()-speedup>`
      + :ref:`Isset() On The Whole Array <isset()-on-the-whole-array>`
      + :ref:`Slow Functions <slow-functions>`
      + :ref:`Assert Function Is Reserved <assert-function-is-reserved>`
      + :ref:`Cookies Variables <cookies-variables>`
      + :ref:`Isset Multiple Arguments <isset-multiple-arguments>`
      + :ref:`Session Variables <session-variables>`
      + :ref:`Should Use array_column() <should-use-array\_column()>`
      + :ref:`Should Use array_filter() <should-use-array\_filter()>`
      + :ref:`Should Use Coalesce <should-use-coalesce>`
      + :ref:`Too Complex Expression <too-complex-expression>`
      + :ref:`isset() With Constant <isset()-with-constant>`
      + :ref:`No isset() With empty() <no-isset()-with-empty()>`
      + :ref:`Variable Is Not A Condition <variable-is-not-a-condition>`
      + :ref:`Useless Check <useless-check>`

    + `iterator_to_array()`

      + :ref:`Should Yield With Key <should-yield-with-key>`


+ `J`
    + `JSON_ERROR_NONE`

      + :ref:`Check JSON <check-json>`

    + `JSON_HEX_AMP`

      + :ref:`Is An Extension Constant <is-an-extension-constant>`

    + `Judy`

      + :ref:`ext/judy <ext-judy>`

    + `jdtojewish()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `jpeg2wbmp()`

      + :ref:`PHP 7.2 Removed Functions <php-7.2-removed-functions>`
      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `json_decode()`

      + :ref:`Use json_decode() Options <use-json\_decode()-options>`

    + `json_last_error()`

      + :ref:`Check JSON <check-json>`

    + `judy`

      + :ref:`ext/judy <ext-judy>`


+ `K`
    + `KADM5_PRINC_EXPIRE_TIME`

      + :ref:`ext/kdm5 <ext-kdm5>`

    + `krsort()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `ksort()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`


+ `L`
    + `LAPACK`

      + :ref:`ext/lapack <ext-lapack>`

    + `LC_ALL`

      + :ref:`ext/gettext <ext-gettext>`
      + :ref:`Setlocale() Uses Constants <setlocale()-uses-constants>`

    + `LC_MESSAGES`

      + :ref:`ext/gettext <ext-gettext>`
      + :ref:`Setlocale() Uses Constants <setlocale()-uses-constants>`

    + `LIBXML_DTDLOAD`

      + :ref:`No Net For Xml Load <no-net-for-xml-load>`

    + `LIBXML_ERR_ERROR`

      + :ref:`ext/libxml <ext-libxml>`

    + `LIBXML_ERR_FATAL`

      + :ref:`ext/libxml <ext-libxml>`

    + `LIBXML_ERR_WARNING`

      + :ref:`ext/libxml <ext-libxml>`

    + `LIBXML_NOENT`

      + :ref:`No Net For Xml Load <no-net-for-xml-load>`

    + `LOG_DEBUG`

      + :ref:`ext/rdkafka <ext-rdkafka>`

    + `Lapack`

      + :ref:`ext/lapack <ext-lapack>`

    + `LevelDB`

      + :ref:`ext/leveldb <ext-leveldb>`

    + `LevelDBWriteBatch`

      + :ref:`ext/leveldb <ext-leveldb>`

    + `List()`

      + :ref:`List With Appends <list-with-appends>`

    + `Locale`

      + :ref:`ext/intl <ext-intl>`

    + `LogicException`

      + :ref:`PHP Exception <php-exception>`

    + `Lua`

      + :ref:`ext/lua <ext-lua>`

    + `lapack`

      + :ref:`ext/lapack <ext-lapack>`

    + `ldap_sort()`

      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `leveldb`

      + :ref:`ext/leveldb <ext-leveldb>`

    + `libxml_clear_errors()`

      + :ref:`ext/libxml <ext-libxml>`

    + `libxml_get_errors()`

      + :ref:`ext/libxml <ext-libxml>`
      + :ref:`ext/xsl <ext-xsl>`

    + `link()`

      + :ref:`Make Class Method Definition <make-class-method-definition>`

    + `list()`

      + :ref:`Optimize Explode() <optimize-explode()>`
      + :ref:`Empty List <empty-list>`
      + :ref:`List Short Syntax <list-short-syntax>`
      + :ref:`List With Keys <list-with-keys>`
      + :ref:`No List With String <no-list-with-string>`
      + :ref:`Pathinfo() Returns May Vary <pathinfo()-returns-may-vary>`
      + :ref:`Spread Operator For Array <spread-operator-for-array>`
      + :ref:`Overwritten Source And Value <overwritten-source-and-value>`
      + :ref:`Foreach With list() <foreach-with-list()>`
      + :ref:`list() May Omit Variables <list()-may-omit-variables>`
      + :ref:`Should Use Explode Args <should-use-explode-args>`
      + :ref:`Use List With Foreach <use-list-with-foreach>`

    + `locale`

      + :ref:`ext/ctype <ext-ctype>`
      + :ref:`ext/gettext <ext-gettext>`
      + :ref:`ext/intl <ext-intl>`
      + :ref:`Fn Argument Variable Confusion <fn-argument-variable-confusion>`
      + :ref:`Confusing Names <confusing-names>`

    + `log()`

      + :ref:`Wrong Type For Native PHP Function <wrong-type-for-native-php-function>`

    + `ltrim()`

      + :ref:`Substr To Trim <substr-to-trim>`

    + `lua`

      + :ref:`ext/lua <ext-lua>`


+ `M`
    + `MATch()`

      + :ref:`Reserved Match Keyword <reserved-match-keyword>`

    + `MAtch()`

      + :ref:`Reserved Match Keyword <reserved-match-keyword>`

    + `MB_OVERLOAD_MAIL`

      + :ref:`PHP 8.0 Removed Constants <php-8.0-removed-constants>`

    + `MB_OVERLOAD_REGEX`

      + :ref:`PHP 8.0 Removed Constants <php-8.0-removed-constants>`

    + `MB_OVERLOAD_STRING`

      + :ref:`PHP 8.0 Removed Constants <php-8.0-removed-constants>`

    + `MCRYPT_CAST_256`

      + :ref:`mcrypt_create_iv() With Default Values <mcrypt\_create\_iv()-with-default-values>`

    + `MCRYPT_DEV_RANDOM`

      + :ref:`mcrypt_create_iv() With Default Values <mcrypt\_create\_iv()-with-default-values>`

    + `MCRYPT_MODE_CBC`

      + :ref:`ext/mcrypt <ext-mcrypt>`

    + `MCRYPT_MODE_CFB`

      + :ref:`mcrypt_create_iv() With Default Values <mcrypt\_create\_iv()-with-default-values>`

    + `MCRYPT_RAND`

      + :ref:`ext/mcrypt <ext-mcrypt>`

    + `MCRYPT_RIJNDAEL_128`

      + :ref:`ext/mcrypt <ext-mcrypt>`

    + `MHASH_MD5`

      + :ref:`ext/mhash <ext-mhash>`

    + `MYSQLI`

      + :ref:`Should Use Prepared Statement <should-use-prepared-statement>`

    + `M_PI`

      + :ref:`Use Constant <use-constant>`

    + `Match()`

      + :ref:`Could Use Match <could-use-match>`

    + `Memcache`

      + :ref:`ext/memcache <ext-memcache>`

    + `Memcached`

      + :ref:`ext/memcached <ext-memcached>`

    + `MessageFormatter`

      + :ref:`Null On New <null-on-new>`

    + `MessagePack`

      + :ref:`ext/msgpack <ext-msgpack>`

    + `Mongo`

      + :ref:`ext/mongodb <ext-mongodb>`

    + `MongoClient`

      + :ref:`ext/mongo <ext-mongo>`

    + `MongoDB`

      + :ref:`ext/mongo <ext-mongo>`
      + :ref:`ext/mongodb <ext-mongodb>`

    + `MongoDb`

      + :ref:`ext/mongodb <ext-mongodb>`

    + `Mongodb`

      + :ref:`ext/mongodb <ext-mongodb>`

    + `MySQLI`

      + :ref:`New On Functioncall Or Identifier <new-on-functioncall-or-identifier>`

    + `MySQLi`

      + :ref:`Should Use Prepared Statement <should-use-prepared-statement>`

    + `magic_quotes_runtime()`

      + :ref:`PHP 7.0 Removed Functions <php-7.0-removed-functions>`

    + `mail()`

      + :ref:`ext/mail <ext-mail>`
      + :ref:`Mail Usage <mail-usage>`

    + `mailparse_msg_create()`

      + :ref:`ext/mailparse <ext-mailparse>`

    + `match()`

      + :ref:`Uses PHP 8 Match() <uses-php-8-match()>`
      + :ref:`Could Use Match <could-use-match>`

    + `mb_chr()`

      + :ref:`New Functions In PHP 7.1 <new-functions-in-php-7.1>`
      + :ref:`New Functions In PHP 7.2 <new-functions-in-php-7.2>`

    + `mb_encoding_aliases()`

      + :ref:`Mbstring Unknown Encoding <mbstring-unknown-encoding>`

    + `mb_list_encodings()`

      + :ref:`Mbstring Unknown Encoding <mbstring-unknown-encoding>`

    + `mb_ord()`

      + :ref:`New Functions In PHP 7.1 <new-functions-in-php-7.1>`
      + :ref:`New Functions In PHP 7.2 <new-functions-in-php-7.2>`

    + `mb_scrub()`

      + :ref:`New Functions In PHP 7.1 <new-functions-in-php-7.1>`
      + :ref:`New Functions In PHP 7.2 <new-functions-in-php-7.2>`

    + `mb_split()`

      + :ref:`Optimize Explode() <optimize-explode()>`

    + `mb_stripos()`

      + :ref:`Mbstring Third Arg <mbstring-third-arg>`

    + `mb_stristr()`

      + :ref:`Mbstring Third Arg <mbstring-third-arg>`

    + `mb_strlen()`

      + :ref:`No Count With 0 <no-count-with-0>`
      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `mb_strpos()`

      + :ref:`Use str_contains() <use-str\_contains()>`
      + :ref:`Mbstring Third Arg <mbstring-third-arg>`

    + `mb_strrchr()`

      + :ref:`Mbstring Third Arg <mbstring-third-arg>`

    + `mb_strrichr()`

      + :ref:`Mbstring Third Arg <mbstring-third-arg>`

    + `mb_strripos()`

      + :ref:`Mbstring Third Arg <mbstring-third-arg>`

    + `mb_strrpos()`

      + :ref:`mb_strrpos() Third Argument <mb\_strrpos()-third-argument>`
      + :ref:`Mbstring Third Arg <mbstring-third-arg>`

    + `mb_strstr()`

      + :ref:`Mbstring Third Arg <mbstring-third-arg>`

    + `mb_substr()`

      + :ref:`No mb_substr In Loop <no-mb\_substr-in-loop>`
      + :ref:`Mbstring Third Arg <mbstring-third-arg>`
      + :ref:`Avoid Substr() One <avoid-substr()-one>`
      + :ref:`Substr To Trim <substr-to-trim>`

    + `mcrypt_cbc()`

      + :ref:`Functions Removed In PHP 5.5 <functions-removed-in-php-5.5>`
      + :ref:`PHP 7.0 Removed Functions <php-7.0-removed-functions>`

    + `mcrypt_cfb()`

      + :ref:`Functions Removed In PHP 5.5 <functions-removed-in-php-5.5>`
      + :ref:`PHP 7.0 Removed Functions <php-7.0-removed-functions>`

    + `mcrypt_decrypt`

      + :ref:`ext/mcrypt <ext-mcrypt>`

    + `mcrypt_ecb()`

      + :ref:`Functions Removed In PHP 5.5 <functions-removed-in-php-5.5>`
      + :ref:`PHP 7.0 Removed Functions <php-7.0-removed-functions>`

    + `mcrypt_encrypt`

      + :ref:`ext/mcrypt <ext-mcrypt>`

    + `mcrypt_get_iv_size()`

      + :ref:`ext/mcrypt <ext-mcrypt>`

    + `mcrypt_ofb()`

      + :ref:`Functions Removed In PHP 5.5 <functions-removed-in-php-5.5>`
      + :ref:`PHP 7.0 Removed Functions <php-7.0-removed-functions>`

    + `md5_file()`

      + :ref:`Directly Use File <directly-use-file>`

    + `memcache`

      + :ref:`ext/memcache <ext-memcache>`

    + `memcached`

      + :ref:`ext/memcache <ext-memcache>`
      + :ref:`ext/memcached <ext-memcached>`

    + `microtime()`

      + :ref:`Use random_int() <use-random\_int()>`

    + `mkdir()`

      + :ref:`Keep Files Access Restricted <keep-files-access-restricted>`
      + :ref:`Mkdir Default <mkdir-default>`

    + `money_format()`

      + :ref:`PHP 7.4 Removed Functions <php-7.4-removed-functions>`
      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `mongo`

      + :ref:`ext/mongo <ext-mongo>`
      + :ref:`ext/mongodb <ext-mongodb>`

    + `mongodb`

      + :ref:`ext/mongo <ext-mongo>`
      + :ref:`ext/mongodb <ext-mongodb>`

    + `move_uploaded_file()`

      + :ref:`move_uploaded_file Instead Of copy <move\_uploaded\_file-instead-of-copy>`

    + `msg_get_queue()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `mt_rand()`

      + :ref:`Use random_int() <use-random\_int()>`

    + `mt_srand()`

      + :ref:`Use random_int() <use-random\_int()>`

    + `mysql_error()`

      + :ref:`ext/mysql <ext-mysql>`
      + :ref:`Don't Echo Error <don't-echo-error>`

    + `mysqli`

      + :ref:`ext/mysql <ext-mysql>`
      + :ref:`ext/mysqli <ext-mysqli>`
      + :ref:`Use PHP Object API <use-php-object-api>`
      + :ref:`Should Use Prepared Statement <should-use-prepared-statement>`

    + `mysqli_connect_errno()`

      + :ref:`ext/mysqli <ext-mysqli>`
      + :ref:`Use PHP Object API <use-php-object-api>`

    + `mysqli_connect_error()`

      + :ref:`ext/mysqli <ext-mysqli>`
      + :ref:`Use PHP Object API <use-php-object-api>`


+ `N`
    + `NCURSES_COLOR_BLACK`

      + :ref:`ext/ncurses <ext-ncurses>`

    + `NCURSES_COLOR_GREEN`

      + :ref:`ext/ncurses <ext-ncurses>`

    + `NCURSES_COLOR_RED`

      + :ref:`ext/ncurses <ext-ncurses>`

    + `NCURSES_COLOR_WHITE`

      + :ref:`ext/ncurses <ext-ncurses>`

    + `NULL`

      + :ref:`Null Or Boolean Arrays <null-or-boolean-arrays>`
      + :ref:`Hidden Nullable <hidden-nullable>`
      + :ref:`Static Methods Can't Contain $this <static-methods-can't-contain-$this>`
      + :ref:`$this Belongs To Classes Or Traits <$this-belongs-to-classes-or-traits>`
      + :ref:`$this Is Not For Static Methods <$this-is-not-for-static-methods>`
      + :ref:`Used Static Properties <used-static-properties>`
      + :ref:`ext/eio <ext-eio>`
      + :ref:`ext/event <ext-event>`
      + :ref:`ext/xmlwriter <ext-xmlwriter>`
      + :ref:`array_key_exists() Speedup <array\_key\_exists()-speedup>`
      + :ref:`Should Use Coalesce <should-use-coalesce>`
      + :ref:`Check All Types <check-all-types>`
      + :ref:`Check JSON <check-json>`
      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `Null`

      + :ref:`Null Or Boolean Arrays <null-or-boolean-arrays>`
      + :ref:`Avoid Optional Properties <avoid-optional-properties>`
      + :ref:`Scalar Or Object Property <scalar-or-object-property>`
      + :ref:`Typehint Must Be Returned <typehint-must-be-returned>`
      + :ref:`Indices Are Int Or String <indices-are-int-or-string>`
      + :ref:`Duplicate Literal <duplicate-literal>`
      + :ref:`Set Typehints <set-typehints>`

    + `NumberFormatter`

      + :ref:`ext/intl <ext-intl>`

    + `ncurses_init()`

      + :ref:`ext/ncurses <ext-ncurses>`

    + `ncurses_start_color()`

      + :ref:`ext/ncurses <ext-ncurses>`

    + `next()`

      + :ref:`Foreach Don't Change Pointer <foreach-don't-change-pointer>`
      + :ref:`Static Loop <static-loop>`
      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `nl2br()`

      + :ref:`Joining file() <joining-file()>`

    + `null`

      + :ref:`Null Or Boolean Arrays <null-or-boolean-arrays>`
      + :ref:`Avoid Optional Properties <avoid-optional-properties>`
      + :ref:`Cyclic References <cyclic-references>`
      + :ref:`Don't Send $this In Constructor <don't-send-$this-in-constructor>`
      + :ref:`Don't Unset Properties <don't-unset-properties>`
      + :ref:`Hidden Nullable <hidden-nullable>`
      + :ref:`Insufficient Property Typehint <insufficient-property-typehint>`
      + :ref:`Make Global A Property <make-global-a-property>`
      + :ref:`Mismatch Properties Typehints <mismatch-properties-typehints>`
      + :ref:`Non Nullable Getters <non-nullable-getters>`
      + :ref:`Null On New <null-on-new>`
      + :ref:`Parent First <parent-first>`
      + :ref:`Scalar Or Object Property <scalar-or-object-property>`
      + :ref:`Should Deep Clone <should-deep-clone>`
      + :ref:`Uninitialized Property <uninitialized-property>`
      + :ref:`Weak Typing <weak-typing>`
      + :ref:`Set Class Property Definition With Typehint <set-class-property-definition-with-typehint>`
      + :ref:`ext/amqp <ext-amqp>`
      + :ref:`ext/eio <ext-eio>`
      + :ref:`ext/inotify <ext-inotify>`
      + :ref:`ext/newt <ext-newt>`
      + :ref:`ext/oci8 <ext-oci8>`
      + :ref:`ext/sdl <ext-sdl>`
      + :ref:`ext/uopz <ext-uopz>`
      + :ref:`Not Definitions Only <not-definitions-only>`
      + :ref:`Mismatched Default Arguments <mismatched-default-arguments>`
      + :ref:`Mismatch Type And Default <mismatch-type-and-default>`
      + :ref:`Nullable With Constant <nullable-with-constant>`
      + :ref:`Nullable Without Check <nullable-without-check>`
      + :ref:`Optional Parameter <optional-parameter>`
      + :ref:`Unbinding Closures <unbinding-closures>`
      + :ref:`Useless Type Check <useless-type-check>`
      + :ref:`Methods Without Return <methods-without-return>`
      + :ref:`Assumptions <assumptions>`
      + :ref:`Cast Unset Usage <cast-unset-usage>`
      + :ref:`Use === null <use-===-null>`
      + :ref:`No Reference For Ternary <no-reference-for-ternary>`
      + :ref:`Php 8.0 Only TypeHints <php-8.0-only-typehints>`
      + :ref:`Reserved Keywords In PHP 7 <reserved-keywords-in-php-7>`
      + :ref:`Scalar Are Not Arrays <scalar-are-not-arrays>`
      + :ref:`Should Use Coalesce <should-use-coalesce>`
      + :ref:`Use Browscap <use-browscap>`
      + :ref:`Use Nullable Type <use-nullable-type>`
      + :ref:`Use NullSafe Operator <use-nullsafe-operator>`
      + :ref:`PSR-16 Usage <psr-16-usage>`
      + :ref:`PSR-7 Usage <psr-7-usage>`
      + :ref:`Comparison Is Always True <comparison-is-always-true>`
      + :ref:`Break With Non Integer <break-with-non-integer>`
      + :ref:`Casting Ternary <casting-ternary>`
      + :ref:`Check All Types <check-all-types>`
      + :ref:`Check JSON <check-json>`
      + :ref:`Constant Conditions <constant-conditions>`
      + :ref:`Could Use array_fill_keys <could-use-array\_fill\_keys>`
      + :ref:`Indices Are Int Or String <indices-are-int-or-string>`
      + :ref:`isset() With Constant <isset()-with-constant>`
      + :ref:`Mismatched Ternary Alternatives <mismatched-ternary-alternatives>`
      + :ref:`Always Positive Comparison <always-positive-comparison>`
      + :ref:`Avoid Large Array Assignation <avoid-large-array-assignation>`
      + :ref:`No get_class() With Null <no-get\_class()-with-null>`
      + :ref:`@ Operator <@-operator>`
      + :ref:`Results May Be Missing <results-may-be-missing>`
      + :ref:`Return void  <return-void->`
      + :ref:`Set Aside Code <set-aside-code>`
      + :ref:`Should Use Operator <should-use-operator>`
      + :ref:`__toString() Throws Exception <\_\_tostring()-throws-exception>`
      + :ref:`Unset In Foreach <unset-in-foreach>`
      + :ref:`Use Debug <use-debug>`
      + :ref:`Could Be Null <could-be-null>`
      + :ref:`Missing Some Returntype <missing-some-returntype>`
      + :ref:`Constant Typo Looks Like A Variable <constant-typo-looks-like-a-variable>`


+ `O`
    + `OCI_ASSOC`

      + :ref:`ext/oci8 <ext-oci8>`

    + `OCI_RETURN_NULLS`

      + :ref:`ext/oci8 <ext-oci8>`

    + `OPENSSL_KEYTYPE_DH`

      + :ref:`Check Crypto Key Length <check-crypto-key-length>`

    + `OPENSSL_KEYTYPE_DSA`

      + :ref:`Check Crypto Key Length <check-crypto-key-length>`

    + `OPENSSL_KEYTYPE_EC`

      + :ref:`Check Crypto Key Length <check-crypto-key-length>`

    + `OPENSSL_KEYTYPE_RSA`

      + :ref:`Check Crypto Key Length <check-crypto-key-length>`

    + `OP_HALFOPEN`

      + :ref:`ext/imap <ext-imap>`

    + `O_NOCTTY`

      + :ref:`ext/dio <ext-dio>`

    + `O_NONBLOCK`

      + :ref:`ext/dio <ext-dio>`

    + `O_RDWR`

      + :ref:`ext/dio <ext-dio>`

    + `ob_end_flush()`

      + :ref:`ext/ob <ext-ob>`

    + `ob_get_clean()`

      + :ref:`ext/tidy <ext-tidy>`

    + `ob_start()`

      + :ref:`ext/ob <ext-ob>`
      + :ref:`ext/tidy <ext-tidy>`

    + `oci_error()`

      + :ref:`ext/oci8 <ext-oci8>`

    + `opcache_get_status()`

      + :ref:`ext/opcache <ext-opcache>`

    + `opencensus_trace_finish()`

      + :ref:`ext/opencensus <ext-opencensus>`

    + `opencensus_trace_list()`

      + :ref:`ext/opencensus <ext-opencensus>`

    + `opendir()`

      + :ref:`Avoid glob() Usage <avoid-glob()-usage>`

    + `openssl_csr_new()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `openssl_csr_sign()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `openssl_encrypt()`

      + :ref:`OpenSSL Ciphers Used <openssl-ciphers-used>`

    + `openssl_get_cipher_methods()`

      + :ref:`OpenSSL Ciphers Used <openssl-ciphers-used>`

    + `openssl_pkey_new()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `openssl_random_pseudo_bytes()`

      + :ref:`Use random_int() <use-random\_int()>`
      + :ref:`openssl_random_pseudo_byte() Second Argument <openssl\_random\_pseudo\_byte()-second-argument>`
      + :ref:`Random Without Try <random-without-try>`

    + `openssl_x509_read()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`


+ `P`
    + `PARENT`

      + :ref:`Use Lower Case For Parent, Static And Self <use-lower-case-for-parent,-static-and-self>`

    + `PARSEKIT_SIMPLE`

      + :ref:`ext/parsekit <ext-parsekit>`

    + `PASSWORD_ARGON2I`

      + :ref:`Argon2 Usage <argon2-usage>`

    + `PASSWORD_ARGON2_DEFAULT_THREADS`

      + :ref:`Argon2 Usage <argon2-usage>`

    + `PASSWORD_ARGON2_DEFAULT_TIME_COST`

      + :ref:`Argon2 Usage <argon2-usage>`

    + `PASSWORD_DEFAULT`

      + :ref:`Use password_hash() <use-password\_hash()>`

    + `PATHINFO_BASENAME`

      + :ref:`Use pathinfo() Arguments <use-pathinfo()-arguments>`

    + `PATHINFO_DIRNAME`

      + :ref:`Use pathinfo() Arguments <use-pathinfo()-arguments>`

    + `PDO`

      + :ref:`ext/pdo <ext-pdo>`
      + :ref:`Should Use Prepared Statement <should-use-prepared-statement>`

    + `PHP_INT_MAX`

      + :ref:`Manipulates INF <manipulates-inf>`

    + `PREG_SET_ORDER`

      + :ref:`preg_match_all() Flag <preg\_match\_all()-flag>`

    + `PREG_SPLIT_NO_EMPTY`

      + :ref:`No mb_substr In Loop <no-mb\_substr-in-loop>`

    + `PREG_UNMATCHED_AS_NULL`

      + :ref:`Possible Missing Subpattern <possible-missing-subpattern>`

    + `Parent`

      + :ref:`Parent, Static Or Self Outside Class <parent,-static-or-self-outside-class>`
      + :ref:`Set Class Method Remote Definition <set-class-method-remote-definition>`
      + :ref:`Avoid Self In Interface <avoid-self-in-interface>`

    + `ParseError`

      + :ref:`eval() Without Try <eval()-without-try>`

    + `Pdo`

      + :ref:`Set Aside Code <set-aside-code>`

    + `Phar`

      + :ref:`ext/phar <ext-phar>`
      + :ref:`Can't Disable Class <can't-disable-class>`

    + `pack()`

      + :ref:`Invalid Pack Format <invalid-pack-format>`
      + :ref:`Pack Format Inventory <pack-format-inventory>`

    + `parent`

      + :ref:`Abstract Or Implements <abstract-or-implements>`
      + :ref:`Abstract Static Methods <abstract-static-methods>`
      + :ref:`Cancel Common Method <cancel-common-method>`
      + :ref:`Constant Used Below <constant-used-below>`
      + :ref:`Could Be Abstract Class <could-be-abstract-class>`
      + :ref:`Could Be Parent Method <could-be-parent-method>`
      + :ref:`Cyclic References <cyclic-references>`
      + :ref:`Defined Class Constants <defined-class-constants>`
      + :ref:`Defined Parent MP <defined-parent-mp>`
      + :ref:`Disconnected Classes <disconnected-classes>`
      + :ref:`Fossilized Method <fossilized-method>`
      + :ref:`Identical Methods <identical-methods>`
      + :ref:`Incompatible Signature Methods <incompatible-signature-methods>`
      + :ref:`Incompatible Signature Methods With Covariance <incompatible-signature-methods-with-covariance>`
      + :ref:`Is Upper Family <is-upper-family>`
      + :ref:`Locally Unused Property <locally-unused-property>`
      + :ref:`Method Used Below <method-used-below>`
      + :ref:`Mismatch Properties Typehints <mismatch-properties-typehints>`
      + :ref:`Class Without Parent <class-without-parent>`
      + :ref:`self, parent, static Outside Class <self,-parent,-static-outside-class>`
      + :ref:`Overwritten Class Const <overwritten-class-const>`
      + :ref:`Parent First <parent-first>`
      + :ref:`Never Used Properties <never-used-properties>`
      + :ref:`Property Used Above <property-used-above>`
      + :ref:`Property Used Below <property-used-below>`
      + :ref:`Parent, Static Or Self Outside Class <parent,-static-or-self-outside-class>`
      + :ref:`Redefined Property <redefined-property>`
      + :ref:`Should Use Local Class <should-use-local-class>`
      + :ref:`Too Many Children <too-many-children>`
      + :ref:`Undefined Parent <undefined-parent>`
      + :ref:`Undefined static:: Or self:: <undefined-static-or-self>`
      + :ref:`Unresolved Classes <unresolved-classes>`
      + :ref:`Used Protected Method <used-protected-method>`
      + :ref:`Useless Constructor <useless-constructor>`
      + :ref:`Set Parent Definition <set-parent-definition>`
      + :ref:`ext/pcntl <ext-pcntl>`
      + :ref:`Empty Function <empty-function>`
      + :ref:`Unused Arguments <unused-arguments>`
      + :ref:`Avoid Self In Interface <avoid-self-in-interface>`
      + :ref:`Repeated Interface <repeated-interface>`
      + :ref:`Unused Interfaces <unused-interfaces>`
      + :ref:`Use Lower Case For Parent, Static And Self <use-lower-case-for-parent,-static-and-self>`
      + :ref:`Must Call Parent Constructor <must-call-parent-constructor>`
      + :ref:`Use Contravariance <use-contravariance>`
      + :ref:`Use Covariance <use-covariance>`
      + :ref:`Could Use __DIR__ <could-use-\_\_dir\_\_>`
      + :ref:`PHP7 Dirname <php7-dirname>`
      + :ref:`Already Parents Trait <already-parents-trait>`
      + :ref:`Set Typehints <set-typehints>`

    + `parse_ini_file()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`Directly Use File <directly-use-file>`

    + `parse_ini_string()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`Directly Use File <directly-use-file>`

    + `parse_str()`

      + :ref:`$this Belongs To Classes Or Traits <$this-belongs-to-classes-or-traits>`
      + :ref:`PHP 7.2 Deprecations <php-7.2-deprecations>`
      + :ref:`parse_str() Warning <parse\_str()-warning>`
      + :ref:`Register Globals <register-globals>`
      + :ref:`Use Url Query Functions <use-url-query-functions>`

    + `parse_url()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`Pathinfo() Returns May Vary <pathinfo()-returns-may-vary>`
      + :ref:`Use Url Query Functions <use-url-query-functions>`

    + `parsekit_compile_file()`

      + :ref:`Directly Use File <directly-use-file>`

    + `parsekit_compile_string()`

      + :ref:`Directly Use File <directly-use-file>`

    + `passthru()`

      + :ref:`Must Call Parent Constructor <must-call-parent-constructor>`

    + `password_hash()`

      + :ref:`ext/password <ext-password>`
      + :ref:`Use password_hash() <use-password\_hash()>`
      + :ref:`Compare Hash <compare-hash>`

    + `password_verify()`

      + :ref:`Compare Hash <compare-hash>`

    + `pathinfo()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`Pathinfo() Returns May Vary <pathinfo()-returns-may-vary>`
      + :ref:`Use Pathinfo <use-pathinfo>`
      + :ref:`Use pathinfo() Arguments <use-pathinfo()-arguments>`

    + `pcntl_fork()`

      + :ref:`ext/pcntl <ext-pcntl>`
      + :ref:`ext/proctitle <ext-proctitle>`

    + `pcntl_getpriority()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `pdo`

      + :ref:`ext/pdo <ext-pdo>`
      + :ref:`Or Die <or-die>`

    + `pg_result_status()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `pg_select()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `phar`

      + :ref:`ext/phar <ext-phar>`
      + :ref:`Can't Disable Class <can't-disable-class>`
      + :ref:`Use Basename Suffix <use-basename-suffix>`

    + `pharexception`

      + :ref:`Could Use Try <could-use-try>`

    + `php_egg_logo_guid()`

      + :ref:`Functions Removed In PHP 5.5 <functions-removed-in-php-5.5>`

    + `php_logo_guid()`

      + :ref:`Functions Removed In PHP 5.5 <functions-removed-in-php-5.5>`

    + `php_real_logo_guid()`

      + :ref:`Functions Removed In PHP 5.5 <functions-removed-in-php-5.5>`

    + `php_sapi_name()`

      + :ref:`Use Constant <use-constant>`

    + `phpcredits()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `phpinfo()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`Eval() Usage <eval()-usage>`
      + :ref:`Phpinfo <phpinfo>`

    + `phpversion()`

      + :ref:`Use Constant <use-constant>`

    + `pi()`

      + :ref:`Use Constant <use-constant>`

    + `png2wbmp()`

      + :ref:`PHP 7.2 Removed Functions <php-7.2-removed-functions>`
      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `posix_access()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `posix_get_last_error()`

      + :ref:`ext/posix <ext-posix>`

    + `posix_setsid()`

      + :ref:`ext/pcntl <ext-pcntl>`

    + `pow()`

      + :ref:`** For Exponent <**-for-exponent>`
      + :ref:`Negative Power <negative-power>`

    + `preg_filter()`

      + :ref:`Regex On Arrays <regex-on-arrays>`

    + `preg_grep()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`Regex On Arrays <regex-on-arrays>`

    + `preg_match()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`Regex Delimiter <regex-delimiter>`
      + :ref:`Results May Be Missing <results-may-be-missing>`
      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`
      + :ref:`Regex Inventory <regex-inventory>`

    + `preg_match_all()`

      + :ref:`preg_match_all() Flag <preg\_match\_all()-flag>`
      + :ref:`Regex Delimiter <regex-delimiter>`

    + `preg_replace()`

      + :ref:`Make One Call With Array <make-one-call-with-array>`
      + :ref:`Processing Collector <processing-collector>`
      + :ref:`Slow Functions <slow-functions>`
      + :ref:`Possible Missing Subpattern <possible-missing-subpattern>`
      + :ref:`preg_replace With Option e <preg\_replace-with-option-e>`
      + :ref:`Regex Delimiter <regex-delimiter>`
      + :ref:`Regex Inventory <regex-inventory>`

    + `preg_replace_callback()`

      + :ref:`Make One Call With Array <make-one-call-with-array>`
      + :ref:`Regex On Arrays <regex-on-arrays>`
      + :ref:`preg_replace With Option e <preg\_replace-with-option-e>`
      + :ref:`Regex Delimiter <regex-delimiter>`

    + `preg_replace_callback_array()`

      + :ref:`Make One Call With Array <make-one-call-with-array>`
      + :ref:`Regex On Arrays <regex-on-arrays>`
      + :ref:`New Functions In PHP 7.0 <new-functions-in-php-7.0>`
      + :ref:`preg_replace With Option e <preg\_replace-with-option-e>`
      + :ref:`Regex Delimiter <regex-delimiter>`

    + `preg_split()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`No mb_substr In Loop <no-mb\_substr-in-loop>`
      + :ref:`Optimize Explode() <optimize-explode()>`

    + `prev()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `printf()`

      + :ref:`ext/ffi <ext-ffi>`
      + :ref:`Echo Or Print <echo-or-print>`
      + :ref:`Printf Number Of Arguments <printf-number-of-arguments>`
      + :ref:`Printf Format Inventory <printf-format-inventory>`

    + `proc_nice()`

      + :ref:`New Functions In PHP 7.2 <new-functions-in-php-7.2>`

    + `proc_open()`

      + :ref:`Shell commands <shell-commands>`

    + `putenv()`

      + :ref:`Uses Environment <uses-environment>`


+ `R`
    + `RDkafka`

      + :ref:`ext/rdkafka <ext-rdkafka>`

    + `RUNKIT_ACC_PUBLIC`

      + :ref:`ext/runkit <ext-runkit>`

    + `RarArchive`

      + :ref:`ext/rar <ext-rar>`

    + `RdKafka`

      + :ref:`ext/rdkafka <ext-rdkafka>`

    + `Redis`

      + :ref:`ext/redis <ext-redis>`
      + :ref:`ext/swoole <ext-swoole>`

    + `Reflection`

      + :ref:`ext/reflection <ext-reflection>`
      + :ref:`Reflection Export() Is Deprecated <reflection-export()-is-deprecated>`

    + `ReflectionFunction`

      + :ref:`ext/reflection <ext-reflection>`
      + :ref:`Reflection Export() Is Deprecated <reflection-export()-is-deprecated>`

    + `Reflector`

      + :ref:`Reflection Export() Is Deprecated <reflection-export()-is-deprecated>`

    + `RuntimeException`

      + :ref:`Defined Exceptions <defined-exceptions>`
      + :ref:`Throw Functioncall <throw-functioncall>`
      + :ref:`Multiple Catch <multiple-catch>`
      + :ref:`Resources Usage <resources-usage>`

    + `rand()`

      + :ref:`Constant Dynamic Creation <constant-dynamic-creation>`
      + :ref:`Use random_int() <use-random\_int()>`
      + :ref:`Only Variable Returned By Reference <only-variable-returned-by-reference>`

    + `random_bytes()`

      + :ref:`Use random_int() <use-random\_int()>`
      + :ref:`New Functions In PHP 7.0 <new-functions-in-php-7.0>`
      + :ref:`Random Without Try <random-without-try>`

    + `random_int()`

      + :ref:`Abstract Away <abstract-away>`
      + :ref:`Use random_int() <use-random\_int()>`
      + :ref:`New Functions In PHP 7.0 <new-functions-in-php-7.0>`
      + :ref:`Random Without Try <random-without-try>`

    + `rdkafka`

      + :ref:`ext/rdkafka <ext-rdkafka>`

    + `read_exif_data()`

      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `readdir()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `readfile()`

      + :ref:`Joining file() <joining-file()>`

    + `readline_info()`

      + :ref:`ext/readline <ext-readline>`

    + `recode()`

      + :ref:`Directly Use File <directly-use-file>`

    + `recode_file()`

      + :ref:`Directly Use File <directly-use-file>`

    + `recode_string()`

      + :ref:`Directly Use File <directly-use-file>`

    + `redis`

      + :ref:`ext/redis <ext-redis>`
      + :ref:`ext/swoole <ext-swoole>`

    + `reflection`

      + :ref:`ext/reflection <ext-reflection>`
      + :ref:`Reflection Export() Is Deprecated <reflection-export()-is-deprecated>`

    + `register_shutdown_function()`

      + :ref:`Definitions Only <definitions-only>`
      + :ref:`Callback Function Needs Return <callback-function-needs-return>`

    + `register_tick_function()`

      + :ref:`Callback Function Needs Return <callback-function-needs-return>`

    + `restore_include_path()`

      + :ref:`PHP 7.4 Removed Functions <php-7.4-removed-functions>`
      + :ref:`PHP 8.0 Removed Functions <php-8.0-removed-functions>`

    + `round()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `rsort()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `rtrim()`

      + :ref:`Substr To Trim <substr-to-trim>`

    + `runkit_import()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`


+ `S`
    + `SCANDIR_SORT_NONE`

      + :ref:`Avoid glob() Usage <avoid-glob()-usage>`

    + `SDL_GetError()`

      + :ref:`ext/sdl <ext-sdl>`

    + `SDL_INIT_VIDEO`

      + :ref:`ext/sdl <ext-sdl>`

    + `SDL_Quit()`

      + :ref:`ext/sdl <ext-sdl>`

    + `SELF`

      + :ref:`Use Lower Case For Parent, Static And Self <use-lower-case-for-parent,-static-and-self>`

    + `SIGHUP`

      + :ref:`ext/pcntl <ext-pcntl>`

    + `SIGKILL`

      + :ref:`ext/posix <ext-posix>`

    + `SIGTERM`

      + :ref:`ext/pcntl <ext-pcntl>`

    + `SNMP`

      + :ref:`ext/snmp <ext-snmp>`

    + `SOAP_1_2`

      + :ref:`ext/soap <ext-soap>`

    + `SOCK_STREAM`

      + :ref:`ext/sockets <ext-sockets>`

    + `SOL_TCP`

      + :ref:`ext/sockets <ext-sockets>`

    + `SORT_LOCALE_STRING`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `SORT_NUMERIC`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `SORT_REGULAR`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `SORT_STRING`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `SPH_MATCH_ANY`

      + :ref:`ext/sphinx <ext-sphinx>`

    + `SQLITE3_ASSOC`

      + :ref:`Fetch One Row Format <fetch-one-row-format>`

    + `SQLITE3_BOTH`

      + :ref:`Fetch One Row Format <fetch-one-row-format>`

    + `SQLITE3_NUM`

      + :ref:`Fetch One Row Format <fetch-one-row-format>`

    + `SQLite3`

      + :ref:`ext/sqlite3 <ext-sqlite3>`
      + :ref:`Queries In Loops <queries-in-loops>`

    + `SVM`

      + :ref:`ext/svm <ext-svm>`

    + `SWFAction`

      + :ref:`ext/ming <ext-ming>`

    + `SWFMovie`

      + :ref:`ext/ming <ext-ming>`

    + `SWFShape`

      + :ref:`ext/ming <ext-ming>`

    + `SWFSprite`

      + :ref:`ext/ming <ext-ming>`

    + `SeasLog`

      + :ref:`ext/seaslog <ext-seaslog>`

    + `Seaslog`

      + :ref:`ext/seaslog <ext-seaslog>`

    + `Self`

      + :ref:`Avoid Self In Interface <avoid-self-in-interface>`

    + `SimpleXMLElement`

      + :ref:`ext/simplexml <ext-simplexml>`

    + `SoapClient`

      + :ref:`ext/soap <ext-soap>`

    + `Sphinx`

      + :ref:`ext/sphinx <ext-sphinx>`

    + `SplFileObject`

      + :ref:`Must Call Parent Constructor <must-call-parent-constructor>`

    + `SplQueue`

      + :ref:`PHP 7.2 Scalar Typehints <php-7.2-scalar-typehints>`

    + `SplTempFileObject`

      + :ref:`Must Call Parent Constructor <must-call-parent-constructor>`

    + `Sqlite3`

      + :ref:`ext/sqlite3 <ext-sqlite3>`
      + :ref:`Fetch One Row Format <fetch-one-row-format>`
      + :ref:`Set Aside Code <set-aside-code>`

    + `Static`

      + :ref:`Abstract Static Methods <abstract-static-methods>`
      + :ref:`Assign Default To Properties <assign-default-to-properties>`
      + :ref:`Non Static Methods Called In A Static <non-static-methods-called-in-a-static>`
      + :ref:`Normal Methods <normal-methods>`
      + :ref:`Parent, Static Or Self Outside Class <parent,-static-or-self-outside-class>`
      + :ref:`Should Use Local Class <should-use-local-class>`
      + :ref:`Static Methods Can't Contain $this <static-methods-can't-contain-$this>`
      + :ref:`Static Methods Called From Object <static-methods-called-from-object>`
      + :ref:`$this Is Not For Static Methods <$this-is-not-for-static-methods>`
      + :ref:`Wrong Access Style to Property <wrong-access-style-to-property>`
      + :ref:`Undefined static:: Or self:: <undefined-static-or-self>`
      + :ref:`Set Class Method Remote Definition <set-class-method-remote-definition>`
      + :ref:`Collect Local Variable Counts <collect-local-variable-counts>`
      + :ref:`ext/reflection <ext-reflection>`
      + :ref:`Closure Could Be A Callback <closure-could-be-a-callback>`
      + :ref:`Function With Dynamic Code <function-with-dynamic-code>`
      + :ref:`No Reference For Static Property <no-reference-for-static-property>`
      + :ref:`Static Loop <static-loop>`
      + :ref:`Variable May Be Non-Global <variable-may-be-non-global>`
      + :ref:`Should Be Single Quote <should-be-single-quote>`
      + :ref:`Real Variables <real-variables>`

    + `StdClass`

      + :ref:`PHP 7.2 Scalar Typehints <php-7.2-scalar-typehints>`
      + :ref:`Array_Fill() With Objects <array\_fill()-with-objects>`

    + `Stdclass`

      + :ref:`Is An Extension Class <is-an-extension-class>`
      + :ref:`Should Deep Clone <should-deep-clone>`
      + :ref:`Unresolved Catch <unresolved-catch>`
      + :ref:`Global Import <global-import>`
      + :ref:`array_key_exists() Works On Arrays <array\_key\_exists()-works-on-arrays>`
      + :ref:`Could Use array_fill_keys <could-use-array\_fill\_keys>`
      + :ref:`Missing Parenthesis <missing-parenthesis>`
      + :ref:`Avoid get_class() <avoid-get\_class()>`

    + `Strtr()`

      + :ref:`Strtr Arguments <strtr-arguments>`

    + `Substr()`

      + :ref:`Drop Substr Last Arg <drop-substr-last-arg>`

    + `Switch()`

      + :ref:`Missing Cases In Switch <missing-cases-in-switch>`

    + `scandir()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`Avoid glob() Usage <avoid-glob()-usage>`

    + `seaslog`

      + :ref:`ext/seaslog <ext-seaslog>`

    + `self`

      + :ref:`Abstract Static Methods <abstract-static-methods>`
      + :ref:`Constant Class <constant-class>`
      + :ref:`Constant Used Below <constant-used-below>`
      + :ref:`Could Be Private Class Constant <could-be-private-class-constant>`
      + :ref:`Could Be Protected Class Constant <could-be-protected-class-constant>`
      + :ref:`Method Could Be Static <method-could-be-static>`
      + :ref:`Defined Class Constants <defined-class-constants>`
      + :ref:`Defined static:: Or self:: <defined-static-or-self>`
      + :ref:`Is Not Class Family <is-not-class-family>`
      + :ref:`Non Static Methods Called In A Static <non-static-methods-called-in-a-static>`
      + :ref:`self, parent, static Outside Class <self,-parent,-static-outside-class>`
      + :ref:`No Self Referencing Constant <no-self-referencing-constant>`
      + :ref:`Overwritten Class Const <overwritten-class-const>`
      + :ref:`Property Used In One Method Only <property-used-in-one-method-only>`
      + :ref:`Parent, Static Or Self Outside Class <parent,-static-or-self-outside-class>`
      + :ref:`Could Use self <could-use-self>`
      + :ref:`Static Methods Can't Contain $this <static-methods-can't-contain-$this>`
      + :ref:`$this Is Not For Static Methods <$this-is-not-for-static-methods>`
      + :ref:`Wrong Access Style to Property <wrong-access-style-to-property>`
      + :ref:`Undefined static:: Or self:: <undefined-static-or-self>`
      + :ref:`Unused Class Constant <unused-class-constant>`
      + :ref:`Unused Methods <unused-methods>`
      + :ref:`Unused Private Methods <unused-private-methods>`
      + :ref:`Used Once Property <used-once-property>`
      + :ref:`Used Private Methods <used-private-methods>`
      + :ref:`ext/pcov <ext-pcov>`
      + :ref:`Avoid Self In Interface <avoid-self-in-interface>`
      + :ref:`Use Lower Case For Parent, Static And Self <use-lower-case-for-parent,-static-and-self>`
      + :ref:`Const With Array <const-with-array>`
      + :ref:`Detect Current Class <detect-current-class>`
      + :ref:`Upload Filename Injection <upload-filename-injection>`
      + :ref:`Avoid Large Array Assignation <avoid-large-array-assignation>`
      + :ref:`Should Use Math <should-use-math>`
      + :ref:`strip_tags Skips Closed Tag <strip\_tags-skips-closed-tag>`
      + :ref:`Self Using Trait <self-using-trait>`
      + :ref:`No Static Variable In A Method <no-static-variable-in-a-method>`

    + `sem_get()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `session_start()`

      + :ref:`ext/session <ext-session>`
      + :ref:`Use session_start() Options <use-session\_start()-options>`
      + :ref:`Should Use session_regenerateid() <should-use-session\_regenerateid()>`

    + `set_error_handler()`

      + :ref:`Definitions Only <definitions-only>`
      + :ref:`Avoid set_error_handler $context Argument <avoid-set\_error\_handler-$context-argument>`
      + :ref:`PHP Handlers Usage <php-handlers-usage>`

    + `set_exception_handler()`

      + :ref:`set_exception_handler() Warning <set\_exception\_handler()-warning>`

    + `set_magic_quotes_runtime()`

      + :ref:`PHP 7.0 Removed Functions <php-7.0-removed-functions>`

    + `set_socket_blocking()`

      + :ref:`PHP 7.0 Removed Functions <php-7.0-removed-functions>`

    + `setcookie()`

      + :ref:`Use Cookies <use-cookies>`
      + :ref:`Should Use SetCookie() <should-use-setcookie()>`
      + :ref:`Set Cookie Safe Arguments <set-cookie-safe-arguments>`

    + `setlocale()`

      + :ref:`Setlocale() Uses Constants <setlocale()-uses-constants>`

    + `setrawcookie()`

      + :ref:`Should Use SetCookie() <should-use-setcookie()>`
      + :ref:`Set Cookie Safe Arguments <set-cookie-safe-arguments>`

    + `settype()`

      + :ref:`Should Typecast <should-typecast>`

    + `sha1_file()`

      + :ref:`Directly Use File <directly-use-file>`

    + `shell_exec()`

      + :ref:`Shell Favorite <shell-favorite>`
      + :ref:`Shell commands <shell-commands>`
      + :ref:`Missing Some Returntype <missing-some-returntype>`

    + `shm_attach()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `shmop_open()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `show_source()`

      + :ref:`Directly Use File <directly-use-file>`

    + `simplexml_load_file()`

      + :ref:`Directly Use File <directly-use-file>`

    + `simplexml_load_string()`

      + :ref:`Directly Use File <directly-use-file>`

    + `sizeof()`

      + :ref:`Useless Check <useless-check>`

    + `sleep()`

      + :ref:`Avoid sleep()/usleep() <avoid-sleep()-usleep()>`

    + `snmp`

      + :ref:`ext/snmp <ext-snmp>`

    + `socket_accept()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `socket_addrinfo_bind()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `socket_addrinfo_connect()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `socket_connect()`

      + :ref:`ext/sockets <ext-sockets>`

    + `socket_create()`

      + :ref:`ext/sockets <ext-sockets>`
      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `socket_create_listen()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `socket_import_stream()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `socket_last_error()`

      + :ref:`ext/sockets <ext-sockets>`

    + `socket_read()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `socket_wsaprotocol_info_import()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `sort()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `sphinx`

      + :ref:`ext/sphinx <ext-sphinx>`

    + `spl_autoload_register()`

      + :ref:`Definitions Only <definitions-only>`

    + `split()`

      + :ref:`Optimize Explode() <optimize-explode()>`
      + :ref:`PHP 7.0 Removed Functions <php-7.0-removed-functions>`

    + `spliti()`

      + :ref:`PHP 7.0 Removed Functions <php-7.0-removed-functions>`

    + `sprintf()`

      + :ref:`Printf Format Inventory <printf-format-inventory>`

    + `sql_regcase()`

      + :ref:`PHP 7.0 Removed Functions <php-7.0-removed-functions>`

    + `sqlite3`

      + :ref:`ext/sqlite3 <ext-sqlite3>`
      + :ref:`Sqlite3 Requires Single Quotes <sqlite3-requires-single-quotes>`
      + :ref:`Set Aside Code <set-aside-code>`

    + `sqlsrv_errors()`

      + :ref:`ext/sqlsrv <ext-sqlsrv>`

    + `srand()`

      + :ref:`Use random_int() <use-random\_int()>`

    + `static`

      + :ref:`Abstract Static Methods <abstract-static-methods>`
      + :ref:`Ambiguous Static <ambiguous-static>`
      + :ref:`Cant Instantiate Class <cant-instantiate-class>`
      + :ref:`Class Usage <class-usage>`
      + :ref:`Method Could Be Static <method-could-be-static>`
      + :ref:`Defined Parent MP <defined-parent-mp>`
      + :ref:`Defined static:: Or self:: <defined-static-or-self>`
      + :ref:`Dependant Abstract Classes <dependant-abstract-classes>`
      + :ref:`No Direct Call To Magic Method <no-direct-call-to-magic-method>`
      + :ref:`Don't Send $this In Constructor <don't-send-$this-in-constructor>`
      + :ref:`Don't Unset Properties <don't-unset-properties>`
      + :ref:`Dynamic Classes <dynamic-classes>`
      + :ref:`Dynamic Methodcall <dynamic-methodcall>`
      + :ref:`Dynamic Property <dynamic-property>`
      + :ref:`Is Not Class Family <is-not-class-family>`
      + :ref:`Is Upper Family <is-upper-family>`
      + :ref:`Forgotten Visibility <forgotten-visibility>`
      + :ref:`Non Static Methods Called In A Static <non-static-methods-called-in-a-static>`
      + :ref:`self, parent, static Outside Class <self,-parent,-static-outside-class>`
      + :ref:`Normal Methods <normal-methods>`
      + :ref:`Only Static Methods <only-static-methods>`
      + :ref:`Order Of Declaration <order-of-declaration>`
      + :ref:`Overwritten Class Const <overwritten-class-const>`
      + :ref:`Property Names <property-names>`
      + :ref:`Property Used In One Method Only <property-used-in-one-method-only>`
      + :ref:`Parent, Static Or Self Outside Class <parent,-static-or-self-outside-class>`
      + :ref:`Should Use Local Class <should-use-local-class>`
      + :ref:`Static Methods Can't Contain $this <static-methods-can't-contain-$this>`
      + :ref:`Static Methods <static-methods>`
      + :ref:`Static Methods Called From Object <static-methods-called-from-object>`
      + :ref:`Static Properties <static-properties>`
      + :ref:`$this Belongs To Classes Or Traits <$this-belongs-to-classes-or-traits>`
      + :ref:`$this Is Not For Static Methods <$this-is-not-for-static-methods>`
      + :ref:`Too Many Dereferencing <too-many-dereferencing>`
      + :ref:`Magic Visibility <magic-visibility>`
      + :ref:`Wrong Access Style to Property <wrong-access-style-to-property>`
      + :ref:`Undefined static:: Or self:: <undefined-static-or-self>`
      + :ref:`Unused Private Methods <unused-private-methods>`
      + :ref:`Unused Private Properties <unused-private-properties>`
      + :ref:`Use ::Class Operator <use-class-operator>`
      + :ref:`Used Classes <used-classes>`
      + :ref:`Used Private Methods <used-private-methods>`
      + :ref:`Used Static Properties <used-static-properties>`
      + :ref:`Useless Abstract Class <useless-abstract-class>`
      + :ref:`Use This <use-this>`
      + :ref:`Using $this Outside A Class <using-$this-outside-a-class>`
      + :ref:`Propagate Calls <propagate-calls>`
      + :ref:`SetA rray Class Definition <seta-rray-class-definition>`
      + :ref:`Set String Method Definition <set-string-method-definition>`
      + :ref:`Constant Dynamic Creation <constant-dynamic-creation>`
      + :ref:`Constant Order <constant-order>`
      + :ref:`ext/ffi <ext-ffi>`
      + :ref:`ext/libevent <ext-libevent>`
      + :ref:`ext/reflection <ext-reflection>`
      + :ref:`ext/xdebug <ext-xdebug>`
      + :ref:`Not Definitions Only <not-definitions-only>`
      + :ref:`Cannot Use Static For Closure <cannot-use-static-for-closure>`
      + :ref:`Closure Could Be A Callback <closure-could-be-a-callback>`
      + :ref:`Could Be Typehinted Callable <could-be-typehinted-callable>`
      + :ref:`Could Be Static Closure <could-be-static-closure>`
      + :ref:`Mismatch Type And Default <mismatch-type-and-default>`
      + :ref:`Modified Typed Parameter <modified-typed-parameter>`
      + :ref:`No Literal For Reference <no-literal-for-reference>`
      + :ref:`No Return Used <no-return-used>`
      + :ref:`Only Variable For Reference <only-variable-for-reference>`
      + :ref:`Only Variable Passed By Reference <only-variable-passed-by-reference>`
      + :ref:`Too Many Local Variables <too-many-local-variables>`
      + :ref:`Unbinding Closures <unbinding-closures>`
      + :ref:`Wrong Type Returned <wrong-type-returned>`
      + :ref:`An OOP Factory <an-oop-factory>`
      + :ref:`Use PHP7 Encapsed Strings <use-php7-encapsed-strings>`
      + :ref:`Cant Use Return Value In Write Context <cant-use-return-value-in-write-context>`
      + :ref:`Use Lower Case For Parent, Static And Self <use-lower-case-for-parent,-static-and-self>`
      + :ref:`Detect Current Class <detect-current-class>`
      + :ref:`No Reference For Static Property <no-reference-for-static-property>`
      + :ref:`Only Container For Reference <only-container-for-reference>`
      + :ref:`Php 8.0 Variable Syntax Tweaks <php-8.0-variable-syntax-tweaks>`
      + :ref:`Reserved Match Keyword <reserved-match-keyword>`
      + :ref:`Dynamic Library Loading <dynamic-library-loading>`
      + :ref:`No Net For Xml Load <no-net-for-xml-load>`
      + :ref:`Constant Conditions <constant-conditions>`
      + :ref:`Constant Scalar Expressions <constant-scalar-expressions>`
      + :ref:`Could Be Static <could-be-static>`
      + :ref:`Declare Static Once <declare-static-once>`
      + :ref:`Dynamic Calls <dynamic-calls>`
      + :ref:`Foreach Needs Reference Array <foreach-needs-reference-array>`
      + :ref:`Avoid Large Array Assignation <avoid-large-array-assignation>`
      + :ref:`No Hardcoded Hash <no-hardcoded-hash>`
      + :ref:`No Need For get_class() <no-need-for-get\_class()>`
      + :ref:`Only Variable Returned By Reference <only-variable-returned-by-reference>`
      + :ref:`Static Global Variables Confusion <static-global-variables-confusion>`
      + :ref:`Static Loop <static-loop>`
      + :ref:`Useless Unset <useless-unset>`
      + :ref:`Variable May Be Non-Global <variable-may-be-non-global>`
      + :ref:`Dependant Trait <dependant-trait>`
      + :ref:`No Static Variable In A Method <no-static-variable-in-a-method>`
      + :ref:`Real Variables <real-variables>`
      + :ref:`Static Variables <static-variables>`
      + :ref:`Undefined Variable <undefined-variable>`
      + :ref:`Used Once Variables <used-once-variables>`
      + :ref:`FuelPHP Usage <fuelphp-usage>`
      + :ref:`Coding conventions <coding-conventions>`

    + `stdClass`

      + :ref:`Cant Inherit Abstract Method <cant-inherit-abstract-method>`
      + :ref:`New On Functioncall Or Identifier <new-on-functioncall-or-identifier>`
      + :ref:`ext/memcache <ext-memcache>`
      + :ref:`Aliases <aliases>`
      + :ref:`Return Typehint Usage <return-typehint-usage>`
      + :ref:`Avoid Using stdClass <avoid-using-stdclass>`
      + :ref:`Objects Don't Need References <objects-don't-need-references>`

    + `str_ireplace()`

      + :ref:`Make One Call With Array <make-one-call-with-array>`

    + `str_pad()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`Could Use str_repeat() <could-use-str\_repeat()>`

    + `str_repeat()`

      + :ref:`Could Use str_repeat() <could-use-str\_repeat()>`

    + `str_replace()`

      + :ref:`Joining file() <joining-file()>`
      + :ref:`Make One Call With Array <make-one-call-with-array>`

    + `stream_isatty()`

      + :ref:`New Functions In PHP 7.2 <new-functions-in-php-7.2>`

    + `stream_select()`

      + :ref:`ext/inotify <ext-inotify>`

    + `stream_set_blocking()`

      + :ref:`ext/inotify <ext-inotify>`

    + `stream_socket_client()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`

    + `stream_socket_server()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`@ Operator <@-operator>`

    + `strip_tags()`

      + :ref:`strip_tags Skips Closed Tag <strip\_tags-skips-closed-tag>`

    + `stripos()`

      + :ref:`strpos() Too Much <strpos()-too-much>`
      + :ref:`Use str_contains() <use-str\_contains()>`
      + :ref:`Simplify Regex <simplify-regex>`
      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `strlen()`

      + :ref:`No Count With 0 <no-count-with-0>`
      + :ref:`Always Positive Comparison <always-positive-comparison>`

    + `strpos()`

      + :ref:`Slow Functions <slow-functions>`
      + :ref:`strpos() Too Much <strpos()-too-much>`
      + :ref:`Use str_contains() <use-str\_contains()>`
      + :ref:`Simplify Regex <simplify-regex>`
      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `strripos()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `strrpos()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `strstr()`

      + :ref:`Slow Functions <slow-functions>`

    + `strtok()`

      + :ref:`Strpos()-like Comparison <strpos()-like-comparison>`

    + `strtolower()`

      + :ref:`Only Variable Passed By Reference <only-variable-passed-by-reference>`

    + `strtotime()`

      + :ref:`time() Vs strtotime() <time()-vs-strtotime()>`
      + :ref:`Next Month Trap <next-month-trap>`

    + `strtoupper()`

      + :ref:`Closure Could Be A Callback <closure-could-be-a-callback>`
      + :ref:`Wrong Number Of Arguments <wrong-number-of-arguments>`

    + `strtr()`

      + :ref:`Strtr Arguments <strtr-arguments>`

    + `strval()`

      + :ref:`Concat Empty String <concat-empty-string>`

    + `substr()`

      + :ref:`No mb_substr In Loop <no-mb\_substr-in-loop>`
      + :ref:`strpos() Too Much <strpos()-too-much>`
      + :ref:`Substring First <substring-first>`
      + :ref:`Use array_slice() <use-array\_slice()>`
      + :ref:`Wrong Parameter Type <wrong-parameter-type>`
      + :ref:`No List With String <no-list-with-string>`
      + :ref:`Use Basename Suffix <use-basename-suffix>`
      + :ref:`Avoid Substr() One <avoid-substr()-one>`
      + :ref:`Substr To Trim <substr-to-trim>`

    + `substr_replace()`

      + :ref:`Make One Call With Array <make-one-call-with-array>`

    + `svm`

      + :ref:`ext/svm <ext-svm>`

    + `switch()`

      + :ref:`Strict Comparison With Booleans <strict-comparison-with-booleans>`
      + :ref:`Bracketless Blocks <bracketless-blocks>`
      + :ref:`Break Outside Loop <break-outside-loop>`
      + :ref:`Could Use Match <could-use-match>`
      + :ref:`Missing Cases In Switch <missing-cases-in-switch>`
      + :ref:`Switch To Switch <switch-to-switch>`
      + :ref:`Switch With Too Many Default <switch-with-too-many-default>`
      + :ref:`Switch Without Default <switch-without-default>`
      + :ref:`Use Case Value <use-case-value>`

    + `sys_get_temp_dir()`

      + :ref:`No Hardcoded Path <no-hardcoded-path>`
      + :ref:`Use System Tmp <use-system-tmp>`

    + `system()`

      + :ref:`Shell commands <shell-commands>`


+ `T`
    + `T_COMMENT`

      + :ref:`ext/tokenizer <ext-tokenizer>`

    + `T_DOC_COMMENT`

      + :ref:`ext/tokenizer <ext-tokenizer>`

    + `Throwable`

      + :ref:`Can't Throw Throwable <can't-throw-throwable>`
      + :ref:`Useless Catch <useless-catch>`
      + :ref:`ext/uopz <ext-uopz>`
      + :ref:`set_exception_handler() Warning <set\_exception\_handler()-warning>`
      + :ref:`Empty Try Catch <empty-try-catch>`
      + :ref:`Try With Finally <try-with-finally>`

    + `Tidy`

      + :ref:`ext/tidy <ext-tidy>`

    + `TokyoTyrant`

      + :ref:`ext/tokyotyrant <ext-tokyotyrant>`

    + `Traversable`

      + :ref:`Cant Implement Traversable <cant-implement-traversable>`

    + `throwable`

      + :ref:`Can't Throw Throwable <can't-throw-throwable>`

    + `tidy`

      + :ref:`ext/tidy <ext-tidy>`
      + :ref:`Use PHP Object API <use-php-object-api>`

    + `time()`

      + :ref:`Conditioned Constants <conditioned-constants>`
      + :ref:`ext/zip <ext-zip>`
      + :ref:`time() Vs strtotime() <time()-vs-strtotime()>`
      + :ref:`Use random_int() <use-random\_int()>`
      + :ref:`Date Formats <date-formats>`
      + :ref:`Session Variables <session-variables>`
      + :ref:`Use Cookies <use-cookies>`
      + :ref:`Should Use SetCookie() <should-use-setcookie()>`
      + :ref:`Set Cookie Safe Arguments <set-cookie-safe-arguments>`
      + :ref:`Timestamp Difference <timestamp-difference>`

    + `token_get_all()`

      + :ref:`@ Operator <@-operator>`

    + `track_errors`

      + :ref:`PHP 8.0 Removed Directives <php-8.0-removed-directives>`

    + `traversable`

      + :ref:`Cant Implement Traversable <cant-implement-traversable>`
      + :ref:`Could Be Iterable <could-be-iterable>`

    + `trigger_error()`

      + :ref:`Use Constant As Arguments <use-constant-as-arguments>`
      + :ref:`Trigger Errors <trigger-errors>`

    + `trim()`

      + :ref:`Substring First <substring-first>`
      + :ref:`Substr To Trim <substr-to-trim>`


+ `U`
    + `Unset()`

      + :ref:`Unset() Or (unset) <unset()-or-(unset)>`
      + :ref:`Multiple Unset() <multiple-unset()>`

    + `Usort()`

      + :ref:`Usort Sorting In PHP 7.0 <usort-sorting-in-php-7.0>`

    + `uasort()`

      + :ref:`Slow Functions <slow-functions>`
      + :ref:`Usort Sorting In PHP 7.0 <usort-sorting-in-php-7.0>`

    + `uksort()`

      + :ref:`Slow Functions <slow-functions>`
      + :ref:`Usort Sorting In PHP 7.0 <usort-sorting-in-php-7.0>`

    + `uniqid()`

      + :ref:`ext/eio <ext-eio>`
      + :ref:`Use random_int() <use-random\_int()>`

    + `unpack()`

      + :ref:`Invalid Pack Format <invalid-pack-format>`
      + :ref:`Pack Format Inventory <pack-format-inventory>`

    + `unserialize()`

      + :ref:`Unserialize Second Arg <unserialize-second-arg>`

    + `unset()`

      + :ref:`Unset() Or (unset) <unset()-or-(unset)>`
      + :ref:`Multiple Unset() <multiple-unset()>`

    + `urlencode()`

      + :ref:`Use Url Query Functions <use-url-query-functions>`

    + `usleep()`

      + :ref:`Avoid sleep()/usleep() <avoid-sleep()-usleep()>`

    + `usort()`

      + :ref:`Slow Functions <slow-functions>`

    + `uuid_create()`

      + :ref:`ext/uuid <ext-uuid>`


+ `V`
    + `V8Js`

      + :ref:`ext/v8js <ext-v8js>`

    + `V8JsException`

      + :ref:`ext/v8js <ext-v8js>`

    + `VARNISH_CONFIG_HOST`

      + :ref:`ext/varnish <ext-varnish>`

    + `VARNISH_CONFIG_PORT`

      + :ref:`ext/varnish <ext-varnish>`

    + `VARNISH_CONFIG_SECRET`

      + :ref:`ext/varnish <ext-varnish>`

    + `VARNISH_CONFIG_TIMEOUT`

      + :ref:`ext/varnish <ext-varnish>`

    + `VarnishAdmin`

      + :ref:`ext/varnish <ext-varnish>`

    + `v8js`

      + :ref:`ext/v8js <ext-v8js>`

    + `var_dump()`

      + :ref:`Use Debug <use-debug>`
      + :ref:`var_dump()... Usage <var\_dump()...-usage>`

    + `var_export()`

      + :ref:`var_dump()... Usage <var\_dump()...-usage>`

    + `vprintf()`

      + :ref:`Printf Number Of Arguments <printf-number-of-arguments>`
      + :ref:`Printf Format Inventory <printf-format-inventory>`


+ `W`
    + `WeakRef`

      + :ref:`ext/weakref <ext-weakref>`

    + `WeakReference`

      + :ref:`Php 7.4 New Class <php-7.4-new-class>`

    + `weakref`

      + :ref:`ext/weakref <ext-weakref>`

    + `while()`

      + :ref:`Minus One On Error <minus-one-on-error>`
      + :ref:`Bracketless Blocks <bracketless-blocks>`
      + :ref:`Break Outside Loop <break-outside-loop>`

    + `wordwrap()`

      + :ref:`ext/mail <ext-mail>`
      + :ref:`Mail Usage <mail-usage>`


+ `X`
    + `XHPROF_FLAGS_CPU`

      + :ref:`ext/xhprof <ext-xhprof>`

    + `XHPROF_FLAGS_MEMORY`

      + :ref:`ext/xhprof <ext-xhprof>`

    + `XSLTProcessor`

      + :ref:`ext/xsl <ext-xsl>`

    + `xdebug_call_class()`

      + :ref:`ext/xdebug <ext-xdebug>`

    + `xdebug_call_file()`

      + :ref:`ext/xdebug <ext-xdebug>`

    + `xdebug_call_function()`

      + :ref:`ext/xdebug <ext-xdebug>`

    + `xdebug_call_line()`

      + :ref:`ext/xdebug <ext-xdebug>`

    + `xhprof_disable()`

      + :ref:`ext/xhprof <ext-xhprof>`

    + `xml_parser_create()`

      + :ref:`ext/xml <ext-xml>`
      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`

    + `xml_parser_create_ns()`

      + :ref:`PHP Resources Turned Into Objects <php-resources-turned-into-objects>`


+ `Y`
    + `yaml_parse()`

      + :ref:`Directly Use File <directly-use-file>`

    + `yaml_parse_file()`

      + :ref:`Directly Use File <directly-use-file>`


+ `Z`
    + `ZBarCodeImage`

      + :ref:`ext/zbarcode <ext-zbarcode>`

    + `ZBarCodeScanner`

      + :ref:`ext/zbarcode <ext-zbarcode>`

    + `ZMQ`

      + :ref:`ext/0mq <ext-0mq>`

    + `ZMQDevice`

      + :ref:`ext/0mq <ext-0mq>`

    + `ZipArchive`

      + :ref:`ext/zip <ext-zip>`

    + `ZooKeeper`

      + :ref:`ext/zookeeper <ext-zookeeper>`

    + `Zookeeper`

      + :ref:`PHP Exception <php-exception>`
      + :ref:`ext/zookeeper <ext-zookeeper>`

    + `ZookeeperException`

      + :ref:`PHP Exception <php-exception>`

    + `zend_logo_guid()`

      + :ref:`Functions Removed In PHP 5.5 <functions-removed-in-php-5.5>`

    + `zmq`

      + :ref:`ext/0mq <ext-0mq>`

    + `zookeeper`

      + :ref:`ext/zookeeper <ext-zookeeper>`


+ `_`
    + `_()`

      + :ref:`ext/gettext <ext-gettext>`

    + `__CLASS__`

      + :ref:`Undefined Properties <undefined-properties>`
      + :ref:`Detect Current Class <detect-current-class>`
      + :ref:`::class <class>`
      + :ref:`Interpolation <interpolation>`
      + :ref:`Non Ascii Variables <non-ascii-variables>`

    + `__DIR__`

      + :ref:`ext/wasm <ext-wasm>`
      + :ref:`Use PHP7 Encapsed Strings <use-php7-encapsed-strings>`
      + :ref:`Could Use __DIR__ <could-use-\_\_dir\_\_>`
      + :ref:`__DIR__ Then Slash <\_\_dir\_\_-then-slash>`
      + :ref:`No Hardcoded Path <no-hardcoded-path>`
      + :ref:`PHP Sapi <php-sapi>`

    + `__FILE__`

      + :ref:`Magic Constant Usage <magic-constant-usage>`
      + :ref:`ext/cairo <ext-cairo>`
      + :ref:`ext/fann <ext-fann>`
      + :ref:`ext/grpc <ext-grpc>`
      + :ref:`ext/inotify <ext-inotify>`
      + :ref:`ext/sem <ext-sem>`
      + :ref:`__halt_compiler <\_\_halt\_compiler>`
      + :ref:`Could Use __DIR__ <could-use-\_\_dir\_\_>`
      + :ref:`No Hardcoded Path <no-hardcoded-path>`

    + `__FUNCTION__`

      + :ref:`Use Const And Functions <use-const-and-functions>`
      + :ref:`PHP Overridden Function <php-overridden-function>`

    + `__LINE__`

      + :ref:`Magic Constant Usage <magic-constant-usage>`

    + `__METHOD__`

      + :ref:`Anonymous Classes <anonymous-classes>`
      + :ref:`Class Usage <class-usage>`
      + :ref:`Non Static Methods Called In A Static <non-static-methods-called-in-a-static>`
      + :ref:`Should Have Destructor <should-have-destructor>`
      + :ref:`Already Parents Interface <already-parents-interface>`

    + `__call`

      + :ref:`Check On __Call Usage <check-on-\_\_call-usage>`
      + :ref:`No Direct Call To Magic Method <no-direct-call-to-magic-method>`
      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Magic Methods <magic-methods>`
      + :ref:`$this Belongs To Classes Or Traits <$this-belongs-to-classes-or-traits>`
      + :ref:`Useless Typehint <useless-typehint>`
      + :ref:`Must Return Methods <must-return-methods>`

    + `__callStatic`

      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Magic Methods <magic-methods>`
      + :ref:`Must Return Methods <must-return-methods>`

    + `__clone`

      + :ref:`No Direct Call To Magic Method <no-direct-call-to-magic-method>`
      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Magic Methods <magic-methods>`
      + :ref:`Should Deep Clone <should-deep-clone>`
      + :ref:`Magic Visibility <magic-visibility>`
      + :ref:`Set Clone Link <set-clone-link>`
      + :ref:`Direct Call To __clone() <direct-call-to-\_\_clone()>`

    + `__construct`

      + :ref:`Anonymous Classes <anonymous-classes>`
      + :ref:`Avoid Optional Properties <avoid-optional-properties>`
      + :ref:`Cant Instantiate Class <cant-instantiate-class>`
      + :ref:`Constructors <constructors>`
      + :ref:`Don't Send $this In Constructor <don't-send-$this-in-constructor>`
      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Insufficient Property Typehint <insufficient-property-typehint>`
      + :ref:`Assign Default To Properties <assign-default-to-properties>`
      + :ref:`Make Global A Property <make-global-a-property>`
      + :ref:`Non Nullable Getters <non-nullable-getters>`
      + :ref:`Old Style Constructor <old-style-constructor>`
      + :ref:`Parent First <parent-first>`
      + :ref:`Property Could Be Local <property-could-be-local>`
      + :ref:`Redefined Default <redefined-default>`
      + :ref:`Scalar Or Object Property <scalar-or-object-property>`
      + :ref:`Should Deep Clone <should-deep-clone>`
      + :ref:`Should Have Destructor <should-have-destructor>`
      + :ref:`Should Use Local Class <should-use-local-class>`
      + :ref:`Strange Names For Methods <strange-names-for-methods>`
      + :ref:`Throw In Destruct <throw-in-destruct>`
      + :ref:`Too Many Injections <too-many-injections>`
      + :ref:`DI Cyclic Dependencies <di-cyclic-dependencies>`
      + :ref:`Uninitialized Property <uninitialized-property>`
      + :ref:`Unitialized Properties <unitialized-properties>`
      + :ref:`Useless Constructor <useless-constructor>`
      + :ref:`Illegal Name For Method <illegal-name-for-method>`
      + :ref:`Wrong Typed Property Default <wrong-typed-property-default>`
      + :ref:`Create Default Values <create-default-values>`
      + :ref:`Set Class Method Remote Definition <set-class-method-remote-definition>`
      + :ref:`Collect Method Counts <collect-method-counts>`
      + :ref:`Could Be Static Closure <could-be-static-closure>`
      + :ref:`Useless Return <useless-return>`
      + :ref:`Courier Anti-Pattern <courier-anti-pattern>`
      + :ref:`Dependency Injection <dependency-injection>`
      + :ref:`Could Use Promoted Properties <could-use-promoted-properties>`
      + :ref:`Must Call Parent Constructor <must-call-parent-constructor>`
      + :ref:`Signature Trailing Comma <signature-trailing-comma>`
      + :ref:`Typed Property Usage <typed-property-usage>`
      + :ref:`Avoid Large Array Assignation <avoid-large-array-assignation>`
      + :ref:`Set Aside Code <set-aside-code>`
      + :ref:`Should Chain Exception <should-chain-exception>`
      + :ref:`__toString() Throws Exception <\_\_tostring()-throws-exception>`
      + :ref:`Non Ascii Variables <non-ascii-variables>`
      + :ref:`Set Typehints <set-typehints>`

    + `__debugInfo`

      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Magic Methods <magic-methods>`
      + :ref:`Must Return Methods <must-return-methods>`
      + :ref:`__debugInfo() Usage <\_\_debuginfo()-usage>`

    + `__destruct`

      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Should Have Destructor <should-have-destructor>`
      + :ref:`Throw In Destruct <throw-in-destruct>`
      + :ref:`ext/weakref <ext-weakref>`

    + `__get`

      + :ref:`No Direct Call To Magic Method <no-direct-call-to-magic-method>`
      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Is A PHP Magic Property <is-a-php-magic-property>`
      + :ref:`Magic Methods <magic-methods>`
      + :ref:`Make Magic Concrete <make-magic-concrete>`
      + :ref:`No Magic Method With Array <no-magic-method-with-array>`
      + :ref:`Magic Visibility <magic-visibility>`
      + :ref:`Undefined Properties <undefined-properties>`
      + :ref:`Useless Typehint <useless-typehint>`
      + :ref:`Create Magic Property <create-magic-property>`
      + :ref:`Must Return Methods <must-return-methods>`
      + :ref:`Memoize MagicCall <memoize-magiccall>`
      + :ref:`Missing __isset() Method <missing-\_\_isset()-method>`
      + :ref:`Set Typehints <set-typehints>`

    + `__invoke`

      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Magic Methods <magic-methods>`
      + :ref:`Must Return Methods <must-return-methods>`

    + `__isset`

      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Magic Methods <magic-methods>`
      + :ref:`Magic Visibility <magic-visibility>`
      + :ref:`Must Return Methods <must-return-methods>`
      + :ref:`Missing __isset() Method <missing-\_\_isset()-method>`

    + `__set`

      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Magic Methods <magic-methods>`
      + :ref:`No Magic Method With Array <no-magic-method-with-array>`
      + :ref:`Magic Visibility <magic-visibility>`
      + :ref:`Undefined Properties <undefined-properties>`
      + :ref:`Useless Typehint <useless-typehint>`
      + :ref:`Create Magic Property <create-magic-property>`
      + :ref:`Set Typehints <set-typehints>`

    + `__set_state`

      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Magic Methods <magic-methods>`
      + :ref:`Must Return Methods <must-return-methods>`

    + `__sleep`

      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Magic Methods <magic-methods>`
      + :ref:`Must Return Methods <must-return-methods>`

    + `__toString`

      + :ref:`Could Be Stringable <could-be-stringable>`
      + :ref:`No Direct Call To Magic Method <no-direct-call-to-magic-method>`
      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Magic Methods <magic-methods>`
      + :ref:`Must Return Methods <must-return-methods>`
      + :ref:`Reflection Export() Is Deprecated <reflection-export()-is-deprecated>`
      + :ref:`__toString() Throws Exception <\_\_tostring()-throws-exception>`
      + :ref:`Interpolation <interpolation>`

    + `__tostring`

      + :ref:`Could Be Stringable <could-be-stringable>`

    + `__unset`

      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Magic Methods <magic-methods>`

    + `__wakeup`

      + :ref:`Has Magic Property <has-magic-property>`
      + :ref:`Magic Methods <magic-methods>`






Directory by PHP Error message
------------------------------

Exakat helps reduce the amount of error and warning that code is producing by reporting pattern that are likely to emit errors.

134 PHP error message detailled : 

* :ref:`"continue" targeting switch is equivalent to "break". Did you mean to use "continue 2"? <continue-is-for-loop>`
* :ref:`A function with return type must return a value (did you mean "return null;" instead of "return;"?) <typehint-must-be-returned>`
* :ref:`Access level to Bar\:\:$publicProperty must be public (as in class Foo) <raised-access-level>`
* :ref:`Access level to c\:\:iPrivate() must be public (as in class i)  <concrete-visibility>`
* :ref:`Access level to x\:\:foo() must be public (as in class i) <implemented-methods-are-public>`
* :ref:`Access level to xx\:\:$x must be public (as in class x) <redefined-property>`
* :ref:`Access to undeclared static property <wrong-access-style-to-property>`
* :ref:`Access to undeclared static property: x\:\:$y <undefined-static-or-self>`
* :ref:`Accessing static property aa\:\:$a as non static <wrong-access-style-to-property>`
* :ref:`An alias (%s) was defined for method %s(), but this method does not exist <undefined-insteadof>`
* :ref:`Argument #1 ($line) must be passed by reference <array\_map()-passes-by-value>`
* :ref:`Argument 1 passed to foo() must be of the type integer, string given <mismatch-type-and-default>`
* :ref:`Argument cannot be passed by reference <only-container-for-reference>`
* :ref:`Argument cannot be passed by reference <only-variable-for-reference>`
* :ref:`Argument cannot be passed by reference <typehinted-references>`
* :ref:`Argument must be of type int, array given <wrong-parameter-type>`
* :ref:`Array and string offset access syntax with curly braces is deprecated <no-more-curly-arrays>`
* :ref:`Call to a member function m() on null <use-nullsafe-operator>`
* :ref:`Call to private Y\:\:__construct() from invalid context <cant-instantiate-class>`
* :ref:`Call to undefined function <throw-functioncall>`
* :ref:`Call to undefined method theParent\:\:bar() <undefined-parent>`
* :ref:`Call to undefined method x\:\:y() <undefined-static-or-self>`
* :ref:`Can't inherit abstract function A\:\:bar() <cant-inherit-abstract-method>`
* :ref:`Cannot access parent\:\: when current class scope has no parent <avoid-self-in-interface>`
* :ref:`Cannot access parent\:\: when current class scope has no parent <class-without-parent>`
* :ref:`Cannot access parent\:\: when current class scope has no parent <undefined-parent>`
* :ref:`Cannot access private const  <unreachable-class-constant>`
* :ref:`Cannot access static\:\: when no class scope is active <self,-parent,-static-outside-class>`
* :ref:`Cannot bind an instance to a static closure <cannot-use-static-for-closure>`
* :ref:`Cannot inherit previously-inherited or override constant A from interface i <overwritten-class-const>`
* :ref:`Cannot override final method Foo\:\:Bar() <final-class-usage>`
* :ref:`Cannot override final method Foo\:\:FooBar() <final-methods-usage>`
* :ref:`Cannot pass parameter 1 by reference <no-literal-for-reference>`
* :ref:`Cannot pass parameter 1 by reference <only-container-for-reference>`
* :ref:`Cannot pass parameter 1 by reference <only-variable-for-reference>`
* :ref:`Cannot perform bitwise not on array <unsupported-types-with-operators>`
* :ref:`Cannot perform bitwise not on bool <unsupported-types-with-operators>`
* :ref:`Cannot perform bitwise not on object <unsupported-types-with-operators>`
* :ref:`Cannot perform bitwise not on resource <unsupported-types-with-operators>`
* :ref:`Cannot unpack array with string keys <no-spread-for-hash>`
* :ref:`Cannot use "parent" when no class scope is active <self,-parent,-static-outside-class>`
* :ref:`Cannot use "self" when no class scope is active <self,-parent,-static-outside-class>`
* :ref:`Cannot use "static" when no class scope is active <self,-parent,-static-outside-class>`
* :ref:`Cannot use a scalar value as an array <string-initialization>`
* :ref:`Cannot use isset() on the result of an expression (you can use "null !== expression" instead) <isset()-with-constant>`
* :ref:`Cannot use lexical variable $b as a parameter name <multiple-definition-of-the-same-argument>`
* :ref:`Cannot use object of type Foo as array <$this-is-not-an-array>`
* :ref:`Cannot use parent when current class scope has no parent <class-without-parent>`
* :ref:`Case-insensitive constants are deprecated. The correct casing for this constant is "A" <constant-case-preference>`
* :ref:`Class 'PARENT' not found <use-lower-case-for-parent,-static-and-self>`
* :ref:`Class 'x' not found <undefined-class>`
* :ref:`Class BA contains 1 abstract method and must therefore be declared abstract or implement the remaining methods (A\:\:aFoo) <abstract-or-implements>`
* :ref:`Class b cannot implement previously implemented interface i <cant-implement-traversable>`
* :ref:`Class b cannot implement previously implemented interface i <repeated-interface>`
* :ref:`Class c contains 1 abstract method and must therefore be declared abstract or implement the remaining methods (a\:\:foo) <missing-abstract-method>`
* :ref:`Class fooThrowable cannot implement interface Throwable, extend Exception or Error instead <can't-throw-throwable>`
* :ref:`Class x contains 2 abstract methods and must therefore be declared abstract or implement the remaining methods (x\:\:m1, x\:\:m2) <interfaces-is-not-implemented>`
* :ref:`Class x must implement interface Traversable as part of either Iterator or IteratorAggregate <cant-implement-traversable>`
* :ref:`Could not check compatibility between xx\:\:bar(B $a) and foo\:\:bar(A $a), because class A is not available <incompatible-signature-methods-with-covariance>`
* :ref:`Creating default object from empty value <undefined-variable>`
* :ref:`Declaration of FooParent\:\:Bar() must be compatible with FooChildren\:\:Bar() <method-signature-must-be-compatible>`
* :ref:`Declaration of a\:\:foo($a) should be compatible with ab1\:\:foo($a) <immutable-signature>`
* :ref:`Declaration of ab\:\:foo($a) must be compatible with a\:\:foo($a = 1)  <incompatible-signature-methods-with-covariance>`
* :ref:`Declaration of ab\:\:foo($a) must be compatible with a\:\:foo($a = 1)  <incompatible-signature-methods>`
* :ref:`Declaration of ab\:\:foo($a) should be compatible with a\:\:foo($a = 1)  <incompatible-signature-methods-with-covariance>`
* :ref:`Declaration of ab\:\:foo($a) should be compatible with a\:\:foo($a = 1)  <incompatible-signature-methods>`
* :ref:`Default value for parameters with a int type can only be int or NULL  <mismatch-type-and-default>`
* :ref:`Defining a custom assert() function is deprecated, as the function has special semantics <assert-function-is-reserved>`
* :ref:`Delimiter must not be alphanumeric or backslash  <no-empty-regex>`
* :ref:`Deprecated: Required parameter $y follows optional parameter $x <wrong-optional-parameter>`
* :ref:`Generators cannot return values using "return"  <generator-cannot-return>`
* :ref:`Generators cannot return values using "return" <no-return-for-generator>`
* :ref:`Headers already sent <forgotten-whitespace>`
* :ref:`Indirect modification of overloaded property c\:\:$b has no effect <no-magic-method-with-array>`
* :ref:`Invalid numeric literal <malformed-octal>`
* :ref:`Method name must be a string <useless-typehint>`
* :ref:`Methods with the same name as their class will not be constructors in a future version of PHP; %s has a deprecated constructor <old-style-constructor>`
* :ref:`Non-static method A\:\:B() should not be called statically <non-static-methods-called-in-a-static>`
* :ref:`Octal escape sequence overflow \500 is greater than \377 <invalid-octal-in-string>`
* :ref:`Old style constructors are DEPRECATED in PHP 7.0, and will be removed in a future version. You should always use __construct() in new code. <old-style-constructor>`
* :ref:`Only variable references should be returned by reference <no-literal-for-reference>`
* :ref:`Only variable references should be returned by reference <no-reference-for-ternary>`
* :ref:`Only variables can be passed by reference <only-container-for-reference>`
* :ref:`Only variables can be passed by reference <only-variable-for-reference>`
* :ref:`Only variables should be passed by reference <typehinted-references>`
* :ref:`Private methods cannot be final as they are never overridden by other classes <final-private-methods>`
* :ref:`Property x\:\:$x cannot have type callable <could-be-callable>`
* :ref:`Redefinition of parameter $b <multiple-definition-of-the-same-argument>`
* :ref:`Return value of foo() must be an instance of Bar, none returned  <typehint-must-be-returned>`
* :ref:`Return value of foo() must be of the type int, string returned <missing-some-returntype>`
* :ref:`The (real) cast is deprecated, use (float) instead <avoid-real>`
* :ref:`The behavior of unparenthesized expressions containing both '.' and '+'/'-' will change in PHP 8: '+'/'-' will take a higher precedence <concat-and-addition>`
* :ref:`The behavior of unparenthesized expressions containing both '.' and '>>'/'<<' will change in PHP 8: '<<'/'>>' will take a higher precedence <concat-and-addition>`
* :ref:`The each() function is deprecated. This message will be suppressed on further calls <php-7.2-removed-functions>`
* :ref:`The parent constructor was not called: the object is in an invalid state <must-call-parent-constructor>`
* :ref:`Too few arguments to function Foo\:\:Bar(), 1 passed <wrong-number-of-arguments-in-methods>`
* :ref:`Too few arguments to function foo(), 1 passed and exactly 2 expected <wrong-number-of-arguments>`
* :ref:`Too few arguments to function foo(), 1 passed and exactly 2 expected <wrong-optional-parameter>`
* :ref:`Trait 'T' not found <undefined-trait>`
* :ref:`Trait 'a' not found  <trait-not-found>`
* :ref:`Trait method M has not been applied, because there are collisions with other trait methods on C <method-collision-traits>`
* :ref:`Trait method f has not been applied, because there are collisions with other trait methods on x <useless-alias>`
* :ref:`Trying to access array offset on value of type boolean <null-or-boolean-arrays>`
* :ref:`Trying to access array offset on value of type float <null-or-boolean-arrays>`
* :ref:`Trying to access array offset on value of type int <null-or-boolean-arrays>`
* :ref:`Trying to access array offset on value of type null <null-or-boolean-arrays>`
* :ref:`Trying to access array offset on value of type null <scalar-are-not-arrays>`
* :ref:`Uncaught ArgumentCountError: Too few arguments to function, 0 passed <wrong-number-of-arguments>`
* :ref:`Undefined class constant <avoid-self-in-interface>`
* :ref:`Undefined constant 'A' <undefined-constants>`
* :ref:`Undefined constant 'y' <undefined-constant-name>`
* :ref:`Undefined function <undefined-functions>`
* :ref:`Undefined property: x\:\:$e <undefined-properties>`
* :ref:`Undefined variable:  <undefined-variable>`
* :ref:`Unknown named parameter $d in <unknown-parameter-name>`
* :ref:`Unparenthesized a ? b : c ? d : e is deprecated. Use either (a ? b : c) ? d : e or a ? b : (c ? d : e) <nested-ternary-without-parenthesis>`
* :ref:`Unsupported operand types <unsupported-types-with-operators>`
* :ref:`Use of undefined constant y - assumed 'y' (this will throw an Error in a future version of PHP) <undefined-constant-name>`
* :ref:`Using $this when not in object context  <$this-is-not-for-static-methods>`
* :ref:`Using $this when not in object context <$this-belongs-to-classes-or-traits>`
* :ref:`Using $this when not in object context <static-methods-can't-contain-$this>`
* :ref:`__autoload() is deprecated, use spl_autoload_register() instead <old-style-\_\_autoload()>`
* :ref:`__clone method called on non-object <clone-with-non-object>`
* :ref:`array_merge() expects at least 1 parameter, 0 given <array\_merge()-and-variadic>`
* :ref:`b cannot implement a - it is not an interface <implement-is-for-interface>`
* :ref:`define(): Declaration of case-insensitive constants is deprecated <case-insensitive-constants>`
* :ref:`iconv(): Wrong charset, conversion from UTF-8' to ASCII//TRANSLIT' is not allowed <iconv-with-translit>`
* :ref:`include(a.php): failed to open stream: No such file or directory <inclusion-wrong-case>`
* :ref:`pack(): Type t: unknown format code <invalid-pack-format>`
* :ref:`printf(): Too few arguments <printf-number-of-arguments>`
* :ref:`syntax error, unexpected ',' <reserved-match-keyword>`
* :ref:`syntax error, unexpected '-', expecting '=' <invalid-constant-name>`
* :ref:`syntax error, unexpected 'match' <reserved-match-keyword>`
* :ref:`unpack(): Type t: unknown format code <invalid-pack-format>`




